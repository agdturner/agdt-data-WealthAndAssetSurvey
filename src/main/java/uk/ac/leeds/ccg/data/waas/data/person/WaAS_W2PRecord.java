/**
 * Source code generated by uk.ac.leeds.ccg.data.waascg.process.WaASCG_Main
 */

package uk.ac.leeds.ccg.data.waas.data.person;
import uk.ac.leeds.ccg.data.waas.data.id.WaAS_RecordID;

public class WaAS_W2PRecord extends WaAS_W1W2PRecord {

    protected double ACCFRAC;

    protected double ACCFRAC2;

    protected double ASAF2T;

    protected double ASAFT;

    protected double BAMT19;

    protected byte BAMTDK19;

    protected boolean BEN1Q4;

    protected byte BENUS;

    protected byte BFUND11;

    protected boolean BFUND12;

    protected boolean BFUND13;

    protected boolean BFUND14;

    protected boolean BFUND15;

    protected boolean BFUND16;

    protected boolean BFUND19;

    protected boolean BFUND20;

    protected boolean BFUND21;

    protected boolean BFUND22;

    protected boolean BFUND23;

    protected boolean BFUND24;

    protected boolean BFUND5;

    protected boolean BFUND6;

    protected boolean BFUND7;

    protected boolean BFUND8;

    protected byte BPD19;

    protected byte BPRFLOSS2;

    protected byte BPRFLOSS3;

    protected double BUAMT;

    protected byte BUPD;

    protected byte BUYLDB1;

    protected byte BUYLDB2;

    protected byte BUYLDB3;

    protected int BUYLDEBT1;

    protected int BUYLDEBT1_I;

    protected boolean BUYLDEBT1_IFLAG;

    protected int BUYLDEBT2;

    protected int BUYLDEBT2_I;

    protected boolean BUYLDEBT2_IFLAG;

    protected int BUYLDEBT3;

    protected int BUYLDEBT3_I;

    protected boolean BUYLDEBT3_IFLAG;

    protected int BUYLGDST;

    protected int BUYLGDVAL1;

    protected int BUYLGDVAL2;

    protected int BUYLGDVAL3;

    protected byte BUYLGDVB1;

    protected byte BUYLGDVB1_I;

    protected boolean BUYLGDVB1_IFLAG;

    protected byte BUYLGDVB2;

    protected byte BUYLGDVB2_I;

    protected boolean BUYLGDVB2_IFLAG;

    protected byte BUYLGDVB3;

    protected byte BUYLGDVB3_I;

    protected boolean BUYLGDVB3_IFLAG;

    protected int BUYLVAL1;

    protected int BUYLVAL1_I;

    protected boolean BUYLVAL1_IFLAG;

    protected int BUYLVAL2;

    protected int BUYLVAL2_I;

    protected boolean BUYLVAL2_IFLAG;

    protected int BUYLVAL3;

    protected int BUYLVAL3_I;

    protected boolean BUYLVAL3_IFLAG;

    protected byte BUYLVB1;

    protected byte BUYLVB2;

    protected byte BUYLVB3;

    protected byte BVALB3;

    protected boolean BVALWH11;

    protected boolean BVALWH12;

    protected boolean BVALWH15;

    protected boolean BVALWH16;

    protected boolean BVALWH17;

    protected boolean BVALWH18;

    protected boolean BVALWH4;

    protected boolean BVALWH5;

    protected boolean BVALWH6;

    protected byte CAREDUR;

    protected byte CAREHR;

    protected byte CAREPS;

    protected short CASEW2;

    protected byte CHECK1;

    protected byte CHECK2;

    protected byte CHECKNDL;

    protected byte CHOIC;

    protected byte CHOIC10;

    protected byte CHOIC2;

    protected byte CHOIC3;

    protected byte CHOIC4;

    protected byte CHOIC5;

    protected byte CHOIC6;

    protected byte CHOIC7;

    protected byte CHOIC8;

    protected byte CHOIC9;

    protected byte CHOICP;

    protected byte CHOICP10;

    protected byte CHOICP11;

    protected boolean CHOICP18;

    protected boolean CHOICP19;

    protected byte CHOICP2;

    protected byte CHOICP3;

    protected byte CHOICP4;

    protected byte CHOICP5;

    protected byte CHOICP6;

    protected byte CHOICP7;

    protected byte CHOICP8;

    protected byte CHOICP9;

    protected double COMBAM;

    protected byte COMBPD;

    protected double COMBWK;

    protected byte COMMI;

    protected boolean CONTSUB;

    protected byte CTBEN;

    protected byte CURSTAT;

    protected byte CUTBACK;

    protected byte DADVACT1;

    protected byte DADVACT2;

    protected byte DADVACT3;

    protected byte DADVMTH;

    protected byte DBURDW1;

    protected boolean DBURDW7;

    protected byte DBURD___W2;

    protected byte DC12BEH;

    protected byte DC12BEH2;

    protected byte DC12BEH3;

    protected byte DC12BEH4;

    protected byte DC12BEH5;

    protected short DC12OWE;

    protected short DC12OWE2;

    protected short DC12OWE3;

    protected short DC12OWE4;

    protected short DC12OWE5;

    protected byte DCNUM2;

    protected byte DCNUM2_I;

    protected byte DCNUM2_IFLAG;

    protected short DCOINV4;

    protected boolean DCOINVB4;

    protected boolean DCOSHV10;

    protected boolean DCOSHV4;

    protected boolean DCOSHV5;

    protected boolean DCOSHV6;

    protected boolean DCOSHV7;

    protected boolean DCOSHV8;

    protected boolean DCOSHV9;

    protected boolean DCOSHVB3;

    protected double DCVAL1;

    protected int DCVAL2;

    protected boolean DHBANY08;

    protected boolean DHBANY08_I;

    protected boolean DHBANY08_IFLAG;

    protected boolean DHBANY09;

    protected boolean DHBANY09_I;

    protected boolean DHBANY09_IFLAG;

    protected boolean DHBANY10;

    protected boolean DHBANY10_I;

    protected boolean DHBANY10_IFLAG;

    protected boolean DHBANY11;

    protected boolean DHBANY11_I;

    protected boolean DHBANY11_IFLAG;

    protected boolean DLIND;

    protected byte DLNNM;

    protected byte DLNNM_I;

    protected byte DLNNM_IFLAG;

    protected byte DLOLD1;

    protected byte DLOLD2;

    protected byte DLOLD3;

    protected byte DLOLD4;

    protected byte DLOLD5;

    protected byte DLONM;

    protected boolean DLWHY13;

    protected boolean DLWHY14;

    protected boolean DLWHY19;

    protected boolean DLWHY20;

    protected boolean DLWHY21;

    protected boolean DLWHY24;

    protected boolean DLWHY25;

    protected boolean DLWHY26;

    protected boolean DLWHY27;

    protected boolean DLWHY28;

    protected boolean DLWHY30;

    protected boolean DLWHY31;

    protected boolean DLWHY32;

    protected boolean DLWHY33;

    protected boolean DLWHY34;

    protected boolean DLWHY35;

    protected boolean DLWHY6;

    protected boolean DLWHY7;

    protected byte DS12BEH;

    protected byte DS12BEH2;

    protected byte DS12BEH3;

    protected byte DS12BEH4;

    protected byte DS12BEH5;

    protected byte DS12OWE;

    protected short DS12OWE2;

    protected byte DS12OWE3;

    protected boolean DS12OWE4;

    protected boolean DS12OWE5;

    protected byte DSNUM2;

    protected byte DSNUM2_I;

    protected byte DSNUM2_IFLAG;

    protected int DTLOWE;

    protected short DTLOWE2;

    protected short DTLOWE2_I;

    protected byte DTLOWE2_IFLAG;

    protected short DTLOWE3;

    protected short DTLOWE3_I;

    protected byte DTLOWE3_IFLAG;

    protected byte DTLOWEB;

    protected byte DTLOWEB2;

    protected boolean DTLOWEB3;

    protected int DTLOWE_I;

    protected byte DTLOWE_IFLAG;

    protected byte DTLTYPE;

    protected byte DTLTYPE2;

    protected byte DTLTYPE2_I;

    protected byte DTLTYPE2_IFLAG;

    protected byte DTLTYPE3;

    protected byte DTLTYPE3_I;

    protected byte DTLTYPE3_IFLAG;

    protected byte DTLTYPE_I;

    protected byte DTLTYPE_IFLAG;

    protected short DTTOWE;

    protected boolean DTTOWE10;

    protected boolean DTTOWE11;

    protected boolean DTTOWE12;

    protected boolean DTTOWE13;

    protected boolean DTTOWE14;

    protected boolean DTTOWE15;

    protected short DTTOWE2;

    protected boolean DTTOWE3;

    protected short DTTOWE4;

    protected boolean DTTOWE5;

    protected boolean DTTOWE6;

    protected boolean DTTOWE7;

    protected boolean DTTOWE8;

    protected boolean DTTOWE9;

    protected byte DTTOWEB;

    protected boolean DTTOWEB10;

    protected boolean DTTOWEB11;

    protected boolean DTTOWEB12;

    protected boolean DTTOWEB13;

    protected boolean DTTOWEB14;

    protected boolean DTTOWEB15;

    protected boolean DTTOWEB2;

    protected boolean DTTOWEB3;

    protected boolean DTTOWEB4;

    protected boolean DTTOWEB5;

    protected boolean DTTOWEB6;

    protected boolean DTTOWEB7;

    protected boolean DTTOWEB8;

    protected boolean DTTOWEB9;

    protected byte DVAGE4;

    protected byte DVAGE5;

    protected byte DVAGE6;

    protected byte DVAGE9;

    protected byte DVAGEW2BAND;

    protected short DVCOINV4;

    protected int DVDBINC4;

    protected short DVDBINC5;

    protected short DVDBINC6;

    protected double DVDBLUMP4;

    protected double DVDBLUMP5;

    protected int DVDBLUMP6;

    protected double DVDBOPEN2T;

    protected double DVDBOPENT;

    protected int DVNWFLN;

    protected int DVNWILN;

    protected double DVPENINC;

    protected double DVPENINC2;

    protected byte DVPUBLPRIV;

    protected byte DVSAME;

    protected double DVSPS;

    protected double DVWID;

    protected byte ECHLCAR;

    protected byte ECHLSUP;

    protected boolean EDAGE;

    protected byte EFOOD;

    protected byte EFUEL;

    protected byte EINTRO;

    protected byte ELARGE1;

    protected byte ELARGE2;

    protected byte ELARGE3;

    protected byte ELARGE4;

    protected byte ELARGE5;

    protected byte ELARGE6;

    protected byte ELARGE7;

    protected boolean ELARGE8;

    protected byte ELGEAMB;

    protected byte EMEALS;

    protected boolean EMPNO;

    protected byte ES2000;

    protected byte ESATYPE;

    protected byte ETRANS;

    protected byte EYE1;

    protected byte EYE2;

    protected byte EYE3;

    protected byte EYE4;

    protected byte EYE5;

    protected byte EYE6;

    protected byte EYE7;

    protected byte EYE8;

    protected byte FBFAED;

    protected byte FBMOED;

    protected byte FBSIBS;

    protected byte FBSITU;

    protected byte FBTEN;

    protected byte FCISAWD;

    protected byte FCISCE;

    protected byte FCIWDAB;

    protected byte FCIWNUM;

    protected byte FNDCASH01;

    protected byte FNDCASH02;

    protected byte FNDCASH03;

    protected byte FNDCASH04;

    protected byte FNDCASH05;

    protected byte FNDCASH06;

    protected byte FNDCASH07;

    protected byte FNDCASH08;

    protected byte FNDCASH09;

    protected byte FNDCASH10;

    protected byte FNDCASH11;

    protected byte FNDCASH12;

    protected byte FNDCASH13;

    protected byte FNDCASH14;

    protected boolean FNDCASH15;

    protected boolean FNDCASH16;

    protected byte FSAVAB;

    protected byte FSAVED;

    protected int FSHADA;

    protected byte FSHADAB;

    protected byte FSHADD;

    protected boolean FSTYPIN4;

    protected boolean FSTYPIN5;

    protected boolean FSTYPSH5;

    protected byte FTHECST;

    protected byte FTSTUD;

    protected byte FWITHD;

    protected byte GROSSPER;

    protected byte GRSAMK;

    protected byte GRSEESM;

    protected byte GRSEESW;

    protected int GRSSEMJB;

    protected byte GSTDNW;

    protected byte HOUSBEN;

    protected boolean IGDS13;

    protected boolean IGDS14;

    protected boolean IGDS17;

    protected boolean IGDS18;

    protected boolean IGDS19;

    protected boolean IGDS20;

    protected boolean IGDS21;

    protected boolean IGDS7;

    protected short ILNPBAM;

    protected byte ILNPBK;

    protected byte ILNUSE01;

    protected byte ILNUSE02;

    protected byte ILNUSE03;

    protected byte ILNUSE04;

    protected byte ILNUSE05;

    protected boolean ILNUSE06;

    protected boolean ILNUSE07;

    protected boolean ILNUSE08;

    protected boolean ILNUSE09;

    protected boolean ILNUSE10;

    protected int ILNVAL;

    protected byte ILNVALB;

    protected byte ILOAN;

    protected byte INCDROP;

    protected byte INDFREQ;

    protected boolean ISADULT;

    protected boolean IWAT6;

    protected double LONGIT_CALWGT;

    protected byte LVTDAY;

    protected byte MARSTA;

    protected byte MRECJB;

    protected byte MTHECST;

    protected byte NEWFCMX;

    protected byte NEWGIFT;

    protected boolean NOFA;

    protected int NWFLNVAL1;

    protected int NWFLNVAL2;

    protected short NWFLNVAL3;

    protected byte NWHP;

    protected byte NWHPNO;

    protected int NWILNVAL1;

    protected short NWILNVAL2;

    protected short NWILNVAL3;

    protected byte NWLN;

    protected byte NWLNNO;

    protected byte NWLNNO_I;

    protected byte NWLNNO_IFLAG;

    protected byte NWLN_I;

    protected byte NWLN_IFLAG;

    protected byte OEXPINC01;

    protected byte OEXPINC02;

    protected byte OEXPINC03;

    protected byte OEXPINC04;

    protected byte OEXPINC05;

    protected byte OEXPINC06;

    protected byte OEXPINC07;

    protected byte OEXPINC08;

    protected byte OEXPINC09;

    protected byte OEXPINC10;

    protected byte OEXPINC11;

    protected byte OEXPINC12;

    protected byte OEXPINC13;

    protected boolean OEXPINC14;

    protected boolean OEXPINC15;

    protected byte OIMPRS1;

    protected byte OIMPRS2;

    protected byte OIMPRS3;

    protected byte OIMPRS4;

    protected byte OIMPRS5;

    protected byte OIMPRS6;

    protected boolean OIMPRS7;

    protected boolean OIMPRS8;

    protected boolean OIMPRS9;

    protected byte OINTROL;

    protected boolean OINTROM;

    protected byte ONOSAVE1;

    protected byte ONOSAVE2;

    protected byte ONOSAVE3;

    protected byte ONOSAVE4;

    protected byte ONOSAVE5;

    protected boolean ONOSAVE6;

    protected boolean ONOSAVE7;

    protected boolean ONOSAVE8;

    protected boolean ONOSAVE9;

    protected byte OPENSAV;

    protected byte ORGNSED;

    protected byte OSAFERE2;

    protected byte OSAFERET;

    protected byte OSAV2Y;

    protected byte OSAVA;

    protected byte OSAVB;

    protected byte OSAVC;

    protected byte OSAVEXT;

    protected byte OSITCH;

    protected byte OTHASCH;

    protected byte OTHASVB;

    protected int OTHASVL;

    protected boolean OTRUST15;

    protected byte OWAIT;

    protected byte OWHYSAV01;

    protected byte OWHYSAV02;

    protected byte OWHYSAV03;

    protected byte OWHYSAV04;

    protected byte OWHYSAV05;

    protected byte OWHYSAV06;

    protected byte OWHYSAV07;

    protected byte OWHYSAV08;

    protected byte OWHYSAV09;

    protected byte OWHYSAV10;

    protected byte OWRSRS01;

    protected byte OWRSRS02;

    protected byte OWRSRS03;

    protected byte OWRSRS04;

    protected byte OWRSRS05;

    protected byte OWRSRS06;

    protected byte OWRSRS07;

    protected boolean OWRSRS08;

    protected boolean OWRSRS09;

    protected boolean OWRSRS10;

    protected byte PADDFUT;

    protected boolean PADDFUT2;

    protected byte PAGESTP;

    protected byte PANYO;

    protected byte PANYO_I;

    protected boolean PANYO_IFLAG;

    protected byte PASTMN;

    protected boolean PASTMN2;

    protected short PASTYR;

    protected short PASTYR2;

    protected short PAVCAM;

    protected short PAVCAM2;

    protected byte PAVCFG;

    protected boolean PAVCFG2;

    protected double PAVCFR;

    protected byte PAVCFR2;

    protected byte PAVCH;

    protected byte PAVCH2;

    protected byte PAVCIN;

    protected byte PAVCIN2;

    protected byte PAVCPR;

    protected boolean PAVCPR2;

    protected int PAVCUV;

    protected int PAVCUV2;

    protected int PAVCUV2_I;

    protected boolean PAVCUV2_IFLAG;

    protected int PAVCUV_I;

    protected boolean PAVCUV_IFLAG;

    protected byte PAVCVB;

    protected byte PAVCVB2;

    protected byte PAVDOC;

    protected byte PAVDOC2;

    protected boolean PAYINC7;

    protected byte PBDOCS;

    protected byte PBDOCS2;

    protected byte PBFRAC;

    protected byte PBFRAC2;

    protected byte PBFRAC2_I;

    protected boolean PBFRAC2_IFLAG;

    protected byte PBFRAC_I;

    protected boolean PBFRAC_IFLAG;

    protected int PBINCA;

    protected int PBINCA2;

    protected double PBINCF;

    protected double PBINCF2;

    protected byte PBINCH;

    protected byte PBINCH2;

    protected byte PBLMVB;

    protected byte PBLMVB2;

    protected int PBLUMV;

    protected int PBLUMV2;

    protected int PBLUMV2_I;

    protected boolean PBLUMV2_IFLAG;

    protected int PBLUMV_I;

    protected boolean PBLUMV_IFLAG;

    protected byte PBQUAL;

    protected byte PBQUAL2;

    protected byte PBQUAL2_I;

    protected boolean PBQUAL2_IFLAG;

    protected byte PBQUAL_I;

    protected boolean PBQUAL_IFLAG;

    protected byte PBSTMN;

    protected byte PBSTMN2;

    protected short PBSTYR;

    protected short PBSTYR2;

    protected byte PCCFST1;

    protected byte PCCFST1_I;

    protected boolean PCCFST1_IFLAG;

    protected byte PCCFST2;

    protected byte PCCFST2_I;

    protected boolean PCCFST2_IFLAG;

    protected boolean PCCFST3;

    protected boolean PCCFST3_I;

    protected boolean PCCFST3_IFLAG;

    protected byte PCDOCS;

    protected byte PCDOCS2;

    protected byte PCNEW;

    protected byte PCNUM;

    protected byte PCONT;

    protected byte PCONT_I;

    protected boolean PCONT_IFLAG;

    protected byte PCSTMN;

    protected byte PCSTMN2;

    protected short PCSTYR;

    protected short PCSTYR2;

    protected byte PDBCAL;

    protected byte PDBCAL2;

    protected int PDCVAL;

    protected int PDCVAL2;

    protected int PDCVAL2_I;

    protected boolean PDCVAL2_IFLAG;

    protected double PDCVAL_I;

    protected boolean PDCVAL_IFLAG;

    protected byte PDCVB;

    protected byte PDCVB2;

    protected byte PERMJB;

    protected byte PERNOWK;

    protected byte PERSONW2;

    protected byte PESAME;

    protected byte PESAME_I;

    protected byte PESAME_IFLAG;

    protected byte PEWYNO05;

    protected boolean PFACCU3;

    protected boolean PFACCU5;

    protected boolean PFACCU6;

    protected byte PFANEH;

    protected byte PFANEH2;

    protected boolean PFANEH3;

    protected boolean PFANEXM;

    protected short PFANEXY;

    protected byte PFANGA;

    protected byte PFANGA2;

    protected byte PFANGA3;

    protected byte PFANIF;

    protected byte PFANIF2;

    protected boolean PFANIF3;

    protected byte PFANJT;

    protected byte PFANJT2;

    protected byte PFANJT3;

    protected byte PFANLM;

    protected boolean PFANLM2;

    protected byte PFANN1;

    protected byte PFANN11;

    protected boolean PFANN12;

    protected boolean PFANN2;

    protected boolean PFANN3;

    protected byte PFANN6;

    protected boolean PFANN7;

    protected byte PFANVB;

    protected short PFANVI;

    protected short PFANVI2;

    protected short PFANVI3;

    protected short PFBEG;

    protected short PFBEG2;

    protected short PFBEG3;

    protected short PFBEG4;

    protected boolean PFBEG5;

    protected boolean PFBEG6;

    protected byte PFCASH;

    protected byte PFCASH2;

    protected byte PFCASH2_I;

    protected boolean PFCASH2_IFLAG;

    protected byte PFCASH3;

    protected byte PFCASH3_I;

    protected boolean PFCASH3_IFLAG;

    protected byte PFCASH4;

    protected byte PFCASH4_I;

    protected boolean PFCASH4_IFLAG;

    protected byte PFCASH_I;

    protected boolean PFCASH_IFLAG;

    protected byte PFCRET1;

    protected byte PFCRET2;

    protected byte PFCRET3;

    protected byte PFCRET4;

    protected byte PFCRET5;

    protected byte PFCRET6;

    protected int PFCURV;

    protected int PFCURV2;

    protected double PFCURV2_I;

    protected byte PFCURV2_IFLAG;

    protected int PFCURV3;

    protected double PFCURV3_I;

    protected byte PFCURV3_IFLAG;

    protected int PFCURV4;

    protected int PFCURV4_I;

    protected byte PFCURV4_IFLAG;

    protected int PFCURV5;

    protected double PFCURV5_I;

    protected byte PFCURV5_IFLAG;

    protected int PFCURV6;

    protected double PFCURV6_I;

    protected boolean PFCURV6_IFLAG;

    protected double PFCURV_I;

    protected byte PFCURV_IFLAG;

    protected byte PFCUVB;

    protected byte PFCUVB2;

    protected byte PFCUVB3;

    protected byte PFCUVB4;

    protected byte PFCUVB5;

    protected boolean PFCUVB6;

    protected int PFDDV;

    protected int PFDDV2;

    protected int PFDDV2_I;

    protected byte PFDDV2_IFLAG;

    protected int PFDDV3;

    protected int PFDDV3_I;

    protected byte PFDDV3_IFLAG;

    protected int PFDDV4;

    protected int PFDDV4_I;

    protected byte PFDDV4_IFLAG;

    protected boolean PFDDV5;

    protected boolean PFDDV6;

    protected byte PFDDVB;

    protected byte PFDDVB2;

    protected byte PFDDVB3;

    protected boolean PFDDVB4;

    protected boolean PFDDVB5;

    protected boolean PFDDVB6;

    protected int PFDDV_I;

    protected byte PFDDV_IFLAG;

    protected byte PFDOCS;

    protected byte PFDOCS2;

    protected byte PFDOCS3;

    protected byte PFDOCS4;

    protected byte PFDOCS5;

    protected byte PFDOCS6;

    protected byte PFDRAW;

    protected byte PFDRAW2_I;

    protected byte PFDRAW2_IFLAG;

    protected byte PFDRAW3;

    protected byte PFDRAW3_I;

    protected byte PFDRAW3_IFLAG;

    protected boolean PFDRAW4;

    protected boolean PFDRAW4_I;

    protected byte PFDRAW4_IFLAG;

    protected boolean PFDRAW5;

    protected boolean PFDRAW6;

    protected byte PFDRAW_I;

    protected byte PFDRAW_IFLAG;

    protected byte PFDRA___W2;

    protected short PFDRINC;

    protected short PFDRINC2;

    protected boolean PFDRINC3;

    protected boolean PFDRINC4;

    protected boolean PFDRINC5;

    protected boolean PFDRINC6;

    protected boolean PFDRINCB;

    protected boolean PFDRINCB2;

    protected boolean PFDRINCB3;

    protected boolean PFDRINCB4;

    protected boolean PFDRINCB5;

    protected boolean PFDRINCB6;

    protected boolean PFDRVB;

    protected boolean PFDRVB2;

    protected boolean PFDRVB3;

    protected boolean PFDRVB4;

    protected boolean PFDRVB5;

    protected boolean PFDRVB6;

    protected int PFDRVI;

    protected int PFDRVI2;

    protected boolean PFDRVI3;

    protected boolean PFDRVI4;

    protected boolean PFDRVI5;

    protected boolean PFDRVI6;

    protected byte PFEN;

    protected short PFEND;

    protected short PFEND2;

    protected short PFEND3;

    protected short PFEND4;

    protected boolean PFEND5;

    protected boolean PFEND6;

    protected byte PFENNUM;

    protected boolean PFFAAG;

    protected byte PFFAAG2;

    protected boolean PFFAAG3;

    protected boolean PFFAAG4;

    protected boolean PFFAAG5;

    protected boolean PFFAAG6;

    protected byte PFFAN11;

    protected byte PFFAN16;

    protected byte PFFAN2;

    protected byte PFFAN6;

    protected byte PFFAWH1;

    protected byte PFFAWH13;

    protected byte PFFAWH7;

    protected int PFINCA;

    protected int PFINCA2;

    protected double PFINCA2_I;

    protected boolean PFINCA2_IFLAG;

    protected double PFINCA3;

    protected double PFINCA3_I;

    protected boolean PFINCA3_IFLAG;

    protected double PFINCA4;

    protected short PFINCA4_I;

    protected boolean PFINCA4_IFLAG;

    protected short PFINCA5;

    protected short PFINCA5_I;

    protected boolean PFINCA5_IFLAG;

    protected short PFINCA6;

    protected short PFINCA6_I;

    protected boolean PFINCA6_IFLAG;

    protected double PFINCA_I;

    protected boolean PFINCA_IFLAG;

    protected byte PFINCP;

    protected byte PFINCP2;

    protected byte PFINCP2_I;

    protected boolean PFINCP2_IFLAG;

    protected byte PFINCP3;

    protected byte PFINCP3_I;

    protected boolean PFINCP3_IFLAG;

    protected byte PFINCP4;

    protected byte PFINCP4_I;

    protected boolean PFINCP4_IFLAG;

    protected byte PFINCP5;

    protected byte PFINCP5_I;

    protected boolean PFINCP5_IFLAG;

    protected byte PFINCP6;

    protected byte PFINCP6_I;

    protected boolean PFINCP6_IFLAG;

    protected byte PFINCP_I;

    protected boolean PFINCP_IFLAG;

    protected byte PFLMUS;

    protected byte PFLMUS2;

    protected byte PFLMUS3;

    protected byte PFLMUS4;

    protected boolean PFLMUS5;

    protected boolean PFLMUS6;

    protected int PFLMV;

    protected int PFLMV2;

    protected int PFLMV3;

    protected int PFLMV4;

    protected boolean PFLMV5;

    protected boolean PFLMV6;

    protected byte PFLMVB;

    protected byte PFLMVB2;

    protected byte PFLMVB3;

    protected boolean PFLMVB4;

    protected boolean PFLMVB5;

    protected boolean PFLMVB6;

    protected byte PFLUM;

    protected byte PFLUM2;

    protected byte PFLUM2_I;

    protected byte PFLUM2_IFLAG;

    protected byte PFLUM3;

    protected byte PFLUM3_I;

    protected byte PFLUM3_IFLAG;

    protected byte PFLUM4;

    protected byte PFLUM4_I;

    protected byte PFLUM4_IFLAG;

    protected byte PFLUM5;

    protected boolean PFLUM5_I;

    protected byte PFLUM5_IFLAG;

    protected byte PFLUM6;

    protected boolean PFLUM6_I;

    protected byte PFLUM6_IFLAG;

    protected byte PFLUMALL;

    protected byte PFLUMALL2;

    protected byte PFLUMALL2_I;

    protected byte PFLUMALL2_IFLAG;

    protected byte PFLUMALL3;

    protected byte PFLUMALL3_I;

    protected byte PFLUMALL3_IFLAG;

    protected byte PFLUMALL4;

    protected byte PFLUMALL4_I;

    protected byte PFLUMALL4_IFLAG;

    protected byte PFLUMALL_I;

    protected byte PFLUMALL_IFLAG;

    protected int PFLUMV;

    protected int PFLUMV2;

    protected double PFLUMV2_I;

    protected boolean PFLUMV2_IFLAG;

    protected int PFLUMV3;

    protected int PFLUMV3_I;

    protected boolean PFLUMV3_IFLAG;

    protected int PFLUMV4;

    protected int PFLUMV4_I;

    protected boolean PFLUMV4_IFLAG;

    protected int PFLUMV5;

    protected int PFLUMV5_I;

    protected byte PFLUMV5_IFLAG;

    protected int PFLUMV6;

    protected int PFLUMV6_I;

    protected boolean PFLUMV6_IFLAG;

    protected double PFLUMV_I;

    protected boolean PFLUMV_IFLAG;

    protected byte PFLUM_I;

    protected byte PFLUM_IFLAG;

    protected byte PFLUVB;

    protected byte PFLUVB2;

    protected byte PFLUVB3;

    protected byte PFLUVB4;

    protected byte PFLUVB5;

    protected boolean PFLUVB6;

    protected byte PFNEW;

    protected byte PFNEWNO;

    protected byte PFNEWNO_I;

    protected boolean PFNEWNO_IFLAG;

    protected byte PFNEW_I;

    protected boolean PFNEW_IFLAG;

    protected byte PFNUM2;

    protected byte PFOCTY;

    protected byte PFOCTY2;

    protected byte PFOCTY2_I;

    protected boolean PFOCTY2_IFLAG;

    protected byte PFOCTY3;

    protected byte PFOCTY3_I;

    protected boolean PFOCTY3_IFLAG;

    protected byte PFOCTY4;

    protected byte PFOCTY4_I;

    protected boolean PFOCTY4_IFLAG;

    protected byte PFOCTY5;

    protected byte PFOCTY5_I;

    protected byte PFOCTY5_IFLAG;

    protected byte PFOCTY6;

    protected byte PFOCTY6_I;

    protected byte PFOCTY6_IFLAG;

    protected byte PFOCTY_I;

    protected boolean PFOCTY_IFLAG;

    protected byte PFPENVB;

    protected boolean PFPENVB2;

    protected boolean PFPENVB3;

    protected boolean PFPENVB4;

    protected boolean PFPENVB5;

    protected boolean PFPENVB6;

    protected int PFPENVI;

    protected short PFPENVI2;

    protected short PFPENVI3;

    protected short PFPENVI4;

    protected boolean PFPENVI5;

    protected boolean PFPENVI6;

    protected byte PFREC;

    protected byte PFREC2;

    protected byte PFREC2_I;

    protected boolean PFREC2_IFLAG;

    protected byte PFREC3;

    protected byte PFREC3_I;

    protected boolean PFREC3_IFLAG;

    protected byte PFREC4;

    protected byte PFREC4_I;

    protected boolean PFREC4_IFLAG;

    protected byte PFREC5;

    protected byte PFREC5_I;

    protected boolean PFREC5_IFLAG;

    protected byte PFREC6;

    protected byte PFREC6_I;

    protected boolean PFREC6_IFLAG;

    protected byte PFREC_I;

    protected boolean PFREC_IFLAG;

    protected byte PFREM;

    protected byte PFREM2;

    protected byte PFREM2_I;

    protected byte PFREM2_IFLAG;

    protected byte PFREM3;

    protected byte PFREM3_I;

    protected byte PFREM3_IFLAG;

    protected byte PFREM4;

    protected byte PFREM4_I;

    protected byte PFREM4_IFLAG;

    protected boolean PFREM5;

    protected boolean PFREM6;

    protected byte PFREM_I;

    protected byte PFREM_IFLAG;

    protected byte PFSIPTY1;

    protected byte PFSIPTY10;

    protected boolean PFSIPTY11;

    protected boolean PFSIPTY12;

    protected boolean PFSIPTY13;

    protected boolean PFSIPTY14;

    protected byte PFSIPTY15;

    protected boolean PFSIPTY16;

    protected boolean PFSIPTY17;

    protected boolean PFSIPTY18;

    protected boolean PFSIPTY19;

    protected byte PFSIPTY2;

    protected byte PFSIPTY22;

    protected boolean PFSIPTY23;

    protected boolean PFSIPTY24;

    protected byte PFSIPTY4;

    protected byte PFSIPTY5;

    protected byte PFSIPTY6;

    protected boolean PFSIPTY7;

    protected byte PFSIPTY8;

    protected byte PFSIPTY9;

    protected byte PFSTMM;

    protected byte PFSTMM2;

    protected byte PFSTMM3;

    protected byte PFSTMM4;

    protected byte PFSTMM5;

    protected byte PFSTMM6;

    protected short PFSTMY;

    protected short PFSTMY2;

    protected short PFSTMY3;

    protected short PFSTMY4;

    protected short PFSTMY5;

    protected short PFSTMY6;

    protected byte PFTYP;

    protected byte PFTYP2;

    protected byte PFTYP2_I;

    protected boolean PFTYP2_IFLAG;

    protected byte PFTYP3;

    protected byte PFTYP3_I;

    protected boolean PFTYP3_IFLAG;

    protected byte PFTYP4;

    protected byte PFTYP4_I;

    protected boolean PFTYP4_IFLAG;

    protected byte PFTYP5;

    protected byte PFTYP5_I;

    protected boolean PFTYP5_IFLAG;

    protected byte PFTYP6;

    protected byte PFTYP6_I;

    protected boolean PFTYP6_IFLAG;

    protected byte PFTYP_I;

    protected boolean PFTYP_IFLAG;

    protected short PIRREG;

    protected short PIRREG2;

    protected byte PMORTC;

    protected byte PMORTC2;

    protected byte PMORTC3;

    protected byte PNEWMEM;

    protected byte PNOWK;

    protected byte PNOWKLN;

    protected byte PNUMOS;

    protected byte POADD1;

    protected byte POADD1_I;

    protected boolean POADD1_IFLAG;

    protected byte POADD2;

    protected byte POADD2_I;

    protected boolean POADD2_IFLAG;

    protected boolean POADD3;

    protected boolean POADD3_I;

    protected boolean POADD3_IFLAG;

    protected byte POADD4;

    protected byte POADD4_I;

    protected boolean POADD4_IFLAG;

    protected boolean POADD5;

    protected boolean POADD5_I;

    protected boolean POADD5_IFLAG;

    protected boolean POADD6;

    protected boolean POADD6_I;

    protected boolean POADD6_IFLAG;

    protected boolean POANEH;

    protected boolean POANEH2;

    protected boolean POANEXM;

    protected boolean POANEXY;

    protected byte POANGA;

    protected boolean POANGA2;

    protected byte POANIF;

    protected boolean POANIF2;

    protected byte POANJT;

    protected boolean POANJT2;

    protected byte POANLM;

    protected boolean POANLM2;

    protected byte POANN1;

    protected boolean POANN2;

    protected boolean POANN3;

    protected boolean POANN4;

    protected byte POANN5;

    protected boolean POANN6;

    protected boolean POANN7;

    protected boolean POANN8;

    protected boolean POANVB;

    protected boolean POANVB2;

    protected short POANVI;

    protected short POANVI2;

    protected byte POCASH;

    protected byte POCASH2;

    protected int POCNAM2;

    protected short POCNAM3;

    protected byte POCNDRS1;

    protected boolean POCNDRS10;

    protected boolean POCNDRS11;

    protected boolean POCNDRS12;

    protected byte POCNDRS2;

    protected byte POCNDRS3;

    protected boolean POCNDRS4;

    protected boolean POCNDRS5;

    protected boolean POCNDRS6;

    protected byte POCNDRS7;

    protected boolean POCNDRS8;

    protected boolean POCNDRS9;

    protected byte POCNFG;

    protected byte POCNFG2;

    protected double POCNFR;

    protected double POCNFR2;

    protected byte POCNHOW;

    protected boolean POCNHO___W2;

    protected byte POCNLRS1;

    protected byte POCNLRS2;

    protected boolean POCNLRS3;

    protected boolean POCNLRS4;

    protected boolean POCNLRS5;

    protected boolean POCNLRS6;

    protected boolean POCNLRS7;

    protected boolean POCNLRS8;

    protected byte POCNMSC2;

    protected byte POCNPLN;

    protected byte POCNPLN2;

    protected byte POCNPR;

    protected byte POCNPR2;

    protected byte POCNVOL;

    protected byte POCNVOL2;

    protected byte POCONCH;

    protected byte POCONCH2;

    protected byte POCONH;

    protected byte POCONH2;

    protected byte POCTYP;

    protected byte POCTYP2;

    protected byte POCTYP2_I;

    protected boolean POCTYP2_IFLAG;

    protected byte POCTYP_I;

    protected boolean POCTYP_IFLAG;

    protected int PODRINC;

    protected int PODRINC2;

    protected boolean PODRINCB;

    protected boolean PODRINCB2;

    protected boolean PODRVB;

    protected boolean PODRVB2;

    protected short PODRVI;

    protected int PODRVI2;

    protected short POEMAM;

    protected int POEMAM2;

    protected byte POEMFG;

    protected byte POEMFG2;

    protected double POEMFR;

    protected double POEMFR2;

    protected byte POEMP;

    protected byte POEMP2;

    protected byte POEMPH;

    protected byte POEMPH2;

    protected byte POEMPR;

    protected byte POEMPR2;

    protected byte POFAAG;

    protected byte POFAAG2;

    protected byte POFAN1;

    protected boolean POFAN10;

    protected boolean POFAN11;

    protected boolean POFAN12;

    protected byte POFAN2;

    protected byte POFAN3;

    protected byte POFAN4;

    protected boolean POFAN5;

    protected byte POFAN6;

    protected byte POFAN7;

    protected boolean POFAN8;

    protected boolean POFAN9;

    protected byte POFAWH1;

    protected boolean POFAWH10;

    protected boolean POFAWH11;

    protected boolean POFAWH12;

    protected boolean POFAWH2;

    protected boolean POFAWH3;

    protected boolean POFAWH4;

    protected boolean POFAWH5;

    protected byte POFAWH6;

    protected byte POFAWH7;

    protected boolean POFAWH8;

    protected boolean POFAWH9;

    protected short POJOIN;

    protected short POJOIN2;

    protected byte POLMUS1;

    protected boolean POLMUS10;

    protected boolean POLMUS11;

    protected boolean POLMUS12;

    protected byte POLMUS2;

    protected byte POLMUS3;

    protected byte POLMUS4;

    protected boolean POLMUS5;

    protected boolean POLMUS6;

    protected byte POLMUS7;

    protected boolean POLMUS8;

    protected boolean POLMUS9;

    protected int POLMV;

    protected int POLMV2;

    protected boolean POLMVB;

    protected boolean POLMVB2;

    protected byte POLSYR;

    protected byte POLSYR2;

    protected byte POLUM;

    protected byte POLUM2;

    protected byte POMETH;

    protected byte POMETH2;

    protected byte POPENVB;

    protected boolean POPENVB2;

    protected int POPENVI;

    protected int POPENVI2;

    protected byte POPYCH;

    protected byte POPYCH2;

    protected byte PORAGE2T;

    protected byte PORAGET;

    protected short POYRAM;

    protected int POYRAM2;

    protected byte PPACCU;

    protected byte PPACCU2;

    protected byte PPACCU3;

    protected byte PPANEH;

    protected byte PPANEH2;

    protected boolean PPANEH3;

    protected boolean PPANEXM;

    protected boolean PPANEXM2;

    protected boolean PPANEXM3;

    protected short PPANEXY;

    protected boolean PPANEXY2;

    protected boolean PPANEXY3;

    protected byte PPANGA;

    protected byte PPANGA2;

    protected byte PPANGA3;

    protected byte PPANIF;

    protected byte PPANIF2;

    protected byte PPANIF3;

    protected byte PPANJT;

    protected byte PPANJT2;

    protected byte PPANJT3;

    protected byte PPANLM;

    protected byte PPANLM2;

    protected boolean PPANLM3;

    protected byte PPANN1;

    protected boolean PPANN10;

    protected boolean PPANN11;

    protected boolean PPANN12;

    protected boolean PPANN2;

    protected boolean PPANN3;

    protected boolean PPANN4;

    protected byte PPANN5;

    protected boolean PPANN6;

    protected boolean PPANN7;

    protected boolean PPANN8;

    protected byte PPANN9;

    protected boolean PPANVB;

    protected boolean PPANVB2;

    protected boolean PPANVB3;

    protected short PPANVI;

    protected short PPANVI2;

    protected short PPANVI3;

    protected byte PPCASH;

    protected byte PPCASH2;

    protected byte PPCASH3;

    protected byte PPCNDRS1;

    protected byte PPCNDRS17;

    protected byte PPCNDRS2;

    protected boolean PPCNDRS3;

    protected byte PPCNDRS9;

    protected byte PPCNHOW;

    protected byte PPCNHOW3;

    protected byte PPCNHO___W2;

    protected byte PPCNLRS1;

    protected byte PPCNLRS2;

    protected byte PPCNLRS3;

    protected byte PPCNLRS5;

    protected byte PPCNLRS9;

    protected byte PPCNPLN;

    protected byte PPCNPLN2;

    protected byte PPCNPLN3;

    protected byte PPCONCH;

    protected byte PPCONCH2;

    protected byte PPCONCH3;

    protected byte PPDOCS;

    protected byte PPDOCS2;

    protected byte PPDOCS3;

    protected int PPDRINC;

    protected short PPDRINC2;

    protected boolean PPDRINC3;

    protected byte PPDRINCB;

    protected boolean PPDRINCB2;

    protected byte PPDRVB;

    protected boolean PPDRVB2;

    protected boolean PPDRVB3;

    protected int PPDRVI;

    protected int PPDRVI2;

    protected boolean PPDRVI3;

    protected short PPEIRA;

    protected short PPEIRA2;

    protected boolean PPEIRA3;

    protected boolean PPEIRF;

    protected boolean PPEIRF2;

    protected boolean PPEIRF3;

    protected byte PPEIRH;

    protected byte PPEIRH2;

    protected byte PPEIRH3;

    protected int PPEMAM;

    protected short PPEMAM2;

    protected short PPEMAM3;

    protected double PPEMFR;

    protected byte PPEMFR2;

    protected byte PPEMFR3;

    protected byte PPEMP;

    protected byte PPEMP2;

    protected byte PPEMP3;

    protected byte PPEMPH;

    protected byte PPEMPH2;

    protected byte PPEMPH3;

    protected byte PPEMPR;

    protected byte PPEMPR2;

    protected byte PPEMPR3;

    protected byte PPEVRG;

    protected byte PPEVRG2;

    protected byte PPEVRG3;

    protected boolean PPFAAG;

    protected boolean PPFAAG2;

    protected boolean PPFAAG3;

    protected byte PPFAN1;

    protected boolean PPFAN10;

    protected byte PPFAN11;

    protected boolean PPFAN12;

    protected boolean PPFAN13;

    protected boolean PPFAN14;

    protected boolean PPFAN15;

    protected byte PPFAN2;

    protected boolean PPFAN3;

    protected boolean PPFAN4;

    protected boolean PPFAN5;

    protected byte PPFAN6;

    protected boolean PPFAN7;

    protected boolean PPFAN8;

    protected boolean PPFAN9;

    protected byte PPFAWH1;

    protected boolean PPFAWH10;

    protected boolean PPFAWH11;

    protected boolean PPFAWH12;

    protected boolean PPFAWH13;

    protected boolean PPFAWH14;

    protected boolean PPFAWH15;

    protected boolean PPFAWH16;

    protected boolean PPFAWH17;

    protected boolean PPFAWH18;

    protected boolean PPFAWH19;

    protected boolean PPFAWH2;

    protected boolean PPFAWH20;

    protected boolean PPFAWH21;

    protected boolean PPFAWH3;

    protected boolean PPFAWH4;

    protected boolean PPFAWH5;

    protected boolean PPFAWH6;

    protected boolean PPFAWH7;

    protected byte PPFAWH8;

    protected boolean PPFAWH9;

    protected byte PPIRNO;

    protected byte PPIRNO2;

    protected boolean PPIRNO3;

    protected int PPIRRA;

    protected int PPIRRA2;

    protected short PPIRRA3;

    protected byte PPIRRF;

    protected boolean PPIRRF2;

    protected boolean PPIRRF3;

    protected byte PPIRRH;

    protected byte PPIRRH2;

    protected boolean PPIRRH3;

    protected short PPIRRY;

    protected short PPIRRY2;

    protected short PPIRRY3;

    protected short PPLASY;

    protected short PPLASY2;

    protected short PPLASY3;

    protected byte PPLMUS;

    protected byte PPLMUS2;

    protected boolean PPLMUS3;

    protected int PPLMV;

    protected int PPLMV2;

    protected short PPLMV3;

    protected boolean PPLMVB;

    protected boolean PPLMVB2;

    protected boolean PPLMVB3;

    protected int PPLSTA;

    protected int PPLSTA2;

    protected int PPLSTA3;

    protected byte PPLSTP;

    protected byte PPLSTP2;

    protected byte PPLSTP3;

    protected byte PPLUM;

    protected byte PPLUM2;

    protected byte PPLUM3;

    protected byte PPNINS;

    protected byte PPNINS2;

    protected byte PPNINS3;

    protected byte PPORG;

    protected byte PPORG2;

    protected byte PPORG3;

    protected byte PPPAY;

    protected byte PPPAY2;

    protected byte PPPAY3;

    protected int PPRGAM;

    protected int PPRGAM2;

    protected int PPRGAM3;

    protected byte PPRGFG;

    protected byte PPRGFG2;

    protected boolean PPRGFG3;

    protected double PPRGFR;

    protected byte PPRGFR2;

    protected boolean PPRGFR3;

    protected byte PPRGH;

    protected byte PPRGH2;

    protected byte PPRGH3;

    protected byte PPRGPE;

    protected byte PPRGPE2;

    protected byte PPRGPE3;

    protected byte PPSIPP;

    protected byte PPSIPP2;

    protected byte PPSIPP3;

    protected byte PPSTMN;

    protected byte PPSTMN2;

    protected byte PPSTMN3;

    protected short PPSTYR;

    protected short PPSTYR2;

    protected short PPSTYR3;

    protected byte PPTYP;

    protected byte PPTYP2;

    protected byte PPTYP3;

    protected int PPVAL;

    protected int PPVAL2;

    protected double PPVAL2_I;

    protected byte PPVAL2_IFLAG;

    protected int PPVAL3;

    protected double PPVAL3_I;

    protected boolean PPVAL3_IFLAG;

    protected byte PPVALB;

    protected byte PPVALB2;

    protected byte PPVALB3;

    protected double PPVAL_I;

    protected byte PPVAL_IFLAG;

    protected short PPYRST;

    protected short PPYRST2;

    protected short PPYRST3;

    protected byte PPYSTP1;

    protected byte PPYSTP15;

    protected byte PPYSTP2;

    protected byte PPYSTP3;

    protected byte PPYSTP8;

    protected byte PPYSTP9;

    protected boolean PRACCU2;

    protected boolean PRACCU3;

    protected boolean PRACCU5;

    protected boolean PRACCU6;

    protected byte PREVPENS;

    protected byte PRODTS01;

    protected byte PRODTS02;

    protected byte PRODTS03;

    protected byte PRODTS04;

    protected byte PRODTS05;

    protected byte PRODTS06;

    protected byte PRODTS07;

    protected byte PRODTS08;

    protected byte PRODTS09;

    protected byte PRODTS10;

    protected byte PRODTS11;

    protected boolean PRODTS12;

    protected byte PRODTS201;

    protected byte PRODTS202;

    protected byte PRODTS203;

    protected byte PRODTS204;

    protected byte PRODTS205;

    protected byte PRODTS206;

    protected byte PRODTS207;

    protected byte PRODTS208;

    protected byte PRODTS209;

    protected byte PRODTS210;

    protected boolean PROXPERS;

    protected byte PROXYNUM;

    protected int PSPEXPA;

    protected int PSPEXPA_I;

    protected boolean PSPEXPA_IFLAG;

    protected byte PSPEXPH;

    protected byte PSPEXPH_I;

    protected boolean PSPEXPH_IFLAG;

    protected byte PSPLUM;

    protected int PSPLUVAL;

    protected byte PSPSE;

    protected byte PSPSE_I;

    protected boolean PSPSE_IFLAG;

    protected byte PSTYPE1;

    protected byte PSTYPE10;

    protected byte PSTYPE11;

    protected boolean PSTYPE12;

    protected boolean PSTYPE13;

    protected boolean PSTYPE14;

    protected byte PSTYPE15;

    protected byte PSTYPE16;

    protected boolean PSTYPE17;

    protected boolean PSTYPE18;

    protected boolean PSTYPE19;

    protected byte PSTYPE2;

    protected boolean PSTYPE20;

    protected byte PSTYPE3;

    protected byte PSTYPE4;

    protected byte PSTYPE5;

    protected byte PSTYPE6;

    protected boolean PSTYPE7;

    protected byte PSTYPE8;

    protected byte PSTYPE9;

    protected byte PWLUM;

    protected int PWLUVAL;

    protected byte R01;

    protected byte R02;

    protected byte R03;

    protected byte R04;

    protected byte R05;

    protected byte R06;

    protected byte R07;

    protected byte R08;

    protected byte R09;

    protected boolean R10;

    protected boolean R11;

    protected byte RNYDAY;

    protected byte SAMEJOB1;

    protected byte SAMEJOB2;

    protected byte SAMEJOB3;

    protected byte SAMEJOB4;

    protected byte SAMEJOB5;

    protected byte SAMEJOB6;

    protected byte SAMEMP;

    protected byte SAMJOB;

    protected int SEAMT;

    protected byte SECTOR;

    protected byte SECTR2;

    protected int SICCODE;

    protected short SJ12G;

    protected short SJ12N;

    protected short SJGRS;

    protected short SJNET;

    protected int SJSEG;

    protected byte SMTPEN;

    protected byte SOURC01;

    protected byte SOURC02;

    protected byte SOURC03;

    protected byte SOURC04;

    protected byte SOURC05;

    protected byte SOURC06;

    protected byte SOURC07;

    protected byte SOURC08;

    protected boolean SOURC09;

    protected byte SOURC103;

    protected byte SOURC104;

    protected byte SOURC105;

    protected byte SOURC106;

    protected byte SOURC107;

    protected byte SOURC108;

    protected boolean SOURC109;

    protected byte SOURC120;

    protected boolean SOURC121;

    protected boolean SOURC122;

    protected boolean SOURC123;

    protected boolean SOURC124;

    protected boolean SOURC125;

    protected boolean SOURC126;

    protected byte SOURC137;

    protected byte SOURC154;

    protected byte SOURC155;

    protected boolean SOURC156;

    protected byte SOURC172;

    protected byte SOURC18;

    protected byte SOURC19;

    protected byte SOURC2;

    protected byte SOURC20;

    protected byte SOURC21;

    protected byte SOURC22;

    protected byte SOURC23;

    protected byte SOURC24;

    protected boolean SOURC25;

    protected boolean SOURC26;

    protected byte SOURC2P;

    protected byte SOURC2P10;

    protected byte SOURC2P11;

    protected byte SOURC2P2;

    protected byte SOURC2P3;

    protected byte SOURC2P4;

    protected byte SOURC2P5;

    protected byte SOURC2P6;

    protected byte SOURC2P7;

    protected byte SOURC2P8;

    protected byte SOURC2P9;

    protected byte SOURC3;

    protected byte SOURC35;

    protected byte SOURC36;

    protected byte SOURC37;

    protected byte SOURC38;

    protected byte SOURC39;

    protected byte SOURC4;

    protected byte SOURC40;

    protected byte SOURC41;

    protected byte SOURC5;

    protected byte SOURC52;

    protected byte SOURC53;

    protected byte SOURC54;

    protected byte SOURC55;

    protected byte SOURC56;

    protected byte SOURC57;

    protected boolean SOURC58;

    protected byte SOURC6;

    protected byte SOURC69;

    protected byte SOURC7;

    protected byte SOURC70;

    protected byte SOURC71;

    protected byte SOURC72;

    protected byte SOURC73;

    protected byte SOURC74;

    protected boolean SOURC75;

    protected byte SOURC8;

    protected byte SOURC86;

    protected byte SOURC87;

    protected byte SOURC88;

    protected byte SOURC89;

    protected byte SOURC9;

    protected byte SOURC90;

    protected byte SOURC91;

    protected boolean SOURC92;

    protected byte SOURCP01;

    protected byte SOURCP02;

    protected byte SOURCP03;

    protected byte SOURCP04;

    protected byte SOURCP05;

    protected byte SOURCP06;

    protected byte SOURCP07;

    protected byte SOURCP08;

    protected byte SOURCP09;

    protected boolean SOURCP102;

    protected byte SOURCP103;

    protected byte SOURCP104;

    protected byte SOURCP105;

    protected byte SOURCP106;

    protected byte SOURCP107;

    protected boolean SOURCP11;

    protected boolean SOURCP12;

    protected byte SOURCP120;

    protected boolean SOURCP121;

    protected boolean SOURCP122;

    protected boolean SOURCP123;

    protected boolean SOURCP124;

    protected boolean SOURCP125;

    protected byte SOURCP137;

    protected byte SOURCP154;

    protected boolean SOURCP155;

    protected byte SOURCP171;

    protected byte SOURCP18;

    protected byte SOURCP19;

    protected byte SOURCP20;

    protected byte SOURCP21;

    protected byte SOURCP22;

    protected byte SOURCP23;

    protected byte SOURCP24;

    protected byte SOURCP25;

    protected byte SOURCP26;

    protected byte SOURCP27;

    protected boolean SOURCP28;

    protected boolean SOURCP290;

    protected byte SOURCP35;

    protected byte SOURCP36;

    protected byte SOURCP37;

    protected byte SOURCP38;

    protected byte SOURCP39;

    protected byte SOURCP40;

    protected byte SOURCP41;

    protected byte SOURCP42;

    protected byte SOURCP43;

    protected boolean SOURCP44;

    protected byte SOURCP52;

    protected byte SOURCP53;

    protected byte SOURCP54;

    protected byte SOURCP55;

    protected byte SOURCP56;

    protected byte SOURCP57;

    protected byte SOURCP58;

    protected boolean SOURCP59;

    protected boolean SOURCP60;

    protected boolean SOURCP61;

    protected byte SOURCP69;

    protected byte SOURCP70;

    protected byte SOURCP71;

    protected byte SOURCP72;

    protected byte SOURCP73;

    protected boolean SOURCP74;

    protected boolean SOURCP75;

    protected boolean SOURCP76;

    protected byte SOURCP86;

    protected byte SOURCP87;

    protected byte SOURCP88;

    protected byte SOURCP89;

    protected byte SOURCP90;

    protected byte SPENDM;

    protected boolean SSFAM1;

    protected byte SSNOUNITS;

    protected boolean STATUS;

    protected byte TACC;

    protected byte TACC2;

    protected byte TACC3;

    protected boolean TADDVB;

    protected boolean TADDVB2;

    protected boolean TADDVB3;

    protected int TADDVL;

    protected int TADDVL2;

    protected boolean TADDVL3;

    protected byte TBCAP;

    protected byte TBCAP2;

    protected byte TBCAP3;

    protected short TBCAPY;

    protected short TBCAPY2;

    protected boolean TBCAPY3;

    protected byte TBCKNO;

    protected byte TBCKNO2;

    protected boolean TBCKNO3;

    protected byte TBEN1;

    protected byte TBEN10;

    protected byte TBEN11;

    protected boolean TBEN12;

    protected boolean TBEN13;

    protected boolean TBEN14;

    protected boolean TBEN15;

    protected boolean TBEN16;

    protected byte TBEN17;

    protected byte TBEN18;

    protected boolean TBEN19;

    protected byte TBEN2;

    protected boolean TBEN20;

    protected boolean TBEN21;

    protected boolean TBEN22;

    protected boolean TBEN23;

    protected boolean TBEN24;

    protected byte TBEN3;

    protected byte TBEN4;

    protected boolean TBEN5;

    protected boolean TBEN6;

    protected boolean TBEN7;

    protected boolean TBEN8;

    protected byte TBEN9;

    protected byte TBINC;

    protected byte TBINC2;

    protected byte TBINC3;

    protected int TBREC;

    protected int TBREC2;

    protected short TBREC3;

    protected byte TBRECB;

    protected byte TBRECB2;

    protected boolean TBRECB3;

    protected byte TBVALB;

    protected byte TBVALB2;

    protected byte TBVALB3;

    protected boolean TCONT1;

    protected boolean TCONT2;

    protected byte TDUP;

    protected byte TDUP2;

    protected byte TDUP3;

    protected byte TDUPA;

    protected byte TDUPA2;

    protected boolean TDUPA3;

    protected byte TJNT1;

    protected byte TJNT2;

    protected byte TJNT3;

    protected boolean TJNT4;

    protected byte TJNT5;

    protected boolean TJNT6;

    protected byte TSNEW;

    protected byte TSNO;

    protected byte TSNO2;

    protected byte TSNO3;

    protected byte TSNUM2;

    protected int TVAL;

    protected int TVAL2;

    protected int TVAL3;

    protected byte TVALB;

    protected byte TVALB2;

    protected byte TVALB3;

    protected byte TWHO1;

    protected boolean TWHO10;

    protected boolean TWHO11;

    protected boolean TWHO12;

    protected byte TWHO13;

    protected boolean TWHO14;

    protected boolean TWHO15;

    protected boolean TWHO16;

    protected boolean TWHO17;

    protected boolean TWHO18;

    protected byte TWHO2;

    protected boolean TWHO3;

    protected boolean TWHO4;

    protected boolean TWHO5;

    protected boolean TWHO6;

    protected byte TWHO7;

    protected boolean TWHO8;

    protected boolean TWHO9;

    protected byte UBUYLET;

    protected byte UBUYLET_I;

    protected boolean UBUYLET_IFLAG;

    protected byte UBUYTOL;

    protected boolean UBUYTOL2;

    protected boolean UBUYTOL3;

    protected boolean UBUYTOL4;

    protected boolean UBUYTOL5;

    protected boolean UPNO;

    protected int VALPBLUM1;

    protected int VALPBLUM2;

    protected byte WKBETW;

    protected byte WKHRS;

    protected byte WKHRSIR;

    protected byte WPENTYPE;

    protected byte XMARSTA;

    protected double XS_CALWGT;

    protected final void initACCFRAC(String s) {
        if (!s.trim().isEmpty()) {
            ACCFRAC = Double.parseDouble(s);
        } else {
            ACCFRAC = Double.NaN;
        }
    }

    protected final void initACCFRAC2(String s) {
        if (!s.trim().isEmpty()) {
            ACCFRAC2 = Double.parseDouble(s);
        } else {
            ACCFRAC2 = Double.NaN;
        }
    }

    protected final void initASAF2T(String s) {
        if (!s.trim().isEmpty()) {
            ASAF2T = Double.parseDouble(s);
        } else {
            ASAF2T = Double.NaN;
        }
    }

    protected final void initASAFT(String s) {
        if (!s.trim().isEmpty()) {
            ASAFT = Double.parseDouble(s);
        } else {
            ASAFT = Double.NaN;
        }
    }

    protected final void initBAMT19(String s) {
        if (!s.trim().isEmpty()) {
            BAMT19 = Double.parseDouble(s);
        } else {
            BAMT19 = Double.NaN;
        }
    }

    protected final void initBAMTDK19(String s) {
        if (!s.trim().isEmpty()) {
            BAMTDK19 = Byte.parseByte(s);
        } else {
            BAMTDK19 = Byte.MIN_VALUE;
        }
    }

    protected final void initBEN1Q4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BEN1Q4 = false;
            } else {
                BEN1Q4 = true;
            }
        }
    }

    protected final void initBENUS(String s) {
        if (!s.trim().isEmpty()) {
            BENUS = Byte.parseByte(s);
        } else {
            BENUS = Byte.MIN_VALUE;
        }
    }

    protected final void initBFUND11(String s) {
        if (!s.trim().isEmpty()) {
            BFUND11 = Byte.parseByte(s);
        } else {
            BFUND11 = Byte.MIN_VALUE;
        }
    }

    protected final void initBFUND12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND12 = false;
            } else {
                BFUND12 = true;
            }
        }
    }

    protected final void initBFUND13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND13 = false;
            } else {
                BFUND13 = true;
            }
        }
    }

    protected final void initBFUND14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND14 = false;
            } else {
                BFUND14 = true;
            }
        }
    }

    protected final void initBFUND15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND15 = false;
            } else {
                BFUND15 = true;
            }
        }
    }

    protected final void initBFUND16(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND16 = false;
            } else {
                BFUND16 = true;
            }
        }
    }

    protected final void initBFUND19(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND19 = false;
            } else {
                BFUND19 = true;
            }
        }
    }

    protected final void initBFUND20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND20 = false;
            } else {
                BFUND20 = true;
            }
        }
    }

    protected final void initBFUND21(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND21 = false;
            } else {
                BFUND21 = true;
            }
        }
    }

    protected final void initBFUND22(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND22 = false;
            } else {
                BFUND22 = true;
            }
        }
    }

    protected final void initBFUND23(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND23 = false;
            } else {
                BFUND23 = true;
            }
        }
    }

    protected final void initBFUND24(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND24 = false;
            } else {
                BFUND24 = true;
            }
        }
    }

    protected final void initBFUND5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND5 = false;
            } else {
                BFUND5 = true;
            }
        }
    }

    protected final void initBFUND6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND6 = false;
            } else {
                BFUND6 = true;
            }
        }
    }

    protected final void initBFUND7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND7 = false;
            } else {
                BFUND7 = true;
            }
        }
    }

    protected final void initBFUND8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND8 = false;
            } else {
                BFUND8 = true;
            }
        }
    }

    protected final void initBPD19(String s) {
        if (!s.trim().isEmpty()) {
            BPD19 = Byte.parseByte(s);
        } else {
            BPD19 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPRFLOSS2(String s) {
        if (!s.trim().isEmpty()) {
            BPRFLOSS2 = Byte.parseByte(s);
        } else {
            BPRFLOSS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPRFLOSS3(String s) {
        if (!s.trim().isEmpty()) {
            BPRFLOSS3 = Byte.parseByte(s);
        } else {
            BPRFLOSS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBUAMT(String s) {
        if (!s.trim().isEmpty()) {
            BUAMT = Double.parseDouble(s);
        } else {
            BUAMT = Double.NaN;
        }
    }

    protected final void initBUPD(String s) {
        if (!s.trim().isEmpty()) {
            BUPD = Byte.parseByte(s);
        } else {
            BUPD = Byte.MIN_VALUE;
        }
    }

    protected final void initBUYLDB1(String s) {
        if (!s.trim().isEmpty()) {
            BUYLDB1 = Byte.parseByte(s);
        } else {
            BUYLDB1 = Byte.MIN_VALUE;
        }
    }

    protected final void initBUYLDB2(String s) {
        if (!s.trim().isEmpty()) {
            BUYLDB2 = Byte.parseByte(s);
        } else {
            BUYLDB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBUYLDB3(String s) {
        if (!s.trim().isEmpty()) {
            BUYLDB3 = Byte.parseByte(s);
        } else {
            BUYLDB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBUYLDEBT1(String s) {
        if (!s.trim().isEmpty()) {
            BUYLDEBT1 = Integer.parseInt(s);
        } else {
            BUYLDEBT1 = Integer.MIN_VALUE;
        }
    }

    protected final void initBUYLDEBT1_I(String s) {
        if (!s.trim().isEmpty()) {
            BUYLDEBT1_I = Integer.parseInt(s);
        } else {
            BUYLDEBT1_I = Integer.MIN_VALUE;
        }
    }

    protected final void initBUYLDEBT1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                BUYLDEBT1_IFLAG = false;
            } else {
                BUYLDEBT1_IFLAG = true;
            }
        }
    }

    protected final void initBUYLDEBT2(String s) {
        if (!s.trim().isEmpty()) {
            BUYLDEBT2 = Integer.parseInt(s);
        } else {
            BUYLDEBT2 = Integer.MIN_VALUE;
        }
    }

    protected final void initBUYLDEBT2_I(String s) {
        if (!s.trim().isEmpty()) {
            BUYLDEBT2_I = Integer.parseInt(s);
        } else {
            BUYLDEBT2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initBUYLDEBT2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                BUYLDEBT2_IFLAG = false;
            } else {
                BUYLDEBT2_IFLAG = true;
            }
        }
    }

    protected final void initBUYLDEBT3(String s) {
        if (!s.trim().isEmpty()) {
            BUYLDEBT3 = Integer.parseInt(s);
        } else {
            BUYLDEBT3 = Integer.MIN_VALUE;
        }
    }

    protected final void initBUYLDEBT3_I(String s) {
        if (!s.trim().isEmpty()) {
            BUYLDEBT3_I = Integer.parseInt(s);
        } else {
            BUYLDEBT3_I = Integer.MIN_VALUE;
        }
    }

    protected final void initBUYLDEBT3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                BUYLDEBT3_IFLAG = false;
            } else {
                BUYLDEBT3_IFLAG = true;
            }
        }
    }

    protected final void initBUYLGDST(String s) {
        if (!s.trim().isEmpty()) {
            BUYLGDST = Integer.parseInt(s);
        } else {
            BUYLGDST = Integer.MIN_VALUE;
        }
    }

    protected final void initBUYLGDVAL1(String s) {
        if (!s.trim().isEmpty()) {
            BUYLGDVAL1 = Integer.parseInt(s);
        } else {
            BUYLGDVAL1 = Integer.MIN_VALUE;
        }
    }

    protected final void initBUYLGDVAL2(String s) {
        if (!s.trim().isEmpty()) {
            BUYLGDVAL2 = Integer.parseInt(s);
        } else {
            BUYLGDVAL2 = Integer.MIN_VALUE;
        }
    }

    protected final void initBUYLGDVAL3(String s) {
        if (!s.trim().isEmpty()) {
            BUYLGDVAL3 = Integer.parseInt(s);
        } else {
            BUYLGDVAL3 = Integer.MIN_VALUE;
        }
    }

    protected final void initBUYLGDVB1(String s) {
        if (!s.trim().isEmpty()) {
            BUYLGDVB1 = Byte.parseByte(s);
        } else {
            BUYLGDVB1 = Byte.MIN_VALUE;
        }
    }

    protected final void initBUYLGDVB1_I(String s) {
        if (!s.trim().isEmpty()) {
            BUYLGDVB1_I = Byte.parseByte(s);
        } else {
            BUYLGDVB1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initBUYLGDVB1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                BUYLGDVB1_IFLAG = false;
            } else {
                BUYLGDVB1_IFLAG = true;
            }
        }
    }

    protected final void initBUYLGDVB2(String s) {
        if (!s.trim().isEmpty()) {
            BUYLGDVB2 = Byte.parseByte(s);
        } else {
            BUYLGDVB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBUYLGDVB2_I(String s) {
        if (!s.trim().isEmpty()) {
            BUYLGDVB2_I = Byte.parseByte(s);
        } else {
            BUYLGDVB2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initBUYLGDVB2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                BUYLGDVB2_IFLAG = false;
            } else {
                BUYLGDVB2_IFLAG = true;
            }
        }
    }

    protected final void initBUYLGDVB3(String s) {
        if (!s.trim().isEmpty()) {
            BUYLGDVB3 = Byte.parseByte(s);
        } else {
            BUYLGDVB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBUYLGDVB3_I(String s) {
        if (!s.trim().isEmpty()) {
            BUYLGDVB3_I = Byte.parseByte(s);
        } else {
            BUYLGDVB3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initBUYLGDVB3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                BUYLGDVB3_IFLAG = false;
            } else {
                BUYLGDVB3_IFLAG = true;
            }
        }
    }

    protected final void initBUYLVAL1(String s) {
        if (!s.trim().isEmpty()) {
            BUYLVAL1 = Integer.parseInt(s);
        } else {
            BUYLVAL1 = Integer.MIN_VALUE;
        }
    }

    protected final void initBUYLVAL1_I(String s) {
        if (!s.trim().isEmpty()) {
            BUYLVAL1_I = Integer.parseInt(s);
        } else {
            BUYLVAL1_I = Integer.MIN_VALUE;
        }
    }

    protected final void initBUYLVAL1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                BUYLVAL1_IFLAG = false;
            } else {
                BUYLVAL1_IFLAG = true;
            }
        }
    }

    protected final void initBUYLVAL2(String s) {
        if (!s.trim().isEmpty()) {
            BUYLVAL2 = Integer.parseInt(s);
        } else {
            BUYLVAL2 = Integer.MIN_VALUE;
        }
    }

    protected final void initBUYLVAL2_I(String s) {
        if (!s.trim().isEmpty()) {
            BUYLVAL2_I = Integer.parseInt(s);
        } else {
            BUYLVAL2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initBUYLVAL2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                BUYLVAL2_IFLAG = false;
            } else {
                BUYLVAL2_IFLAG = true;
            }
        }
    }

    protected final void initBUYLVAL3(String s) {
        if (!s.trim().isEmpty()) {
            BUYLVAL3 = Integer.parseInt(s);
        } else {
            BUYLVAL3 = Integer.MIN_VALUE;
        }
    }

    protected final void initBUYLVAL3_I(String s) {
        if (!s.trim().isEmpty()) {
            BUYLVAL3_I = Integer.parseInt(s);
        } else {
            BUYLVAL3_I = Integer.MIN_VALUE;
        }
    }

    protected final void initBUYLVAL3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                BUYLVAL3_IFLAG = false;
            } else {
                BUYLVAL3_IFLAG = true;
            }
        }
    }

    protected final void initBUYLVB1(String s) {
        if (!s.trim().isEmpty()) {
            BUYLVB1 = Byte.parseByte(s);
        } else {
            BUYLVB1 = Byte.MIN_VALUE;
        }
    }

    protected final void initBUYLVB2(String s) {
        if (!s.trim().isEmpty()) {
            BUYLVB2 = Byte.parseByte(s);
        } else {
            BUYLVB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBUYLVB3(String s) {
        if (!s.trim().isEmpty()) {
            BUYLVB3 = Byte.parseByte(s);
        } else {
            BUYLVB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBVALB3(String s) {
        if (!s.trim().isEmpty()) {
            BVALB3 = Byte.parseByte(s);
        } else {
            BVALB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBVALWH11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BVALWH11 = false;
            } else {
                BVALWH11 = true;
            }
        }
    }

    protected final void initBVALWH12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BVALWH12 = false;
            } else {
                BVALWH12 = true;
            }
        }
    }

    protected final void initBVALWH15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BVALWH15 = false;
            } else {
                BVALWH15 = true;
            }
        }
    }

    protected final void initBVALWH16(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BVALWH16 = false;
            } else {
                BVALWH16 = true;
            }
        }
    }

    protected final void initBVALWH17(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BVALWH17 = false;
            } else {
                BVALWH17 = true;
            }
        }
    }

    protected final void initBVALWH18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BVALWH18 = false;
            } else {
                BVALWH18 = true;
            }
        }
    }

    protected final void initBVALWH4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BVALWH4 = false;
            } else {
                BVALWH4 = true;
            }
        }
    }

    protected final void initBVALWH5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BVALWH5 = false;
            } else {
                BVALWH5 = true;
            }
        }
    }

    protected final void initBVALWH6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BVALWH6 = false;
            } else {
                BVALWH6 = true;
            }
        }
    }

    protected final void initCAREDUR(String s) {
        if (!s.trim().isEmpty()) {
            CAREDUR = Byte.parseByte(s);
        } else {
            CAREDUR = Byte.MIN_VALUE;
        }
    }

    protected final void initCAREHR(String s) {
        if (!s.trim().isEmpty()) {
            CAREHR = Byte.parseByte(s);
        } else {
            CAREHR = Byte.MIN_VALUE;
        }
    }

    protected final void initCAREPS(String s) {
        if (!s.trim().isEmpty()) {
            CAREPS = Byte.parseByte(s);
        } else {
            CAREPS = Byte.MIN_VALUE;
        }
    }

    protected final void initCASEW2(String s) {
        if (!s.trim().isEmpty()) {
            CASEW2 = Short.parseShort(s);
        } else {
            CASEW2 = Short.MIN_VALUE;
        }
    }

    protected final void initCHECK1(String s) {
        if (!s.trim().isEmpty()) {
            CHECK1 = Byte.parseByte(s);
        } else {
            CHECK1 = Byte.MIN_VALUE;
        }
    }

    protected final void initCHECK2(String s) {
        if (!s.trim().isEmpty()) {
            CHECK2 = Byte.parseByte(s);
        } else {
            CHECK2 = Byte.MIN_VALUE;
        }
    }

    protected final void initCHECKNDL(String s) {
        if (!s.trim().isEmpty()) {
            CHECKNDL = Byte.parseByte(s);
        } else {
            CHECKNDL = Byte.MIN_VALUE;
        }
    }

    protected final void initCHOIC(String s) {
        if (!s.trim().isEmpty()) {
            CHOIC = Byte.parseByte(s);
        } else {
            CHOIC = Byte.MIN_VALUE;
        }
    }

    protected final void initCHOIC10(String s) {
        if (!s.trim().isEmpty()) {
            CHOIC10 = Byte.parseByte(s);
        } else {
            CHOIC10 = Byte.MIN_VALUE;
        }
    }

    protected final void initCHOIC2(String s) {
        if (!s.trim().isEmpty()) {
            CHOIC2 = Byte.parseByte(s);
        } else {
            CHOIC2 = Byte.MIN_VALUE;
        }
    }

    protected final void initCHOIC3(String s) {
        if (!s.trim().isEmpty()) {
            CHOIC3 = Byte.parseByte(s);
        } else {
            CHOIC3 = Byte.MIN_VALUE;
        }
    }

    protected final void initCHOIC4(String s) {
        if (!s.trim().isEmpty()) {
            CHOIC4 = Byte.parseByte(s);
        } else {
            CHOIC4 = Byte.MIN_VALUE;
        }
    }

    protected final void initCHOIC5(String s) {
        if (!s.trim().isEmpty()) {
            CHOIC5 = Byte.parseByte(s);
        } else {
            CHOIC5 = Byte.MIN_VALUE;
        }
    }

    protected final void initCHOIC6(String s) {
        if (!s.trim().isEmpty()) {
            CHOIC6 = Byte.parseByte(s);
        } else {
            CHOIC6 = Byte.MIN_VALUE;
        }
    }

    protected final void initCHOIC7(String s) {
        if (!s.trim().isEmpty()) {
            CHOIC7 = Byte.parseByte(s);
        } else {
            CHOIC7 = Byte.MIN_VALUE;
        }
    }

    protected final void initCHOIC8(String s) {
        if (!s.trim().isEmpty()) {
            CHOIC8 = Byte.parseByte(s);
        } else {
            CHOIC8 = Byte.MIN_VALUE;
        }
    }

    protected final void initCHOIC9(String s) {
        if (!s.trim().isEmpty()) {
            CHOIC9 = Byte.parseByte(s);
        } else {
            CHOIC9 = Byte.MIN_VALUE;
        }
    }

    protected final void initCHOICP(String s) {
        if (!s.trim().isEmpty()) {
            CHOICP = Byte.parseByte(s);
        } else {
            CHOICP = Byte.MIN_VALUE;
        }
    }

    protected final void initCHOICP10(String s) {
        if (!s.trim().isEmpty()) {
            CHOICP10 = Byte.parseByte(s);
        } else {
            CHOICP10 = Byte.MIN_VALUE;
        }
    }

    protected final void initCHOICP11(String s) {
        if (!s.trim().isEmpty()) {
            CHOICP11 = Byte.parseByte(s);
        } else {
            CHOICP11 = Byte.MIN_VALUE;
        }
    }

    protected final void initCHOICP18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                CHOICP18 = false;
            } else {
                CHOICP18 = true;
            }
        }
    }

    protected final void initCHOICP19(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                CHOICP19 = false;
            } else {
                CHOICP19 = true;
            }
        }
    }

    protected final void initCHOICP2(String s) {
        if (!s.trim().isEmpty()) {
            CHOICP2 = Byte.parseByte(s);
        } else {
            CHOICP2 = Byte.MIN_VALUE;
        }
    }

    protected final void initCHOICP3(String s) {
        if (!s.trim().isEmpty()) {
            CHOICP3 = Byte.parseByte(s);
        } else {
            CHOICP3 = Byte.MIN_VALUE;
        }
    }

    protected final void initCHOICP4(String s) {
        if (!s.trim().isEmpty()) {
            CHOICP4 = Byte.parseByte(s);
        } else {
            CHOICP4 = Byte.MIN_VALUE;
        }
    }

    protected final void initCHOICP5(String s) {
        if (!s.trim().isEmpty()) {
            CHOICP5 = Byte.parseByte(s);
        } else {
            CHOICP5 = Byte.MIN_VALUE;
        }
    }

    protected final void initCHOICP6(String s) {
        if (!s.trim().isEmpty()) {
            CHOICP6 = Byte.parseByte(s);
        } else {
            CHOICP6 = Byte.MIN_VALUE;
        }
    }

    protected final void initCHOICP7(String s) {
        if (!s.trim().isEmpty()) {
            CHOICP7 = Byte.parseByte(s);
        } else {
            CHOICP7 = Byte.MIN_VALUE;
        }
    }

    protected final void initCHOICP8(String s) {
        if (!s.trim().isEmpty()) {
            CHOICP8 = Byte.parseByte(s);
        } else {
            CHOICP8 = Byte.MIN_VALUE;
        }
    }

    protected final void initCHOICP9(String s) {
        if (!s.trim().isEmpty()) {
            CHOICP9 = Byte.parseByte(s);
        } else {
            CHOICP9 = Byte.MIN_VALUE;
        }
    }

    protected final void initCOMBAM(String s) {
        if (!s.trim().isEmpty()) {
            COMBAM = Double.parseDouble(s);
        } else {
            COMBAM = Double.NaN;
        }
    }

    protected final void initCOMBPD(String s) {
        if (!s.trim().isEmpty()) {
            COMBPD = Byte.parseByte(s);
        } else {
            COMBPD = Byte.MIN_VALUE;
        }
    }

    protected final void initCOMBWK(String s) {
        if (!s.trim().isEmpty()) {
            COMBWK = Double.parseDouble(s);
        } else {
            COMBWK = Double.NaN;
        }
    }

    protected final void initCOMMI(String s) {
        if (!s.trim().isEmpty()) {
            COMMI = Byte.parseByte(s);
        } else {
            COMMI = Byte.MIN_VALUE;
        }
    }

    protected final void initCONTSUB(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                CONTSUB = false;
            } else {
                CONTSUB = true;
            }
        }
    }

    protected final void initCTBEN(String s) {
        if (!s.trim().isEmpty()) {
            CTBEN = Byte.parseByte(s);
        } else {
            CTBEN = Byte.MIN_VALUE;
        }
    }

    protected final void initCURSTAT(String s) {
        if (!s.trim().isEmpty()) {
            CURSTAT = Byte.parseByte(s);
        } else {
            CURSTAT = Byte.MIN_VALUE;
        }
    }

    protected final void initCUTBACK(String s) {
        if (!s.trim().isEmpty()) {
            CUTBACK = Byte.parseByte(s);
        } else {
            CUTBACK = Byte.MIN_VALUE;
        }
    }

    protected final void initDADVACT1(String s) {
        if (!s.trim().isEmpty()) {
            DADVACT1 = Byte.parseByte(s);
        } else {
            DADVACT1 = Byte.MIN_VALUE;
        }
    }

    protected final void initDADVACT2(String s) {
        if (!s.trim().isEmpty()) {
            DADVACT2 = Byte.parseByte(s);
        } else {
            DADVACT2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDADVACT3(String s) {
        if (!s.trim().isEmpty()) {
            DADVACT3 = Byte.parseByte(s);
        } else {
            DADVACT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDADVMTH(String s) {
        if (!s.trim().isEmpty()) {
            DADVMTH = Byte.parseByte(s);
        } else {
            DADVMTH = Byte.MIN_VALUE;
        }
    }

    protected final void initDBURDW1(String s) {
        if (!s.trim().isEmpty()) {
            DBURDW1 = Byte.parseByte(s);
        } else {
            DBURDW1 = Byte.MIN_VALUE;
        }
    }

    protected final void initDBURDW7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DBURDW7 = false;
            } else {
                DBURDW7 = true;
            }
        }
    }

    protected final void initDBURD___W2(String s) {
        if (!s.trim().isEmpty()) {
            DBURD___W2 = Byte.parseByte(s);
        } else {
            DBURD___W2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDC12BEH(String s) {
        if (!s.trim().isEmpty()) {
            DC12BEH = Byte.parseByte(s);
        } else {
            DC12BEH = Byte.MIN_VALUE;
        }
    }

    protected final void initDC12BEH2(String s) {
        if (!s.trim().isEmpty()) {
            DC12BEH2 = Byte.parseByte(s);
        } else {
            DC12BEH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDC12BEH3(String s) {
        if (!s.trim().isEmpty()) {
            DC12BEH3 = Byte.parseByte(s);
        } else {
            DC12BEH3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDC12BEH4(String s) {
        if (!s.trim().isEmpty()) {
            DC12BEH4 = Byte.parseByte(s);
        } else {
            DC12BEH4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDC12BEH5(String s) {
        if (!s.trim().isEmpty()) {
            DC12BEH5 = Byte.parseByte(s);
        } else {
            DC12BEH5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDC12OWE(String s) {
        if (!s.trim().isEmpty()) {
            DC12OWE = Short.parseShort(s);
        } else {
            DC12OWE = Short.MIN_VALUE;
        }
    }

    protected final void initDC12OWE2(String s) {
        if (!s.trim().isEmpty()) {
            DC12OWE2 = Short.parseShort(s);
        } else {
            DC12OWE2 = Short.MIN_VALUE;
        }
    }

    protected final void initDC12OWE3(String s) {
        if (!s.trim().isEmpty()) {
            DC12OWE3 = Short.parseShort(s);
        } else {
            DC12OWE3 = Short.MIN_VALUE;
        }
    }

    protected final void initDC12OWE4(String s) {
        if (!s.trim().isEmpty()) {
            DC12OWE4 = Short.parseShort(s);
        } else {
            DC12OWE4 = Short.MIN_VALUE;
        }
    }

    protected final void initDC12OWE5(String s) {
        if (!s.trim().isEmpty()) {
            DC12OWE5 = Short.parseShort(s);
        } else {
            DC12OWE5 = Short.MIN_VALUE;
        }
    }

    protected final void initDCNUM2(String s) {
        if (!s.trim().isEmpty()) {
            DCNUM2 = Byte.parseByte(s);
        } else {
            DCNUM2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNUM2_I(String s) {
        if (!s.trim().isEmpty()) {
            DCNUM2_I = Byte.parseByte(s);
        } else {
            DCNUM2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNUM2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCNUM2_IFLAG = Byte.parseByte(s);
        } else {
            DCNUM2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCOINV4(String s) {
        if (!s.trim().isEmpty()) {
            DCOINV4 = Short.parseShort(s);
        } else {
            DCOINV4 = Short.MIN_VALUE;
        }
    }

    protected final void initDCOINVB4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DCOINVB4 = false;
            } else {
                DCOINVB4 = true;
            }
        }
    }

    protected final void initDCOSHV10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DCOSHV10 = false;
            } else {
                DCOSHV10 = true;
            }
        }
    }

    protected final void initDCOSHV4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DCOSHV4 = false;
            } else {
                DCOSHV4 = true;
            }
        }
    }

    protected final void initDCOSHV5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DCOSHV5 = false;
            } else {
                DCOSHV5 = true;
            }
        }
    }

    protected final void initDCOSHV6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DCOSHV6 = false;
            } else {
                DCOSHV6 = true;
            }
        }
    }

    protected final void initDCOSHV7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DCOSHV7 = false;
            } else {
                DCOSHV7 = true;
            }
        }
    }

    protected final void initDCOSHV8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DCOSHV8 = false;
            } else {
                DCOSHV8 = true;
            }
        }
    }

    protected final void initDCOSHV9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DCOSHV9 = false;
            } else {
                DCOSHV9 = true;
            }
        }
    }

    protected final void initDCOSHVB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DCOSHVB3 = false;
            } else {
                DCOSHVB3 = true;
            }
        }
    }

    protected final void initDCVAL1(String s) {
        if (!s.trim().isEmpty()) {
            DCVAL1 = Double.parseDouble(s);
        } else {
            DCVAL1 = Double.NaN;
        }
    }

    protected final void initDCVAL2(String s) {
        if (!s.trim().isEmpty()) {
            DCVAL2 = Integer.parseInt(s);
        } else {
            DCVAL2 = Integer.MIN_VALUE;
        }
    }

    protected final void initDHBANY08(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DHBANY08 = false;
            } else {
                DHBANY08 = true;
            }
        }
    }

    protected final void initDHBANY08_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DHBANY08_I = false;
            } else {
                DHBANY08_I = true;
            }
        }
    }

    protected final void initDHBANY08_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DHBANY08_IFLAG = false;
            } else {
                DHBANY08_IFLAG = true;
            }
        }
    }

    protected final void initDHBANY09(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DHBANY09 = false;
            } else {
                DHBANY09 = true;
            }
        }
    }

    protected final void initDHBANY09_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DHBANY09_I = false;
            } else {
                DHBANY09_I = true;
            }
        }
    }

    protected final void initDHBANY09_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DHBANY09_IFLAG = false;
            } else {
                DHBANY09_IFLAG = true;
            }
        }
    }

    protected final void initDHBANY10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DHBANY10 = false;
            } else {
                DHBANY10 = true;
            }
        }
    }

    protected final void initDHBANY10_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DHBANY10_I = false;
            } else {
                DHBANY10_I = true;
            }
        }
    }

    protected final void initDHBANY10_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DHBANY10_IFLAG = false;
            } else {
                DHBANY10_IFLAG = true;
            }
        }
    }

    protected final void initDHBANY11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DHBANY11 = false;
            } else {
                DHBANY11 = true;
            }
        }
    }

    protected final void initDHBANY11_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DHBANY11_I = false;
            } else {
                DHBANY11_I = true;
            }
        }
    }

    protected final void initDHBANY11_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DHBANY11_IFLAG = false;
            } else {
                DHBANY11_IFLAG = true;
            }
        }
    }

    protected final void initDLIND(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLIND = false;
            } else {
                DLIND = true;
            }
        }
    }

    protected final void initDLNNM(String s) {
        if (!s.trim().isEmpty()) {
            DLNNM = Byte.parseByte(s);
        } else {
            DLNNM = Byte.MIN_VALUE;
        }
    }

    protected final void initDLNNM_I(String s) {
        if (!s.trim().isEmpty()) {
            DLNNM_I = Byte.parseByte(s);
        } else {
            DLNNM_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLNNM_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLNNM_IFLAG = Byte.parseByte(s);
        } else {
            DLNNM_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOLD1(String s) {
        if (!s.trim().isEmpty()) {
            DLOLD1 = Byte.parseByte(s);
        } else {
            DLOLD1 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOLD2(String s) {
        if (!s.trim().isEmpty()) {
            DLOLD2 = Byte.parseByte(s);
        } else {
            DLOLD2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOLD3(String s) {
        if (!s.trim().isEmpty()) {
            DLOLD3 = Byte.parseByte(s);
        } else {
            DLOLD3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOLD4(String s) {
        if (!s.trim().isEmpty()) {
            DLOLD4 = Byte.parseByte(s);
        } else {
            DLOLD4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOLD5(String s) {
        if (!s.trim().isEmpty()) {
            DLOLD5 = Byte.parseByte(s);
        } else {
            DLOLD5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLONM(String s) {
        if (!s.trim().isEmpty()) {
            DLONM = Byte.parseByte(s);
        } else {
            DLONM = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHY13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY13 = false;
            } else {
                DLWHY13 = true;
            }
        }
    }

    protected final void initDLWHY14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY14 = false;
            } else {
                DLWHY14 = true;
            }
        }
    }

    protected final void initDLWHY19(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY19 = false;
            } else {
                DLWHY19 = true;
            }
        }
    }

    protected final void initDLWHY20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY20 = false;
            } else {
                DLWHY20 = true;
            }
        }
    }

    protected final void initDLWHY21(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY21 = false;
            } else {
                DLWHY21 = true;
            }
        }
    }

    protected final void initDLWHY24(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY24 = false;
            } else {
                DLWHY24 = true;
            }
        }
    }

    protected final void initDLWHY25(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY25 = false;
            } else {
                DLWHY25 = true;
            }
        }
    }

    protected final void initDLWHY26(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY26 = false;
            } else {
                DLWHY26 = true;
            }
        }
    }

    protected final void initDLWHY27(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY27 = false;
            } else {
                DLWHY27 = true;
            }
        }
    }

    protected final void initDLWHY28(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY28 = false;
            } else {
                DLWHY28 = true;
            }
        }
    }

    protected final void initDLWHY30(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY30 = false;
            } else {
                DLWHY30 = true;
            }
        }
    }

    protected final void initDLWHY31(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY31 = false;
            } else {
                DLWHY31 = true;
            }
        }
    }

    protected final void initDLWHY32(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY32 = false;
            } else {
                DLWHY32 = true;
            }
        }
    }

    protected final void initDLWHY33(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY33 = false;
            } else {
                DLWHY33 = true;
            }
        }
    }

    protected final void initDLWHY34(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY34 = false;
            } else {
                DLWHY34 = true;
            }
        }
    }

    protected final void initDLWHY35(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY35 = false;
            } else {
                DLWHY35 = true;
            }
        }
    }

    protected final void initDLWHY6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY6 = false;
            } else {
                DLWHY6 = true;
            }
        }
    }

    protected final void initDLWHY7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY7 = false;
            } else {
                DLWHY7 = true;
            }
        }
    }

    protected final void initDS12BEH(String s) {
        if (!s.trim().isEmpty()) {
            DS12BEH = Byte.parseByte(s);
        } else {
            DS12BEH = Byte.MIN_VALUE;
        }
    }

    protected final void initDS12BEH2(String s) {
        if (!s.trim().isEmpty()) {
            DS12BEH2 = Byte.parseByte(s);
        } else {
            DS12BEH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDS12BEH3(String s) {
        if (!s.trim().isEmpty()) {
            DS12BEH3 = Byte.parseByte(s);
        } else {
            DS12BEH3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDS12BEH4(String s) {
        if (!s.trim().isEmpty()) {
            DS12BEH4 = Byte.parseByte(s);
        } else {
            DS12BEH4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDS12BEH5(String s) {
        if (!s.trim().isEmpty()) {
            DS12BEH5 = Byte.parseByte(s);
        } else {
            DS12BEH5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDS12OWE(String s) {
        if (!s.trim().isEmpty()) {
            DS12OWE = Byte.parseByte(s);
        } else {
            DS12OWE = Byte.MIN_VALUE;
        }
    }

    protected final void initDS12OWE2(String s) {
        if (!s.trim().isEmpty()) {
            DS12OWE2 = Short.parseShort(s);
        } else {
            DS12OWE2 = Short.MIN_VALUE;
        }
    }

    protected final void initDS12OWE3(String s) {
        if (!s.trim().isEmpty()) {
            DS12OWE3 = Byte.parseByte(s);
        } else {
            DS12OWE3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDS12OWE4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DS12OWE4 = false;
            } else {
                DS12OWE4 = true;
            }
        }
    }

    protected final void initDS12OWE5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DS12OWE5 = false;
            } else {
                DS12OWE5 = true;
            }
        }
    }

    protected final void initDSNUM2(String s) {
        if (!s.trim().isEmpty()) {
            DSNUM2 = Byte.parseByte(s);
        } else {
            DSNUM2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSNUM2_I(String s) {
        if (!s.trim().isEmpty()) {
            DSNUM2_I = Byte.parseByte(s);
        } else {
            DSNUM2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSNUM2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSNUM2_IFLAG = Byte.parseByte(s);
        } else {
            DSNUM2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLOWE(String s) {
        if (!s.trim().isEmpty()) {
            DTLOWE = Integer.parseInt(s);
        } else {
            DTLOWE = Integer.MIN_VALUE;
        }
    }

    protected final void initDTLOWE2(String s) {
        if (!s.trim().isEmpty()) {
            DTLOWE2 = Short.parseShort(s);
        } else {
            DTLOWE2 = Short.MIN_VALUE;
        }
    }

    protected final void initDTLOWE2_I(String s) {
        if (!s.trim().isEmpty()) {
            DTLOWE2_I = Short.parseShort(s);
        } else {
            DTLOWE2_I = Short.MIN_VALUE;
        }
    }

    protected final void initDTLOWE2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DTLOWE2_IFLAG = Byte.parseByte(s);
        } else {
            DTLOWE2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLOWE3(String s) {
        if (!s.trim().isEmpty()) {
            DTLOWE3 = Short.parseShort(s);
        } else {
            DTLOWE3 = Short.MIN_VALUE;
        }
    }

    protected final void initDTLOWE3_I(String s) {
        if (!s.trim().isEmpty()) {
            DTLOWE3_I = Short.parseShort(s);
        } else {
            DTLOWE3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDTLOWE3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DTLOWE3_IFLAG = Byte.parseByte(s);
        } else {
            DTLOWE3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLOWEB(String s) {
        if (!s.trim().isEmpty()) {
            DTLOWEB = Byte.parseByte(s);
        } else {
            DTLOWEB = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLOWEB2(String s) {
        if (!s.trim().isEmpty()) {
            DTLOWEB2 = Byte.parseByte(s);
        } else {
            DTLOWEB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLOWEB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -9) {
                DTLOWEB3 = false;
            } else {
                DTLOWEB3 = true;
            }
        }
    }

    protected final void initDTLOWE_I(String s) {
        if (!s.trim().isEmpty()) {
            DTLOWE_I = Integer.parseInt(s);
        } else {
            DTLOWE_I = Integer.MIN_VALUE;
        }
    }

    protected final void initDTLOWE_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DTLOWE_IFLAG = Byte.parseByte(s);
        } else {
            DTLOWE_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLTYPE(String s) {
        if (!s.trim().isEmpty()) {
            DTLTYPE = Byte.parseByte(s);
        } else {
            DTLTYPE = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLTYPE2(String s) {
        if (!s.trim().isEmpty()) {
            DTLTYPE2 = Byte.parseByte(s);
        } else {
            DTLTYPE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLTYPE2_I(String s) {
        if (!s.trim().isEmpty()) {
            DTLTYPE2_I = Byte.parseByte(s);
        } else {
            DTLTYPE2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLTYPE2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DTLTYPE2_IFLAG = Byte.parseByte(s);
        } else {
            DTLTYPE2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLTYPE3(String s) {
        if (!s.trim().isEmpty()) {
            DTLTYPE3 = Byte.parseByte(s);
        } else {
            DTLTYPE3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLTYPE3_I(String s) {
        if (!s.trim().isEmpty()) {
            DTLTYPE3_I = Byte.parseByte(s);
        } else {
            DTLTYPE3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLTYPE3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DTLTYPE3_IFLAG = Byte.parseByte(s);
        } else {
            DTLTYPE3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLTYPE_I(String s) {
        if (!s.trim().isEmpty()) {
            DTLTYPE_I = Byte.parseByte(s);
        } else {
            DTLTYPE_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLTYPE_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DTLTYPE_IFLAG = Byte.parseByte(s);
        } else {
            DTLTYPE_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDTTOWE(String s) {
        if (!s.trim().isEmpty()) {
            DTTOWE = Short.parseShort(s);
        } else {
            DTTOWE = Short.MIN_VALUE;
        }
    }

    protected final void initDTTOWE10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWE10 = false;
            } else {
                DTTOWE10 = true;
            }
        }
    }

    protected final void initDTTOWE11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWE11 = false;
            } else {
                DTTOWE11 = true;
            }
        }
    }

    protected final void initDTTOWE12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWE12 = false;
            } else {
                DTTOWE12 = true;
            }
        }
    }

    protected final void initDTTOWE13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWE13 = false;
            } else {
                DTTOWE13 = true;
            }
        }
    }

    protected final void initDTTOWE14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWE14 = false;
            } else {
                DTTOWE14 = true;
            }
        }
    }

    protected final void initDTTOWE15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWE15 = false;
            } else {
                DTTOWE15 = true;
            }
        }
    }

    protected final void initDTTOWE2(String s) {
        if (!s.trim().isEmpty()) {
            DTTOWE2 = Short.parseShort(s);
        } else {
            DTTOWE2 = Short.MIN_VALUE;
        }
    }

    protected final void initDTTOWE3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWE3 = false;
            } else {
                DTTOWE3 = true;
            }
        }
    }

    protected final void initDTTOWE4(String s) {
        if (!s.trim().isEmpty()) {
            DTTOWE4 = Short.parseShort(s);
        } else {
            DTTOWE4 = Short.MIN_VALUE;
        }
    }

    protected final void initDTTOWE5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWE5 = false;
            } else {
                DTTOWE5 = true;
            }
        }
    }

    protected final void initDTTOWE6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWE6 = false;
            } else {
                DTTOWE6 = true;
            }
        }
    }

    protected final void initDTTOWE7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWE7 = false;
            } else {
                DTTOWE7 = true;
            }
        }
    }

    protected final void initDTTOWE8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWE8 = false;
            } else {
                DTTOWE8 = true;
            }
        }
    }

    protected final void initDTTOWE9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWE9 = false;
            } else {
                DTTOWE9 = true;
            }
        }
    }

    protected final void initDTTOWEB(String s) {
        if (!s.trim().isEmpty()) {
            DTTOWEB = Byte.parseByte(s);
        } else {
            DTTOWEB = Byte.MIN_VALUE;
        }
    }

    protected final void initDTTOWEB10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB10 = false;
            } else {
                DTTOWEB10 = true;
            }
        }
    }

    protected final void initDTTOWEB11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB11 = false;
            } else {
                DTTOWEB11 = true;
            }
        }
    }

    protected final void initDTTOWEB12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB12 = false;
            } else {
                DTTOWEB12 = true;
            }
        }
    }

    protected final void initDTTOWEB13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB13 = false;
            } else {
                DTTOWEB13 = true;
            }
        }
    }

    protected final void initDTTOWEB14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB14 = false;
            } else {
                DTTOWEB14 = true;
            }
        }
    }

    protected final void initDTTOWEB15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB15 = false;
            } else {
                DTTOWEB15 = true;
            }
        }
    }

    protected final void initDTTOWEB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB2 = false;
            } else {
                DTTOWEB2 = true;
            }
        }
    }

    protected final void initDTTOWEB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB3 = false;
            } else {
                DTTOWEB3 = true;
            }
        }
    }

    protected final void initDTTOWEB4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB4 = false;
            } else {
                DTTOWEB4 = true;
            }
        }
    }

    protected final void initDTTOWEB5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB5 = false;
            } else {
                DTTOWEB5 = true;
            }
        }
    }

    protected final void initDTTOWEB6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB6 = false;
            } else {
                DTTOWEB6 = true;
            }
        }
    }

    protected final void initDTTOWEB7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB7 = false;
            } else {
                DTTOWEB7 = true;
            }
        }
    }

    protected final void initDTTOWEB8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB8 = false;
            } else {
                DTTOWEB8 = true;
            }
        }
    }

    protected final void initDTTOWEB9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB9 = false;
            } else {
                DTTOWEB9 = true;
            }
        }
    }

    protected final void initDVAGE4(String s) {
        if (!s.trim().isEmpty()) {
            DVAGE4 = Byte.parseByte(s);
        } else {
            DVAGE4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDVAGE5(String s) {
        if (!s.trim().isEmpty()) {
            DVAGE5 = Byte.parseByte(s);
        } else {
            DVAGE5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDVAGE6(String s) {
        if (!s.trim().isEmpty()) {
            DVAGE6 = Byte.parseByte(s);
        } else {
            DVAGE6 = Byte.MIN_VALUE;
        }
    }

    protected final void initDVAGE9(String s) {
        if (!s.trim().isEmpty()) {
            DVAGE9 = Byte.parseByte(s);
        } else {
            DVAGE9 = Byte.MIN_VALUE;
        }
    }

    protected final void initDVAGEW2BAND(String s) {
        if (!s.trim().isEmpty()) {
            DVAGEW2BAND = Byte.parseByte(s);
        } else {
            DVAGEW2BAND = Byte.MIN_VALUE;
        }
    }

    protected final void initDVCOINV4(String s) {
        if (!s.trim().isEmpty()) {
            DVCOINV4 = Short.parseShort(s);
        } else {
            DVCOINV4 = Short.MIN_VALUE;
        }
    }

    protected final void initDVDBINC4(String s) {
        if (!s.trim().isEmpty()) {
            DVDBINC4 = Integer.parseInt(s);
        } else {
            DVDBINC4 = Integer.MIN_VALUE;
        }
    }

    protected final void initDVDBINC5(String s) {
        if (!s.trim().isEmpty()) {
            DVDBINC5 = Short.parseShort(s);
        } else {
            DVDBINC5 = Short.MIN_VALUE;
        }
    }

    protected final void initDVDBINC6(String s) {
        if (!s.trim().isEmpty()) {
            DVDBINC6 = Short.parseShort(s);
        } else {
            DVDBINC6 = Short.MIN_VALUE;
        }
    }

    protected final void initDVDBLUMP4(String s) {
        if (!s.trim().isEmpty()) {
            DVDBLUMP4 = Double.parseDouble(s);
        } else {
            DVDBLUMP4 = Double.NaN;
        }
    }

    protected final void initDVDBLUMP5(String s) {
        if (!s.trim().isEmpty()) {
            DVDBLUMP5 = Double.parseDouble(s);
        } else {
            DVDBLUMP5 = Double.NaN;
        }
    }

    protected final void initDVDBLUMP6(String s) {
        if (!s.trim().isEmpty()) {
            DVDBLUMP6 = Integer.parseInt(s);
        } else {
            DVDBLUMP6 = Integer.MIN_VALUE;
        }
    }

    protected final void initDVDBOPEN2T(String s) {
        if (!s.trim().isEmpty()) {
            DVDBOPEN2T = Double.parseDouble(s);
        } else {
            DVDBOPEN2T = Double.NaN;
        }
    }

    protected final void initDVDBOPENT(String s) {
        if (!s.trim().isEmpty()) {
            DVDBOPENT = Double.parseDouble(s);
        } else {
            DVDBOPENT = Double.NaN;
        }
    }

    protected final void initDVNWFLN(String s) {
        if (!s.trim().isEmpty()) {
            DVNWFLN = Integer.parseInt(s);
        } else {
            DVNWFLN = Integer.MIN_VALUE;
        }
    }

    protected final void initDVNWILN(String s) {
        if (!s.trim().isEmpty()) {
            DVNWILN = Integer.parseInt(s);
        } else {
            DVNWILN = Integer.MIN_VALUE;
        }
    }

    protected final void initDVPENINC(String s) {
        if (!s.trim().isEmpty()) {
            DVPENINC = Double.parseDouble(s);
        } else {
            DVPENINC = Double.NaN;
        }
    }

    protected final void initDVPENINC2(String s) {
        if (!s.trim().isEmpty()) {
            DVPENINC2 = Double.parseDouble(s);
        } else {
            DVPENINC2 = Double.NaN;
        }
    }

    protected final void initDVPUBLPRIV(String s) {
        if (!s.trim().isEmpty()) {
            DVPUBLPRIV = Byte.parseByte(s);
        } else {
            DVPUBLPRIV = Byte.MIN_VALUE;
        }
    }

    protected final void initDVSAME(String s) {
        if (!s.trim().isEmpty()) {
            DVSAME = Byte.parseByte(s);
        } else {
            DVSAME = Byte.MIN_VALUE;
        }
    }

    protected final void initDVSPS(String s) {
        if (!s.trim().isEmpty()) {
            DVSPS = Double.parseDouble(s);
        } else {
            DVSPS = Double.NaN;
        }
    }

    protected final void initDVWID(String s) {
        if (!s.trim().isEmpty()) {
            DVWID = Double.parseDouble(s);
        } else {
            DVWID = Double.NaN;
        }
    }

    protected final void initECHLCAR(String s) {
        if (!s.trim().isEmpty()) {
            ECHLCAR = Byte.parseByte(s);
        } else {
            ECHLCAR = Byte.MIN_VALUE;
        }
    }

    protected final void initECHLSUP(String s) {
        if (!s.trim().isEmpty()) {
            ECHLSUP = Byte.parseByte(s);
        } else {
            ECHLSUP = Byte.MIN_VALUE;
        }
    }

    protected final void initEDAGE(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                EDAGE = false;
            } else {
                EDAGE = true;
            }
        }
    }

    protected final void initEFOOD(String s) {
        if (!s.trim().isEmpty()) {
            EFOOD = Byte.parseByte(s);
        } else {
            EFOOD = Byte.MIN_VALUE;
        }
    }

    protected final void initEFUEL(String s) {
        if (!s.trim().isEmpty()) {
            EFUEL = Byte.parseByte(s);
        } else {
            EFUEL = Byte.MIN_VALUE;
        }
    }

    protected final void initEINTRO(String s) {
        if (!s.trim().isEmpty()) {
            EINTRO = Byte.parseByte(s);
        } else {
            EINTRO = Byte.MIN_VALUE;
        }
    }

    protected final void initELARGE1(String s) {
        if (!s.trim().isEmpty()) {
            ELARGE1 = Byte.parseByte(s);
        } else {
            ELARGE1 = Byte.MIN_VALUE;
        }
    }

    protected final void initELARGE2(String s) {
        if (!s.trim().isEmpty()) {
            ELARGE2 = Byte.parseByte(s);
        } else {
            ELARGE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initELARGE3(String s) {
        if (!s.trim().isEmpty()) {
            ELARGE3 = Byte.parseByte(s);
        } else {
            ELARGE3 = Byte.MIN_VALUE;
        }
    }

    protected final void initELARGE4(String s) {
        if (!s.trim().isEmpty()) {
            ELARGE4 = Byte.parseByte(s);
        } else {
            ELARGE4 = Byte.MIN_VALUE;
        }
    }

    protected final void initELARGE5(String s) {
        if (!s.trim().isEmpty()) {
            ELARGE5 = Byte.parseByte(s);
        } else {
            ELARGE5 = Byte.MIN_VALUE;
        }
    }

    protected final void initELARGE6(String s) {
        if (!s.trim().isEmpty()) {
            ELARGE6 = Byte.parseByte(s);
        } else {
            ELARGE6 = Byte.MIN_VALUE;
        }
    }

    protected final void initELARGE7(String s) {
        if (!s.trim().isEmpty()) {
            ELARGE7 = Byte.parseByte(s);
        } else {
            ELARGE7 = Byte.MIN_VALUE;
        }
    }

    protected final void initELARGE8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ELARGE8 = false;
            } else {
                ELARGE8 = true;
            }
        }
    }

    protected final void initELGEAMB(String s) {
        if (!s.trim().isEmpty()) {
            ELGEAMB = Byte.parseByte(s);
        } else {
            ELGEAMB = Byte.MIN_VALUE;
        }
    }

    protected final void initEMEALS(String s) {
        if (!s.trim().isEmpty()) {
            EMEALS = Byte.parseByte(s);
        } else {
            EMEALS = Byte.MIN_VALUE;
        }
    }

    protected final void initEMPNO(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                EMPNO = false;
            } else {
                EMPNO = true;
            }
        }
    }

    protected final void initES2000(String s) {
        if (!s.trim().isEmpty()) {
            ES2000 = Byte.parseByte(s);
        } else {
            ES2000 = Byte.MIN_VALUE;
        }
    }

    protected final void initESATYPE(String s) {
        if (!s.trim().isEmpty()) {
            ESATYPE = Byte.parseByte(s);
        } else {
            ESATYPE = Byte.MIN_VALUE;
        }
    }

    protected final void initETRANS(String s) {
        if (!s.trim().isEmpty()) {
            ETRANS = Byte.parseByte(s);
        } else {
            ETRANS = Byte.MIN_VALUE;
        }
    }

    protected final void initEYE1(String s) {
        if (!s.trim().isEmpty()) {
            EYE1 = Byte.parseByte(s);
        } else {
            EYE1 = Byte.MIN_VALUE;
        }
    }

    protected final void initEYE2(String s) {
        if (!s.trim().isEmpty()) {
            EYE2 = Byte.parseByte(s);
        } else {
            EYE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initEYE3(String s) {
        if (!s.trim().isEmpty()) {
            EYE3 = Byte.parseByte(s);
        } else {
            EYE3 = Byte.MIN_VALUE;
        }
    }

    protected final void initEYE4(String s) {
        if (!s.trim().isEmpty()) {
            EYE4 = Byte.parseByte(s);
        } else {
            EYE4 = Byte.MIN_VALUE;
        }
    }

    protected final void initEYE5(String s) {
        if (!s.trim().isEmpty()) {
            EYE5 = Byte.parseByte(s);
        } else {
            EYE5 = Byte.MIN_VALUE;
        }
    }

    protected final void initEYE6(String s) {
        if (!s.trim().isEmpty()) {
            EYE6 = Byte.parseByte(s);
        } else {
            EYE6 = Byte.MIN_VALUE;
        }
    }

    protected final void initEYE7(String s) {
        if (!s.trim().isEmpty()) {
            EYE7 = Byte.parseByte(s);
        } else {
            EYE7 = Byte.MIN_VALUE;
        }
    }

    protected final void initEYE8(String s) {
        if (!s.trim().isEmpty()) {
            EYE8 = Byte.parseByte(s);
        } else {
            EYE8 = Byte.MIN_VALUE;
        }
    }

    protected final void initFBFAED(String s) {
        if (!s.trim().isEmpty()) {
            FBFAED = Byte.parseByte(s);
        } else {
            FBFAED = Byte.MIN_VALUE;
        }
    }

    protected final void initFBMOED(String s) {
        if (!s.trim().isEmpty()) {
            FBMOED = Byte.parseByte(s);
        } else {
            FBMOED = Byte.MIN_VALUE;
        }
    }

    protected final void initFBSIBS(String s) {
        if (!s.trim().isEmpty()) {
            FBSIBS = Byte.parseByte(s);
        } else {
            FBSIBS = Byte.MIN_VALUE;
        }
    }

    protected final void initFBSITU(String s) {
        if (!s.trim().isEmpty()) {
            FBSITU = Byte.parseByte(s);
        } else {
            FBSITU = Byte.MIN_VALUE;
        }
    }

    protected final void initFBTEN(String s) {
        if (!s.trim().isEmpty()) {
            FBTEN = Byte.parseByte(s);
        } else {
            FBTEN = Byte.MIN_VALUE;
        }
    }

    protected final void initFCISAWD(String s) {
        if (!s.trim().isEmpty()) {
            FCISAWD = Byte.parseByte(s);
        } else {
            FCISAWD = Byte.MIN_VALUE;
        }
    }

    protected final void initFCISCE(String s) {
        if (!s.trim().isEmpty()) {
            FCISCE = Byte.parseByte(s);
        } else {
            FCISCE = Byte.MIN_VALUE;
        }
    }

    protected final void initFCIWDAB(String s) {
        if (!s.trim().isEmpty()) {
            FCIWDAB = Byte.parseByte(s);
        } else {
            FCIWDAB = Byte.MIN_VALUE;
        }
    }

    protected final void initFCIWNUM(String s) {
        if (!s.trim().isEmpty()) {
            FCIWNUM = Byte.parseByte(s);
        } else {
            FCIWNUM = Byte.MIN_VALUE;
        }
    }

    protected final void initFNDCASH01(String s) {
        if (!s.trim().isEmpty()) {
            FNDCASH01 = Byte.parseByte(s);
        } else {
            FNDCASH01 = Byte.MIN_VALUE;
        }
    }

    protected final void initFNDCASH02(String s) {
        if (!s.trim().isEmpty()) {
            FNDCASH02 = Byte.parseByte(s);
        } else {
            FNDCASH02 = Byte.MIN_VALUE;
        }
    }

    protected final void initFNDCASH03(String s) {
        if (!s.trim().isEmpty()) {
            FNDCASH03 = Byte.parseByte(s);
        } else {
            FNDCASH03 = Byte.MIN_VALUE;
        }
    }

    protected final void initFNDCASH04(String s) {
        if (!s.trim().isEmpty()) {
            FNDCASH04 = Byte.parseByte(s);
        } else {
            FNDCASH04 = Byte.MIN_VALUE;
        }
    }

    protected final void initFNDCASH05(String s) {
        if (!s.trim().isEmpty()) {
            FNDCASH05 = Byte.parseByte(s);
        } else {
            FNDCASH05 = Byte.MIN_VALUE;
        }
    }

    protected final void initFNDCASH06(String s) {
        if (!s.trim().isEmpty()) {
            FNDCASH06 = Byte.parseByte(s);
        } else {
            FNDCASH06 = Byte.MIN_VALUE;
        }
    }

    protected final void initFNDCASH07(String s) {
        if (!s.trim().isEmpty()) {
            FNDCASH07 = Byte.parseByte(s);
        } else {
            FNDCASH07 = Byte.MIN_VALUE;
        }
    }

    protected final void initFNDCASH08(String s) {
        if (!s.trim().isEmpty()) {
            FNDCASH08 = Byte.parseByte(s);
        } else {
            FNDCASH08 = Byte.MIN_VALUE;
        }
    }

    protected final void initFNDCASH09(String s) {
        if (!s.trim().isEmpty()) {
            FNDCASH09 = Byte.parseByte(s);
        } else {
            FNDCASH09 = Byte.MIN_VALUE;
        }
    }

    protected final void initFNDCASH10(String s) {
        if (!s.trim().isEmpty()) {
            FNDCASH10 = Byte.parseByte(s);
        } else {
            FNDCASH10 = Byte.MIN_VALUE;
        }
    }

    protected final void initFNDCASH11(String s) {
        if (!s.trim().isEmpty()) {
            FNDCASH11 = Byte.parseByte(s);
        } else {
            FNDCASH11 = Byte.MIN_VALUE;
        }
    }

    protected final void initFNDCASH12(String s) {
        if (!s.trim().isEmpty()) {
            FNDCASH12 = Byte.parseByte(s);
        } else {
            FNDCASH12 = Byte.MIN_VALUE;
        }
    }

    protected final void initFNDCASH13(String s) {
        if (!s.trim().isEmpty()) {
            FNDCASH13 = Byte.parseByte(s);
        } else {
            FNDCASH13 = Byte.MIN_VALUE;
        }
    }

    protected final void initFNDCASH14(String s) {
        if (!s.trim().isEmpty()) {
            FNDCASH14 = Byte.parseByte(s);
        } else {
            FNDCASH14 = Byte.MIN_VALUE;
        }
    }

    protected final void initFNDCASH15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                FNDCASH15 = false;
            } else {
                FNDCASH15 = true;
            }
        }
    }

    protected final void initFNDCASH16(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                FNDCASH16 = false;
            } else {
                FNDCASH16 = true;
            }
        }
    }

    protected final void initFSAVAB(String s) {
        if (!s.trim().isEmpty()) {
            FSAVAB = Byte.parseByte(s);
        } else {
            FSAVAB = Byte.MIN_VALUE;
        }
    }

    protected final void initFSAVED(String s) {
        if (!s.trim().isEmpty()) {
            FSAVED = Byte.parseByte(s);
        } else {
            FSAVED = Byte.MIN_VALUE;
        }
    }

    protected final void initFSHADA(String s) {
        if (!s.trim().isEmpty()) {
            FSHADA = Integer.parseInt(s);
        } else {
            FSHADA = Integer.MIN_VALUE;
        }
    }

    protected final void initFSHADAB(String s) {
        if (!s.trim().isEmpty()) {
            FSHADAB = Byte.parseByte(s);
        } else {
            FSHADAB = Byte.MIN_VALUE;
        }
    }

    protected final void initFSHADD(String s) {
        if (!s.trim().isEmpty()) {
            FSHADD = Byte.parseByte(s);
        } else {
            FSHADD = Byte.MIN_VALUE;
        }
    }

    protected final void initFSTYPIN4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                FSTYPIN4 = false;
            } else {
                FSTYPIN4 = true;
            }
        }
    }

    protected final void initFSTYPIN5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                FSTYPIN5 = false;
            } else {
                FSTYPIN5 = true;
            }
        }
    }

    protected final void initFSTYPSH5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                FSTYPSH5 = false;
            } else {
                FSTYPSH5 = true;
            }
        }
    }

    protected final void initFTHECST(String s) {
        if (!s.trim().isEmpty()) {
            FTHECST = Byte.parseByte(s);
        } else {
            FTHECST = Byte.MIN_VALUE;
        }
    }

    protected final void initFTSTUD(String s) {
        if (!s.trim().isEmpty()) {
            FTSTUD = Byte.parseByte(s);
        } else {
            FTSTUD = Byte.MIN_VALUE;
        }
    }

    protected final void initFWITHD(String s) {
        if (!s.trim().isEmpty()) {
            FWITHD = Byte.parseByte(s);
        } else {
            FWITHD = Byte.MIN_VALUE;
        }
    }

    protected final void initGROSSPER(String s) {
        if (!s.trim().isEmpty()) {
            GROSSPER = Byte.parseByte(s);
        } else {
            GROSSPER = Byte.MIN_VALUE;
        }
    }

    protected final void initGRSAMK(String s) {
        if (!s.trim().isEmpty()) {
            GRSAMK = Byte.parseByte(s);
        } else {
            GRSAMK = Byte.MIN_VALUE;
        }
    }

    protected final void initGRSEESM(String s) {
        if (!s.trim().isEmpty()) {
            GRSEESM = Byte.parseByte(s);
        } else {
            GRSEESM = Byte.MIN_VALUE;
        }
    }

    protected final void initGRSEESW(String s) {
        if (!s.trim().isEmpty()) {
            GRSEESW = Byte.parseByte(s);
        } else {
            GRSEESW = Byte.MIN_VALUE;
        }
    }

    protected final void initGRSSEMJB(String s) {
        if (!s.trim().isEmpty()) {
            GRSSEMJB = Integer.parseInt(s);
        } else {
            GRSSEMJB = Integer.MIN_VALUE;
        }
    }

    protected final void initGSTDNW(String s) {
        if (!s.trim().isEmpty()) {
            GSTDNW = Byte.parseByte(s);
        } else {
            GSTDNW = Byte.MIN_VALUE;
        }
    }

    protected final void initHOUSBEN(String s) {
        if (!s.trim().isEmpty()) {
            HOUSBEN = Byte.parseByte(s);
        } else {
            HOUSBEN = Byte.MIN_VALUE;
        }
    }

    protected final void initIGDS13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IGDS13 = false;
            } else {
                IGDS13 = true;
            }
        }
    }

    protected final void initIGDS14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IGDS14 = false;
            } else {
                IGDS14 = true;
            }
        }
    }

    protected final void initIGDS17(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IGDS17 = false;
            } else {
                IGDS17 = true;
            }
        }
    }

    protected final void initIGDS18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IGDS18 = false;
            } else {
                IGDS18 = true;
            }
        }
    }

    protected final void initIGDS19(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IGDS19 = false;
            } else {
                IGDS19 = true;
            }
        }
    }

    protected final void initIGDS20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IGDS20 = false;
            } else {
                IGDS20 = true;
            }
        }
    }

    protected final void initIGDS21(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IGDS21 = false;
            } else {
                IGDS21 = true;
            }
        }
    }

    protected final void initIGDS7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IGDS7 = false;
            } else {
                IGDS7 = true;
            }
        }
    }

    protected final void initILNPBAM(String s) {
        if (!s.trim().isEmpty()) {
            ILNPBAM = Short.parseShort(s);
        } else {
            ILNPBAM = Short.MIN_VALUE;
        }
    }

    protected final void initILNPBK(String s) {
        if (!s.trim().isEmpty()) {
            ILNPBK = Byte.parseByte(s);
        } else {
            ILNPBK = Byte.MIN_VALUE;
        }
    }

    protected final void initILNUSE01(String s) {
        if (!s.trim().isEmpty()) {
            ILNUSE01 = Byte.parseByte(s);
        } else {
            ILNUSE01 = Byte.MIN_VALUE;
        }
    }

    protected final void initILNUSE02(String s) {
        if (!s.trim().isEmpty()) {
            ILNUSE02 = Byte.parseByte(s);
        } else {
            ILNUSE02 = Byte.MIN_VALUE;
        }
    }

    protected final void initILNUSE03(String s) {
        if (!s.trim().isEmpty()) {
            ILNUSE03 = Byte.parseByte(s);
        } else {
            ILNUSE03 = Byte.MIN_VALUE;
        }
    }

    protected final void initILNUSE04(String s) {
        if (!s.trim().isEmpty()) {
            ILNUSE04 = Byte.parseByte(s);
        } else {
            ILNUSE04 = Byte.MIN_VALUE;
        }
    }

    protected final void initILNUSE05(String s) {
        if (!s.trim().isEmpty()) {
            ILNUSE05 = Byte.parseByte(s);
        } else {
            ILNUSE05 = Byte.MIN_VALUE;
        }
    }

    protected final void initILNUSE06(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ILNUSE06 = false;
            } else {
                ILNUSE06 = true;
            }
        }
    }

    protected final void initILNUSE07(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ILNUSE07 = false;
            } else {
                ILNUSE07 = true;
            }
        }
    }

    protected final void initILNUSE08(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ILNUSE08 = false;
            } else {
                ILNUSE08 = true;
            }
        }
    }

    protected final void initILNUSE09(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ILNUSE09 = false;
            } else {
                ILNUSE09 = true;
            }
        }
    }

    protected final void initILNUSE10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ILNUSE10 = false;
            } else {
                ILNUSE10 = true;
            }
        }
    }

    protected final void initILNVAL(String s) {
        if (!s.trim().isEmpty()) {
            ILNVAL = Integer.parseInt(s);
        } else {
            ILNVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initILNVALB(String s) {
        if (!s.trim().isEmpty()) {
            ILNVALB = Byte.parseByte(s);
        } else {
            ILNVALB = Byte.MIN_VALUE;
        }
    }

    protected final void initILOAN(String s) {
        if (!s.trim().isEmpty()) {
            ILOAN = Byte.parseByte(s);
        } else {
            ILOAN = Byte.MIN_VALUE;
        }
    }

    protected final void initINCDROP(String s) {
        if (!s.trim().isEmpty()) {
            INCDROP = Byte.parseByte(s);
        } else {
            INCDROP = Byte.MIN_VALUE;
        }
    }

    protected final void initINDFREQ(String s) {
        if (!s.trim().isEmpty()) {
            INDFREQ = Byte.parseByte(s);
        } else {
            INDFREQ = Byte.MIN_VALUE;
        }
    }

    protected final void initISADULT(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                ISADULT = false;
            } else {
                ISADULT = true;
            }
        }
    }

    protected final void initIWAT6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IWAT6 = false;
            } else {
                IWAT6 = true;
            }
        }
    }

    protected final void initLONGIT_CALWGT(String s) {
        if (!s.trim().isEmpty()) {
            LONGIT_CALWGT = Double.parseDouble(s);
        } else {
            LONGIT_CALWGT = Double.NaN;
        }
    }

    protected final void initLVTDAY(String s) {
        if (!s.trim().isEmpty()) {
            LVTDAY = Byte.parseByte(s);
        } else {
            LVTDAY = Byte.MIN_VALUE;
        }
    }

    protected final void initMARSTA(String s) {
        if (!s.trim().isEmpty()) {
            MARSTA = Byte.parseByte(s);
        } else {
            MARSTA = Byte.MIN_VALUE;
        }
    }

    protected final void initMRECJB(String s) {
        if (!s.trim().isEmpty()) {
            MRECJB = Byte.parseByte(s);
        } else {
            MRECJB = Byte.MIN_VALUE;
        }
    }

    protected final void initMTHECST(String s) {
        if (!s.trim().isEmpty()) {
            MTHECST = Byte.parseByte(s);
        } else {
            MTHECST = Byte.MIN_VALUE;
        }
    }

    protected final void initNEWFCMX(String s) {
        if (!s.trim().isEmpty()) {
            NEWFCMX = Byte.parseByte(s);
        } else {
            NEWFCMX = Byte.MIN_VALUE;
        }
    }

    protected final void initNEWGIFT(String s) {
        if (!s.trim().isEmpty()) {
            NEWGIFT = Byte.parseByte(s);
        } else {
            NEWGIFT = Byte.MIN_VALUE;
        }
    }

    protected final void initNOFA(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                NOFA = false;
            } else {
                NOFA = true;
            }
        }
    }

    protected final void initNWFLNVAL1(String s) {
        if (!s.trim().isEmpty()) {
            NWFLNVAL1 = Integer.parseInt(s);
        } else {
            NWFLNVAL1 = Integer.MIN_VALUE;
        }
    }

    protected final void initNWFLNVAL2(String s) {
        if (!s.trim().isEmpty()) {
            NWFLNVAL2 = Integer.parseInt(s);
        } else {
            NWFLNVAL2 = Integer.MIN_VALUE;
        }
    }

    protected final void initNWFLNVAL3(String s) {
        if (!s.trim().isEmpty()) {
            NWFLNVAL3 = Short.parseShort(s);
        } else {
            NWFLNVAL3 = Short.MIN_VALUE;
        }
    }

    protected final void initNWHP(String s) {
        if (!s.trim().isEmpty()) {
            NWHP = Byte.parseByte(s);
        } else {
            NWHP = Byte.MIN_VALUE;
        }
    }

    protected final void initNWHPNO(String s) {
        if (!s.trim().isEmpty()) {
            NWHPNO = Byte.parseByte(s);
        } else {
            NWHPNO = Byte.MIN_VALUE;
        }
    }

    protected final void initNWILNVAL1(String s) {
        if (!s.trim().isEmpty()) {
            NWILNVAL1 = Integer.parseInt(s);
        } else {
            NWILNVAL1 = Integer.MIN_VALUE;
        }
    }

    protected final void initNWILNVAL2(String s) {
        if (!s.trim().isEmpty()) {
            NWILNVAL2 = Short.parseShort(s);
        } else {
            NWILNVAL2 = Short.MIN_VALUE;
        }
    }

    protected final void initNWILNVAL3(String s) {
        if (!s.trim().isEmpty()) {
            NWILNVAL3 = Short.parseShort(s);
        } else {
            NWILNVAL3 = Short.MIN_VALUE;
        }
    }

    protected final void initNWLN(String s) {
        if (!s.trim().isEmpty()) {
            NWLN = Byte.parseByte(s);
        } else {
            NWLN = Byte.MIN_VALUE;
        }
    }

    protected final void initNWLNNO(String s) {
        if (!s.trim().isEmpty()) {
            NWLNNO = Byte.parseByte(s);
        } else {
            NWLNNO = Byte.MIN_VALUE;
        }
    }

    protected final void initNWLNNO_I(String s) {
        if (!s.trim().isEmpty()) {
            NWLNNO_I = Byte.parseByte(s);
        } else {
            NWLNNO_I = Byte.MIN_VALUE;
        }
    }

    protected final void initNWLNNO_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            NWLNNO_IFLAG = Byte.parseByte(s);
        } else {
            NWLNNO_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initNWLN_I(String s) {
        if (!s.trim().isEmpty()) {
            NWLN_I = Byte.parseByte(s);
        } else {
            NWLN_I = Byte.MIN_VALUE;
        }
    }

    protected final void initNWLN_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            NWLN_IFLAG = Byte.parseByte(s);
        } else {
            NWLN_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPINC01(String s) {
        if (!s.trim().isEmpty()) {
            OEXPINC01 = Byte.parseByte(s);
        } else {
            OEXPINC01 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPINC02(String s) {
        if (!s.trim().isEmpty()) {
            OEXPINC02 = Byte.parseByte(s);
        } else {
            OEXPINC02 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPINC03(String s) {
        if (!s.trim().isEmpty()) {
            OEXPINC03 = Byte.parseByte(s);
        } else {
            OEXPINC03 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPINC04(String s) {
        if (!s.trim().isEmpty()) {
            OEXPINC04 = Byte.parseByte(s);
        } else {
            OEXPINC04 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPINC05(String s) {
        if (!s.trim().isEmpty()) {
            OEXPINC05 = Byte.parseByte(s);
        } else {
            OEXPINC05 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPINC06(String s) {
        if (!s.trim().isEmpty()) {
            OEXPINC06 = Byte.parseByte(s);
        } else {
            OEXPINC06 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPINC07(String s) {
        if (!s.trim().isEmpty()) {
            OEXPINC07 = Byte.parseByte(s);
        } else {
            OEXPINC07 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPINC08(String s) {
        if (!s.trim().isEmpty()) {
            OEXPINC08 = Byte.parseByte(s);
        } else {
            OEXPINC08 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPINC09(String s) {
        if (!s.trim().isEmpty()) {
            OEXPINC09 = Byte.parseByte(s);
        } else {
            OEXPINC09 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPINC10(String s) {
        if (!s.trim().isEmpty()) {
            OEXPINC10 = Byte.parseByte(s);
        } else {
            OEXPINC10 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPINC11(String s) {
        if (!s.trim().isEmpty()) {
            OEXPINC11 = Byte.parseByte(s);
        } else {
            OEXPINC11 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPINC12(String s) {
        if (!s.trim().isEmpty()) {
            OEXPINC12 = Byte.parseByte(s);
        } else {
            OEXPINC12 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPINC13(String s) {
        if (!s.trim().isEmpty()) {
            OEXPINC13 = Byte.parseByte(s);
        } else {
            OEXPINC13 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPINC14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OEXPINC14 = false;
            } else {
                OEXPINC14 = true;
            }
        }
    }

    protected final void initOEXPINC15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OEXPINC15 = false;
            } else {
                OEXPINC15 = true;
            }
        }
    }

    protected final void initOIMPRS1(String s) {
        if (!s.trim().isEmpty()) {
            OIMPRS1 = Byte.parseByte(s);
        } else {
            OIMPRS1 = Byte.MIN_VALUE;
        }
    }

    protected final void initOIMPRS2(String s) {
        if (!s.trim().isEmpty()) {
            OIMPRS2 = Byte.parseByte(s);
        } else {
            OIMPRS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initOIMPRS3(String s) {
        if (!s.trim().isEmpty()) {
            OIMPRS3 = Byte.parseByte(s);
        } else {
            OIMPRS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initOIMPRS4(String s) {
        if (!s.trim().isEmpty()) {
            OIMPRS4 = Byte.parseByte(s);
        } else {
            OIMPRS4 = Byte.MIN_VALUE;
        }
    }

    protected final void initOIMPRS5(String s) {
        if (!s.trim().isEmpty()) {
            OIMPRS5 = Byte.parseByte(s);
        } else {
            OIMPRS5 = Byte.MIN_VALUE;
        }
    }

    protected final void initOIMPRS6(String s) {
        if (!s.trim().isEmpty()) {
            OIMPRS6 = Byte.parseByte(s);
        } else {
            OIMPRS6 = Byte.MIN_VALUE;
        }
    }

    protected final void initOIMPRS7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OIMPRS7 = false;
            } else {
                OIMPRS7 = true;
            }
        }
    }

    protected final void initOIMPRS8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OIMPRS8 = false;
            } else {
                OIMPRS8 = true;
            }
        }
    }

    protected final void initOIMPRS9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OIMPRS9 = false;
            } else {
                OIMPRS9 = true;
            }
        }
    }

    protected final void initOINTROL(String s) {
        if (!s.trim().isEmpty()) {
            OINTROL = Byte.parseByte(s);
        } else {
            OINTROL = Byte.MIN_VALUE;
        }
    }

    protected final void initOINTROM(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OINTROM = false;
            } else {
                OINTROM = true;
            }
        }
    }

    protected final void initONOSAVE1(String s) {
        if (!s.trim().isEmpty()) {
            ONOSAVE1 = Byte.parseByte(s);
        } else {
            ONOSAVE1 = Byte.MIN_VALUE;
        }
    }

    protected final void initONOSAVE2(String s) {
        if (!s.trim().isEmpty()) {
            ONOSAVE2 = Byte.parseByte(s);
        } else {
            ONOSAVE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initONOSAVE3(String s) {
        if (!s.trim().isEmpty()) {
            ONOSAVE3 = Byte.parseByte(s);
        } else {
            ONOSAVE3 = Byte.MIN_VALUE;
        }
    }

    protected final void initONOSAVE4(String s) {
        if (!s.trim().isEmpty()) {
            ONOSAVE4 = Byte.parseByte(s);
        } else {
            ONOSAVE4 = Byte.MIN_VALUE;
        }
    }

    protected final void initONOSAVE5(String s) {
        if (!s.trim().isEmpty()) {
            ONOSAVE5 = Byte.parseByte(s);
        } else {
            ONOSAVE5 = Byte.MIN_VALUE;
        }
    }

    protected final void initONOSAVE6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ONOSAVE6 = false;
            } else {
                ONOSAVE6 = true;
            }
        }
    }

    protected final void initONOSAVE7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ONOSAVE7 = false;
            } else {
                ONOSAVE7 = true;
            }
        }
    }

    protected final void initONOSAVE8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ONOSAVE8 = false;
            } else {
                ONOSAVE8 = true;
            }
        }
    }

    protected final void initONOSAVE9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ONOSAVE9 = false;
            } else {
                ONOSAVE9 = true;
            }
        }
    }

    protected final void initOPENSAV(String s) {
        if (!s.trim().isEmpty()) {
            OPENSAV = Byte.parseByte(s);
        } else {
            OPENSAV = Byte.MIN_VALUE;
        }
    }

    protected final void initORGNSED(String s) {
        if (!s.trim().isEmpty()) {
            ORGNSED = Byte.parseByte(s);
        } else {
            ORGNSED = Byte.MIN_VALUE;
        }
    }

    protected final void initOSAFERE2(String s) {
        if (!s.trim().isEmpty()) {
            OSAFERE2 = Byte.parseByte(s);
        } else {
            OSAFERE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initOSAFERET(String s) {
        if (!s.trim().isEmpty()) {
            OSAFERET = Byte.parseByte(s);
        } else {
            OSAFERET = Byte.MIN_VALUE;
        }
    }

    protected final void initOSAV2Y(String s) {
        if (!s.trim().isEmpty()) {
            OSAV2Y = Byte.parseByte(s);
        } else {
            OSAV2Y = Byte.MIN_VALUE;
        }
    }

    protected final void initOSAVA(String s) {
        if (!s.trim().isEmpty()) {
            OSAVA = Byte.parseByte(s);
        } else {
            OSAVA = Byte.MIN_VALUE;
        }
    }

    protected final void initOSAVB(String s) {
        if (!s.trim().isEmpty()) {
            OSAVB = Byte.parseByte(s);
        } else {
            OSAVB = Byte.MIN_VALUE;
        }
    }

    protected final void initOSAVC(String s) {
        if (!s.trim().isEmpty()) {
            OSAVC = Byte.parseByte(s);
        } else {
            OSAVC = Byte.MIN_VALUE;
        }
    }

    protected final void initOSAVEXT(String s) {
        if (!s.trim().isEmpty()) {
            OSAVEXT = Byte.parseByte(s);
        } else {
            OSAVEXT = Byte.MIN_VALUE;
        }
    }

    protected final void initOSITCH(String s) {
        if (!s.trim().isEmpty()) {
            OSITCH = Byte.parseByte(s);
        } else {
            OSITCH = Byte.MIN_VALUE;
        }
    }

    protected final void initOTHASCH(String s) {
        if (!s.trim().isEmpty()) {
            OTHASCH = Byte.parseByte(s);
        } else {
            OTHASCH = Byte.MIN_VALUE;
        }
    }

    protected final void initOTHASVB(String s) {
        if (!s.trim().isEmpty()) {
            OTHASVB = Byte.parseByte(s);
        } else {
            OTHASVB = Byte.MIN_VALUE;
        }
    }

    protected final void initOTHASVL(String s) {
        if (!s.trim().isEmpty()) {
            OTHASVL = Integer.parseInt(s);
        } else {
            OTHASVL = Integer.MIN_VALUE;
        }
    }

    protected final void initOTRUST15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OTRUST15 = false;
            } else {
                OTRUST15 = true;
            }
        }
    }

    protected final void initOWAIT(String s) {
        if (!s.trim().isEmpty()) {
            OWAIT = Byte.parseByte(s);
        } else {
            OWAIT = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSAV01(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSAV01 = Byte.parseByte(s);
        } else {
            OWHYSAV01 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSAV02(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSAV02 = Byte.parseByte(s);
        } else {
            OWHYSAV02 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSAV03(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSAV03 = Byte.parseByte(s);
        } else {
            OWHYSAV03 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSAV04(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSAV04 = Byte.parseByte(s);
        } else {
            OWHYSAV04 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSAV05(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSAV05 = Byte.parseByte(s);
        } else {
            OWHYSAV05 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSAV06(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSAV06 = Byte.parseByte(s);
        } else {
            OWHYSAV06 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSAV07(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSAV07 = Byte.parseByte(s);
        } else {
            OWHYSAV07 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSAV08(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSAV08 = Byte.parseByte(s);
        } else {
            OWHYSAV08 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSAV09(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSAV09 = Byte.parseByte(s);
        } else {
            OWHYSAV09 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSAV10(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSAV10 = Byte.parseByte(s);
        } else {
            OWHYSAV10 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWRSRS01(String s) {
        if (!s.trim().isEmpty()) {
            OWRSRS01 = Byte.parseByte(s);
        } else {
            OWRSRS01 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWRSRS02(String s) {
        if (!s.trim().isEmpty()) {
            OWRSRS02 = Byte.parseByte(s);
        } else {
            OWRSRS02 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWRSRS03(String s) {
        if (!s.trim().isEmpty()) {
            OWRSRS03 = Byte.parseByte(s);
        } else {
            OWRSRS03 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWRSRS04(String s) {
        if (!s.trim().isEmpty()) {
            OWRSRS04 = Byte.parseByte(s);
        } else {
            OWRSRS04 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWRSRS05(String s) {
        if (!s.trim().isEmpty()) {
            OWRSRS05 = Byte.parseByte(s);
        } else {
            OWRSRS05 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWRSRS06(String s) {
        if (!s.trim().isEmpty()) {
            OWRSRS06 = Byte.parseByte(s);
        } else {
            OWRSRS06 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWRSRS07(String s) {
        if (!s.trim().isEmpty()) {
            OWRSRS07 = Byte.parseByte(s);
        } else {
            OWRSRS07 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWRSRS08(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OWRSRS08 = false;
            } else {
                OWRSRS08 = true;
            }
        }
    }

    protected final void initOWRSRS09(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OWRSRS09 = false;
            } else {
                OWRSRS09 = true;
            }
        }
    }

    protected final void initOWRSRS10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OWRSRS10 = false;
            } else {
                OWRSRS10 = true;
            }
        }
    }

    protected final void initPADDFUT(String s) {
        if (!s.trim().isEmpty()) {
            PADDFUT = Byte.parseByte(s);
        } else {
            PADDFUT = Byte.MIN_VALUE;
        }
    }

    protected final void initPADDFUT2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PADDFUT2 = false;
            } else {
                PADDFUT2 = true;
            }
        }
    }

    protected final void initPAGESTP(String s) {
        if (!s.trim().isEmpty()) {
            PAGESTP = Byte.parseByte(s);
        } else {
            PAGESTP = Byte.MIN_VALUE;
        }
    }

    protected final void initPANYO(String s) {
        if (!s.trim().isEmpty()) {
            PANYO = Byte.parseByte(s);
        } else {
            PANYO = Byte.MIN_VALUE;
        }
    }

    protected final void initPANYO_I(String s) {
        if (!s.trim().isEmpty()) {
            PANYO_I = Byte.parseByte(s);
        } else {
            PANYO_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPANYO_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PANYO_IFLAG = false;
            } else {
                PANYO_IFLAG = true;
            }
        }
    }

    protected final void initPASTMN(String s) {
        if (!s.trim().isEmpty()) {
            PASTMN = Byte.parseByte(s);
        } else {
            PASTMN = Byte.MIN_VALUE;
        }
    }

    protected final void initPASTMN2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PASTMN2 = false;
            } else {
                PASTMN2 = true;
            }
        }
    }

    protected final void initPASTYR(String s) {
        if (!s.trim().isEmpty()) {
            PASTYR = Short.parseShort(s);
        } else {
            PASTYR = Short.MIN_VALUE;
        }
    }

    protected final void initPASTYR2(String s) {
        if (!s.trim().isEmpty()) {
            PASTYR2 = Short.parseShort(s);
        } else {
            PASTYR2 = Short.MIN_VALUE;
        }
    }

    protected final void initPAVCAM(String s) {
        if (!s.trim().isEmpty()) {
            PAVCAM = Short.parseShort(s);
        } else {
            PAVCAM = Short.MIN_VALUE;
        }
    }

    protected final void initPAVCAM2(String s) {
        if (!s.trim().isEmpty()) {
            PAVCAM2 = Short.parseShort(s);
        } else {
            PAVCAM2 = Short.MIN_VALUE;
        }
    }

    protected final void initPAVCFG(String s) {
        if (!s.trim().isEmpty()) {
            PAVCFG = Byte.parseByte(s);
        } else {
            PAVCFG = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCFG2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PAVCFG2 = false;
            } else {
                PAVCFG2 = true;
            }
        }
    }

    protected final void initPAVCFR(String s) {
        if (!s.trim().isEmpty()) {
            PAVCFR = Double.parseDouble(s);
        } else {
            PAVCFR = Double.NaN;
        }
    }

    protected final void initPAVCFR2(String s) {
        if (!s.trim().isEmpty()) {
            PAVCFR2 = Byte.parseByte(s);
        } else {
            PAVCFR2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCH(String s) {
        if (!s.trim().isEmpty()) {
            PAVCH = Byte.parseByte(s);
        } else {
            PAVCH = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCH2(String s) {
        if (!s.trim().isEmpty()) {
            PAVCH2 = Byte.parseByte(s);
        } else {
            PAVCH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCIN(String s) {
        if (!s.trim().isEmpty()) {
            PAVCIN = Byte.parseByte(s);
        } else {
            PAVCIN = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCIN2(String s) {
        if (!s.trim().isEmpty()) {
            PAVCIN2 = Byte.parseByte(s);
        } else {
            PAVCIN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCPR(String s) {
        if (!s.trim().isEmpty()) {
            PAVCPR = Byte.parseByte(s);
        } else {
            PAVCPR = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCPR2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PAVCPR2 = false;
            } else {
                PAVCPR2 = true;
            }
        }
    }

    protected final void initPAVCUV(String s) {
        if (!s.trim().isEmpty()) {
            PAVCUV = Integer.parseInt(s);
        } else {
            PAVCUV = Integer.MIN_VALUE;
        }
    }

    protected final void initPAVCUV2(String s) {
        if (!s.trim().isEmpty()) {
            PAVCUV2 = Integer.parseInt(s);
        } else {
            PAVCUV2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPAVCUV2_I(String s) {
        if (!s.trim().isEmpty()) {
            PAVCUV2_I = Integer.parseInt(s);
        } else {
            PAVCUV2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initPAVCUV2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PAVCUV2_IFLAG = false;
            } else {
                PAVCUV2_IFLAG = true;
            }
        }
    }

    protected final void initPAVCUV_I(String s) {
        if (!s.trim().isEmpty()) {
            PAVCUV_I = Integer.parseInt(s);
        } else {
            PAVCUV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initPAVCUV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PAVCUV_IFLAG = false;
            } else {
                PAVCUV_IFLAG = true;
            }
        }
    }

    protected final void initPAVCVB(String s) {
        if (!s.trim().isEmpty()) {
            PAVCVB = Byte.parseByte(s);
        } else {
            PAVCVB = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCVB2(String s) {
        if (!s.trim().isEmpty()) {
            PAVCVB2 = Byte.parseByte(s);
        } else {
            PAVCVB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVDOC(String s) {
        if (!s.trim().isEmpty()) {
            PAVDOC = Byte.parseByte(s);
        } else {
            PAVDOC = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVDOC2(String s) {
        if (!s.trim().isEmpty()) {
            PAVDOC2 = Byte.parseByte(s);
        } else {
            PAVDOC2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPAYINC7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PAYINC7 = false;
            } else {
                PAYINC7 = true;
            }
        }
    }

    protected final void initPBDOCS(String s) {
        if (!s.trim().isEmpty()) {
            PBDOCS = Byte.parseByte(s);
        } else {
            PBDOCS = Byte.MIN_VALUE;
        }
    }

    protected final void initPBDOCS2(String s) {
        if (!s.trim().isEmpty()) {
            PBDOCS2 = Byte.parseByte(s);
        } else {
            PBDOCS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPBFRAC(String s) {
        if (!s.trim().isEmpty()) {
            PBFRAC = Byte.parseByte(s);
        } else {
            PBFRAC = Byte.MIN_VALUE;
        }
    }

    protected final void initPBFRAC2(String s) {
        if (!s.trim().isEmpty()) {
            PBFRAC2 = Byte.parseByte(s);
        } else {
            PBFRAC2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPBFRAC2_I(String s) {
        if (!s.trim().isEmpty()) {
            PBFRAC2_I = Byte.parseByte(s);
        } else {
            PBFRAC2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPBFRAC2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PBFRAC2_IFLAG = false;
            } else {
                PBFRAC2_IFLAG = true;
            }
        }
    }

    protected final void initPBFRAC_I(String s) {
        if (!s.trim().isEmpty()) {
            PBFRAC_I = Byte.parseByte(s);
        } else {
            PBFRAC_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPBFRAC_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PBFRAC_IFLAG = false;
            } else {
                PBFRAC_IFLAG = true;
            }
        }
    }

    protected final void initPBINCA(String s) {
        if (!s.trim().isEmpty()) {
            PBINCA = Integer.parseInt(s);
        } else {
            PBINCA = Integer.MIN_VALUE;
        }
    }

    protected final void initPBINCA2(String s) {
        if (!s.trim().isEmpty()) {
            PBINCA2 = Integer.parseInt(s);
        } else {
            PBINCA2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPBINCF(String s) {
        if (!s.trim().isEmpty()) {
            PBINCF = Double.parseDouble(s);
        } else {
            PBINCF = Double.NaN;
        }
    }

    protected final void initPBINCF2(String s) {
        if (!s.trim().isEmpty()) {
            PBINCF2 = Double.parseDouble(s);
        } else {
            PBINCF2 = Double.NaN;
        }
    }

    protected final void initPBINCH(String s) {
        if (!s.trim().isEmpty()) {
            PBINCH = Byte.parseByte(s);
        } else {
            PBINCH = Byte.MIN_VALUE;
        }
    }

    protected final void initPBINCH2(String s) {
        if (!s.trim().isEmpty()) {
            PBINCH2 = Byte.parseByte(s);
        } else {
            PBINCH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPBLMVB(String s) {
        if (!s.trim().isEmpty()) {
            PBLMVB = Byte.parseByte(s);
        } else {
            PBLMVB = Byte.MIN_VALUE;
        }
    }

    protected final void initPBLMVB2(String s) {
        if (!s.trim().isEmpty()) {
            PBLMVB2 = Byte.parseByte(s);
        } else {
            PBLMVB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPBLUMV(String s) {
        if (!s.trim().isEmpty()) {
            PBLUMV = Integer.parseInt(s);
        } else {
            PBLUMV = Integer.MIN_VALUE;
        }
    }

    protected final void initPBLUMV2(String s) {
        if (!s.trim().isEmpty()) {
            PBLUMV2 = Integer.parseInt(s);
        } else {
            PBLUMV2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPBLUMV2_I(String s) {
        if (!s.trim().isEmpty()) {
            PBLUMV2_I = Integer.parseInt(s);
        } else {
            PBLUMV2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initPBLUMV2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PBLUMV2_IFLAG = false;
            } else {
                PBLUMV2_IFLAG = true;
            }
        }
    }

    protected final void initPBLUMV_I(String s) {
        if (!s.trim().isEmpty()) {
            PBLUMV_I = Integer.parseInt(s);
        } else {
            PBLUMV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initPBLUMV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PBLUMV_IFLAG = false;
            } else {
                PBLUMV_IFLAG = true;
            }
        }
    }

    protected final void initPBQUAL(String s) {
        if (!s.trim().isEmpty()) {
            PBQUAL = Byte.parseByte(s);
        } else {
            PBQUAL = Byte.MIN_VALUE;
        }
    }

    protected final void initPBQUAL2(String s) {
        if (!s.trim().isEmpty()) {
            PBQUAL2 = Byte.parseByte(s);
        } else {
            PBQUAL2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPBQUAL2_I(String s) {
        if (!s.trim().isEmpty()) {
            PBQUAL2_I = Byte.parseByte(s);
        } else {
            PBQUAL2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPBQUAL2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PBQUAL2_IFLAG = false;
            } else {
                PBQUAL2_IFLAG = true;
            }
        }
    }

    protected final void initPBQUAL_I(String s) {
        if (!s.trim().isEmpty()) {
            PBQUAL_I = Byte.parseByte(s);
        } else {
            PBQUAL_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPBQUAL_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PBQUAL_IFLAG = false;
            } else {
                PBQUAL_IFLAG = true;
            }
        }
    }

    protected final void initPBSTMN(String s) {
        if (!s.trim().isEmpty()) {
            PBSTMN = Byte.parseByte(s);
        } else {
            PBSTMN = Byte.MIN_VALUE;
        }
    }

    protected final void initPBSTMN2(String s) {
        if (!s.trim().isEmpty()) {
            PBSTMN2 = Byte.parseByte(s);
        } else {
            PBSTMN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPBSTYR(String s) {
        if (!s.trim().isEmpty()) {
            PBSTYR = Short.parseShort(s);
        } else {
            PBSTYR = Short.MIN_VALUE;
        }
    }

    protected final void initPBSTYR2(String s) {
        if (!s.trim().isEmpty()) {
            PBSTYR2 = Short.parseShort(s);
        } else {
            PBSTYR2 = Short.MIN_VALUE;
        }
    }

    protected final void initPCCFST1(String s) {
        if (!s.trim().isEmpty()) {
            PCCFST1 = Byte.parseByte(s);
        } else {
            PCCFST1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPCCFST1_I(String s) {
        if (!s.trim().isEmpty()) {
            PCCFST1_I = Byte.parseByte(s);
        } else {
            PCCFST1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPCCFST1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PCCFST1_IFLAG = false;
            } else {
                PCCFST1_IFLAG = true;
            }
        }
    }

    protected final void initPCCFST2(String s) {
        if (!s.trim().isEmpty()) {
            PCCFST2 = Byte.parseByte(s);
        } else {
            PCCFST2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPCCFST2_I(String s) {
        if (!s.trim().isEmpty()) {
            PCCFST2_I = Byte.parseByte(s);
        } else {
            PCCFST2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPCCFST2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PCCFST2_IFLAG = false;
            } else {
                PCCFST2_IFLAG = true;
            }
        }
    }

    protected final void initPCCFST3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PCCFST3 = false;
            } else {
                PCCFST3 = true;
            }
        }
    }

    protected final void initPCCFST3_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PCCFST3_I = false;
            } else {
                PCCFST3_I = true;
            }
        }
    }

    protected final void initPCCFST3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PCCFST3_IFLAG = false;
            } else {
                PCCFST3_IFLAG = true;
            }
        }
    }

    protected final void initPCDOCS(String s) {
        if (!s.trim().isEmpty()) {
            PCDOCS = Byte.parseByte(s);
        } else {
            PCDOCS = Byte.MIN_VALUE;
        }
    }

    protected final void initPCDOCS2(String s) {
        if (!s.trim().isEmpty()) {
            PCDOCS2 = Byte.parseByte(s);
        } else {
            PCDOCS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPCNEW(String s) {
        if (!s.trim().isEmpty()) {
            PCNEW = Byte.parseByte(s);
        } else {
            PCNEW = Byte.MIN_VALUE;
        }
    }

    protected final void initPCNUM(String s) {
        if (!s.trim().isEmpty()) {
            PCNUM = Byte.parseByte(s);
        } else {
            PCNUM = Byte.MIN_VALUE;
        }
    }

    protected final void initPCONT(String s) {
        if (!s.trim().isEmpty()) {
            PCONT = Byte.parseByte(s);
        } else {
            PCONT = Byte.MIN_VALUE;
        }
    }

    protected final void initPCONT_I(String s) {
        if (!s.trim().isEmpty()) {
            PCONT_I = Byte.parseByte(s);
        } else {
            PCONT_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPCONT_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PCONT_IFLAG = false;
            } else {
                PCONT_IFLAG = true;
            }
        }
    }

    protected final void initPCSTMN(String s) {
        if (!s.trim().isEmpty()) {
            PCSTMN = Byte.parseByte(s);
        } else {
            PCSTMN = Byte.MIN_VALUE;
        }
    }

    protected final void initPCSTMN2(String s) {
        if (!s.trim().isEmpty()) {
            PCSTMN2 = Byte.parseByte(s);
        } else {
            PCSTMN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPCSTYR(String s) {
        if (!s.trim().isEmpty()) {
            PCSTYR = Short.parseShort(s);
        } else {
            PCSTYR = Short.MIN_VALUE;
        }
    }

    protected final void initPCSTYR2(String s) {
        if (!s.trim().isEmpty()) {
            PCSTYR2 = Short.parseShort(s);
        } else {
            PCSTYR2 = Short.MIN_VALUE;
        }
    }

    protected final void initPDBCAL(String s) {
        if (!s.trim().isEmpty()) {
            PDBCAL = Byte.parseByte(s);
        } else {
            PDBCAL = Byte.MIN_VALUE;
        }
    }

    protected final void initPDBCAL2(String s) {
        if (!s.trim().isEmpty()) {
            PDBCAL2 = Byte.parseByte(s);
        } else {
            PDBCAL2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPDCVAL(String s) {
        if (!s.trim().isEmpty()) {
            PDCVAL = Integer.parseInt(s);
        } else {
            PDCVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initPDCVAL2(String s) {
        if (!s.trim().isEmpty()) {
            PDCVAL2 = Integer.parseInt(s);
        } else {
            PDCVAL2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPDCVAL2_I(String s) {
        if (!s.trim().isEmpty()) {
            PDCVAL2_I = Integer.parseInt(s);
        } else {
            PDCVAL2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initPDCVAL2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PDCVAL2_IFLAG = false;
            } else {
                PDCVAL2_IFLAG = true;
            }
        }
    }

    protected final void initPDCVAL_I(String s) {
        if (!s.trim().isEmpty()) {
            PDCVAL_I = Double.parseDouble(s);
        } else {
            PDCVAL_I = Double.NaN;
        }
    }

    protected final void initPDCVAL_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PDCVAL_IFLAG = false;
            } else {
                PDCVAL_IFLAG = true;
            }
        }
    }

    protected final void initPDCVB(String s) {
        if (!s.trim().isEmpty()) {
            PDCVB = Byte.parseByte(s);
        } else {
            PDCVB = Byte.MIN_VALUE;
        }
    }

    protected final void initPDCVB2(String s) {
        if (!s.trim().isEmpty()) {
            PDCVB2 = Byte.parseByte(s);
        } else {
            PDCVB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPERMJB(String s) {
        if (!s.trim().isEmpty()) {
            PERMJB = Byte.parseByte(s);
        } else {
            PERMJB = Byte.MIN_VALUE;
        }
    }

    protected final void initPERNOWK(String s) {
        if (!s.trim().isEmpty()) {
            PERNOWK = Byte.parseByte(s);
        } else {
            PERNOWK = Byte.MIN_VALUE;
        }
    }

    protected final void initPERSONW2(String s) {
        if (!s.trim().isEmpty()) {
            PERSONW2 = Byte.parseByte(s);
        } else {
            PERSONW2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPESAME(String s) {
        if (!s.trim().isEmpty()) {
            PESAME = Byte.parseByte(s);
        } else {
            PESAME = Byte.MIN_VALUE;
        }
    }

    protected final void initPESAME_I(String s) {
        if (!s.trim().isEmpty()) {
            PESAME_I = Byte.parseByte(s);
        } else {
            PESAME_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPESAME_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PESAME_IFLAG = Byte.parseByte(s);
        } else {
            PESAME_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPEWYNO05(String s) {
        if (!s.trim().isEmpty()) {
            PEWYNO05 = Byte.parseByte(s);
        } else {
            PEWYNO05 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFACCU3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFACCU3 = false;
            } else {
                PFACCU3 = true;
            }
        }
    }

    protected final void initPFACCU5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFACCU5 = false;
            } else {
                PFACCU5 = true;
            }
        }
    }

    protected final void initPFACCU6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFACCU6 = false;
            } else {
                PFACCU6 = true;
            }
        }
    }

    protected final void initPFANEH(String s) {
        if (!s.trim().isEmpty()) {
            PFANEH = Byte.parseByte(s);
        } else {
            PFANEH = Byte.MIN_VALUE;
        }
    }

    protected final void initPFANEH2(String s) {
        if (!s.trim().isEmpty()) {
            PFANEH2 = Byte.parseByte(s);
        } else {
            PFANEH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFANEH3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANEH3 = false;
            } else {
                PFANEH3 = true;
            }
        }
    }

    protected final void initPFANEXM(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -9) {
                PFANEXM = false;
            } else {
                PFANEXM = true;
            }
        }
    }

    protected final void initPFANEXY(String s) {
        if (!s.trim().isEmpty()) {
            PFANEXY = Short.parseShort(s);
        } else {
            PFANEXY = Short.MIN_VALUE;
        }
    }

    protected final void initPFANGA(String s) {
        if (!s.trim().isEmpty()) {
            PFANGA = Byte.parseByte(s);
        } else {
            PFANGA = Byte.MIN_VALUE;
        }
    }

    protected final void initPFANGA2(String s) {
        if (!s.trim().isEmpty()) {
            PFANGA2 = Byte.parseByte(s);
        } else {
            PFANGA2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFANGA3(String s) {
        if (!s.trim().isEmpty()) {
            PFANGA3 = Byte.parseByte(s);
        } else {
            PFANGA3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFANIF(String s) {
        if (!s.trim().isEmpty()) {
            PFANIF = Byte.parseByte(s);
        } else {
            PFANIF = Byte.MIN_VALUE;
        }
    }

    protected final void initPFANIF2(String s) {
        if (!s.trim().isEmpty()) {
            PFANIF2 = Byte.parseByte(s);
        } else {
            PFANIF2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFANIF3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANIF3 = false;
            } else {
                PFANIF3 = true;
            }
        }
    }

    protected final void initPFANJT(String s) {
        if (!s.trim().isEmpty()) {
            PFANJT = Byte.parseByte(s);
        } else {
            PFANJT = Byte.MIN_VALUE;
        }
    }

    protected final void initPFANJT2(String s) {
        if (!s.trim().isEmpty()) {
            PFANJT2 = Byte.parseByte(s);
        } else {
            PFANJT2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFANJT3(String s) {
        if (!s.trim().isEmpty()) {
            PFANJT3 = Byte.parseByte(s);
        } else {
            PFANJT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFANLM(String s) {
        if (!s.trim().isEmpty()) {
            PFANLM = Byte.parseByte(s);
        } else {
            PFANLM = Byte.MIN_VALUE;
        }
    }

    protected final void initPFANLM2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANLM2 = false;
            } else {
                PFANLM2 = true;
            }
        }
    }

    protected final void initPFANN1(String s) {
        if (!s.trim().isEmpty()) {
            PFANN1 = Byte.parseByte(s);
        } else {
            PFANN1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFANN11(String s) {
        if (!s.trim().isEmpty()) {
            PFANN11 = Byte.parseByte(s);
        } else {
            PFANN11 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFANN12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN12 = false;
            } else {
                PFANN12 = true;
            }
        }
    }

    protected final void initPFANN2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN2 = false;
            } else {
                PFANN2 = true;
            }
        }
    }

    protected final void initPFANN3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN3 = false;
            } else {
                PFANN3 = true;
            }
        }
    }

    protected final void initPFANN6(String s) {
        if (!s.trim().isEmpty()) {
            PFANN6 = Byte.parseByte(s);
        } else {
            PFANN6 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFANN7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN7 = false;
            } else {
                PFANN7 = true;
            }
        }
    }

    protected final void initPFANVB(String s) {
        if (!s.trim().isEmpty()) {
            PFANVB = Byte.parseByte(s);
        } else {
            PFANVB = Byte.MIN_VALUE;
        }
    }

    protected final void initPFANVI(String s) {
        if (!s.trim().isEmpty()) {
            PFANVI = Short.parseShort(s);
        } else {
            PFANVI = Short.MIN_VALUE;
        }
    }

    protected final void initPFANVI2(String s) {
        if (!s.trim().isEmpty()) {
            PFANVI2 = Short.parseShort(s);
        } else {
            PFANVI2 = Short.MIN_VALUE;
        }
    }

    protected final void initPFANVI3(String s) {
        if (!s.trim().isEmpty()) {
            PFANVI3 = Short.parseShort(s);
        } else {
            PFANVI3 = Short.MIN_VALUE;
        }
    }

    protected final void initPFBEG(String s) {
        if (!s.trim().isEmpty()) {
            PFBEG = Short.parseShort(s);
        } else {
            PFBEG = Short.MIN_VALUE;
        }
    }

    protected final void initPFBEG2(String s) {
        if (!s.trim().isEmpty()) {
            PFBEG2 = Short.parseShort(s);
        } else {
            PFBEG2 = Short.MIN_VALUE;
        }
    }

    protected final void initPFBEG3(String s) {
        if (!s.trim().isEmpty()) {
            PFBEG3 = Short.parseShort(s);
        } else {
            PFBEG3 = Short.MIN_VALUE;
        }
    }

    protected final void initPFBEG4(String s) {
        if (!s.trim().isEmpty()) {
            PFBEG4 = Short.parseShort(s);
        } else {
            PFBEG4 = Short.MIN_VALUE;
        }
    }

    protected final void initPFBEG5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFBEG5 = false;
            } else {
                PFBEG5 = true;
            }
        }
    }

    protected final void initPFBEG6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFBEG6 = false;
            } else {
                PFBEG6 = true;
            }
        }
    }

    protected final void initPFCASH(String s) {
        if (!s.trim().isEmpty()) {
            PFCASH = Byte.parseByte(s);
        } else {
            PFCASH = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCASH2(String s) {
        if (!s.trim().isEmpty()) {
            PFCASH2 = Byte.parseByte(s);
        } else {
            PFCASH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCASH2_I(String s) {
        if (!s.trim().isEmpty()) {
            PFCASH2_I = Byte.parseByte(s);
        } else {
            PFCASH2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCASH2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFCASH2_IFLAG = false;
            } else {
                PFCASH2_IFLAG = true;
            }
        }
    }

    protected final void initPFCASH3(String s) {
        if (!s.trim().isEmpty()) {
            PFCASH3 = Byte.parseByte(s);
        } else {
            PFCASH3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCASH3_I(String s) {
        if (!s.trim().isEmpty()) {
            PFCASH3_I = Byte.parseByte(s);
        } else {
            PFCASH3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCASH3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFCASH3_IFLAG = false;
            } else {
                PFCASH3_IFLAG = true;
            }
        }
    }

    protected final void initPFCASH4(String s) {
        if (!s.trim().isEmpty()) {
            PFCASH4 = Byte.parseByte(s);
        } else {
            PFCASH4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCASH4_I(String s) {
        if (!s.trim().isEmpty()) {
            PFCASH4_I = Byte.parseByte(s);
        } else {
            PFCASH4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCASH4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFCASH4_IFLAG = false;
            } else {
                PFCASH4_IFLAG = true;
            }
        }
    }

    protected final void initPFCASH_I(String s) {
        if (!s.trim().isEmpty()) {
            PFCASH_I = Byte.parseByte(s);
        } else {
            PFCASH_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCASH_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFCASH_IFLAG = false;
            } else {
                PFCASH_IFLAG = true;
            }
        }
    }

    protected final void initPFCRET1(String s) {
        if (!s.trim().isEmpty()) {
            PFCRET1 = Byte.parseByte(s);
        } else {
            PFCRET1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCRET2(String s) {
        if (!s.trim().isEmpty()) {
            PFCRET2 = Byte.parseByte(s);
        } else {
            PFCRET2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCRET3(String s) {
        if (!s.trim().isEmpty()) {
            PFCRET3 = Byte.parseByte(s);
        } else {
            PFCRET3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCRET4(String s) {
        if (!s.trim().isEmpty()) {
            PFCRET4 = Byte.parseByte(s);
        } else {
            PFCRET4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCRET5(String s) {
        if (!s.trim().isEmpty()) {
            PFCRET5 = Byte.parseByte(s);
        } else {
            PFCRET5 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCRET6(String s) {
        if (!s.trim().isEmpty()) {
            PFCRET6 = Byte.parseByte(s);
        } else {
            PFCRET6 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCURV(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV = Integer.parseInt(s);
        } else {
            PFCURV = Integer.MIN_VALUE;
        }
    }

    protected final void initPFCURV2(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV2 = Integer.parseInt(s);
        } else {
            PFCURV2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPFCURV2_I(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV2_I = Double.parseDouble(s);
        } else {
            PFCURV2_I = Double.NaN;
        }
    }

    protected final void initPFCURV2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV2_IFLAG = Byte.parseByte(s);
        } else {
            PFCURV2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCURV3(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV3 = Integer.parseInt(s);
        } else {
            PFCURV3 = Integer.MIN_VALUE;
        }
    }

    protected final void initPFCURV3_I(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV3_I = Double.parseDouble(s);
        } else {
            PFCURV3_I = Double.NaN;
        }
    }

    protected final void initPFCURV3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV3_IFLAG = Byte.parseByte(s);
        } else {
            PFCURV3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCURV4(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV4 = Integer.parseInt(s);
        } else {
            PFCURV4 = Integer.MIN_VALUE;
        }
    }

    protected final void initPFCURV4_I(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV4_I = Integer.parseInt(s);
        } else {
            PFCURV4_I = Integer.MIN_VALUE;
        }
    }

    protected final void initPFCURV4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV4_IFLAG = Byte.parseByte(s);
        } else {
            PFCURV4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCURV5(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV5 = Integer.parseInt(s);
        } else {
            PFCURV5 = Integer.MIN_VALUE;
        }
    }

    protected final void initPFCURV5_I(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV5_I = Double.parseDouble(s);
        } else {
            PFCURV5_I = Double.NaN;
        }
    }

    protected final void initPFCURV5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV5_IFLAG = Byte.parseByte(s);
        } else {
            PFCURV5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCURV6(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV6 = Integer.parseInt(s);
        } else {
            PFCURV6 = Integer.MIN_VALUE;
        }
    }

    protected final void initPFCURV6_I(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV6_I = Double.parseDouble(s);
        } else {
            PFCURV6_I = Double.NaN;
        }
    }

    protected final void initPFCURV6_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFCURV6_IFLAG = false;
            } else {
                PFCURV6_IFLAG = true;
            }
        }
    }

    protected final void initPFCURV_I(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV_I = Double.parseDouble(s);
        } else {
            PFCURV_I = Double.NaN;
        }
    }

    protected final void initPFCURV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV_IFLAG = Byte.parseByte(s);
        } else {
            PFCURV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCUVB(String s) {
        if (!s.trim().isEmpty()) {
            PFCUVB = Byte.parseByte(s);
        } else {
            PFCUVB = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCUVB2(String s) {
        if (!s.trim().isEmpty()) {
            PFCUVB2 = Byte.parseByte(s);
        } else {
            PFCUVB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCUVB3(String s) {
        if (!s.trim().isEmpty()) {
            PFCUVB3 = Byte.parseByte(s);
        } else {
            PFCUVB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCUVB4(String s) {
        if (!s.trim().isEmpty()) {
            PFCUVB4 = Byte.parseByte(s);
        } else {
            PFCUVB4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCUVB5(String s) {
        if (!s.trim().isEmpty()) {
            PFCUVB5 = Byte.parseByte(s);
        } else {
            PFCUVB5 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCUVB6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFCUVB6 = false;
            } else {
                PFCUVB6 = true;
            }
        }
    }

    protected final void initPFDDV(String s) {
        if (!s.trim().isEmpty()) {
            PFDDV = Integer.parseInt(s);
        } else {
            PFDDV = Integer.MIN_VALUE;
        }
    }

    protected final void initPFDDV2(String s) {
        if (!s.trim().isEmpty()) {
            PFDDV2 = Integer.parseInt(s);
        } else {
            PFDDV2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPFDDV2_I(String s) {
        if (!s.trim().isEmpty()) {
            PFDDV2_I = Integer.parseInt(s);
        } else {
            PFDDV2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initPFDDV2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFDDV2_IFLAG = Byte.parseByte(s);
        } else {
            PFDDV2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDDV3(String s) {
        if (!s.trim().isEmpty()) {
            PFDDV3 = Integer.parseInt(s);
        } else {
            PFDDV3 = Integer.MIN_VALUE;
        }
    }

    protected final void initPFDDV3_I(String s) {
        if (!s.trim().isEmpty()) {
            PFDDV3_I = Integer.parseInt(s);
        } else {
            PFDDV3_I = Integer.MIN_VALUE;
        }
    }

    protected final void initPFDDV3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFDDV3_IFLAG = Byte.parseByte(s);
        } else {
            PFDDV3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDDV4(String s) {
        if (!s.trim().isEmpty()) {
            PFDDV4 = Integer.parseInt(s);
        } else {
            PFDDV4 = Integer.MIN_VALUE;
        }
    }

    protected final void initPFDDV4_I(String s) {
        if (!s.trim().isEmpty()) {
            PFDDV4_I = Integer.parseInt(s);
        } else {
            PFDDV4_I = Integer.MIN_VALUE;
        }
    }

    protected final void initPFDDV4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFDDV4_IFLAG = Byte.parseByte(s);
        } else {
            PFDDV4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDDV5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDDV5 = false;
            } else {
                PFDDV5 = true;
            }
        }
    }

    protected final void initPFDDV6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDDV6 = false;
            } else {
                PFDDV6 = true;
            }
        }
    }

    protected final void initPFDDVB(String s) {
        if (!s.trim().isEmpty()) {
            PFDDVB = Byte.parseByte(s);
        } else {
            PFDDVB = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDDVB2(String s) {
        if (!s.trim().isEmpty()) {
            PFDDVB2 = Byte.parseByte(s);
        } else {
            PFDDVB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDDVB3(String s) {
        if (!s.trim().isEmpty()) {
            PFDDVB3 = Byte.parseByte(s);
        } else {
            PFDDVB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDDVB4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDDVB4 = false;
            } else {
                PFDDVB4 = true;
            }
        }
    }

    protected final void initPFDDVB5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDDVB5 = false;
            } else {
                PFDDVB5 = true;
            }
        }
    }

    protected final void initPFDDVB6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDDVB6 = false;
            } else {
                PFDDVB6 = true;
            }
        }
    }

    protected final void initPFDDV_I(String s) {
        if (!s.trim().isEmpty()) {
            PFDDV_I = Integer.parseInt(s);
        } else {
            PFDDV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initPFDDV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFDDV_IFLAG = Byte.parseByte(s);
        } else {
            PFDDV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDOCS(String s) {
        if (!s.trim().isEmpty()) {
            PFDOCS = Byte.parseByte(s);
        } else {
            PFDOCS = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDOCS2(String s) {
        if (!s.trim().isEmpty()) {
            PFDOCS2 = Byte.parseByte(s);
        } else {
            PFDOCS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDOCS3(String s) {
        if (!s.trim().isEmpty()) {
            PFDOCS3 = Byte.parseByte(s);
        } else {
            PFDOCS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDOCS4(String s) {
        if (!s.trim().isEmpty()) {
            PFDOCS4 = Byte.parseByte(s);
        } else {
            PFDOCS4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDOCS5(String s) {
        if (!s.trim().isEmpty()) {
            PFDOCS5 = Byte.parseByte(s);
        } else {
            PFDOCS5 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDOCS6(String s) {
        if (!s.trim().isEmpty()) {
            PFDOCS6 = Byte.parseByte(s);
        } else {
            PFDOCS6 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDRAW(String s) {
        if (!s.trim().isEmpty()) {
            PFDRAW = Byte.parseByte(s);
        } else {
            PFDRAW = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDRAW2_I(String s) {
        if (!s.trim().isEmpty()) {
            PFDRAW2_I = Byte.parseByte(s);
        } else {
            PFDRAW2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDRAW2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFDRAW2_IFLAG = Byte.parseByte(s);
        } else {
            PFDRAW2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDRAW3(String s) {
        if (!s.trim().isEmpty()) {
            PFDRAW3 = Byte.parseByte(s);
        } else {
            PFDRAW3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDRAW3_I(String s) {
        if (!s.trim().isEmpty()) {
            PFDRAW3_I = Byte.parseByte(s);
        } else {
            PFDRAW3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDRAW3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFDRAW3_IFLAG = Byte.parseByte(s);
        } else {
            PFDRAW3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDRAW4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRAW4 = false;
            } else {
                PFDRAW4 = true;
            }
        }
    }

    protected final void initPFDRAW4_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRAW4_I = false;
            } else {
                PFDRAW4_I = true;
            }
        }
    }

    protected final void initPFDRAW4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFDRAW4_IFLAG = Byte.parseByte(s);
        } else {
            PFDRAW4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDRAW5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRAW5 = false;
            } else {
                PFDRAW5 = true;
            }
        }
    }

    protected final void initPFDRAW6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRAW6 = false;
            } else {
                PFDRAW6 = true;
            }
        }
    }

    protected final void initPFDRAW_I(String s) {
        if (!s.trim().isEmpty()) {
            PFDRAW_I = Byte.parseByte(s);
        } else {
            PFDRAW_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDRAW_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFDRAW_IFLAG = Byte.parseByte(s);
        } else {
            PFDRAW_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDRA___W2(String s) {
        if (!s.trim().isEmpty()) {
            PFDRA___W2 = Byte.parseByte(s);
        } else {
            PFDRA___W2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDRINC(String s) {
        if (!s.trim().isEmpty()) {
            PFDRINC = Short.parseShort(s);
        } else {
            PFDRINC = Short.MIN_VALUE;
        }
    }

    protected final void initPFDRINC2(String s) {
        if (!s.trim().isEmpty()) {
            PFDRINC2 = Short.parseShort(s);
        } else {
            PFDRINC2 = Short.MIN_VALUE;
        }
    }

    protected final void initPFDRINC3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRINC3 = false;
            } else {
                PFDRINC3 = true;
            }
        }
    }

    protected final void initPFDRINC4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRINC4 = false;
            } else {
                PFDRINC4 = true;
            }
        }
    }

    protected final void initPFDRINC5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRINC5 = false;
            } else {
                PFDRINC5 = true;
            }
        }
    }

    protected final void initPFDRINC6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRINC6 = false;
            } else {
                PFDRINC6 = true;
            }
        }
    }

    protected final void initPFDRINCB(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRINCB = false;
            } else {
                PFDRINCB = true;
            }
        }
    }

    protected final void initPFDRINCB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRINCB2 = false;
            } else {
                PFDRINCB2 = true;
            }
        }
    }

    protected final void initPFDRINCB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRINCB3 = false;
            } else {
                PFDRINCB3 = true;
            }
        }
    }

    protected final void initPFDRINCB4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRINCB4 = false;
            } else {
                PFDRINCB4 = true;
            }
        }
    }

    protected final void initPFDRINCB5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRINCB5 = false;
            } else {
                PFDRINCB5 = true;
            }
        }
    }

    protected final void initPFDRINCB6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRINCB6 = false;
            } else {
                PFDRINCB6 = true;
            }
        }
    }

    protected final void initPFDRVB(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRVB = false;
            } else {
                PFDRVB = true;
            }
        }
    }

    protected final void initPFDRVB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRVB2 = false;
            } else {
                PFDRVB2 = true;
            }
        }
    }

    protected final void initPFDRVB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRVB3 = false;
            } else {
                PFDRVB3 = true;
            }
        }
    }

    protected final void initPFDRVB4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRVB4 = false;
            } else {
                PFDRVB4 = true;
            }
        }
    }

    protected final void initPFDRVB5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRVB5 = false;
            } else {
                PFDRVB5 = true;
            }
        }
    }

    protected final void initPFDRVB6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRVB6 = false;
            } else {
                PFDRVB6 = true;
            }
        }
    }

    protected final void initPFDRVI(String s) {
        if (!s.trim().isEmpty()) {
            PFDRVI = Integer.parseInt(s);
        } else {
            PFDRVI = Integer.MIN_VALUE;
        }
    }

    protected final void initPFDRVI2(String s) {
        if (!s.trim().isEmpty()) {
            PFDRVI2 = Integer.parseInt(s);
        } else {
            PFDRVI2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPFDRVI3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRVI3 = false;
            } else {
                PFDRVI3 = true;
            }
        }
    }

    protected final void initPFDRVI4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRVI4 = false;
            } else {
                PFDRVI4 = true;
            }
        }
    }

    protected final void initPFDRVI5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRVI5 = false;
            } else {
                PFDRVI5 = true;
            }
        }
    }

    protected final void initPFDRVI6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRVI6 = false;
            } else {
                PFDRVI6 = true;
            }
        }
    }

    protected final void initPFEN(String s) {
        if (!s.trim().isEmpty()) {
            PFEN = Byte.parseByte(s);
        } else {
            PFEN = Byte.MIN_VALUE;
        }
    }

    protected final void initPFEND(String s) {
        if (!s.trim().isEmpty()) {
            PFEND = Short.parseShort(s);
        } else {
            PFEND = Short.MIN_VALUE;
        }
    }

    protected final void initPFEND2(String s) {
        if (!s.trim().isEmpty()) {
            PFEND2 = Short.parseShort(s);
        } else {
            PFEND2 = Short.MIN_VALUE;
        }
    }

    protected final void initPFEND3(String s) {
        if (!s.trim().isEmpty()) {
            PFEND3 = Short.parseShort(s);
        } else {
            PFEND3 = Short.MIN_VALUE;
        }
    }

    protected final void initPFEND4(String s) {
        if (!s.trim().isEmpty()) {
            PFEND4 = Short.parseShort(s);
        } else {
            PFEND4 = Short.MIN_VALUE;
        }
    }

    protected final void initPFEND5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFEND5 = false;
            } else {
                PFEND5 = true;
            }
        }
    }

    protected final void initPFEND6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFEND6 = false;
            } else {
                PFEND6 = true;
            }
        }
    }

    protected final void initPFENNUM(String s) {
        if (!s.trim().isEmpty()) {
            PFENNUM = Byte.parseByte(s);
        } else {
            PFENNUM = Byte.MIN_VALUE;
        }
    }

    protected final void initPFFAAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAAG = false;
            } else {
                PFFAAG = true;
            }
        }
    }

    protected final void initPFFAAG2(String s) {
        if (!s.trim().isEmpty()) {
            PFFAAG2 = Byte.parseByte(s);
        } else {
            PFFAAG2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFFAAG3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAAG3 = false;
            } else {
                PFFAAG3 = true;
            }
        }
    }

    protected final void initPFFAAG4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAAG4 = false;
            } else {
                PFFAAG4 = true;
            }
        }
    }

    protected final void initPFFAAG5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAAG5 = false;
            } else {
                PFFAAG5 = true;
            }
        }
    }

    protected final void initPFFAAG6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAAG6 = false;
            } else {
                PFFAAG6 = true;
            }
        }
    }

    protected final void initPFFAN11(String s) {
        if (!s.trim().isEmpty()) {
            PFFAN11 = Byte.parseByte(s);
        } else {
            PFFAN11 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFFAN16(String s) {
        if (!s.trim().isEmpty()) {
            PFFAN16 = Byte.parseByte(s);
        } else {
            PFFAN16 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFFAN2(String s) {
        if (!s.trim().isEmpty()) {
            PFFAN2 = Byte.parseByte(s);
        } else {
            PFFAN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFFAN6(String s) {
        if (!s.trim().isEmpty()) {
            PFFAN6 = Byte.parseByte(s);
        } else {
            PFFAN6 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFFAWH1(String s) {
        if (!s.trim().isEmpty()) {
            PFFAWH1 = Byte.parseByte(s);
        } else {
            PFFAWH1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFFAWH13(String s) {
        if (!s.trim().isEmpty()) {
            PFFAWH13 = Byte.parseByte(s);
        } else {
            PFFAWH13 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFFAWH7(String s) {
        if (!s.trim().isEmpty()) {
            PFFAWH7 = Byte.parseByte(s);
        } else {
            PFFAWH7 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFINCA(String s) {
        if (!s.trim().isEmpty()) {
            PFINCA = Integer.parseInt(s);
        } else {
            PFINCA = Integer.MIN_VALUE;
        }
    }

    protected final void initPFINCA2(String s) {
        if (!s.trim().isEmpty()) {
            PFINCA2 = Integer.parseInt(s);
        } else {
            PFINCA2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPFINCA2_I(String s) {
        if (!s.trim().isEmpty()) {
            PFINCA2_I = Double.parseDouble(s);
        } else {
            PFINCA2_I = Double.NaN;
        }
    }

    protected final void initPFINCA2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFINCA2_IFLAG = false;
            } else {
                PFINCA2_IFLAG = true;
            }
        }
    }

    protected final void initPFINCA3(String s) {
        if (!s.trim().isEmpty()) {
            PFINCA3 = Double.parseDouble(s);
        } else {
            PFINCA3 = Double.NaN;
        }
    }

    protected final void initPFINCA3_I(String s) {
        if (!s.trim().isEmpty()) {
            PFINCA3_I = Double.parseDouble(s);
        } else {
            PFINCA3_I = Double.NaN;
        }
    }

    protected final void initPFINCA3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFINCA3_IFLAG = false;
            } else {
                PFINCA3_IFLAG = true;
            }
        }
    }

    protected final void initPFINCA4(String s) {
        if (!s.trim().isEmpty()) {
            PFINCA4 = Double.parseDouble(s);
        } else {
            PFINCA4 = Double.NaN;
        }
    }

    protected final void initPFINCA4_I(String s) {
        if (!s.trim().isEmpty()) {
            PFINCA4_I = Short.parseShort(s);
        } else {
            PFINCA4_I = Short.MIN_VALUE;
        }
    }

    protected final void initPFINCA4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFINCA4_IFLAG = false;
            } else {
                PFINCA4_IFLAG = true;
            }
        }
    }

    protected final void initPFINCA5(String s) {
        if (!s.trim().isEmpty()) {
            PFINCA5 = Short.parseShort(s);
        } else {
            PFINCA5 = Short.MIN_VALUE;
        }
    }

    protected final void initPFINCA5_I(String s) {
        if (!s.trim().isEmpty()) {
            PFINCA5_I = Short.parseShort(s);
        } else {
            PFINCA5_I = Short.MIN_VALUE;
        }
    }

    protected final void initPFINCA5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFINCA5_IFLAG = false;
            } else {
                PFINCA5_IFLAG = true;
            }
        }
    }

    protected final void initPFINCA6(String s) {
        if (!s.trim().isEmpty()) {
            PFINCA6 = Short.parseShort(s);
        } else {
            PFINCA6 = Short.MIN_VALUE;
        }
    }

    protected final void initPFINCA6_I(String s) {
        if (!s.trim().isEmpty()) {
            PFINCA6_I = Short.parseShort(s);
        } else {
            PFINCA6_I = Short.MIN_VALUE;
        }
    }

    protected final void initPFINCA6_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFINCA6_IFLAG = false;
            } else {
                PFINCA6_IFLAG = true;
            }
        }
    }

    protected final void initPFINCA_I(String s) {
        if (!s.trim().isEmpty()) {
            PFINCA_I = Double.parseDouble(s);
        } else {
            PFINCA_I = Double.NaN;
        }
    }

    protected final void initPFINCA_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFINCA_IFLAG = false;
            } else {
                PFINCA_IFLAG = true;
            }
        }
    }

    protected final void initPFINCP(String s) {
        if (!s.trim().isEmpty()) {
            PFINCP = Byte.parseByte(s);
        } else {
            PFINCP = Byte.MIN_VALUE;
        }
    }

    protected final void initPFINCP2(String s) {
        if (!s.trim().isEmpty()) {
            PFINCP2 = Byte.parseByte(s);
        } else {
            PFINCP2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFINCP2_I(String s) {
        if (!s.trim().isEmpty()) {
            PFINCP2_I = Byte.parseByte(s);
        } else {
            PFINCP2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFINCP2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFINCP2_IFLAG = false;
            } else {
                PFINCP2_IFLAG = true;
            }
        }
    }

    protected final void initPFINCP3(String s) {
        if (!s.trim().isEmpty()) {
            PFINCP3 = Byte.parseByte(s);
        } else {
            PFINCP3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFINCP3_I(String s) {
        if (!s.trim().isEmpty()) {
            PFINCP3_I = Byte.parseByte(s);
        } else {
            PFINCP3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFINCP3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFINCP3_IFLAG = false;
            } else {
                PFINCP3_IFLAG = true;
            }
        }
    }

    protected final void initPFINCP4(String s) {
        if (!s.trim().isEmpty()) {
            PFINCP4 = Byte.parseByte(s);
        } else {
            PFINCP4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFINCP4_I(String s) {
        if (!s.trim().isEmpty()) {
            PFINCP4_I = Byte.parseByte(s);
        } else {
            PFINCP4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFINCP4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFINCP4_IFLAG = false;
            } else {
                PFINCP4_IFLAG = true;
            }
        }
    }

    protected final void initPFINCP5(String s) {
        if (!s.trim().isEmpty()) {
            PFINCP5 = Byte.parseByte(s);
        } else {
            PFINCP5 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFINCP5_I(String s) {
        if (!s.trim().isEmpty()) {
            PFINCP5_I = Byte.parseByte(s);
        } else {
            PFINCP5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFINCP5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFINCP5_IFLAG = false;
            } else {
                PFINCP5_IFLAG = true;
            }
        }
    }

    protected final void initPFINCP6(String s) {
        if (!s.trim().isEmpty()) {
            PFINCP6 = Byte.parseByte(s);
        } else {
            PFINCP6 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFINCP6_I(String s) {
        if (!s.trim().isEmpty()) {
            PFINCP6_I = Byte.parseByte(s);
        } else {
            PFINCP6_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFINCP6_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFINCP6_IFLAG = false;
            } else {
                PFINCP6_IFLAG = true;
            }
        }
    }

    protected final void initPFINCP_I(String s) {
        if (!s.trim().isEmpty()) {
            PFINCP_I = Byte.parseByte(s);
        } else {
            PFINCP_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFINCP_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFINCP_IFLAG = false;
            } else {
                PFINCP_IFLAG = true;
            }
        }
    }

    protected final void initPFLMUS(String s) {
        if (!s.trim().isEmpty()) {
            PFLMUS = Byte.parseByte(s);
        } else {
            PFLMUS = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLMUS2(String s) {
        if (!s.trim().isEmpty()) {
            PFLMUS2 = Byte.parseByte(s);
        } else {
            PFLMUS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLMUS3(String s) {
        if (!s.trim().isEmpty()) {
            PFLMUS3 = Byte.parseByte(s);
        } else {
            PFLMUS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLMUS4(String s) {
        if (!s.trim().isEmpty()) {
            PFLMUS4 = Byte.parseByte(s);
        } else {
            PFLMUS4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLMUS5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFLMUS5 = false;
            } else {
                PFLMUS5 = true;
            }
        }
    }

    protected final void initPFLMUS6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFLMUS6 = false;
            } else {
                PFLMUS6 = true;
            }
        }
    }

    protected final void initPFLMV(String s) {
        if (!s.trim().isEmpty()) {
            PFLMV = Integer.parseInt(s);
        } else {
            PFLMV = Integer.MIN_VALUE;
        }
    }

    protected final void initPFLMV2(String s) {
        if (!s.trim().isEmpty()) {
            PFLMV2 = Integer.parseInt(s);
        } else {
            PFLMV2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPFLMV3(String s) {
        if (!s.trim().isEmpty()) {
            PFLMV3 = Integer.parseInt(s);
        } else {
            PFLMV3 = Integer.MIN_VALUE;
        }
    }

    protected final void initPFLMV4(String s) {
        if (!s.trim().isEmpty()) {
            PFLMV4 = Integer.parseInt(s);
        } else {
            PFLMV4 = Integer.MIN_VALUE;
        }
    }

    protected final void initPFLMV5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFLMV5 = false;
            } else {
                PFLMV5 = true;
            }
        }
    }

    protected final void initPFLMV6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFLMV6 = false;
            } else {
                PFLMV6 = true;
            }
        }
    }

    protected final void initPFLMVB(String s) {
        if (!s.trim().isEmpty()) {
            PFLMVB = Byte.parseByte(s);
        } else {
            PFLMVB = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLMVB2(String s) {
        if (!s.trim().isEmpty()) {
            PFLMVB2 = Byte.parseByte(s);
        } else {
            PFLMVB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLMVB3(String s) {
        if (!s.trim().isEmpty()) {
            PFLMVB3 = Byte.parseByte(s);
        } else {
            PFLMVB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLMVB4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -9) {
                PFLMVB4 = false;
            } else {
                PFLMVB4 = true;
            }
        }
    }

    protected final void initPFLMVB5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFLMVB5 = false;
            } else {
                PFLMVB5 = true;
            }
        }
    }

    protected final void initPFLMVB6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFLMVB6 = false;
            } else {
                PFLMVB6 = true;
            }
        }
    }

    protected final void initPFLUM(String s) {
        if (!s.trim().isEmpty()) {
            PFLUM = Byte.parseByte(s);
        } else {
            PFLUM = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUM2(String s) {
        if (!s.trim().isEmpty()) {
            PFLUM2 = Byte.parseByte(s);
        } else {
            PFLUM2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUM2_I(String s) {
        if (!s.trim().isEmpty()) {
            PFLUM2_I = Byte.parseByte(s);
        } else {
            PFLUM2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUM2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFLUM2_IFLAG = Byte.parseByte(s);
        } else {
            PFLUM2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUM3(String s) {
        if (!s.trim().isEmpty()) {
            PFLUM3 = Byte.parseByte(s);
        } else {
            PFLUM3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUM3_I(String s) {
        if (!s.trim().isEmpty()) {
            PFLUM3_I = Byte.parseByte(s);
        } else {
            PFLUM3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUM3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFLUM3_IFLAG = Byte.parseByte(s);
        } else {
            PFLUM3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUM4(String s) {
        if (!s.trim().isEmpty()) {
            PFLUM4 = Byte.parseByte(s);
        } else {
            PFLUM4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUM4_I(String s) {
        if (!s.trim().isEmpty()) {
            PFLUM4_I = Byte.parseByte(s);
        } else {
            PFLUM4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUM4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFLUM4_IFLAG = Byte.parseByte(s);
        } else {
            PFLUM4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUM5(String s) {
        if (!s.trim().isEmpty()) {
            PFLUM5 = Byte.parseByte(s);
        } else {
            PFLUM5 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUM5_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFLUM5_I = false;
            } else {
                PFLUM5_I = true;
            }
        }
    }

    protected final void initPFLUM5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFLUM5_IFLAG = Byte.parseByte(s);
        } else {
            PFLUM5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUM6(String s) {
        if (!s.trim().isEmpty()) {
            PFLUM6 = Byte.parseByte(s);
        } else {
            PFLUM6 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUM6_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFLUM6_I = false;
            } else {
                PFLUM6_I = true;
            }
        }
    }

    protected final void initPFLUM6_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFLUM6_IFLAG = Byte.parseByte(s);
        } else {
            PFLUM6_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUMALL(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMALL = Byte.parseByte(s);
        } else {
            PFLUMALL = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUMALL2(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMALL2 = Byte.parseByte(s);
        } else {
            PFLUMALL2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUMALL2_I(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMALL2_I = Byte.parseByte(s);
        } else {
            PFLUMALL2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUMALL2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMALL2_IFLAG = Byte.parseByte(s);
        } else {
            PFLUMALL2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUMALL3(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMALL3 = Byte.parseByte(s);
        } else {
            PFLUMALL3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUMALL3_I(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMALL3_I = Byte.parseByte(s);
        } else {
            PFLUMALL3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUMALL3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMALL3_IFLAG = Byte.parseByte(s);
        } else {
            PFLUMALL3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUMALL4(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMALL4 = Byte.parseByte(s);
        } else {
            PFLUMALL4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUMALL4_I(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMALL4_I = Byte.parseByte(s);
        } else {
            PFLUMALL4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUMALL4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMALL4_IFLAG = Byte.parseByte(s);
        } else {
            PFLUMALL4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUMALL_I(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMALL_I = Byte.parseByte(s);
        } else {
            PFLUMALL_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUMALL_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMALL_IFLAG = Byte.parseByte(s);
        } else {
            PFLUMALL_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUMV(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMV = Integer.parseInt(s);
        } else {
            PFLUMV = Integer.MIN_VALUE;
        }
    }

    protected final void initPFLUMV2(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMV2 = Integer.parseInt(s);
        } else {
            PFLUMV2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPFLUMV2_I(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMV2_I = Double.parseDouble(s);
        } else {
            PFLUMV2_I = Double.NaN;
        }
    }

    protected final void initPFLUMV2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFLUMV2_IFLAG = false;
            } else {
                PFLUMV2_IFLAG = true;
            }
        }
    }

    protected final void initPFLUMV3(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMV3 = Integer.parseInt(s);
        } else {
            PFLUMV3 = Integer.MIN_VALUE;
        }
    }

    protected final void initPFLUMV3_I(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMV3_I = Integer.parseInt(s);
        } else {
            PFLUMV3_I = Integer.MIN_VALUE;
        }
    }

    protected final void initPFLUMV3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFLUMV3_IFLAG = false;
            } else {
                PFLUMV3_IFLAG = true;
            }
        }
    }

    protected final void initPFLUMV4(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMV4 = Integer.parseInt(s);
        } else {
            PFLUMV4 = Integer.MIN_VALUE;
        }
    }

    protected final void initPFLUMV4_I(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMV4_I = Integer.parseInt(s);
        } else {
            PFLUMV4_I = Integer.MIN_VALUE;
        }
    }

    protected final void initPFLUMV4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFLUMV4_IFLAG = false;
            } else {
                PFLUMV4_IFLAG = true;
            }
        }
    }

    protected final void initPFLUMV5(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMV5 = Integer.parseInt(s);
        } else {
            PFLUMV5 = Integer.MIN_VALUE;
        }
    }

    protected final void initPFLUMV5_I(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMV5_I = Integer.parseInt(s);
        } else {
            PFLUMV5_I = Integer.MIN_VALUE;
        }
    }

    protected final void initPFLUMV5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMV5_IFLAG = Byte.parseByte(s);
        } else {
            PFLUMV5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUMV6(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMV6 = Integer.parseInt(s);
        } else {
            PFLUMV6 = Integer.MIN_VALUE;
        }
    }

    protected final void initPFLUMV6_I(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMV6_I = Integer.parseInt(s);
        } else {
            PFLUMV6_I = Integer.MIN_VALUE;
        }
    }

    protected final void initPFLUMV6_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFLUMV6_IFLAG = false;
            } else {
                PFLUMV6_IFLAG = true;
            }
        }
    }

    protected final void initPFLUMV_I(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMV_I = Double.parseDouble(s);
        } else {
            PFLUMV_I = Double.NaN;
        }
    }

    protected final void initPFLUMV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFLUMV_IFLAG = false;
            } else {
                PFLUMV_IFLAG = true;
            }
        }
    }

    protected final void initPFLUM_I(String s) {
        if (!s.trim().isEmpty()) {
            PFLUM_I = Byte.parseByte(s);
        } else {
            PFLUM_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUM_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFLUM_IFLAG = Byte.parseByte(s);
        } else {
            PFLUM_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUVB(String s) {
        if (!s.trim().isEmpty()) {
            PFLUVB = Byte.parseByte(s);
        } else {
            PFLUVB = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUVB2(String s) {
        if (!s.trim().isEmpty()) {
            PFLUVB2 = Byte.parseByte(s);
        } else {
            PFLUVB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUVB3(String s) {
        if (!s.trim().isEmpty()) {
            PFLUVB3 = Byte.parseByte(s);
        } else {
            PFLUVB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUVB4(String s) {
        if (!s.trim().isEmpty()) {
            PFLUVB4 = Byte.parseByte(s);
        } else {
            PFLUVB4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUVB5(String s) {
        if (!s.trim().isEmpty()) {
            PFLUVB5 = Byte.parseByte(s);
        } else {
            PFLUVB5 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUVB6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFLUVB6 = false;
            } else {
                PFLUVB6 = true;
            }
        }
    }

    protected final void initPFNEW(String s) {
        if (!s.trim().isEmpty()) {
            PFNEW = Byte.parseByte(s);
        } else {
            PFNEW = Byte.MIN_VALUE;
        }
    }

    protected final void initPFNEWNO(String s) {
        if (!s.trim().isEmpty()) {
            PFNEWNO = Byte.parseByte(s);
        } else {
            PFNEWNO = Byte.MIN_VALUE;
        }
    }

    protected final void initPFNEWNO_I(String s) {
        if (!s.trim().isEmpty()) {
            PFNEWNO_I = Byte.parseByte(s);
        } else {
            PFNEWNO_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFNEWNO_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFNEWNO_IFLAG = false;
            } else {
                PFNEWNO_IFLAG = true;
            }
        }
    }

    protected final void initPFNEW_I(String s) {
        if (!s.trim().isEmpty()) {
            PFNEW_I = Byte.parseByte(s);
        } else {
            PFNEW_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFNEW_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFNEW_IFLAG = false;
            } else {
                PFNEW_IFLAG = true;
            }
        }
    }

    protected final void initPFNUM2(String s) {
        if (!s.trim().isEmpty()) {
            PFNUM2 = Byte.parseByte(s);
        } else {
            PFNUM2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY(String s) {
        if (!s.trim().isEmpty()) {
            PFOCTY = Byte.parseByte(s);
        } else {
            PFOCTY = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY2(String s) {
        if (!s.trim().isEmpty()) {
            PFOCTY2 = Byte.parseByte(s);
        } else {
            PFOCTY2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY2_I(String s) {
        if (!s.trim().isEmpty()) {
            PFOCTY2_I = Byte.parseByte(s);
        } else {
            PFOCTY2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFOCTY2_IFLAG = false;
            } else {
                PFOCTY2_IFLAG = true;
            }
        }
    }

    protected final void initPFOCTY3(String s) {
        if (!s.trim().isEmpty()) {
            PFOCTY3 = Byte.parseByte(s);
        } else {
            PFOCTY3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY3_I(String s) {
        if (!s.trim().isEmpty()) {
            PFOCTY3_I = Byte.parseByte(s);
        } else {
            PFOCTY3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFOCTY3_IFLAG = false;
            } else {
                PFOCTY3_IFLAG = true;
            }
        }
    }

    protected final void initPFOCTY4(String s) {
        if (!s.trim().isEmpty()) {
            PFOCTY4 = Byte.parseByte(s);
        } else {
            PFOCTY4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY4_I(String s) {
        if (!s.trim().isEmpty()) {
            PFOCTY4_I = Byte.parseByte(s);
        } else {
            PFOCTY4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFOCTY4_IFLAG = false;
            } else {
                PFOCTY4_IFLAG = true;
            }
        }
    }

    protected final void initPFOCTY5(String s) {
        if (!s.trim().isEmpty()) {
            PFOCTY5 = Byte.parseByte(s);
        } else {
            PFOCTY5 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY5_I(String s) {
        if (!s.trim().isEmpty()) {
            PFOCTY5_I = Byte.parseByte(s);
        } else {
            PFOCTY5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFOCTY5_IFLAG = Byte.parseByte(s);
        } else {
            PFOCTY5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY6(String s) {
        if (!s.trim().isEmpty()) {
            PFOCTY6 = Byte.parseByte(s);
        } else {
            PFOCTY6 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY6_I(String s) {
        if (!s.trim().isEmpty()) {
            PFOCTY6_I = Byte.parseByte(s);
        } else {
            PFOCTY6_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY6_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFOCTY6_IFLAG = Byte.parseByte(s);
        } else {
            PFOCTY6_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY_I(String s) {
        if (!s.trim().isEmpty()) {
            PFOCTY_I = Byte.parseByte(s);
        } else {
            PFOCTY_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFOCTY_IFLAG = false;
            } else {
                PFOCTY_IFLAG = true;
            }
        }
    }

    protected final void initPFPENVB(String s) {
        if (!s.trim().isEmpty()) {
            PFPENVB = Byte.parseByte(s);
        } else {
            PFPENVB = Byte.MIN_VALUE;
        }
    }

    protected final void initPFPENVB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFPENVB2 = false;
            } else {
                PFPENVB2 = true;
            }
        }
    }

    protected final void initPFPENVB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFPENVB3 = false;
            } else {
                PFPENVB3 = true;
            }
        }
    }

    protected final void initPFPENVB4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFPENVB4 = false;
            } else {
                PFPENVB4 = true;
            }
        }
    }

    protected final void initPFPENVB5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFPENVB5 = false;
            } else {
                PFPENVB5 = true;
            }
        }
    }

    protected final void initPFPENVB6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFPENVB6 = false;
            } else {
                PFPENVB6 = true;
            }
        }
    }

    protected final void initPFPENVI(String s) {
        if (!s.trim().isEmpty()) {
            PFPENVI = Integer.parseInt(s);
        } else {
            PFPENVI = Integer.MIN_VALUE;
        }
    }

    protected final void initPFPENVI2(String s) {
        if (!s.trim().isEmpty()) {
            PFPENVI2 = Short.parseShort(s);
        } else {
            PFPENVI2 = Short.MIN_VALUE;
        }
    }

    protected final void initPFPENVI3(String s) {
        if (!s.trim().isEmpty()) {
            PFPENVI3 = Short.parseShort(s);
        } else {
            PFPENVI3 = Short.MIN_VALUE;
        }
    }

    protected final void initPFPENVI4(String s) {
        if (!s.trim().isEmpty()) {
            PFPENVI4 = Short.parseShort(s);
        } else {
            PFPENVI4 = Short.MIN_VALUE;
        }
    }

    protected final void initPFPENVI5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFPENVI5 = false;
            } else {
                PFPENVI5 = true;
            }
        }
    }

    protected final void initPFPENVI6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFPENVI6 = false;
            } else {
                PFPENVI6 = true;
            }
        }
    }

    protected final void initPFREC(String s) {
        if (!s.trim().isEmpty()) {
            PFREC = Byte.parseByte(s);
        } else {
            PFREC = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREC2(String s) {
        if (!s.trim().isEmpty()) {
            PFREC2 = Byte.parseByte(s);
        } else {
            PFREC2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREC2_I(String s) {
        if (!s.trim().isEmpty()) {
            PFREC2_I = Byte.parseByte(s);
        } else {
            PFREC2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREC2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFREC2_IFLAG = false;
            } else {
                PFREC2_IFLAG = true;
            }
        }
    }

    protected final void initPFREC3(String s) {
        if (!s.trim().isEmpty()) {
            PFREC3 = Byte.parseByte(s);
        } else {
            PFREC3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREC3_I(String s) {
        if (!s.trim().isEmpty()) {
            PFREC3_I = Byte.parseByte(s);
        } else {
            PFREC3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREC3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFREC3_IFLAG = false;
            } else {
                PFREC3_IFLAG = true;
            }
        }
    }

    protected final void initPFREC4(String s) {
        if (!s.trim().isEmpty()) {
            PFREC4 = Byte.parseByte(s);
        } else {
            PFREC4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREC4_I(String s) {
        if (!s.trim().isEmpty()) {
            PFREC4_I = Byte.parseByte(s);
        } else {
            PFREC4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREC4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFREC4_IFLAG = false;
            } else {
                PFREC4_IFLAG = true;
            }
        }
    }

    protected final void initPFREC5(String s) {
        if (!s.trim().isEmpty()) {
            PFREC5 = Byte.parseByte(s);
        } else {
            PFREC5 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREC5_I(String s) {
        if (!s.trim().isEmpty()) {
            PFREC5_I = Byte.parseByte(s);
        } else {
            PFREC5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREC5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFREC5_IFLAG = false;
            } else {
                PFREC5_IFLAG = true;
            }
        }
    }

    protected final void initPFREC6(String s) {
        if (!s.trim().isEmpty()) {
            PFREC6 = Byte.parseByte(s);
        } else {
            PFREC6 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREC6_I(String s) {
        if (!s.trim().isEmpty()) {
            PFREC6_I = Byte.parseByte(s);
        } else {
            PFREC6_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREC6_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFREC6_IFLAG = false;
            } else {
                PFREC6_IFLAG = true;
            }
        }
    }

    protected final void initPFREC_I(String s) {
        if (!s.trim().isEmpty()) {
            PFREC_I = Byte.parseByte(s);
        } else {
            PFREC_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREC_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFREC_IFLAG = false;
            } else {
                PFREC_IFLAG = true;
            }
        }
    }

    protected final void initPFREM(String s) {
        if (!s.trim().isEmpty()) {
            PFREM = Byte.parseByte(s);
        } else {
            PFREM = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREM2(String s) {
        if (!s.trim().isEmpty()) {
            PFREM2 = Byte.parseByte(s);
        } else {
            PFREM2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREM2_I(String s) {
        if (!s.trim().isEmpty()) {
            PFREM2_I = Byte.parseByte(s);
        } else {
            PFREM2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREM2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFREM2_IFLAG = Byte.parseByte(s);
        } else {
            PFREM2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREM3(String s) {
        if (!s.trim().isEmpty()) {
            PFREM3 = Byte.parseByte(s);
        } else {
            PFREM3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREM3_I(String s) {
        if (!s.trim().isEmpty()) {
            PFREM3_I = Byte.parseByte(s);
        } else {
            PFREM3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREM3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFREM3_IFLAG = Byte.parseByte(s);
        } else {
            PFREM3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREM4(String s) {
        if (!s.trim().isEmpty()) {
            PFREM4 = Byte.parseByte(s);
        } else {
            PFREM4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREM4_I(String s) {
        if (!s.trim().isEmpty()) {
            PFREM4_I = Byte.parseByte(s);
        } else {
            PFREM4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREM4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFREM4_IFLAG = Byte.parseByte(s);
        } else {
            PFREM4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREM5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFREM5 = false;
            } else {
                PFREM5 = true;
            }
        }
    }

    protected final void initPFREM6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFREM6 = false;
            } else {
                PFREM6 = true;
            }
        }
    }

    protected final void initPFREM_I(String s) {
        if (!s.trim().isEmpty()) {
            PFREM_I = Byte.parseByte(s);
        } else {
            PFREM_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREM_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFREM_IFLAG = Byte.parseByte(s);
        } else {
            PFREM_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSIPTY1(String s) {
        if (!s.trim().isEmpty()) {
            PFSIPTY1 = Byte.parseByte(s);
        } else {
            PFSIPTY1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSIPTY10(String s) {
        if (!s.trim().isEmpty()) {
            PFSIPTY10 = Byte.parseByte(s);
        } else {
            PFSIPTY10 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSIPTY11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY11 = false;
            } else {
                PFSIPTY11 = true;
            }
        }
    }

    protected final void initPFSIPTY12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY12 = false;
            } else {
                PFSIPTY12 = true;
            }
        }
    }

    protected final void initPFSIPTY13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY13 = false;
            } else {
                PFSIPTY13 = true;
            }
        }
    }

    protected final void initPFSIPTY14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY14 = false;
            } else {
                PFSIPTY14 = true;
            }
        }
    }

    protected final void initPFSIPTY15(String s) {
        if (!s.trim().isEmpty()) {
            PFSIPTY15 = Byte.parseByte(s);
        } else {
            PFSIPTY15 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSIPTY16(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY16 = false;
            } else {
                PFSIPTY16 = true;
            }
        }
    }

    protected final void initPFSIPTY17(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY17 = false;
            } else {
                PFSIPTY17 = true;
            }
        }
    }

    protected final void initPFSIPTY18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY18 = false;
            } else {
                PFSIPTY18 = true;
            }
        }
    }

    protected final void initPFSIPTY19(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY19 = false;
            } else {
                PFSIPTY19 = true;
            }
        }
    }

    protected final void initPFSIPTY2(String s) {
        if (!s.trim().isEmpty()) {
            PFSIPTY2 = Byte.parseByte(s);
        } else {
            PFSIPTY2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSIPTY22(String s) {
        if (!s.trim().isEmpty()) {
            PFSIPTY22 = Byte.parseByte(s);
        } else {
            PFSIPTY22 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSIPTY23(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY23 = false;
            } else {
                PFSIPTY23 = true;
            }
        }
    }

    protected final void initPFSIPTY24(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY24 = false;
            } else {
                PFSIPTY24 = true;
            }
        }
    }

    protected final void initPFSIPTY4(String s) {
        if (!s.trim().isEmpty()) {
            PFSIPTY4 = Byte.parseByte(s);
        } else {
            PFSIPTY4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSIPTY5(String s) {
        if (!s.trim().isEmpty()) {
            PFSIPTY5 = Byte.parseByte(s);
        } else {
            PFSIPTY5 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSIPTY6(String s) {
        if (!s.trim().isEmpty()) {
            PFSIPTY6 = Byte.parseByte(s);
        } else {
            PFSIPTY6 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSIPTY7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY7 = false;
            } else {
                PFSIPTY7 = true;
            }
        }
    }

    protected final void initPFSIPTY8(String s) {
        if (!s.trim().isEmpty()) {
            PFSIPTY8 = Byte.parseByte(s);
        } else {
            PFSIPTY8 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSIPTY9(String s) {
        if (!s.trim().isEmpty()) {
            PFSIPTY9 = Byte.parseByte(s);
        } else {
            PFSIPTY9 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSTMM(String s) {
        if (!s.trim().isEmpty()) {
            PFSTMM = Byte.parseByte(s);
        } else {
            PFSTMM = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSTMM2(String s) {
        if (!s.trim().isEmpty()) {
            PFSTMM2 = Byte.parseByte(s);
        } else {
            PFSTMM2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSTMM3(String s) {
        if (!s.trim().isEmpty()) {
            PFSTMM3 = Byte.parseByte(s);
        } else {
            PFSTMM3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSTMM4(String s) {
        if (!s.trim().isEmpty()) {
            PFSTMM4 = Byte.parseByte(s);
        } else {
            PFSTMM4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSTMM5(String s) {
        if (!s.trim().isEmpty()) {
            PFSTMM5 = Byte.parseByte(s);
        } else {
            PFSTMM5 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSTMM6(String s) {
        if (!s.trim().isEmpty()) {
            PFSTMM6 = Byte.parseByte(s);
        } else {
            PFSTMM6 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSTMY(String s) {
        if (!s.trim().isEmpty()) {
            PFSTMY = Short.parseShort(s);
        } else {
            PFSTMY = Short.MIN_VALUE;
        }
    }

    protected final void initPFSTMY2(String s) {
        if (!s.trim().isEmpty()) {
            PFSTMY2 = Short.parseShort(s);
        } else {
            PFSTMY2 = Short.MIN_VALUE;
        }
    }

    protected final void initPFSTMY3(String s) {
        if (!s.trim().isEmpty()) {
            PFSTMY3 = Short.parseShort(s);
        } else {
            PFSTMY3 = Short.MIN_VALUE;
        }
    }

    protected final void initPFSTMY4(String s) {
        if (!s.trim().isEmpty()) {
            PFSTMY4 = Short.parseShort(s);
        } else {
            PFSTMY4 = Short.MIN_VALUE;
        }
    }

    protected final void initPFSTMY5(String s) {
        if (!s.trim().isEmpty()) {
            PFSTMY5 = Short.parseShort(s);
        } else {
            PFSTMY5 = Short.MIN_VALUE;
        }
    }

    protected final void initPFSTMY6(String s) {
        if (!s.trim().isEmpty()) {
            PFSTMY6 = Short.parseShort(s);
        } else {
            PFSTMY6 = Short.MIN_VALUE;
        }
    }

    protected final void initPFTYP(String s) {
        if (!s.trim().isEmpty()) {
            PFTYP = Byte.parseByte(s);
        } else {
            PFTYP = Byte.MIN_VALUE;
        }
    }

    protected final void initPFTYP2(String s) {
        if (!s.trim().isEmpty()) {
            PFTYP2 = Byte.parseByte(s);
        } else {
            PFTYP2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFTYP2_I(String s) {
        if (!s.trim().isEmpty()) {
            PFTYP2_I = Byte.parseByte(s);
        } else {
            PFTYP2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFTYP2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFTYP2_IFLAG = false;
            } else {
                PFTYP2_IFLAG = true;
            }
        }
    }

    protected final void initPFTYP3(String s) {
        if (!s.trim().isEmpty()) {
            PFTYP3 = Byte.parseByte(s);
        } else {
            PFTYP3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFTYP3_I(String s) {
        if (!s.trim().isEmpty()) {
            PFTYP3_I = Byte.parseByte(s);
        } else {
            PFTYP3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFTYP3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFTYP3_IFLAG = false;
            } else {
                PFTYP3_IFLAG = true;
            }
        }
    }

    protected final void initPFTYP4(String s) {
        if (!s.trim().isEmpty()) {
            PFTYP4 = Byte.parseByte(s);
        } else {
            PFTYP4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFTYP4_I(String s) {
        if (!s.trim().isEmpty()) {
            PFTYP4_I = Byte.parseByte(s);
        } else {
            PFTYP4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFTYP4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFTYP4_IFLAG = false;
            } else {
                PFTYP4_IFLAG = true;
            }
        }
    }

    protected final void initPFTYP5(String s) {
        if (!s.trim().isEmpty()) {
            PFTYP5 = Byte.parseByte(s);
        } else {
            PFTYP5 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFTYP5_I(String s) {
        if (!s.trim().isEmpty()) {
            PFTYP5_I = Byte.parseByte(s);
        } else {
            PFTYP5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFTYP5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFTYP5_IFLAG = false;
            } else {
                PFTYP5_IFLAG = true;
            }
        }
    }

    protected final void initPFTYP6(String s) {
        if (!s.trim().isEmpty()) {
            PFTYP6 = Byte.parseByte(s);
        } else {
            PFTYP6 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFTYP6_I(String s) {
        if (!s.trim().isEmpty()) {
            PFTYP6_I = Byte.parseByte(s);
        } else {
            PFTYP6_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFTYP6_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFTYP6_IFLAG = false;
            } else {
                PFTYP6_IFLAG = true;
            }
        }
    }

    protected final void initPFTYP_I(String s) {
        if (!s.trim().isEmpty()) {
            PFTYP_I = Byte.parseByte(s);
        } else {
            PFTYP_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFTYP_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFTYP_IFLAG = false;
            } else {
                PFTYP_IFLAG = true;
            }
        }
    }

    protected final void initPIRREG(String s) {
        if (!s.trim().isEmpty()) {
            PIRREG = Short.parseShort(s);
        } else {
            PIRREG = Short.MIN_VALUE;
        }
    }

    protected final void initPIRREG2(String s) {
        if (!s.trim().isEmpty()) {
            PIRREG2 = Short.parseShort(s);
        } else {
            PIRREG2 = Short.MIN_VALUE;
        }
    }

    protected final void initPMORTC(String s) {
        if (!s.trim().isEmpty()) {
            PMORTC = Byte.parseByte(s);
        } else {
            PMORTC = Byte.MIN_VALUE;
        }
    }

    protected final void initPMORTC2(String s) {
        if (!s.trim().isEmpty()) {
            PMORTC2 = Byte.parseByte(s);
        } else {
            PMORTC2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPMORTC3(String s) {
        if (!s.trim().isEmpty()) {
            PMORTC3 = Byte.parseByte(s);
        } else {
            PMORTC3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPNEWMEM(String s) {
        if (!s.trim().isEmpty()) {
            PNEWMEM = Byte.parseByte(s);
        } else {
            PNEWMEM = Byte.MIN_VALUE;
        }
    }

    protected final void initPNOWK(String s) {
        if (!s.trim().isEmpty()) {
            PNOWK = Byte.parseByte(s);
        } else {
            PNOWK = Byte.MIN_VALUE;
        }
    }

    protected final void initPNOWKLN(String s) {
        if (!s.trim().isEmpty()) {
            PNOWKLN = Byte.parseByte(s);
        } else {
            PNOWKLN = Byte.MIN_VALUE;
        }
    }

    protected final void initPNUMOS(String s) {
        if (!s.trim().isEmpty()) {
            PNUMOS = Byte.parseByte(s);
        } else {
            PNUMOS = Byte.MIN_VALUE;
        }
    }

    protected final void initPOADD1(String s) {
        if (!s.trim().isEmpty()) {
            POADD1 = Byte.parseByte(s);
        } else {
            POADD1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOADD1_I(String s) {
        if (!s.trim().isEmpty()) {
            POADD1_I = Byte.parseByte(s);
        } else {
            POADD1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPOADD1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                POADD1_IFLAG = false;
            } else {
                POADD1_IFLAG = true;
            }
        }
    }

    protected final void initPOADD2(String s) {
        if (!s.trim().isEmpty()) {
            POADD2 = Byte.parseByte(s);
        } else {
            POADD2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOADD2_I(String s) {
        if (!s.trim().isEmpty()) {
            POADD2_I = Byte.parseByte(s);
        } else {
            POADD2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPOADD2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                POADD2_IFLAG = false;
            } else {
                POADD2_IFLAG = true;
            }
        }
    }

    protected final void initPOADD3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POADD3 = false;
            } else {
                POADD3 = true;
            }
        }
    }

    protected final void initPOADD3_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POADD3_I = false;
            } else {
                POADD3_I = true;
            }
        }
    }

    protected final void initPOADD3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                POADD3_IFLAG = false;
            } else {
                POADD3_IFLAG = true;
            }
        }
    }

    protected final void initPOADD4(String s) {
        if (!s.trim().isEmpty()) {
            POADD4 = Byte.parseByte(s);
        } else {
            POADD4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOADD4_I(String s) {
        if (!s.trim().isEmpty()) {
            POADD4_I = Byte.parseByte(s);
        } else {
            POADD4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPOADD4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                POADD4_IFLAG = false;
            } else {
                POADD4_IFLAG = true;
            }
        }
    }

    protected final void initPOADD5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POADD5 = false;
            } else {
                POADD5 = true;
            }
        }
    }

    protected final void initPOADD5_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POADD5_I = false;
            } else {
                POADD5_I = true;
            }
        }
    }

    protected final void initPOADD5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                POADD5_IFLAG = false;
            } else {
                POADD5_IFLAG = true;
            }
        }
    }

    protected final void initPOADD6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POADD6 = false;
            } else {
                POADD6 = true;
            }
        }
    }

    protected final void initPOADD6_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POADD6_I = false;
            } else {
                POADD6_I = true;
            }
        }
    }

    protected final void initPOADD6_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                POADD6_IFLAG = false;
            } else {
                POADD6_IFLAG = true;
            }
        }
    }

    protected final void initPOANEH(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANEH = false;
            } else {
                POANEH = true;
            }
        }
    }

    protected final void initPOANEH2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANEH2 = false;
            } else {
                POANEH2 = true;
            }
        }
    }

    protected final void initPOANEXM(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANEXM = false;
            } else {
                POANEXM = true;
            }
        }
    }

    protected final void initPOANEXY(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANEXY = false;
            } else {
                POANEXY = true;
            }
        }
    }

    protected final void initPOANGA(String s) {
        if (!s.trim().isEmpty()) {
            POANGA = Byte.parseByte(s);
        } else {
            POANGA = Byte.MIN_VALUE;
        }
    }

    protected final void initPOANGA2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANGA2 = false;
            } else {
                POANGA2 = true;
            }
        }
    }

    protected final void initPOANIF(String s) {
        if (!s.trim().isEmpty()) {
            POANIF = Byte.parseByte(s);
        } else {
            POANIF = Byte.MIN_VALUE;
        }
    }

    protected final void initPOANIF2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANIF2 = false;
            } else {
                POANIF2 = true;
            }
        }
    }

    protected final void initPOANJT(String s) {
        if (!s.trim().isEmpty()) {
            POANJT = Byte.parseByte(s);
        } else {
            POANJT = Byte.MIN_VALUE;
        }
    }

    protected final void initPOANJT2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANJT2 = false;
            } else {
                POANJT2 = true;
            }
        }
    }

    protected final void initPOANLM(String s) {
        if (!s.trim().isEmpty()) {
            POANLM = Byte.parseByte(s);
        } else {
            POANLM = Byte.MIN_VALUE;
        }
    }

    protected final void initPOANLM2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANLM2 = false;
            } else {
                POANLM2 = true;
            }
        }
    }

    protected final void initPOANN1(String s) {
        if (!s.trim().isEmpty()) {
            POANN1 = Byte.parseByte(s);
        } else {
            POANN1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOANN2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANN2 = false;
            } else {
                POANN2 = true;
            }
        }
    }

    protected final void initPOANN3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANN3 = false;
            } else {
                POANN3 = true;
            }
        }
    }

    protected final void initPOANN4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANN4 = false;
            } else {
                POANN4 = true;
            }
        }
    }

    protected final void initPOANN5(String s) {
        if (!s.trim().isEmpty()) {
            POANN5 = Byte.parseByte(s);
        } else {
            POANN5 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOANN6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANN6 = false;
            } else {
                POANN6 = true;
            }
        }
    }

    protected final void initPOANN7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANN7 = false;
            } else {
                POANN7 = true;
            }
        }
    }

    protected final void initPOANN8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANN8 = false;
            } else {
                POANN8 = true;
            }
        }
    }

    protected final void initPOANVB(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANVB = false;
            } else {
                POANVB = true;
            }
        }
    }

    protected final void initPOANVB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANVB2 = false;
            } else {
                POANVB2 = true;
            }
        }
    }

    protected final void initPOANVI(String s) {
        if (!s.trim().isEmpty()) {
            POANVI = Short.parseShort(s);
        } else {
            POANVI = Short.MIN_VALUE;
        }
    }

    protected final void initPOANVI2(String s) {
        if (!s.trim().isEmpty()) {
            POANVI2 = Short.parseShort(s);
        } else {
            POANVI2 = Short.MIN_VALUE;
        }
    }

    protected final void initPOCASH(String s) {
        if (!s.trim().isEmpty()) {
            POCASH = Byte.parseByte(s);
        } else {
            POCASH = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCASH2(String s) {
        if (!s.trim().isEmpty()) {
            POCASH2 = Byte.parseByte(s);
        } else {
            POCASH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNAM2(String s) {
        if (!s.trim().isEmpty()) {
            POCNAM2 = Integer.parseInt(s);
        } else {
            POCNAM2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPOCNAM3(String s) {
        if (!s.trim().isEmpty()) {
            POCNAM3 = Short.parseShort(s);
        } else {
            POCNAM3 = Short.MIN_VALUE;
        }
    }

    protected final void initPOCNDRS1(String s) {
        if (!s.trim().isEmpty()) {
            POCNDRS1 = Byte.parseByte(s);
        } else {
            POCNDRS1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNDRS10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNDRS10 = false;
            } else {
                POCNDRS10 = true;
            }
        }
    }

    protected final void initPOCNDRS11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNDRS11 = false;
            } else {
                POCNDRS11 = true;
            }
        }
    }

    protected final void initPOCNDRS12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNDRS12 = false;
            } else {
                POCNDRS12 = true;
            }
        }
    }

    protected final void initPOCNDRS2(String s) {
        if (!s.trim().isEmpty()) {
            POCNDRS2 = Byte.parseByte(s);
        } else {
            POCNDRS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNDRS3(String s) {
        if (!s.trim().isEmpty()) {
            POCNDRS3 = Byte.parseByte(s);
        } else {
            POCNDRS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNDRS4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNDRS4 = false;
            } else {
                POCNDRS4 = true;
            }
        }
    }

    protected final void initPOCNDRS5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNDRS5 = false;
            } else {
                POCNDRS5 = true;
            }
        }
    }

    protected final void initPOCNDRS6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNDRS6 = false;
            } else {
                POCNDRS6 = true;
            }
        }
    }

    protected final void initPOCNDRS7(String s) {
        if (!s.trim().isEmpty()) {
            POCNDRS7 = Byte.parseByte(s);
        } else {
            POCNDRS7 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNDRS8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNDRS8 = false;
            } else {
                POCNDRS8 = true;
            }
        }
    }

    protected final void initPOCNDRS9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNDRS9 = false;
            } else {
                POCNDRS9 = true;
            }
        }
    }

    protected final void initPOCNFG(String s) {
        if (!s.trim().isEmpty()) {
            POCNFG = Byte.parseByte(s);
        } else {
            POCNFG = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNFG2(String s) {
        if (!s.trim().isEmpty()) {
            POCNFG2 = Byte.parseByte(s);
        } else {
            POCNFG2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNFR(String s) {
        if (!s.trim().isEmpty()) {
            POCNFR = Double.parseDouble(s);
        } else {
            POCNFR = Double.NaN;
        }
    }

    protected final void initPOCNFR2(String s) {
        if (!s.trim().isEmpty()) {
            POCNFR2 = Double.parseDouble(s);
        } else {
            POCNFR2 = Double.NaN;
        }
    }

    protected final void initPOCNHOW(String s) {
        if (!s.trim().isEmpty()) {
            POCNHOW = Byte.parseByte(s);
        } else {
            POCNHOW = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNHO___W2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNHO___W2 = false;
            } else {
                POCNHO___W2 = true;
            }
        }
    }

    protected final void initPOCNLRS1(String s) {
        if (!s.trim().isEmpty()) {
            POCNLRS1 = Byte.parseByte(s);
        } else {
            POCNLRS1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNLRS2(String s) {
        if (!s.trim().isEmpty()) {
            POCNLRS2 = Byte.parseByte(s);
        } else {
            POCNLRS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNLRS3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNLRS3 = false;
            } else {
                POCNLRS3 = true;
            }
        }
    }

    protected final void initPOCNLRS4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNLRS4 = false;
            } else {
                POCNLRS4 = true;
            }
        }
    }

    protected final void initPOCNLRS5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNLRS5 = false;
            } else {
                POCNLRS5 = true;
            }
        }
    }

    protected final void initPOCNLRS6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNLRS6 = false;
            } else {
                POCNLRS6 = true;
            }
        }
    }

    protected final void initPOCNLRS7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNLRS7 = false;
            } else {
                POCNLRS7 = true;
            }
        }
    }

    protected final void initPOCNLRS8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNLRS8 = false;
            } else {
                POCNLRS8 = true;
            }
        }
    }

    protected final void initPOCNMSC2(String s) {
        if (!s.trim().isEmpty()) {
            POCNMSC2 = Byte.parseByte(s);
        } else {
            POCNMSC2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNPLN(String s) {
        if (!s.trim().isEmpty()) {
            POCNPLN = Byte.parseByte(s);
        } else {
            POCNPLN = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNPLN2(String s) {
        if (!s.trim().isEmpty()) {
            POCNPLN2 = Byte.parseByte(s);
        } else {
            POCNPLN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNPR(String s) {
        if (!s.trim().isEmpty()) {
            POCNPR = Byte.parseByte(s);
        } else {
            POCNPR = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNPR2(String s) {
        if (!s.trim().isEmpty()) {
            POCNPR2 = Byte.parseByte(s);
        } else {
            POCNPR2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNVOL(String s) {
        if (!s.trim().isEmpty()) {
            POCNVOL = Byte.parseByte(s);
        } else {
            POCNVOL = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNVOL2(String s) {
        if (!s.trim().isEmpty()) {
            POCNVOL2 = Byte.parseByte(s);
        } else {
            POCNVOL2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCONCH(String s) {
        if (!s.trim().isEmpty()) {
            POCONCH = Byte.parseByte(s);
        } else {
            POCONCH = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCONCH2(String s) {
        if (!s.trim().isEmpty()) {
            POCONCH2 = Byte.parseByte(s);
        } else {
            POCONCH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCONH(String s) {
        if (!s.trim().isEmpty()) {
            POCONH = Byte.parseByte(s);
        } else {
            POCONH = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCONH2(String s) {
        if (!s.trim().isEmpty()) {
            POCONH2 = Byte.parseByte(s);
        } else {
            POCONH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCTYP(String s) {
        if (!s.trim().isEmpty()) {
            POCTYP = Byte.parseByte(s);
        } else {
            POCTYP = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCTYP2(String s) {
        if (!s.trim().isEmpty()) {
            POCTYP2 = Byte.parseByte(s);
        } else {
            POCTYP2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCTYP2_I(String s) {
        if (!s.trim().isEmpty()) {
            POCTYP2_I = Byte.parseByte(s);
        } else {
            POCTYP2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCTYP2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                POCTYP2_IFLAG = false;
            } else {
                POCTYP2_IFLAG = true;
            }
        }
    }

    protected final void initPOCTYP_I(String s) {
        if (!s.trim().isEmpty()) {
            POCTYP_I = Byte.parseByte(s);
        } else {
            POCTYP_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCTYP_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                POCTYP_IFLAG = false;
            } else {
                POCTYP_IFLAG = true;
            }
        }
    }

    protected final void initPODRINC(String s) {
        if (!s.trim().isEmpty()) {
            PODRINC = Integer.parseInt(s);
        } else {
            PODRINC = Integer.MIN_VALUE;
        }
    }

    protected final void initPODRINC2(String s) {
        if (!s.trim().isEmpty()) {
            PODRINC2 = Integer.parseInt(s);
        } else {
            PODRINC2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPODRINCB(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PODRINCB = false;
            } else {
                PODRINCB = true;
            }
        }
    }

    protected final void initPODRINCB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -9) {
                PODRINCB2 = false;
            } else {
                PODRINCB2 = true;
            }
        }
    }

    protected final void initPODRVB(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PODRVB = false;
            } else {
                PODRVB = true;
            }
        }
    }

    protected final void initPODRVB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PODRVB2 = false;
            } else {
                PODRVB2 = true;
            }
        }
    }

    protected final void initPODRVI(String s) {
        if (!s.trim().isEmpty()) {
            PODRVI = Short.parseShort(s);
        } else {
            PODRVI = Short.MIN_VALUE;
        }
    }

    protected final void initPODRVI2(String s) {
        if (!s.trim().isEmpty()) {
            PODRVI2 = Integer.parseInt(s);
        } else {
            PODRVI2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPOEMAM(String s) {
        if (!s.trim().isEmpty()) {
            POEMAM = Short.parseShort(s);
        } else {
            POEMAM = Short.MIN_VALUE;
        }
    }

    protected final void initPOEMAM2(String s) {
        if (!s.trim().isEmpty()) {
            POEMAM2 = Integer.parseInt(s);
        } else {
            POEMAM2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPOEMFG(String s) {
        if (!s.trim().isEmpty()) {
            POEMFG = Byte.parseByte(s);
        } else {
            POEMFG = Byte.MIN_VALUE;
        }
    }

    protected final void initPOEMFG2(String s) {
        if (!s.trim().isEmpty()) {
            POEMFG2 = Byte.parseByte(s);
        } else {
            POEMFG2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOEMFR(String s) {
        if (!s.trim().isEmpty()) {
            POEMFR = Double.parseDouble(s);
        } else {
            POEMFR = Double.NaN;
        }
    }

    protected final void initPOEMFR2(String s) {
        if (!s.trim().isEmpty()) {
            POEMFR2 = Double.parseDouble(s);
        } else {
            POEMFR2 = Double.NaN;
        }
    }

    protected final void initPOEMP(String s) {
        if (!s.trim().isEmpty()) {
            POEMP = Byte.parseByte(s);
        } else {
            POEMP = Byte.MIN_VALUE;
        }
    }

    protected final void initPOEMP2(String s) {
        if (!s.trim().isEmpty()) {
            POEMP2 = Byte.parseByte(s);
        } else {
            POEMP2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOEMPH(String s) {
        if (!s.trim().isEmpty()) {
            POEMPH = Byte.parseByte(s);
        } else {
            POEMPH = Byte.MIN_VALUE;
        }
    }

    protected final void initPOEMPH2(String s) {
        if (!s.trim().isEmpty()) {
            POEMPH2 = Byte.parseByte(s);
        } else {
            POEMPH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOEMPR(String s) {
        if (!s.trim().isEmpty()) {
            POEMPR = Byte.parseByte(s);
        } else {
            POEMPR = Byte.MIN_VALUE;
        }
    }

    protected final void initPOEMPR2(String s) {
        if (!s.trim().isEmpty()) {
            POEMPR2 = Byte.parseByte(s);
        } else {
            POEMPR2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOFAAG(String s) {
        if (!s.trim().isEmpty()) {
            POFAAG = Byte.parseByte(s);
        } else {
            POFAAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPOFAAG2(String s) {
        if (!s.trim().isEmpty()) {
            POFAAG2 = Byte.parseByte(s);
        } else {
            POFAAG2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOFAN1(String s) {
        if (!s.trim().isEmpty()) {
            POFAN1 = Byte.parseByte(s);
        } else {
            POFAN1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOFAN10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAN10 = false;
            } else {
                POFAN10 = true;
            }
        }
    }

    protected final void initPOFAN11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAN11 = false;
            } else {
                POFAN11 = true;
            }
        }
    }

    protected final void initPOFAN12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAN12 = false;
            } else {
                POFAN12 = true;
            }
        }
    }

    protected final void initPOFAN2(String s) {
        if (!s.trim().isEmpty()) {
            POFAN2 = Byte.parseByte(s);
        } else {
            POFAN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOFAN3(String s) {
        if (!s.trim().isEmpty()) {
            POFAN3 = Byte.parseByte(s);
        } else {
            POFAN3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOFAN4(String s) {
        if (!s.trim().isEmpty()) {
            POFAN4 = Byte.parseByte(s);
        } else {
            POFAN4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOFAN5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAN5 = false;
            } else {
                POFAN5 = true;
            }
        }
    }

    protected final void initPOFAN6(String s) {
        if (!s.trim().isEmpty()) {
            POFAN6 = Byte.parseByte(s);
        } else {
            POFAN6 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOFAN7(String s) {
        if (!s.trim().isEmpty()) {
            POFAN7 = Byte.parseByte(s);
        } else {
            POFAN7 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOFAN8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAN8 = false;
            } else {
                POFAN8 = true;
            }
        }
    }

    protected final void initPOFAN9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAN9 = false;
            } else {
                POFAN9 = true;
            }
        }
    }

    protected final void initPOFAWH1(String s) {
        if (!s.trim().isEmpty()) {
            POFAWH1 = Byte.parseByte(s);
        } else {
            POFAWH1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOFAWH10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAWH10 = false;
            } else {
                POFAWH10 = true;
            }
        }
    }

    protected final void initPOFAWH11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAWH11 = false;
            } else {
                POFAWH11 = true;
            }
        }
    }

    protected final void initPOFAWH12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAWH12 = false;
            } else {
                POFAWH12 = true;
            }
        }
    }

    protected final void initPOFAWH2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAWH2 = false;
            } else {
                POFAWH2 = true;
            }
        }
    }

    protected final void initPOFAWH3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAWH3 = false;
            } else {
                POFAWH3 = true;
            }
        }
    }

    protected final void initPOFAWH4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAWH4 = false;
            } else {
                POFAWH4 = true;
            }
        }
    }

    protected final void initPOFAWH5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAWH5 = false;
            } else {
                POFAWH5 = true;
            }
        }
    }

    protected final void initPOFAWH6(String s) {
        if (!s.trim().isEmpty()) {
            POFAWH6 = Byte.parseByte(s);
        } else {
            POFAWH6 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOFAWH7(String s) {
        if (!s.trim().isEmpty()) {
            POFAWH7 = Byte.parseByte(s);
        } else {
            POFAWH7 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOFAWH8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAWH8 = false;
            } else {
                POFAWH8 = true;
            }
        }
    }

    protected final void initPOFAWH9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAWH9 = false;
            } else {
                POFAWH9 = true;
            }
        }
    }

    protected final void initPOJOIN(String s) {
        if (!s.trim().isEmpty()) {
            POJOIN = Short.parseShort(s);
        } else {
            POJOIN = Short.MIN_VALUE;
        }
    }

    protected final void initPOJOIN2(String s) {
        if (!s.trim().isEmpty()) {
            POJOIN2 = Short.parseShort(s);
        } else {
            POJOIN2 = Short.MIN_VALUE;
        }
    }

    protected final void initPOLMUS1(String s) {
        if (!s.trim().isEmpty()) {
            POLMUS1 = Byte.parseByte(s);
        } else {
            POLMUS1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOLMUS10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POLMUS10 = false;
            } else {
                POLMUS10 = true;
            }
        }
    }

    protected final void initPOLMUS11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POLMUS11 = false;
            } else {
                POLMUS11 = true;
            }
        }
    }

    protected final void initPOLMUS12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POLMUS12 = false;
            } else {
                POLMUS12 = true;
            }
        }
    }

    protected final void initPOLMUS2(String s) {
        if (!s.trim().isEmpty()) {
            POLMUS2 = Byte.parseByte(s);
        } else {
            POLMUS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOLMUS3(String s) {
        if (!s.trim().isEmpty()) {
            POLMUS3 = Byte.parseByte(s);
        } else {
            POLMUS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOLMUS4(String s) {
        if (!s.trim().isEmpty()) {
            POLMUS4 = Byte.parseByte(s);
        } else {
            POLMUS4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOLMUS5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POLMUS5 = false;
            } else {
                POLMUS5 = true;
            }
        }
    }

    protected final void initPOLMUS6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POLMUS6 = false;
            } else {
                POLMUS6 = true;
            }
        }
    }

    protected final void initPOLMUS7(String s) {
        if (!s.trim().isEmpty()) {
            POLMUS7 = Byte.parseByte(s);
        } else {
            POLMUS7 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOLMUS8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POLMUS8 = false;
            } else {
                POLMUS8 = true;
            }
        }
    }

    protected final void initPOLMUS9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POLMUS9 = false;
            } else {
                POLMUS9 = true;
            }
        }
    }

    protected final void initPOLMV(String s) {
        if (!s.trim().isEmpty()) {
            POLMV = Integer.parseInt(s);
        } else {
            POLMV = Integer.MIN_VALUE;
        }
    }

    protected final void initPOLMV2(String s) {
        if (!s.trim().isEmpty()) {
            POLMV2 = Integer.parseInt(s);
        } else {
            POLMV2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPOLMVB(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POLMVB = false;
            } else {
                POLMVB = true;
            }
        }
    }

    protected final void initPOLMVB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POLMVB2 = false;
            } else {
                POLMVB2 = true;
            }
        }
    }

    protected final void initPOLSYR(String s) {
        if (!s.trim().isEmpty()) {
            POLSYR = Byte.parseByte(s);
        } else {
            POLSYR = Byte.MIN_VALUE;
        }
    }

    protected final void initPOLSYR2(String s) {
        if (!s.trim().isEmpty()) {
            POLSYR2 = Byte.parseByte(s);
        } else {
            POLSYR2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOLUM(String s) {
        if (!s.trim().isEmpty()) {
            POLUM = Byte.parseByte(s);
        } else {
            POLUM = Byte.MIN_VALUE;
        }
    }

    protected final void initPOLUM2(String s) {
        if (!s.trim().isEmpty()) {
            POLUM2 = Byte.parseByte(s);
        } else {
            POLUM2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOMETH(String s) {
        if (!s.trim().isEmpty()) {
            POMETH = Byte.parseByte(s);
        } else {
            POMETH = Byte.MIN_VALUE;
        }
    }

    protected final void initPOMETH2(String s) {
        if (!s.trim().isEmpty()) {
            POMETH2 = Byte.parseByte(s);
        } else {
            POMETH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOPENVB(String s) {
        if (!s.trim().isEmpty()) {
            POPENVB = Byte.parseByte(s);
        } else {
            POPENVB = Byte.MIN_VALUE;
        }
    }

    protected final void initPOPENVB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POPENVB2 = false;
            } else {
                POPENVB2 = true;
            }
        }
    }

    protected final void initPOPENVI(String s) {
        if (!s.trim().isEmpty()) {
            POPENVI = Integer.parseInt(s);
        } else {
            POPENVI = Integer.MIN_VALUE;
        }
    }

    protected final void initPOPENVI2(String s) {
        if (!s.trim().isEmpty()) {
            POPENVI2 = Integer.parseInt(s);
        } else {
            POPENVI2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPOPYCH(String s) {
        if (!s.trim().isEmpty()) {
            POPYCH = Byte.parseByte(s);
        } else {
            POPYCH = Byte.MIN_VALUE;
        }
    }

    protected final void initPOPYCH2(String s) {
        if (!s.trim().isEmpty()) {
            POPYCH2 = Byte.parseByte(s);
        } else {
            POPYCH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPORAGE2T(String s) {
        if (!s.trim().isEmpty()) {
            PORAGE2T = Byte.parseByte(s);
        } else {
            PORAGE2T = Byte.MIN_VALUE;
        }
    }

    protected final void initPORAGET(String s) {
        if (!s.trim().isEmpty()) {
            PORAGET = Byte.parseByte(s);
        } else {
            PORAGET = Byte.MIN_VALUE;
        }
    }

    protected final void initPOYRAM(String s) {
        if (!s.trim().isEmpty()) {
            POYRAM = Short.parseShort(s);
        } else {
            POYRAM = Short.MIN_VALUE;
        }
    }

    protected final void initPOYRAM2(String s) {
        if (!s.trim().isEmpty()) {
            POYRAM2 = Integer.parseInt(s);
        } else {
            POYRAM2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPPACCU(String s) {
        if (!s.trim().isEmpty()) {
            PPACCU = Byte.parseByte(s);
        } else {
            PPACCU = Byte.MIN_VALUE;
        }
    }

    protected final void initPPACCU2(String s) {
        if (!s.trim().isEmpty()) {
            PPACCU2 = Byte.parseByte(s);
        } else {
            PPACCU2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPACCU3(String s) {
        if (!s.trim().isEmpty()) {
            PPACCU3 = Byte.parseByte(s);
        } else {
            PPACCU3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPANEH(String s) {
        if (!s.trim().isEmpty()) {
            PPANEH = Byte.parseByte(s);
        } else {
            PPANEH = Byte.MIN_VALUE;
        }
    }

    protected final void initPPANEH2(String s) {
        if (!s.trim().isEmpty()) {
            PPANEH2 = Byte.parseByte(s);
        } else {
            PPANEH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPANEH3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANEH3 = false;
            } else {
                PPANEH3 = true;
            }
        }
    }

    protected final void initPPANEXM(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANEXM = false;
            } else {
                PPANEXM = true;
            }
        }
    }

    protected final void initPPANEXM2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANEXM2 = false;
            } else {
                PPANEXM2 = true;
            }
        }
    }

    protected final void initPPANEXM3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANEXM3 = false;
            } else {
                PPANEXM3 = true;
            }
        }
    }

    protected final void initPPANEXY(String s) {
        if (!s.trim().isEmpty()) {
            PPANEXY = Short.parseShort(s);
        } else {
            PPANEXY = Short.MIN_VALUE;
        }
    }

    protected final void initPPANEXY2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANEXY2 = false;
            } else {
                PPANEXY2 = true;
            }
        }
    }

    protected final void initPPANEXY3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANEXY3 = false;
            } else {
                PPANEXY3 = true;
            }
        }
    }

    protected final void initPPANGA(String s) {
        if (!s.trim().isEmpty()) {
            PPANGA = Byte.parseByte(s);
        } else {
            PPANGA = Byte.MIN_VALUE;
        }
    }

    protected final void initPPANGA2(String s) {
        if (!s.trim().isEmpty()) {
            PPANGA2 = Byte.parseByte(s);
        } else {
            PPANGA2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPANGA3(String s) {
        if (!s.trim().isEmpty()) {
            PPANGA3 = Byte.parseByte(s);
        } else {
            PPANGA3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPANIF(String s) {
        if (!s.trim().isEmpty()) {
            PPANIF = Byte.parseByte(s);
        } else {
            PPANIF = Byte.MIN_VALUE;
        }
    }

    protected final void initPPANIF2(String s) {
        if (!s.trim().isEmpty()) {
            PPANIF2 = Byte.parseByte(s);
        } else {
            PPANIF2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPANIF3(String s) {
        if (!s.trim().isEmpty()) {
            PPANIF3 = Byte.parseByte(s);
        } else {
            PPANIF3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPANJT(String s) {
        if (!s.trim().isEmpty()) {
            PPANJT = Byte.parseByte(s);
        } else {
            PPANJT = Byte.MIN_VALUE;
        }
    }

    protected final void initPPANJT2(String s) {
        if (!s.trim().isEmpty()) {
            PPANJT2 = Byte.parseByte(s);
        } else {
            PPANJT2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPANJT3(String s) {
        if (!s.trim().isEmpty()) {
            PPANJT3 = Byte.parseByte(s);
        } else {
            PPANJT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPANLM(String s) {
        if (!s.trim().isEmpty()) {
            PPANLM = Byte.parseByte(s);
        } else {
            PPANLM = Byte.MIN_VALUE;
        }
    }

    protected final void initPPANLM2(String s) {
        if (!s.trim().isEmpty()) {
            PPANLM2 = Byte.parseByte(s);
        } else {
            PPANLM2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPANLM3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANLM3 = false;
            } else {
                PPANLM3 = true;
            }
        }
    }

    protected final void initPPANN1(String s) {
        if (!s.trim().isEmpty()) {
            PPANN1 = Byte.parseByte(s);
        } else {
            PPANN1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPANN10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANN10 = false;
            } else {
                PPANN10 = true;
            }
        }
    }

    protected final void initPPANN11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANN11 = false;
            } else {
                PPANN11 = true;
            }
        }
    }

    protected final void initPPANN12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANN12 = false;
            } else {
                PPANN12 = true;
            }
        }
    }

    protected final void initPPANN2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANN2 = false;
            } else {
                PPANN2 = true;
            }
        }
    }

    protected final void initPPANN3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANN3 = false;
            } else {
                PPANN3 = true;
            }
        }
    }

    protected final void initPPANN4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANN4 = false;
            } else {
                PPANN4 = true;
            }
        }
    }

    protected final void initPPANN5(String s) {
        if (!s.trim().isEmpty()) {
            PPANN5 = Byte.parseByte(s);
        } else {
            PPANN5 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPANN6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANN6 = false;
            } else {
                PPANN6 = true;
            }
        }
    }

    protected final void initPPANN7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANN7 = false;
            } else {
                PPANN7 = true;
            }
        }
    }

    protected final void initPPANN8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANN8 = false;
            } else {
                PPANN8 = true;
            }
        }
    }

    protected final void initPPANN9(String s) {
        if (!s.trim().isEmpty()) {
            PPANN9 = Byte.parseByte(s);
        } else {
            PPANN9 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPANVB(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANVB = false;
            } else {
                PPANVB = true;
            }
        }
    }

    protected final void initPPANVB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANVB2 = false;
            } else {
                PPANVB2 = true;
            }
        }
    }

    protected final void initPPANVB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANVB3 = false;
            } else {
                PPANVB3 = true;
            }
        }
    }

    protected final void initPPANVI(String s) {
        if (!s.trim().isEmpty()) {
            PPANVI = Short.parseShort(s);
        } else {
            PPANVI = Short.MIN_VALUE;
        }
    }

    protected final void initPPANVI2(String s) {
        if (!s.trim().isEmpty()) {
            PPANVI2 = Short.parseShort(s);
        } else {
            PPANVI2 = Short.MIN_VALUE;
        }
    }

    protected final void initPPANVI3(String s) {
        if (!s.trim().isEmpty()) {
            PPANVI3 = Short.parseShort(s);
        } else {
            PPANVI3 = Short.MIN_VALUE;
        }
    }

    protected final void initPPCASH(String s) {
        if (!s.trim().isEmpty()) {
            PPCASH = Byte.parseByte(s);
        } else {
            PPCASH = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCASH2(String s) {
        if (!s.trim().isEmpty()) {
            PPCASH2 = Byte.parseByte(s);
        } else {
            PPCASH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCASH3(String s) {
        if (!s.trim().isEmpty()) {
            PPCASH3 = Byte.parseByte(s);
        } else {
            PPCASH3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCNDRS1(String s) {
        if (!s.trim().isEmpty()) {
            PPCNDRS1 = Byte.parseByte(s);
        } else {
            PPCNDRS1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCNDRS17(String s) {
        if (!s.trim().isEmpty()) {
            PPCNDRS17 = Byte.parseByte(s);
        } else {
            PPCNDRS17 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCNDRS2(String s) {
        if (!s.trim().isEmpty()) {
            PPCNDRS2 = Byte.parseByte(s);
        } else {
            PPCNDRS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCNDRS3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNDRS3 = false;
            } else {
                PPCNDRS3 = true;
            }
        }
    }

    protected final void initPPCNDRS9(String s) {
        if (!s.trim().isEmpty()) {
            PPCNDRS9 = Byte.parseByte(s);
        } else {
            PPCNDRS9 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCNHOW(String s) {
        if (!s.trim().isEmpty()) {
            PPCNHOW = Byte.parseByte(s);
        } else {
            PPCNHOW = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCNHOW3(String s) {
        if (!s.trim().isEmpty()) {
            PPCNHOW3 = Byte.parseByte(s);
        } else {
            PPCNHOW3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCNHO___W2(String s) {
        if (!s.trim().isEmpty()) {
            PPCNHO___W2 = Byte.parseByte(s);
        } else {
            PPCNHO___W2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCNLRS1(String s) {
        if (!s.trim().isEmpty()) {
            PPCNLRS1 = Byte.parseByte(s);
        } else {
            PPCNLRS1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCNLRS2(String s) {
        if (!s.trim().isEmpty()) {
            PPCNLRS2 = Byte.parseByte(s);
        } else {
            PPCNLRS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCNLRS3(String s) {
        if (!s.trim().isEmpty()) {
            PPCNLRS3 = Byte.parseByte(s);
        } else {
            PPCNLRS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCNLRS5(String s) {
        if (!s.trim().isEmpty()) {
            PPCNLRS5 = Byte.parseByte(s);
        } else {
            PPCNLRS5 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCNLRS9(String s) {
        if (!s.trim().isEmpty()) {
            PPCNLRS9 = Byte.parseByte(s);
        } else {
            PPCNLRS9 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCNPLN(String s) {
        if (!s.trim().isEmpty()) {
            PPCNPLN = Byte.parseByte(s);
        } else {
            PPCNPLN = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCNPLN2(String s) {
        if (!s.trim().isEmpty()) {
            PPCNPLN2 = Byte.parseByte(s);
        } else {
            PPCNPLN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCNPLN3(String s) {
        if (!s.trim().isEmpty()) {
            PPCNPLN3 = Byte.parseByte(s);
        } else {
            PPCNPLN3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCONCH(String s) {
        if (!s.trim().isEmpty()) {
            PPCONCH = Byte.parseByte(s);
        } else {
            PPCONCH = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCONCH2(String s) {
        if (!s.trim().isEmpty()) {
            PPCONCH2 = Byte.parseByte(s);
        } else {
            PPCONCH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCONCH3(String s) {
        if (!s.trim().isEmpty()) {
            PPCONCH3 = Byte.parseByte(s);
        } else {
            PPCONCH3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPDOCS(String s) {
        if (!s.trim().isEmpty()) {
            PPDOCS = Byte.parseByte(s);
        } else {
            PPDOCS = Byte.MIN_VALUE;
        }
    }

    protected final void initPPDOCS2(String s) {
        if (!s.trim().isEmpty()) {
            PPDOCS2 = Byte.parseByte(s);
        } else {
            PPDOCS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPDOCS3(String s) {
        if (!s.trim().isEmpty()) {
            PPDOCS3 = Byte.parseByte(s);
        } else {
            PPDOCS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPDRINC(String s) {
        if (!s.trim().isEmpty()) {
            PPDRINC = Integer.parseInt(s);
        } else {
            PPDRINC = Integer.MIN_VALUE;
        }
    }

    protected final void initPPDRINC2(String s) {
        if (!s.trim().isEmpty()) {
            PPDRINC2 = Short.parseShort(s);
        } else {
            PPDRINC2 = Short.MIN_VALUE;
        }
    }

    protected final void initPPDRINC3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPDRINC3 = false;
            } else {
                PPDRINC3 = true;
            }
        }
    }

    protected final void initPPDRINCB(String s) {
        if (!s.trim().isEmpty()) {
            PPDRINCB = Byte.parseByte(s);
        } else {
            PPDRINCB = Byte.MIN_VALUE;
        }
    }

    protected final void initPPDRINCB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPDRINCB2 = false;
            } else {
                PPDRINCB2 = true;
            }
        }
    }

    protected final void initPPDRVB(String s) {
        if (!s.trim().isEmpty()) {
            PPDRVB = Byte.parseByte(s);
        } else {
            PPDRVB = Byte.MIN_VALUE;
        }
    }

    protected final void initPPDRVB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPDRVB2 = false;
            } else {
                PPDRVB2 = true;
            }
        }
    }

    protected final void initPPDRVB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPDRVB3 = false;
            } else {
                PPDRVB3 = true;
            }
        }
    }

    protected final void initPPDRVI(String s) {
        if (!s.trim().isEmpty()) {
            PPDRVI = Integer.parseInt(s);
        } else {
            PPDRVI = Integer.MIN_VALUE;
        }
    }

    protected final void initPPDRVI2(String s) {
        if (!s.trim().isEmpty()) {
            PPDRVI2 = Integer.parseInt(s);
        } else {
            PPDRVI2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPPDRVI3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPDRVI3 = false;
            } else {
                PPDRVI3 = true;
            }
        }
    }

    protected final void initPPEIRA(String s) {
        if (!s.trim().isEmpty()) {
            PPEIRA = Short.parseShort(s);
        } else {
            PPEIRA = Short.MIN_VALUE;
        }
    }

    protected final void initPPEIRA2(String s) {
        if (!s.trim().isEmpty()) {
            PPEIRA2 = Short.parseShort(s);
        } else {
            PPEIRA2 = Short.MIN_VALUE;
        }
    }

    protected final void initPPEIRA3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPEIRA3 = false;
            } else {
                PPEIRA3 = true;
            }
        }
    }

    protected final void initPPEIRF(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPEIRF = false;
            } else {
                PPEIRF = true;
            }
        }
    }

    protected final void initPPEIRF2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPEIRF2 = false;
            } else {
                PPEIRF2 = true;
            }
        }
    }

    protected final void initPPEIRF3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPEIRF3 = false;
            } else {
                PPEIRF3 = true;
            }
        }
    }

    protected final void initPPEIRH(String s) {
        if (!s.trim().isEmpty()) {
            PPEIRH = Byte.parseByte(s);
        } else {
            PPEIRH = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEIRH2(String s) {
        if (!s.trim().isEmpty()) {
            PPEIRH2 = Byte.parseByte(s);
        } else {
            PPEIRH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEIRH3(String s) {
        if (!s.trim().isEmpty()) {
            PPEIRH3 = Byte.parseByte(s);
        } else {
            PPEIRH3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEMAM(String s) {
        if (!s.trim().isEmpty()) {
            PPEMAM = Integer.parseInt(s);
        } else {
            PPEMAM = Integer.MIN_VALUE;
        }
    }

    protected final void initPPEMAM2(String s) {
        if (!s.trim().isEmpty()) {
            PPEMAM2 = Short.parseShort(s);
        } else {
            PPEMAM2 = Short.MIN_VALUE;
        }
    }

    protected final void initPPEMAM3(String s) {
        if (!s.trim().isEmpty()) {
            PPEMAM3 = Short.parseShort(s);
        } else {
            PPEMAM3 = Short.MIN_VALUE;
        }
    }

    protected final void initPPEMFR(String s) {
        if (!s.trim().isEmpty()) {
            PPEMFR = Double.parseDouble(s);
        } else {
            PPEMFR = Double.NaN;
        }
    }

    protected final void initPPEMFR2(String s) {
        if (!s.trim().isEmpty()) {
            PPEMFR2 = Byte.parseByte(s);
        } else {
            PPEMFR2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEMFR3(String s) {
        if (!s.trim().isEmpty()) {
            PPEMFR3 = Byte.parseByte(s);
        } else {
            PPEMFR3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEMP(String s) {
        if (!s.trim().isEmpty()) {
            PPEMP = Byte.parseByte(s);
        } else {
            PPEMP = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEMP2(String s) {
        if (!s.trim().isEmpty()) {
            PPEMP2 = Byte.parseByte(s);
        } else {
            PPEMP2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEMP3(String s) {
        if (!s.trim().isEmpty()) {
            PPEMP3 = Byte.parseByte(s);
        } else {
            PPEMP3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEMPH(String s) {
        if (!s.trim().isEmpty()) {
            PPEMPH = Byte.parseByte(s);
        } else {
            PPEMPH = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEMPH2(String s) {
        if (!s.trim().isEmpty()) {
            PPEMPH2 = Byte.parseByte(s);
        } else {
            PPEMPH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEMPH3(String s) {
        if (!s.trim().isEmpty()) {
            PPEMPH3 = Byte.parseByte(s);
        } else {
            PPEMPH3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEMPR(String s) {
        if (!s.trim().isEmpty()) {
            PPEMPR = Byte.parseByte(s);
        } else {
            PPEMPR = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEMPR2(String s) {
        if (!s.trim().isEmpty()) {
            PPEMPR2 = Byte.parseByte(s);
        } else {
            PPEMPR2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEMPR3(String s) {
        if (!s.trim().isEmpty()) {
            PPEMPR3 = Byte.parseByte(s);
        } else {
            PPEMPR3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEVRG(String s) {
        if (!s.trim().isEmpty()) {
            PPEVRG = Byte.parseByte(s);
        } else {
            PPEVRG = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEVRG2(String s) {
        if (!s.trim().isEmpty()) {
            PPEVRG2 = Byte.parseByte(s);
        } else {
            PPEVRG2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEVRG3(String s) {
        if (!s.trim().isEmpty()) {
            PPEVRG3 = Byte.parseByte(s);
        } else {
            PPEVRG3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPFAAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAAG = false;
            } else {
                PPFAAG = true;
            }
        }
    }

    protected final void initPPFAAG2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAAG2 = false;
            } else {
                PPFAAG2 = true;
            }
        }
    }

    protected final void initPPFAAG3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAAG3 = false;
            } else {
                PPFAAG3 = true;
            }
        }
    }

    protected final void initPPFAN1(String s) {
        if (!s.trim().isEmpty()) {
            PPFAN1 = Byte.parseByte(s);
        } else {
            PPFAN1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPFAN10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN10 = false;
            } else {
                PPFAN10 = true;
            }
        }
    }

    protected final void initPPFAN11(String s) {
        if (!s.trim().isEmpty()) {
            PPFAN11 = Byte.parseByte(s);
        } else {
            PPFAN11 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPFAN12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN12 = false;
            } else {
                PPFAN12 = true;
            }
        }
    }

    protected final void initPPFAN13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN13 = false;
            } else {
                PPFAN13 = true;
            }
        }
    }

    protected final void initPPFAN14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN14 = false;
            } else {
                PPFAN14 = true;
            }
        }
    }

    protected final void initPPFAN15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN15 = false;
            } else {
                PPFAN15 = true;
            }
        }
    }

    protected final void initPPFAN2(String s) {
        if (!s.trim().isEmpty()) {
            PPFAN2 = Byte.parseByte(s);
        } else {
            PPFAN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPFAN3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN3 = false;
            } else {
                PPFAN3 = true;
            }
        }
    }

    protected final void initPPFAN4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN4 = false;
            } else {
                PPFAN4 = true;
            }
        }
    }

    protected final void initPPFAN5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN5 = false;
            } else {
                PPFAN5 = true;
            }
        }
    }

    protected final void initPPFAN6(String s) {
        if (!s.trim().isEmpty()) {
            PPFAN6 = Byte.parseByte(s);
        } else {
            PPFAN6 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPFAN7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN7 = false;
            } else {
                PPFAN7 = true;
            }
        }
    }

    protected final void initPPFAN8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN8 = false;
            } else {
                PPFAN8 = true;
            }
        }
    }

    protected final void initPPFAN9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN9 = false;
            } else {
                PPFAN9 = true;
            }
        }
    }

    protected final void initPPFAWH1(String s) {
        if (!s.trim().isEmpty()) {
            PPFAWH1 = Byte.parseByte(s);
        } else {
            PPFAWH1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPFAWH10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH10 = false;
            } else {
                PPFAWH10 = true;
            }
        }
    }

    protected final void initPPFAWH11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH11 = false;
            } else {
                PPFAWH11 = true;
            }
        }
    }

    protected final void initPPFAWH12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH12 = false;
            } else {
                PPFAWH12 = true;
            }
        }
    }

    protected final void initPPFAWH13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH13 = false;
            } else {
                PPFAWH13 = true;
            }
        }
    }

    protected final void initPPFAWH14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH14 = false;
            } else {
                PPFAWH14 = true;
            }
        }
    }

    protected final void initPPFAWH15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH15 = false;
            } else {
                PPFAWH15 = true;
            }
        }
    }

    protected final void initPPFAWH16(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH16 = false;
            } else {
                PPFAWH16 = true;
            }
        }
    }

    protected final void initPPFAWH17(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH17 = false;
            } else {
                PPFAWH17 = true;
            }
        }
    }

    protected final void initPPFAWH18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH18 = false;
            } else {
                PPFAWH18 = true;
            }
        }
    }

    protected final void initPPFAWH19(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH19 = false;
            } else {
                PPFAWH19 = true;
            }
        }
    }

    protected final void initPPFAWH2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH2 = false;
            } else {
                PPFAWH2 = true;
            }
        }
    }

    protected final void initPPFAWH20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH20 = false;
            } else {
                PPFAWH20 = true;
            }
        }
    }

    protected final void initPPFAWH21(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH21 = false;
            } else {
                PPFAWH21 = true;
            }
        }
    }

    protected final void initPPFAWH3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH3 = false;
            } else {
                PPFAWH3 = true;
            }
        }
    }

    protected final void initPPFAWH4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH4 = false;
            } else {
                PPFAWH4 = true;
            }
        }
    }

    protected final void initPPFAWH5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH5 = false;
            } else {
                PPFAWH5 = true;
            }
        }
    }

    protected final void initPPFAWH6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH6 = false;
            } else {
                PPFAWH6 = true;
            }
        }
    }

    protected final void initPPFAWH7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH7 = false;
            } else {
                PPFAWH7 = true;
            }
        }
    }

    protected final void initPPFAWH8(String s) {
        if (!s.trim().isEmpty()) {
            PPFAWH8 = Byte.parseByte(s);
        } else {
            PPFAWH8 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPFAWH9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH9 = false;
            } else {
                PPFAWH9 = true;
            }
        }
    }

    protected final void initPPIRNO(String s) {
        if (!s.trim().isEmpty()) {
            PPIRNO = Byte.parseByte(s);
        } else {
            PPIRNO = Byte.MIN_VALUE;
        }
    }

    protected final void initPPIRNO2(String s) {
        if (!s.trim().isEmpty()) {
            PPIRNO2 = Byte.parseByte(s);
        } else {
            PPIRNO2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPIRNO3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPIRNO3 = false;
            } else {
                PPIRNO3 = true;
            }
        }
    }

    protected final void initPPIRRA(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRA = Integer.parseInt(s);
        } else {
            PPIRRA = Integer.MIN_VALUE;
        }
    }

    protected final void initPPIRRA2(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRA2 = Integer.parseInt(s);
        } else {
            PPIRRA2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPPIRRA3(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRA3 = Short.parseShort(s);
        } else {
            PPIRRA3 = Short.MIN_VALUE;
        }
    }

    protected final void initPPIRRF(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRF = Byte.parseByte(s);
        } else {
            PPIRRF = Byte.MIN_VALUE;
        }
    }

    protected final void initPPIRRF2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPIRRF2 = false;
            } else {
                PPIRRF2 = true;
            }
        }
    }

    protected final void initPPIRRF3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPIRRF3 = false;
            } else {
                PPIRRF3 = true;
            }
        }
    }

    protected final void initPPIRRH(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRH = Byte.parseByte(s);
        } else {
            PPIRRH = Byte.MIN_VALUE;
        }
    }

    protected final void initPPIRRH2(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRH2 = Byte.parseByte(s);
        } else {
            PPIRRH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPIRRH3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPIRRH3 = false;
            } else {
                PPIRRH3 = true;
            }
        }
    }

    protected final void initPPIRRY(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRY = Short.parseShort(s);
        } else {
            PPIRRY = Short.MIN_VALUE;
        }
    }

    protected final void initPPIRRY2(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRY2 = Short.parseShort(s);
        } else {
            PPIRRY2 = Short.MIN_VALUE;
        }
    }

    protected final void initPPIRRY3(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRY3 = Short.parseShort(s);
        } else {
            PPIRRY3 = Short.MIN_VALUE;
        }
    }

    protected final void initPPLASY(String s) {
        if (!s.trim().isEmpty()) {
            PPLASY = Short.parseShort(s);
        } else {
            PPLASY = Short.MIN_VALUE;
        }
    }

    protected final void initPPLASY2(String s) {
        if (!s.trim().isEmpty()) {
            PPLASY2 = Short.parseShort(s);
        } else {
            PPLASY2 = Short.MIN_VALUE;
        }
    }

    protected final void initPPLASY3(String s) {
        if (!s.trim().isEmpty()) {
            PPLASY3 = Short.parseShort(s);
        } else {
            PPLASY3 = Short.MIN_VALUE;
        }
    }

    protected final void initPPLMUS(String s) {
        if (!s.trim().isEmpty()) {
            PPLMUS = Byte.parseByte(s);
        } else {
            PPLMUS = Byte.MIN_VALUE;
        }
    }

    protected final void initPPLMUS2(String s) {
        if (!s.trim().isEmpty()) {
            PPLMUS2 = Byte.parseByte(s);
        } else {
            PPLMUS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPLMUS3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPLMUS3 = false;
            } else {
                PPLMUS3 = true;
            }
        }
    }

    protected final void initPPLMV(String s) {
        if (!s.trim().isEmpty()) {
            PPLMV = Integer.parseInt(s);
        } else {
            PPLMV = Integer.MIN_VALUE;
        }
    }

    protected final void initPPLMV2(String s) {
        if (!s.trim().isEmpty()) {
            PPLMV2 = Integer.parseInt(s);
        } else {
            PPLMV2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPPLMV3(String s) {
        if (!s.trim().isEmpty()) {
            PPLMV3 = Short.parseShort(s);
        } else {
            PPLMV3 = Short.MIN_VALUE;
        }
    }

    protected final void initPPLMVB(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPLMVB = false;
            } else {
                PPLMVB = true;
            }
        }
    }

    protected final void initPPLMVB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPLMVB2 = false;
            } else {
                PPLMVB2 = true;
            }
        }
    }

    protected final void initPPLMVB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPLMVB3 = false;
            } else {
                PPLMVB3 = true;
            }
        }
    }

    protected final void initPPLSTA(String s) {
        if (!s.trim().isEmpty()) {
            PPLSTA = Integer.parseInt(s);
        } else {
            PPLSTA = Integer.MIN_VALUE;
        }
    }

    protected final void initPPLSTA2(String s) {
        if (!s.trim().isEmpty()) {
            PPLSTA2 = Integer.parseInt(s);
        } else {
            PPLSTA2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPPLSTA3(String s) {
        if (!s.trim().isEmpty()) {
            PPLSTA3 = Integer.parseInt(s);
        } else {
            PPLSTA3 = Integer.MIN_VALUE;
        }
    }

    protected final void initPPLSTP(String s) {
        if (!s.trim().isEmpty()) {
            PPLSTP = Byte.parseByte(s);
        } else {
            PPLSTP = Byte.MIN_VALUE;
        }
    }

    protected final void initPPLSTP2(String s) {
        if (!s.trim().isEmpty()) {
            PPLSTP2 = Byte.parseByte(s);
        } else {
            PPLSTP2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPLSTP3(String s) {
        if (!s.trim().isEmpty()) {
            PPLSTP3 = Byte.parseByte(s);
        } else {
            PPLSTP3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPLUM(String s) {
        if (!s.trim().isEmpty()) {
            PPLUM = Byte.parseByte(s);
        } else {
            PPLUM = Byte.MIN_VALUE;
        }
    }

    protected final void initPPLUM2(String s) {
        if (!s.trim().isEmpty()) {
            PPLUM2 = Byte.parseByte(s);
        } else {
            PPLUM2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPLUM3(String s) {
        if (!s.trim().isEmpty()) {
            PPLUM3 = Byte.parseByte(s);
        } else {
            PPLUM3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPNINS(String s) {
        if (!s.trim().isEmpty()) {
            PPNINS = Byte.parseByte(s);
        } else {
            PPNINS = Byte.MIN_VALUE;
        }
    }

    protected final void initPPNINS2(String s) {
        if (!s.trim().isEmpty()) {
            PPNINS2 = Byte.parseByte(s);
        } else {
            PPNINS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPNINS3(String s) {
        if (!s.trim().isEmpty()) {
            PPNINS3 = Byte.parseByte(s);
        } else {
            PPNINS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPORG(String s) {
        if (!s.trim().isEmpty()) {
            PPORG = Byte.parseByte(s);
        } else {
            PPORG = Byte.MIN_VALUE;
        }
    }

    protected final void initPPORG2(String s) {
        if (!s.trim().isEmpty()) {
            PPORG2 = Byte.parseByte(s);
        } else {
            PPORG2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPORG3(String s) {
        if (!s.trim().isEmpty()) {
            PPORG3 = Byte.parseByte(s);
        } else {
            PPORG3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPPAY(String s) {
        if (!s.trim().isEmpty()) {
            PPPAY = Byte.parseByte(s);
        } else {
            PPPAY = Byte.MIN_VALUE;
        }
    }

    protected final void initPPPAY2(String s) {
        if (!s.trim().isEmpty()) {
            PPPAY2 = Byte.parseByte(s);
        } else {
            PPPAY2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPPAY3(String s) {
        if (!s.trim().isEmpty()) {
            PPPAY3 = Byte.parseByte(s);
        } else {
            PPPAY3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPRGAM(String s) {
        if (!s.trim().isEmpty()) {
            PPRGAM = Integer.parseInt(s);
        } else {
            PPRGAM = Integer.MIN_VALUE;
        }
    }

    protected final void initPPRGAM2(String s) {
        if (!s.trim().isEmpty()) {
            PPRGAM2 = Integer.parseInt(s);
        } else {
            PPRGAM2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPPRGAM3(String s) {
        if (!s.trim().isEmpty()) {
            PPRGAM3 = Integer.parseInt(s);
        } else {
            PPRGAM3 = Integer.MIN_VALUE;
        }
    }

    protected final void initPPRGFG(String s) {
        if (!s.trim().isEmpty()) {
            PPRGFG = Byte.parseByte(s);
        } else {
            PPRGFG = Byte.MIN_VALUE;
        }
    }

    protected final void initPPRGFG2(String s) {
        if (!s.trim().isEmpty()) {
            PPRGFG2 = Byte.parseByte(s);
        } else {
            PPRGFG2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPRGFG3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPRGFG3 = false;
            } else {
                PPRGFG3 = true;
            }
        }
    }

    protected final void initPPRGFR(String s) {
        if (!s.trim().isEmpty()) {
            PPRGFR = Double.parseDouble(s);
        } else {
            PPRGFR = Double.NaN;
        }
    }

    protected final void initPPRGFR2(String s) {
        if (!s.trim().isEmpty()) {
            PPRGFR2 = Byte.parseByte(s);
        } else {
            PPRGFR2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPRGFR3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPRGFR3 = false;
            } else {
                PPRGFR3 = true;
            }
        }
    }

    protected final void initPPRGH(String s) {
        if (!s.trim().isEmpty()) {
            PPRGH = Byte.parseByte(s);
        } else {
            PPRGH = Byte.MIN_VALUE;
        }
    }

    protected final void initPPRGH2(String s) {
        if (!s.trim().isEmpty()) {
            PPRGH2 = Byte.parseByte(s);
        } else {
            PPRGH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPRGH3(String s) {
        if (!s.trim().isEmpty()) {
            PPRGH3 = Byte.parseByte(s);
        } else {
            PPRGH3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPRGPE(String s) {
        if (!s.trim().isEmpty()) {
            PPRGPE = Byte.parseByte(s);
        } else {
            PPRGPE = Byte.MIN_VALUE;
        }
    }

    protected final void initPPRGPE2(String s) {
        if (!s.trim().isEmpty()) {
            PPRGPE2 = Byte.parseByte(s);
        } else {
            PPRGPE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPRGPE3(String s) {
        if (!s.trim().isEmpty()) {
            PPRGPE3 = Byte.parseByte(s);
        } else {
            PPRGPE3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPSIPP(String s) {
        if (!s.trim().isEmpty()) {
            PPSIPP = Byte.parseByte(s);
        } else {
            PPSIPP = Byte.MIN_VALUE;
        }
    }

    protected final void initPPSIPP2(String s) {
        if (!s.trim().isEmpty()) {
            PPSIPP2 = Byte.parseByte(s);
        } else {
            PPSIPP2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPSIPP3(String s) {
        if (!s.trim().isEmpty()) {
            PPSIPP3 = Byte.parseByte(s);
        } else {
            PPSIPP3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPSTMN(String s) {
        if (!s.trim().isEmpty()) {
            PPSTMN = Byte.parseByte(s);
        } else {
            PPSTMN = Byte.MIN_VALUE;
        }
    }

    protected final void initPPSTMN2(String s) {
        if (!s.trim().isEmpty()) {
            PPSTMN2 = Byte.parseByte(s);
        } else {
            PPSTMN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPSTMN3(String s) {
        if (!s.trim().isEmpty()) {
            PPSTMN3 = Byte.parseByte(s);
        } else {
            PPSTMN3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPSTYR(String s) {
        if (!s.trim().isEmpty()) {
            PPSTYR = Short.parseShort(s);
        } else {
            PPSTYR = Short.MIN_VALUE;
        }
    }

    protected final void initPPSTYR2(String s) {
        if (!s.trim().isEmpty()) {
            PPSTYR2 = Short.parseShort(s);
        } else {
            PPSTYR2 = Short.MIN_VALUE;
        }
    }

    protected final void initPPSTYR3(String s) {
        if (!s.trim().isEmpty()) {
            PPSTYR3 = Short.parseShort(s);
        } else {
            PPSTYR3 = Short.MIN_VALUE;
        }
    }

    protected final void initPPTYP(String s) {
        if (!s.trim().isEmpty()) {
            PPTYP = Byte.parseByte(s);
        } else {
            PPTYP = Byte.MIN_VALUE;
        }
    }

    protected final void initPPTYP2(String s) {
        if (!s.trim().isEmpty()) {
            PPTYP2 = Byte.parseByte(s);
        } else {
            PPTYP2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPTYP3(String s) {
        if (!s.trim().isEmpty()) {
            PPTYP3 = Byte.parseByte(s);
        } else {
            PPTYP3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPVAL(String s) {
        if (!s.trim().isEmpty()) {
            PPVAL = Integer.parseInt(s);
        } else {
            PPVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initPPVAL2(String s) {
        if (!s.trim().isEmpty()) {
            PPVAL2 = Integer.parseInt(s);
        } else {
            PPVAL2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPPVAL2_I(String s) {
        if (!s.trim().isEmpty()) {
            PPVAL2_I = Double.parseDouble(s);
        } else {
            PPVAL2_I = Double.NaN;
        }
    }

    protected final void initPPVAL2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PPVAL2_IFLAG = Byte.parseByte(s);
        } else {
            PPVAL2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPPVAL3(String s) {
        if (!s.trim().isEmpty()) {
            PPVAL3 = Integer.parseInt(s);
        } else {
            PPVAL3 = Integer.MIN_VALUE;
        }
    }

    protected final void initPPVAL3_I(String s) {
        if (!s.trim().isEmpty()) {
            PPVAL3_I = Double.parseDouble(s);
        } else {
            PPVAL3_I = Double.NaN;
        }
    }

    protected final void initPPVAL3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPVAL3_IFLAG = false;
            } else {
                PPVAL3_IFLAG = true;
            }
        }
    }

    protected final void initPPVALB(String s) {
        if (!s.trim().isEmpty()) {
            PPVALB = Byte.parseByte(s);
        } else {
            PPVALB = Byte.MIN_VALUE;
        }
    }

    protected final void initPPVALB2(String s) {
        if (!s.trim().isEmpty()) {
            PPVALB2 = Byte.parseByte(s);
        } else {
            PPVALB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPVALB3(String s) {
        if (!s.trim().isEmpty()) {
            PPVALB3 = Byte.parseByte(s);
        } else {
            PPVALB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPVAL_I(String s) {
        if (!s.trim().isEmpty()) {
            PPVAL_I = Double.parseDouble(s);
        } else {
            PPVAL_I = Double.NaN;
        }
    }

    protected final void initPPVAL_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PPVAL_IFLAG = Byte.parseByte(s);
        } else {
            PPVAL_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPPYRST(String s) {
        if (!s.trim().isEmpty()) {
            PPYRST = Short.parseShort(s);
        } else {
            PPYRST = Short.MIN_VALUE;
        }
    }

    protected final void initPPYRST2(String s) {
        if (!s.trim().isEmpty()) {
            PPYRST2 = Short.parseShort(s);
        } else {
            PPYRST2 = Short.MIN_VALUE;
        }
    }

    protected final void initPPYRST3(String s) {
        if (!s.trim().isEmpty()) {
            PPYRST3 = Short.parseShort(s);
        } else {
            PPYRST3 = Short.MIN_VALUE;
        }
    }

    protected final void initPPYSTP1(String s) {
        if (!s.trim().isEmpty()) {
            PPYSTP1 = Byte.parseByte(s);
        } else {
            PPYSTP1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPYSTP15(String s) {
        if (!s.trim().isEmpty()) {
            PPYSTP15 = Byte.parseByte(s);
        } else {
            PPYSTP15 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPYSTP2(String s) {
        if (!s.trim().isEmpty()) {
            PPYSTP2 = Byte.parseByte(s);
        } else {
            PPYSTP2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPYSTP3(String s) {
        if (!s.trim().isEmpty()) {
            PPYSTP3 = Byte.parseByte(s);
        } else {
            PPYSTP3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPYSTP8(String s) {
        if (!s.trim().isEmpty()) {
            PPYSTP8 = Byte.parseByte(s);
        } else {
            PPYSTP8 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPYSTP9(String s) {
        if (!s.trim().isEmpty()) {
            PPYSTP9 = Byte.parseByte(s);
        } else {
            PPYSTP9 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRACCU2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PRACCU2 = false;
            } else {
                PRACCU2 = true;
            }
        }
    }

    protected final void initPRACCU3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PRACCU3 = false;
            } else {
                PRACCU3 = true;
            }
        }
    }

    protected final void initPRACCU5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PRACCU5 = false;
            } else {
                PRACCU5 = true;
            }
        }
    }

    protected final void initPRACCU6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PRACCU6 = false;
            } else {
                PRACCU6 = true;
            }
        }
    }

    protected final void initPREVPENS(String s) {
        if (!s.trim().isEmpty()) {
            PREVPENS = Byte.parseByte(s);
        } else {
            PREVPENS = Byte.MIN_VALUE;
        }
    }

    protected final void initPRODTS01(String s) {
        if (!s.trim().isEmpty()) {
            PRODTS01 = Byte.parseByte(s);
        } else {
            PRODTS01 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRODTS02(String s) {
        if (!s.trim().isEmpty()) {
            PRODTS02 = Byte.parseByte(s);
        } else {
            PRODTS02 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRODTS03(String s) {
        if (!s.trim().isEmpty()) {
            PRODTS03 = Byte.parseByte(s);
        } else {
            PRODTS03 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRODTS04(String s) {
        if (!s.trim().isEmpty()) {
            PRODTS04 = Byte.parseByte(s);
        } else {
            PRODTS04 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRODTS05(String s) {
        if (!s.trim().isEmpty()) {
            PRODTS05 = Byte.parseByte(s);
        } else {
            PRODTS05 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRODTS06(String s) {
        if (!s.trim().isEmpty()) {
            PRODTS06 = Byte.parseByte(s);
        } else {
            PRODTS06 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRODTS07(String s) {
        if (!s.trim().isEmpty()) {
            PRODTS07 = Byte.parseByte(s);
        } else {
            PRODTS07 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRODTS08(String s) {
        if (!s.trim().isEmpty()) {
            PRODTS08 = Byte.parseByte(s);
        } else {
            PRODTS08 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRODTS09(String s) {
        if (!s.trim().isEmpty()) {
            PRODTS09 = Byte.parseByte(s);
        } else {
            PRODTS09 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRODTS10(String s) {
        if (!s.trim().isEmpty()) {
            PRODTS10 = Byte.parseByte(s);
        } else {
            PRODTS10 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRODTS11(String s) {
        if (!s.trim().isEmpty()) {
            PRODTS11 = Byte.parseByte(s);
        } else {
            PRODTS11 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRODTS12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PRODTS12 = false;
            } else {
                PRODTS12 = true;
            }
        }
    }

    protected final void initPRODTS201(String s) {
        if (!s.trim().isEmpty()) {
            PRODTS201 = Byte.parseByte(s);
        } else {
            PRODTS201 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRODTS202(String s) {
        if (!s.trim().isEmpty()) {
            PRODTS202 = Byte.parseByte(s);
        } else {
            PRODTS202 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRODTS203(String s) {
        if (!s.trim().isEmpty()) {
            PRODTS203 = Byte.parseByte(s);
        } else {
            PRODTS203 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRODTS204(String s) {
        if (!s.trim().isEmpty()) {
            PRODTS204 = Byte.parseByte(s);
        } else {
            PRODTS204 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRODTS205(String s) {
        if (!s.trim().isEmpty()) {
            PRODTS205 = Byte.parseByte(s);
        } else {
            PRODTS205 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRODTS206(String s) {
        if (!s.trim().isEmpty()) {
            PRODTS206 = Byte.parseByte(s);
        } else {
            PRODTS206 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRODTS207(String s) {
        if (!s.trim().isEmpty()) {
            PRODTS207 = Byte.parseByte(s);
        } else {
            PRODTS207 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRODTS208(String s) {
        if (!s.trim().isEmpty()) {
            PRODTS208 = Byte.parseByte(s);
        } else {
            PRODTS208 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRODTS209(String s) {
        if (!s.trim().isEmpty()) {
            PRODTS209 = Byte.parseByte(s);
        } else {
            PRODTS209 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRODTS210(String s) {
        if (!s.trim().isEmpty()) {
            PRODTS210 = Byte.parseByte(s);
        } else {
            PRODTS210 = Byte.MIN_VALUE;
        }
    }

    protected final void initPROXPERS(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            PROXPERS = false;
        }
    }

    protected final void initPROXYNUM(String s) {
        if (!s.trim().isEmpty()) {
            PROXYNUM = Byte.parseByte(s);
        } else {
            PROXYNUM = Byte.MIN_VALUE;
        }
    }

    protected final void initPSPEXPA(String s) {
        if (!s.trim().isEmpty()) {
            PSPEXPA = Integer.parseInt(s);
        } else {
            PSPEXPA = Integer.MIN_VALUE;
        }
    }

    protected final void initPSPEXPA_I(String s) {
        if (!s.trim().isEmpty()) {
            PSPEXPA_I = Integer.parseInt(s);
        } else {
            PSPEXPA_I = Integer.MIN_VALUE;
        }
    }

    protected final void initPSPEXPA_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PSPEXPA_IFLAG = false;
            } else {
                PSPEXPA_IFLAG = true;
            }
        }
    }

    protected final void initPSPEXPH(String s) {
        if (!s.trim().isEmpty()) {
            PSPEXPH = Byte.parseByte(s);
        } else {
            PSPEXPH = Byte.MIN_VALUE;
        }
    }

    protected final void initPSPEXPH_I(String s) {
        if (!s.trim().isEmpty()) {
            PSPEXPH_I = Byte.parseByte(s);
        } else {
            PSPEXPH_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPSPEXPH_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PSPEXPH_IFLAG = false;
            } else {
                PSPEXPH_IFLAG = true;
            }
        }
    }

    protected final void initPSPLUM(String s) {
        if (!s.trim().isEmpty()) {
            PSPLUM = Byte.parseByte(s);
        } else {
            PSPLUM = Byte.MIN_VALUE;
        }
    }

    protected final void initPSPLUVAL(String s) {
        if (!s.trim().isEmpty()) {
            PSPLUVAL = Integer.parseInt(s);
        } else {
            PSPLUVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initPSPSE(String s) {
        if (!s.trim().isEmpty()) {
            PSPSE = Byte.parseByte(s);
        } else {
            PSPSE = Byte.MIN_VALUE;
        }
    }

    protected final void initPSPSE_I(String s) {
        if (!s.trim().isEmpty()) {
            PSPSE_I = Byte.parseByte(s);
        } else {
            PSPSE_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPSPSE_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PSPSE_IFLAG = false;
            } else {
                PSPSE_IFLAG = true;
            }
        }
    }

    protected final void initPSTYPE1(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE1 = Byte.parseByte(s);
        } else {
            PSTYPE1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE10(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE10 = Byte.parseByte(s);
        } else {
            PSTYPE10 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE11(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE11 = Byte.parseByte(s);
        } else {
            PSTYPE11 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PSTYPE12 = false;
            } else {
                PSTYPE12 = true;
            }
        }
    }

    protected final void initPSTYPE13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PSTYPE13 = false;
            } else {
                PSTYPE13 = true;
            }
        }
    }

    protected final void initPSTYPE14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PSTYPE14 = false;
            } else {
                PSTYPE14 = true;
            }
        }
    }

    protected final void initPSTYPE15(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE15 = Byte.parseByte(s);
        } else {
            PSTYPE15 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE16(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE16 = Byte.parseByte(s);
        } else {
            PSTYPE16 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE17(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PSTYPE17 = false;
            } else {
                PSTYPE17 = true;
            }
        }
    }

    protected final void initPSTYPE18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PSTYPE18 = false;
            } else {
                PSTYPE18 = true;
            }
        }
    }

    protected final void initPSTYPE19(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PSTYPE19 = false;
            } else {
                PSTYPE19 = true;
            }
        }
    }

    protected final void initPSTYPE2(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE2 = Byte.parseByte(s);
        } else {
            PSTYPE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PSTYPE20 = false;
            } else {
                PSTYPE20 = true;
            }
        }
    }

    protected final void initPSTYPE3(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE3 = Byte.parseByte(s);
        } else {
            PSTYPE3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE4(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE4 = Byte.parseByte(s);
        } else {
            PSTYPE4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE5(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE5 = Byte.parseByte(s);
        } else {
            PSTYPE5 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE6(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE6 = Byte.parseByte(s);
        } else {
            PSTYPE6 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PSTYPE7 = false;
            } else {
                PSTYPE7 = true;
            }
        }
    }

    protected final void initPSTYPE8(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE8 = Byte.parseByte(s);
        } else {
            PSTYPE8 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE9(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE9 = Byte.parseByte(s);
        } else {
            PSTYPE9 = Byte.MIN_VALUE;
        }
    }

    protected final void initPWLUM(String s) {
        if (!s.trim().isEmpty()) {
            PWLUM = Byte.parseByte(s);
        } else {
            PWLUM = Byte.MIN_VALUE;
        }
    }

    protected final void initPWLUVAL(String s) {
        if (!s.trim().isEmpty()) {
            PWLUVAL = Integer.parseInt(s);
        } else {
            PWLUVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initR01(String s) {
        if (!s.trim().isEmpty()) {
            R01 = Byte.parseByte(s);
        } else {
            R01 = Byte.MIN_VALUE;
        }
    }

    protected final void initR02(String s) {
        if (!s.trim().isEmpty()) {
            R02 = Byte.parseByte(s);
        } else {
            R02 = Byte.MIN_VALUE;
        }
    }

    protected final void initR03(String s) {
        if (!s.trim().isEmpty()) {
            R03 = Byte.parseByte(s);
        } else {
            R03 = Byte.MIN_VALUE;
        }
    }

    protected final void initR04(String s) {
        if (!s.trim().isEmpty()) {
            R04 = Byte.parseByte(s);
        } else {
            R04 = Byte.MIN_VALUE;
        }
    }

    protected final void initR05(String s) {
        if (!s.trim().isEmpty()) {
            R05 = Byte.parseByte(s);
        } else {
            R05 = Byte.MIN_VALUE;
        }
    }

    protected final void initR06(String s) {
        if (!s.trim().isEmpty()) {
            R06 = Byte.parseByte(s);
        } else {
            R06 = Byte.MIN_VALUE;
        }
    }

    protected final void initR07(String s) {
        if (!s.trim().isEmpty()) {
            R07 = Byte.parseByte(s);
        } else {
            R07 = Byte.MIN_VALUE;
        }
    }

    protected final void initR08(String s) {
        if (!s.trim().isEmpty()) {
            R08 = Byte.parseByte(s);
        } else {
            R08 = Byte.MIN_VALUE;
        }
    }

    protected final void initR09(String s) {
        if (!s.trim().isEmpty()) {
            R09 = Byte.parseByte(s);
        } else {
            R09 = Byte.MIN_VALUE;
        }
    }

    protected final void initR10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                R10 = false;
            } else {
                R10 = true;
            }
        }
    }

    protected final void initR11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                R11 = false;
            } else {
                R11 = true;
            }
        }
    }

    protected final void initRNYDAY(String s) {
        if (!s.trim().isEmpty()) {
            RNYDAY = Byte.parseByte(s);
        } else {
            RNYDAY = Byte.MIN_VALUE;
        }
    }

    protected final void initSAMEJOB1(String s) {
        if (!s.trim().isEmpty()) {
            SAMEJOB1 = Byte.parseByte(s);
        } else {
            SAMEJOB1 = Byte.MIN_VALUE;
        }
    }

    protected final void initSAMEJOB2(String s) {
        if (!s.trim().isEmpty()) {
            SAMEJOB2 = Byte.parseByte(s);
        } else {
            SAMEJOB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initSAMEJOB3(String s) {
        if (!s.trim().isEmpty()) {
            SAMEJOB3 = Byte.parseByte(s);
        } else {
            SAMEJOB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initSAMEJOB4(String s) {
        if (!s.trim().isEmpty()) {
            SAMEJOB4 = Byte.parseByte(s);
        } else {
            SAMEJOB4 = Byte.MIN_VALUE;
        }
    }

    protected final void initSAMEJOB5(String s) {
        if (!s.trim().isEmpty()) {
            SAMEJOB5 = Byte.parseByte(s);
        } else {
            SAMEJOB5 = Byte.MIN_VALUE;
        }
    }

    protected final void initSAMEJOB6(String s) {
        if (!s.trim().isEmpty()) {
            SAMEJOB6 = Byte.parseByte(s);
        } else {
            SAMEJOB6 = Byte.MIN_VALUE;
        }
    }

    protected final void initSAMEMP(String s) {
        if (!s.trim().isEmpty()) {
            SAMEMP = Byte.parseByte(s);
        } else {
            SAMEMP = Byte.MIN_VALUE;
        }
    }

    protected final void initSAMJOB(String s) {
        if (!s.trim().isEmpty()) {
            SAMJOB = Byte.parseByte(s);
        } else {
            SAMJOB = Byte.MIN_VALUE;
        }
    }

    protected final void initSEAMT(String s) {
        if (!s.trim().isEmpty()) {
            SEAMT = Integer.parseInt(s);
        } else {
            SEAMT = Integer.MIN_VALUE;
        }
    }

    protected final void initSECTOR(String s) {
        if (!s.trim().isEmpty()) {
            SECTOR = Byte.parseByte(s);
        } else {
            SECTOR = Byte.MIN_VALUE;
        }
    }

    protected final void initSECTR2(String s) {
        if (!s.trim().isEmpty()) {
            SECTR2 = Byte.parseByte(s);
        } else {
            SECTR2 = Byte.MIN_VALUE;
        }
    }

    protected final void initSICCODE(String s) {
        if (!s.trim().isEmpty()) {
            SICCODE = Integer.parseInt(s);
        } else {
            SICCODE = Integer.MIN_VALUE;
        }
    }

    protected final void initSJ12G(String s) {
        if (!s.trim().isEmpty()) {
            SJ12G = Short.parseShort(s);
        } else {
            SJ12G = Short.MIN_VALUE;
        }
    }

    protected final void initSJ12N(String s) {
        if (!s.trim().isEmpty()) {
            SJ12N = Short.parseShort(s);
        } else {
            SJ12N = Short.MIN_VALUE;
        }
    }

    protected final void initSJGRS(String s) {
        if (!s.trim().isEmpty()) {
            SJGRS = Short.parseShort(s);
        } else {
            SJGRS = Short.MIN_VALUE;
        }
    }

    protected final void initSJNET(String s) {
        if (!s.trim().isEmpty()) {
            SJNET = Short.parseShort(s);
        } else {
            SJNET = Short.MIN_VALUE;
        }
    }

    protected final void initSJSEG(String s) {
        if (!s.trim().isEmpty()) {
            SJSEG = Integer.parseInt(s);
        } else {
            SJSEG = Integer.MIN_VALUE;
        }
    }

    protected final void initSMTPEN(String s) {
        if (!s.trim().isEmpty()) {
            SMTPEN = Byte.parseByte(s);
        } else {
            SMTPEN = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC01(String s) {
        if (!s.trim().isEmpty()) {
            SOURC01 = Byte.parseByte(s);
        } else {
            SOURC01 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC02(String s) {
        if (!s.trim().isEmpty()) {
            SOURC02 = Byte.parseByte(s);
        } else {
            SOURC02 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC03(String s) {
        if (!s.trim().isEmpty()) {
            SOURC03 = Byte.parseByte(s);
        } else {
            SOURC03 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC04(String s) {
        if (!s.trim().isEmpty()) {
            SOURC04 = Byte.parseByte(s);
        } else {
            SOURC04 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC05(String s) {
        if (!s.trim().isEmpty()) {
            SOURC05 = Byte.parseByte(s);
        } else {
            SOURC05 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC06(String s) {
        if (!s.trim().isEmpty()) {
            SOURC06 = Byte.parseByte(s);
        } else {
            SOURC06 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC07(String s) {
        if (!s.trim().isEmpty()) {
            SOURC07 = Byte.parseByte(s);
        } else {
            SOURC07 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC08(String s) {
        if (!s.trim().isEmpty()) {
            SOURC08 = Byte.parseByte(s);
        } else {
            SOURC08 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC09(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURC09 = false;
            } else {
                SOURC09 = true;
            }
        }
    }

    protected final void initSOURC103(String s) {
        if (!s.trim().isEmpty()) {
            SOURC103 = Byte.parseByte(s);
        } else {
            SOURC103 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC104(String s) {
        if (!s.trim().isEmpty()) {
            SOURC104 = Byte.parseByte(s);
        } else {
            SOURC104 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC105(String s) {
        if (!s.trim().isEmpty()) {
            SOURC105 = Byte.parseByte(s);
        } else {
            SOURC105 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC106(String s) {
        if (!s.trim().isEmpty()) {
            SOURC106 = Byte.parseByte(s);
        } else {
            SOURC106 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC107(String s) {
        if (!s.trim().isEmpty()) {
            SOURC107 = Byte.parseByte(s);
        } else {
            SOURC107 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC108(String s) {
        if (!s.trim().isEmpty()) {
            SOURC108 = Byte.parseByte(s);
        } else {
            SOURC108 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC109(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURC109 = false;
            } else {
                SOURC109 = true;
            }
        }
    }

    protected final void initSOURC120(String s) {
        if (!s.trim().isEmpty()) {
            SOURC120 = Byte.parseByte(s);
        } else {
            SOURC120 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC121(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURC121 = false;
            } else {
                SOURC121 = true;
            }
        }
    }

    protected final void initSOURC122(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURC122 = false;
            } else {
                SOURC122 = true;
            }
        }
    }

    protected final void initSOURC123(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURC123 = false;
            } else {
                SOURC123 = true;
            }
        }
    }

    protected final void initSOURC124(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURC124 = false;
            } else {
                SOURC124 = true;
            }
        }
    }

    protected final void initSOURC125(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURC125 = false;
            } else {
                SOURC125 = true;
            }
        }
    }

    protected final void initSOURC126(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURC126 = false;
            } else {
                SOURC126 = true;
            }
        }
    }

    protected final void initSOURC137(String s) {
        if (!s.trim().isEmpty()) {
            SOURC137 = Byte.parseByte(s);
        } else {
            SOURC137 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC154(String s) {
        if (!s.trim().isEmpty()) {
            SOURC154 = Byte.parseByte(s);
        } else {
            SOURC154 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC155(String s) {
        if (!s.trim().isEmpty()) {
            SOURC155 = Byte.parseByte(s);
        } else {
            SOURC155 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC156(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURC156 = false;
            } else {
                SOURC156 = true;
            }
        }
    }

    protected final void initSOURC172(String s) {
        if (!s.trim().isEmpty()) {
            SOURC172 = Byte.parseByte(s);
        } else {
            SOURC172 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC18(String s) {
        if (!s.trim().isEmpty()) {
            SOURC18 = Byte.parseByte(s);
        } else {
            SOURC18 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC19(String s) {
        if (!s.trim().isEmpty()) {
            SOURC19 = Byte.parseByte(s);
        } else {
            SOURC19 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC2(String s) {
        if (!s.trim().isEmpty()) {
            SOURC2 = Byte.parseByte(s);
        } else {
            SOURC2 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC20(String s) {
        if (!s.trim().isEmpty()) {
            SOURC20 = Byte.parseByte(s);
        } else {
            SOURC20 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC21(String s) {
        if (!s.trim().isEmpty()) {
            SOURC21 = Byte.parseByte(s);
        } else {
            SOURC21 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC22(String s) {
        if (!s.trim().isEmpty()) {
            SOURC22 = Byte.parseByte(s);
        } else {
            SOURC22 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC23(String s) {
        if (!s.trim().isEmpty()) {
            SOURC23 = Byte.parseByte(s);
        } else {
            SOURC23 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC24(String s) {
        if (!s.trim().isEmpty()) {
            SOURC24 = Byte.parseByte(s);
        } else {
            SOURC24 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC25(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURC25 = false;
            } else {
                SOURC25 = true;
            }
        }
    }

    protected final void initSOURC26(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURC26 = false;
            } else {
                SOURC26 = true;
            }
        }
    }

    protected final void initSOURC2P(String s) {
        if (!s.trim().isEmpty()) {
            SOURC2P = Byte.parseByte(s);
        } else {
            SOURC2P = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC2P10(String s) {
        if (!s.trim().isEmpty()) {
            SOURC2P10 = Byte.parseByte(s);
        } else {
            SOURC2P10 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC2P11(String s) {
        if (!s.trim().isEmpty()) {
            SOURC2P11 = Byte.parseByte(s);
        } else {
            SOURC2P11 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC2P2(String s) {
        if (!s.trim().isEmpty()) {
            SOURC2P2 = Byte.parseByte(s);
        } else {
            SOURC2P2 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC2P3(String s) {
        if (!s.trim().isEmpty()) {
            SOURC2P3 = Byte.parseByte(s);
        } else {
            SOURC2P3 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC2P4(String s) {
        if (!s.trim().isEmpty()) {
            SOURC2P4 = Byte.parseByte(s);
        } else {
            SOURC2P4 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC2P5(String s) {
        if (!s.trim().isEmpty()) {
            SOURC2P5 = Byte.parseByte(s);
        } else {
            SOURC2P5 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC2P6(String s) {
        if (!s.trim().isEmpty()) {
            SOURC2P6 = Byte.parseByte(s);
        } else {
            SOURC2P6 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC2P7(String s) {
        if (!s.trim().isEmpty()) {
            SOURC2P7 = Byte.parseByte(s);
        } else {
            SOURC2P7 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC2P8(String s) {
        if (!s.trim().isEmpty()) {
            SOURC2P8 = Byte.parseByte(s);
        } else {
            SOURC2P8 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC2P9(String s) {
        if (!s.trim().isEmpty()) {
            SOURC2P9 = Byte.parseByte(s);
        } else {
            SOURC2P9 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC3(String s) {
        if (!s.trim().isEmpty()) {
            SOURC3 = Byte.parseByte(s);
        } else {
            SOURC3 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC35(String s) {
        if (!s.trim().isEmpty()) {
            SOURC35 = Byte.parseByte(s);
        } else {
            SOURC35 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC36(String s) {
        if (!s.trim().isEmpty()) {
            SOURC36 = Byte.parseByte(s);
        } else {
            SOURC36 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC37(String s) {
        if (!s.trim().isEmpty()) {
            SOURC37 = Byte.parseByte(s);
        } else {
            SOURC37 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC38(String s) {
        if (!s.trim().isEmpty()) {
            SOURC38 = Byte.parseByte(s);
        } else {
            SOURC38 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC39(String s) {
        if (!s.trim().isEmpty()) {
            SOURC39 = Byte.parseByte(s);
        } else {
            SOURC39 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC4(String s) {
        if (!s.trim().isEmpty()) {
            SOURC4 = Byte.parseByte(s);
        } else {
            SOURC4 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC40(String s) {
        if (!s.trim().isEmpty()) {
            SOURC40 = Byte.parseByte(s);
        } else {
            SOURC40 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC41(String s) {
        if (!s.trim().isEmpty()) {
            SOURC41 = Byte.parseByte(s);
        } else {
            SOURC41 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC5(String s) {
        if (!s.trim().isEmpty()) {
            SOURC5 = Byte.parseByte(s);
        } else {
            SOURC5 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC52(String s) {
        if (!s.trim().isEmpty()) {
            SOURC52 = Byte.parseByte(s);
        } else {
            SOURC52 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC53(String s) {
        if (!s.trim().isEmpty()) {
            SOURC53 = Byte.parseByte(s);
        } else {
            SOURC53 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC54(String s) {
        if (!s.trim().isEmpty()) {
            SOURC54 = Byte.parseByte(s);
        } else {
            SOURC54 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC55(String s) {
        if (!s.trim().isEmpty()) {
            SOURC55 = Byte.parseByte(s);
        } else {
            SOURC55 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC56(String s) {
        if (!s.trim().isEmpty()) {
            SOURC56 = Byte.parseByte(s);
        } else {
            SOURC56 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC57(String s) {
        if (!s.trim().isEmpty()) {
            SOURC57 = Byte.parseByte(s);
        } else {
            SOURC57 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC58(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURC58 = false;
            } else {
                SOURC58 = true;
            }
        }
    }

    protected final void initSOURC6(String s) {
        if (!s.trim().isEmpty()) {
            SOURC6 = Byte.parseByte(s);
        } else {
            SOURC6 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC69(String s) {
        if (!s.trim().isEmpty()) {
            SOURC69 = Byte.parseByte(s);
        } else {
            SOURC69 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC7(String s) {
        if (!s.trim().isEmpty()) {
            SOURC7 = Byte.parseByte(s);
        } else {
            SOURC7 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC70(String s) {
        if (!s.trim().isEmpty()) {
            SOURC70 = Byte.parseByte(s);
        } else {
            SOURC70 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC71(String s) {
        if (!s.trim().isEmpty()) {
            SOURC71 = Byte.parseByte(s);
        } else {
            SOURC71 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC72(String s) {
        if (!s.trim().isEmpty()) {
            SOURC72 = Byte.parseByte(s);
        } else {
            SOURC72 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC73(String s) {
        if (!s.trim().isEmpty()) {
            SOURC73 = Byte.parseByte(s);
        } else {
            SOURC73 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC74(String s) {
        if (!s.trim().isEmpty()) {
            SOURC74 = Byte.parseByte(s);
        } else {
            SOURC74 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC75(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURC75 = false;
            } else {
                SOURC75 = true;
            }
        }
    }

    protected final void initSOURC8(String s) {
        if (!s.trim().isEmpty()) {
            SOURC8 = Byte.parseByte(s);
        } else {
            SOURC8 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC86(String s) {
        if (!s.trim().isEmpty()) {
            SOURC86 = Byte.parseByte(s);
        } else {
            SOURC86 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC87(String s) {
        if (!s.trim().isEmpty()) {
            SOURC87 = Byte.parseByte(s);
        } else {
            SOURC87 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC88(String s) {
        if (!s.trim().isEmpty()) {
            SOURC88 = Byte.parseByte(s);
        } else {
            SOURC88 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC89(String s) {
        if (!s.trim().isEmpty()) {
            SOURC89 = Byte.parseByte(s);
        } else {
            SOURC89 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC9(String s) {
        if (!s.trim().isEmpty()) {
            SOURC9 = Byte.parseByte(s);
        } else {
            SOURC9 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC90(String s) {
        if (!s.trim().isEmpty()) {
            SOURC90 = Byte.parseByte(s);
        } else {
            SOURC90 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC91(String s) {
        if (!s.trim().isEmpty()) {
            SOURC91 = Byte.parseByte(s);
        } else {
            SOURC91 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURC92(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURC92 = false;
            } else {
                SOURC92 = true;
            }
        }
    }

    protected final void initSOURCP01(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP01 = Byte.parseByte(s);
        } else {
            SOURCP01 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP02(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP02 = Byte.parseByte(s);
        } else {
            SOURCP02 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP03(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP03 = Byte.parseByte(s);
        } else {
            SOURCP03 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP04(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP04 = Byte.parseByte(s);
        } else {
            SOURCP04 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP05(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP05 = Byte.parseByte(s);
        } else {
            SOURCP05 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP06(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP06 = Byte.parseByte(s);
        } else {
            SOURCP06 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP07(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP07 = Byte.parseByte(s);
        } else {
            SOURCP07 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP08(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP08 = Byte.parseByte(s);
        } else {
            SOURCP08 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP09(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP09 = Byte.parseByte(s);
        } else {
            SOURCP09 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP102(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURCP102 = false;
            } else {
                SOURCP102 = true;
            }
        }
    }

    protected final void initSOURCP103(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP103 = Byte.parseByte(s);
        } else {
            SOURCP103 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP104(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP104 = Byte.parseByte(s);
        } else {
            SOURCP104 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP105(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP105 = Byte.parseByte(s);
        } else {
            SOURCP105 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP106(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP106 = Byte.parseByte(s);
        } else {
            SOURCP106 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP107(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP107 = Byte.parseByte(s);
        } else {
            SOURCP107 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURCP11 = false;
            } else {
                SOURCP11 = true;
            }
        }
    }

    protected final void initSOURCP12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURCP12 = false;
            } else {
                SOURCP12 = true;
            }
        }
    }

    protected final void initSOURCP120(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP120 = Byte.parseByte(s);
        } else {
            SOURCP120 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP121(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURCP121 = false;
            } else {
                SOURCP121 = true;
            }
        }
    }

    protected final void initSOURCP122(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURCP122 = false;
            } else {
                SOURCP122 = true;
            }
        }
    }

    protected final void initSOURCP123(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURCP123 = false;
            } else {
                SOURCP123 = true;
            }
        }
    }

    protected final void initSOURCP124(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURCP124 = false;
            } else {
                SOURCP124 = true;
            }
        }
    }

    protected final void initSOURCP125(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURCP125 = false;
            } else {
                SOURCP125 = true;
            }
        }
    }

    protected final void initSOURCP137(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP137 = Byte.parseByte(s);
        } else {
            SOURCP137 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP154(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP154 = Byte.parseByte(s);
        } else {
            SOURCP154 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP155(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURCP155 = false;
            } else {
                SOURCP155 = true;
            }
        }
    }

    protected final void initSOURCP171(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP171 = Byte.parseByte(s);
        } else {
            SOURCP171 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP18(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP18 = Byte.parseByte(s);
        } else {
            SOURCP18 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP19(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP19 = Byte.parseByte(s);
        } else {
            SOURCP19 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP20(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP20 = Byte.parseByte(s);
        } else {
            SOURCP20 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP21(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP21 = Byte.parseByte(s);
        } else {
            SOURCP21 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP22(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP22 = Byte.parseByte(s);
        } else {
            SOURCP22 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP23(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP23 = Byte.parseByte(s);
        } else {
            SOURCP23 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP24(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP24 = Byte.parseByte(s);
        } else {
            SOURCP24 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP25(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP25 = Byte.parseByte(s);
        } else {
            SOURCP25 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP26(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP26 = Byte.parseByte(s);
        } else {
            SOURCP26 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP27(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP27 = Byte.parseByte(s);
        } else {
            SOURCP27 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP28(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURCP28 = false;
            } else {
                SOURCP28 = true;
            }
        }
    }

    protected final void initSOURCP290(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURCP290 = false;
            } else {
                SOURCP290 = true;
            }
        }
    }

    protected final void initSOURCP35(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP35 = Byte.parseByte(s);
        } else {
            SOURCP35 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP36(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP36 = Byte.parseByte(s);
        } else {
            SOURCP36 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP37(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP37 = Byte.parseByte(s);
        } else {
            SOURCP37 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP38(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP38 = Byte.parseByte(s);
        } else {
            SOURCP38 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP39(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP39 = Byte.parseByte(s);
        } else {
            SOURCP39 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP40(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP40 = Byte.parseByte(s);
        } else {
            SOURCP40 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP41(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP41 = Byte.parseByte(s);
        } else {
            SOURCP41 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP42(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP42 = Byte.parseByte(s);
        } else {
            SOURCP42 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP43(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP43 = Byte.parseByte(s);
        } else {
            SOURCP43 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP44(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURCP44 = false;
            } else {
                SOURCP44 = true;
            }
        }
    }

    protected final void initSOURCP52(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP52 = Byte.parseByte(s);
        } else {
            SOURCP52 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP53(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP53 = Byte.parseByte(s);
        } else {
            SOURCP53 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP54(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP54 = Byte.parseByte(s);
        } else {
            SOURCP54 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP55(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP55 = Byte.parseByte(s);
        } else {
            SOURCP55 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP56(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP56 = Byte.parseByte(s);
        } else {
            SOURCP56 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP57(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP57 = Byte.parseByte(s);
        } else {
            SOURCP57 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP58(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP58 = Byte.parseByte(s);
        } else {
            SOURCP58 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP59(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURCP59 = false;
            } else {
                SOURCP59 = true;
            }
        }
    }

    protected final void initSOURCP60(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURCP60 = false;
            } else {
                SOURCP60 = true;
            }
        }
    }

    protected final void initSOURCP61(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURCP61 = false;
            } else {
                SOURCP61 = true;
            }
        }
    }

    protected final void initSOURCP69(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP69 = Byte.parseByte(s);
        } else {
            SOURCP69 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP70(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP70 = Byte.parseByte(s);
        } else {
            SOURCP70 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP71(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP71 = Byte.parseByte(s);
        } else {
            SOURCP71 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP72(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP72 = Byte.parseByte(s);
        } else {
            SOURCP72 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP73(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP73 = Byte.parseByte(s);
        } else {
            SOURCP73 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP74(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURCP74 = false;
            } else {
                SOURCP74 = true;
            }
        }
    }

    protected final void initSOURCP75(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURCP75 = false;
            } else {
                SOURCP75 = true;
            }
        }
    }

    protected final void initSOURCP76(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SOURCP76 = false;
            } else {
                SOURCP76 = true;
            }
        }
    }

    protected final void initSOURCP86(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP86 = Byte.parseByte(s);
        } else {
            SOURCP86 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP87(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP87 = Byte.parseByte(s);
        } else {
            SOURCP87 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP88(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP88 = Byte.parseByte(s);
        } else {
            SOURCP88 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP89(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP89 = Byte.parseByte(s);
        } else {
            SOURCP89 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOURCP90(String s) {
        if (!s.trim().isEmpty()) {
            SOURCP90 = Byte.parseByte(s);
        } else {
            SOURCP90 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPENDM(String s) {
        if (!s.trim().isEmpty()) {
            SPENDM = Byte.parseByte(s);
        } else {
            SPENDM = Byte.MIN_VALUE;
        }
    }

    protected final void initSSFAM1(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SSFAM1 = false;
            } else {
                SSFAM1 = true;
            }
        }
    }

    protected final void initSSNOUNITS(String s) {
        if (!s.trim().isEmpty()) {
            SSNOUNITS = Byte.parseByte(s);
        } else {
            SSNOUNITS = Byte.MIN_VALUE;
        }
    }

    protected final void initSTATUS(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                STATUS = false;
            } else {
                STATUS = true;
            }
        }
    }

    protected final void initTACC(String s) {
        if (!s.trim().isEmpty()) {
            TACC = Byte.parseByte(s);
        } else {
            TACC = Byte.MIN_VALUE;
        }
    }

    protected final void initTACC2(String s) {
        if (!s.trim().isEmpty()) {
            TACC2 = Byte.parseByte(s);
        } else {
            TACC2 = Byte.MIN_VALUE;
        }
    }

    protected final void initTACC3(String s) {
        if (!s.trim().isEmpty()) {
            TACC3 = Byte.parseByte(s);
        } else {
            TACC3 = Byte.MIN_VALUE;
        }
    }

    protected final void initTADDVB(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TADDVB = false;
            } else {
                TADDVB = true;
            }
        }
    }

    protected final void initTADDVB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TADDVB2 = false;
            } else {
                TADDVB2 = true;
            }
        }
    }

    protected final void initTADDVB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TADDVB3 = false;
            } else {
                TADDVB3 = true;
            }
        }
    }

    protected final void initTADDVL(String s) {
        if (!s.trim().isEmpty()) {
            TADDVL = Integer.parseInt(s);
        } else {
            TADDVL = Integer.MIN_VALUE;
        }
    }

    protected final void initTADDVL2(String s) {
        if (!s.trim().isEmpty()) {
            TADDVL2 = Integer.parseInt(s);
        } else {
            TADDVL2 = Integer.MIN_VALUE;
        }
    }

    protected final void initTADDVL3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TADDVL3 = false;
            } else {
                TADDVL3 = true;
            }
        }
    }

    protected final void initTBCAP(String s) {
        if (!s.trim().isEmpty()) {
            TBCAP = Byte.parseByte(s);
        } else {
            TBCAP = Byte.MIN_VALUE;
        }
    }

    protected final void initTBCAP2(String s) {
        if (!s.trim().isEmpty()) {
            TBCAP2 = Byte.parseByte(s);
        } else {
            TBCAP2 = Byte.MIN_VALUE;
        }
    }

    protected final void initTBCAP3(String s) {
        if (!s.trim().isEmpty()) {
            TBCAP3 = Byte.parseByte(s);
        } else {
            TBCAP3 = Byte.MIN_VALUE;
        }
    }

    protected final void initTBCAPY(String s) {
        if (!s.trim().isEmpty()) {
            TBCAPY = Short.parseShort(s);
        } else {
            TBCAPY = Short.MIN_VALUE;
        }
    }

    protected final void initTBCAPY2(String s) {
        if (!s.trim().isEmpty()) {
            TBCAPY2 = Short.parseShort(s);
        } else {
            TBCAPY2 = Short.MIN_VALUE;
        }
    }

    protected final void initTBCAPY3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBCAPY3 = false;
            } else {
                TBCAPY3 = true;
            }
        }
    }

    protected final void initTBCKNO(String s) {
        if (!s.trim().isEmpty()) {
            TBCKNO = Byte.parseByte(s);
        } else {
            TBCKNO = Byte.MIN_VALUE;
        }
    }

    protected final void initTBCKNO2(String s) {
        if (!s.trim().isEmpty()) {
            TBCKNO2 = Byte.parseByte(s);
        } else {
            TBCKNO2 = Byte.MIN_VALUE;
        }
    }

    protected final void initTBCKNO3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBCKNO3 = false;
            } else {
                TBCKNO3 = true;
            }
        }
    }

    protected final void initTBEN1(String s) {
        if (!s.trim().isEmpty()) {
            TBEN1 = Byte.parseByte(s);
        } else {
            TBEN1 = Byte.MIN_VALUE;
        }
    }

    protected final void initTBEN10(String s) {
        if (!s.trim().isEmpty()) {
            TBEN10 = Byte.parseByte(s);
        } else {
            TBEN10 = Byte.MIN_VALUE;
        }
    }

    protected final void initTBEN11(String s) {
        if (!s.trim().isEmpty()) {
            TBEN11 = Byte.parseByte(s);
        } else {
            TBEN11 = Byte.MIN_VALUE;
        }
    }

    protected final void initTBEN12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN12 = false;
            } else {
                TBEN12 = true;
            }
        }
    }

    protected final void initTBEN13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN13 = false;
            } else {
                TBEN13 = true;
            }
        }
    }

    protected final void initTBEN14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN14 = false;
            } else {
                TBEN14 = true;
            }
        }
    }

    protected final void initTBEN15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN15 = false;
            } else {
                TBEN15 = true;
            }
        }
    }

    protected final void initTBEN16(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN16 = false;
            } else {
                TBEN16 = true;
            }
        }
    }

    protected final void initTBEN17(String s) {
        if (!s.trim().isEmpty()) {
            TBEN17 = Byte.parseByte(s);
        } else {
            TBEN17 = Byte.MIN_VALUE;
        }
    }

    protected final void initTBEN18(String s) {
        if (!s.trim().isEmpty()) {
            TBEN18 = Byte.parseByte(s);
        } else {
            TBEN18 = Byte.MIN_VALUE;
        }
    }

    protected final void initTBEN19(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN19 = false;
            } else {
                TBEN19 = true;
            }
        }
    }

    protected final void initTBEN2(String s) {
        if (!s.trim().isEmpty()) {
            TBEN2 = Byte.parseByte(s);
        } else {
            TBEN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initTBEN20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN20 = false;
            } else {
                TBEN20 = true;
            }
        }
    }

    protected final void initTBEN21(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN21 = false;
            } else {
                TBEN21 = true;
            }
        }
    }

    protected final void initTBEN22(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN22 = false;
            } else {
                TBEN22 = true;
            }
        }
    }

    protected final void initTBEN23(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN23 = false;
            } else {
                TBEN23 = true;
            }
        }
    }

    protected final void initTBEN24(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN24 = false;
            } else {
                TBEN24 = true;
            }
        }
    }

    protected final void initTBEN3(String s) {
        if (!s.trim().isEmpty()) {
            TBEN3 = Byte.parseByte(s);
        } else {
            TBEN3 = Byte.MIN_VALUE;
        }
    }

    protected final void initTBEN4(String s) {
        if (!s.trim().isEmpty()) {
            TBEN4 = Byte.parseByte(s);
        } else {
            TBEN4 = Byte.MIN_VALUE;
        }
    }

    protected final void initTBEN5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN5 = false;
            } else {
                TBEN5 = true;
            }
        }
    }

    protected final void initTBEN6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN6 = false;
            } else {
                TBEN6 = true;
            }
        }
    }

    protected final void initTBEN7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN7 = false;
            } else {
                TBEN7 = true;
            }
        }
    }

    protected final void initTBEN8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN8 = false;
            } else {
                TBEN8 = true;
            }
        }
    }

    protected final void initTBEN9(String s) {
        if (!s.trim().isEmpty()) {
            TBEN9 = Byte.parseByte(s);
        } else {
            TBEN9 = Byte.MIN_VALUE;
        }
    }

    protected final void initTBINC(String s) {
        if (!s.trim().isEmpty()) {
            TBINC = Byte.parseByte(s);
        } else {
            TBINC = Byte.MIN_VALUE;
        }
    }

    protected final void initTBINC2(String s) {
        if (!s.trim().isEmpty()) {
            TBINC2 = Byte.parseByte(s);
        } else {
            TBINC2 = Byte.MIN_VALUE;
        }
    }

    protected final void initTBINC3(String s) {
        if (!s.trim().isEmpty()) {
            TBINC3 = Byte.parseByte(s);
        } else {
            TBINC3 = Byte.MIN_VALUE;
        }
    }

    protected final void initTBREC(String s) {
        if (!s.trim().isEmpty()) {
            TBREC = Integer.parseInt(s);
        } else {
            TBREC = Integer.MIN_VALUE;
        }
    }

    protected final void initTBREC2(String s) {
        if (!s.trim().isEmpty()) {
            TBREC2 = Integer.parseInt(s);
        } else {
            TBREC2 = Integer.MIN_VALUE;
        }
    }

    protected final void initTBREC3(String s) {
        if (!s.trim().isEmpty()) {
            TBREC3 = Short.parseShort(s);
        } else {
            TBREC3 = Short.MIN_VALUE;
        }
    }

    protected final void initTBRECB(String s) {
        if (!s.trim().isEmpty()) {
            TBRECB = Byte.parseByte(s);
        } else {
            TBRECB = Byte.MIN_VALUE;
        }
    }

    protected final void initTBRECB2(String s) {
        if (!s.trim().isEmpty()) {
            TBRECB2 = Byte.parseByte(s);
        } else {
            TBRECB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initTBRECB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBRECB3 = false;
            } else {
                TBRECB3 = true;
            }
        }
    }

    protected final void initTBVALB(String s) {
        if (!s.trim().isEmpty()) {
            TBVALB = Byte.parseByte(s);
        } else {
            TBVALB = Byte.MIN_VALUE;
        }
    }

    protected final void initTBVALB2(String s) {
        if (!s.trim().isEmpty()) {
            TBVALB2 = Byte.parseByte(s);
        } else {
            TBVALB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initTBVALB3(String s) {
        if (!s.trim().isEmpty()) {
            TBVALB3 = Byte.parseByte(s);
        } else {
            TBVALB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initTCONT1(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TCONT1 = false;
            } else {
                TCONT1 = true;
            }
        }
    }

    protected final void initTCONT2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TCONT2 = false;
            } else {
                TCONT2 = true;
            }
        }
    }

    protected final void initTDUP(String s) {
        if (!s.trim().isEmpty()) {
            TDUP = Byte.parseByte(s);
        } else {
            TDUP = Byte.MIN_VALUE;
        }
    }

    protected final void initTDUP2(String s) {
        if (!s.trim().isEmpty()) {
            TDUP2 = Byte.parseByte(s);
        } else {
            TDUP2 = Byte.MIN_VALUE;
        }
    }

    protected final void initTDUP3(String s) {
        if (!s.trim().isEmpty()) {
            TDUP3 = Byte.parseByte(s);
        } else {
            TDUP3 = Byte.MIN_VALUE;
        }
    }

    protected final void initTDUPA(String s) {
        if (!s.trim().isEmpty()) {
            TDUPA = Byte.parseByte(s);
        } else {
            TDUPA = Byte.MIN_VALUE;
        }
    }

    protected final void initTDUPA2(String s) {
        if (!s.trim().isEmpty()) {
            TDUPA2 = Byte.parseByte(s);
        } else {
            TDUPA2 = Byte.MIN_VALUE;
        }
    }

    protected final void initTDUPA3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TDUPA3 = false;
            } else {
                TDUPA3 = true;
            }
        }
    }

    protected final void initTJNT1(String s) {
        if (!s.trim().isEmpty()) {
            TJNT1 = Byte.parseByte(s);
        } else {
            TJNT1 = Byte.MIN_VALUE;
        }
    }

    protected final void initTJNT2(String s) {
        if (!s.trim().isEmpty()) {
            TJNT2 = Byte.parseByte(s);
        } else {
            TJNT2 = Byte.MIN_VALUE;
        }
    }

    protected final void initTJNT3(String s) {
        if (!s.trim().isEmpty()) {
            TJNT3 = Byte.parseByte(s);
        } else {
            TJNT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initTJNT4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TJNT4 = false;
            } else {
                TJNT4 = true;
            }
        }
    }

    protected final void initTJNT5(String s) {
        if (!s.trim().isEmpty()) {
            TJNT5 = Byte.parseByte(s);
        } else {
            TJNT5 = Byte.MIN_VALUE;
        }
    }

    protected final void initTJNT6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TJNT6 = false;
            } else {
                TJNT6 = true;
            }
        }
    }

    protected final void initTSNEW(String s) {
        if (!s.trim().isEmpty()) {
            TSNEW = Byte.parseByte(s);
        } else {
            TSNEW = Byte.MIN_VALUE;
        }
    }

    protected final void initTSNO(String s) {
        if (!s.trim().isEmpty()) {
            TSNO = Byte.parseByte(s);
        } else {
            TSNO = Byte.MIN_VALUE;
        }
    }

    protected final void initTSNO2(String s) {
        if (!s.trim().isEmpty()) {
            TSNO2 = Byte.parseByte(s);
        } else {
            TSNO2 = Byte.MIN_VALUE;
        }
    }

    protected final void initTSNO3(String s) {
        if (!s.trim().isEmpty()) {
            TSNO3 = Byte.parseByte(s);
        } else {
            TSNO3 = Byte.MIN_VALUE;
        }
    }

    protected final void initTSNUM2(String s) {
        if (!s.trim().isEmpty()) {
            TSNUM2 = Byte.parseByte(s);
        } else {
            TSNUM2 = Byte.MIN_VALUE;
        }
    }

    protected final void initTVAL(String s) {
        if (!s.trim().isEmpty()) {
            TVAL = Integer.parseInt(s);
        } else {
            TVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initTVAL2(String s) {
        if (!s.trim().isEmpty()) {
            TVAL2 = Integer.parseInt(s);
        } else {
            TVAL2 = Integer.MIN_VALUE;
        }
    }

    protected final void initTVAL3(String s) {
        if (!s.trim().isEmpty()) {
            TVAL3 = Integer.parseInt(s);
        } else {
            TVAL3 = Integer.MIN_VALUE;
        }
    }

    protected final void initTVALB(String s) {
        if (!s.trim().isEmpty()) {
            TVALB = Byte.parseByte(s);
        } else {
            TVALB = Byte.MIN_VALUE;
        }
    }

    protected final void initTVALB2(String s) {
        if (!s.trim().isEmpty()) {
            TVALB2 = Byte.parseByte(s);
        } else {
            TVALB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initTVALB3(String s) {
        if (!s.trim().isEmpty()) {
            TVALB3 = Byte.parseByte(s);
        } else {
            TVALB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initTWHO1(String s) {
        if (!s.trim().isEmpty()) {
            TWHO1 = Byte.parseByte(s);
        } else {
            TWHO1 = Byte.MIN_VALUE;
        }
    }

    protected final void initTWHO10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO10 = false;
            } else {
                TWHO10 = true;
            }
        }
    }

    protected final void initTWHO11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO11 = false;
            } else {
                TWHO11 = true;
            }
        }
    }

    protected final void initTWHO12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO12 = false;
            } else {
                TWHO12 = true;
            }
        }
    }

    protected final void initTWHO13(String s) {
        if (!s.trim().isEmpty()) {
            TWHO13 = Byte.parseByte(s);
        } else {
            TWHO13 = Byte.MIN_VALUE;
        }
    }

    protected final void initTWHO14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO14 = false;
            } else {
                TWHO14 = true;
            }
        }
    }

    protected final void initTWHO15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO15 = false;
            } else {
                TWHO15 = true;
            }
        }
    }

    protected final void initTWHO16(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO16 = false;
            } else {
                TWHO16 = true;
            }
        }
    }

    protected final void initTWHO17(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO17 = false;
            } else {
                TWHO17 = true;
            }
        }
    }

    protected final void initTWHO18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO18 = false;
            } else {
                TWHO18 = true;
            }
        }
    }

    protected final void initTWHO2(String s) {
        if (!s.trim().isEmpty()) {
            TWHO2 = Byte.parseByte(s);
        } else {
            TWHO2 = Byte.MIN_VALUE;
        }
    }

    protected final void initTWHO3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO3 = false;
            } else {
                TWHO3 = true;
            }
        }
    }

    protected final void initTWHO4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO4 = false;
            } else {
                TWHO4 = true;
            }
        }
    }

    protected final void initTWHO5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO5 = false;
            } else {
                TWHO5 = true;
            }
        }
    }

    protected final void initTWHO6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO6 = false;
            } else {
                TWHO6 = true;
            }
        }
    }

    protected final void initTWHO7(String s) {
        if (!s.trim().isEmpty()) {
            TWHO7 = Byte.parseByte(s);
        } else {
            TWHO7 = Byte.MIN_VALUE;
        }
    }

    protected final void initTWHO8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO8 = false;
            } else {
                TWHO8 = true;
            }
        }
    }

    protected final void initTWHO9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO9 = false;
            } else {
                TWHO9 = true;
            }
        }
    }

    protected final void initUBUYLET(String s) {
        if (!s.trim().isEmpty()) {
            UBUYLET = Byte.parseByte(s);
        } else {
            UBUYLET = Byte.MIN_VALUE;
        }
    }

    protected final void initUBUYLET_I(String s) {
        if (!s.trim().isEmpty()) {
            UBUYLET_I = Byte.parseByte(s);
        } else {
            UBUYLET_I = Byte.MIN_VALUE;
        }
    }

    protected final void initUBUYLET_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                UBUYLET_IFLAG = false;
            } else {
                UBUYLET_IFLAG = true;
            }
        }
    }

    protected final void initUBUYTOL(String s) {
        if (!s.trim().isEmpty()) {
            UBUYTOL = Byte.parseByte(s);
        } else {
            UBUYTOL = Byte.MIN_VALUE;
        }
    }

    protected final void initUBUYTOL2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -9) {
                UBUYTOL2 = false;
            } else {
                UBUYTOL2 = true;
            }
        }
    }

    protected final void initUBUYTOL3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -9) {
                UBUYTOL3 = false;
            } else {
                UBUYTOL3 = true;
            }
        }
    }

    protected final void initUBUYTOL4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -9) {
                UBUYTOL4 = false;
            } else {
                UBUYTOL4 = true;
            }
        }
    }

    protected final void initUBUYTOL5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -9) {
                UBUYTOL5 = false;
            } else {
                UBUYTOL5 = true;
            }
        }
    }

    protected final void initUPNO(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                UPNO = false;
            } else {
                UPNO = true;
            }
        }
    }

    protected final void initVALPBLUM1(String s) {
        if (!s.trim().isEmpty()) {
            VALPBLUM1 = Integer.parseInt(s);
        } else {
            VALPBLUM1 = Integer.MIN_VALUE;
        }
    }

    protected final void initVALPBLUM2(String s) {
        if (!s.trim().isEmpty()) {
            VALPBLUM2 = Integer.parseInt(s);
        } else {
            VALPBLUM2 = Integer.MIN_VALUE;
        }
    }

    protected final void initWKBETW(String s) {
        if (!s.trim().isEmpty()) {
            WKBETW = Byte.parseByte(s);
        } else {
            WKBETW = Byte.MIN_VALUE;
        }
    }

    protected final void initWKHRS(String s) {
        if (!s.trim().isEmpty()) {
            WKHRS = Byte.parseByte(s);
        } else {
            WKHRS = Byte.MIN_VALUE;
        }
    }

    protected final void initWKHRSIR(String s) {
        if (!s.trim().isEmpty()) {
            WKHRSIR = Byte.parseByte(s);
        } else {
            WKHRSIR = Byte.MIN_VALUE;
        }
    }

    protected final void initWPENTYPE(String s) {
        if (!s.trim().isEmpty()) {
            WPENTYPE = Byte.parseByte(s);
        } else {
            WPENTYPE = Byte.MIN_VALUE;
        }
    }

    protected final void initXMARSTA(String s) {
        if (!s.trim().isEmpty()) {
            XMARSTA = Byte.parseByte(s);
        } else {
            XMARSTA = Byte.MIN_VALUE;
        }
    }

    protected final void initXS_CALWGT(String s) {
        if (!s.trim().isEmpty()) {
            XS_CALWGT = Double.parseDouble(s);
        } else {
            XS_CALWGT = Double.NaN;
        }
    }

    public double getACCFRAC() {
        return ACCFRAC;
    }

    public double getACCFRAC2() {
        return ACCFRAC2;
    }

    public double getASAF2T() {
        return ASAF2T;
    }

    public double getASAFT() {
        return ASAFT;
    }

    public double getBAMT19() {
        return BAMT19;
    }

    public byte getBAMTDK19() {
        return BAMTDK19;
    }

    public boolean getBEN1Q4() {
        return BEN1Q4;
    }

    public byte getBENUS() {
        return BENUS;
    }

    public byte getBFUND11() {
        return BFUND11;
    }

    public boolean getBFUND12() {
        return BFUND12;
    }

    public boolean getBFUND13() {
        return BFUND13;
    }

    public boolean getBFUND14() {
        return BFUND14;
    }

    public boolean getBFUND15() {
        return BFUND15;
    }

    public boolean getBFUND16() {
        return BFUND16;
    }

    public boolean getBFUND19() {
        return BFUND19;
    }

    public boolean getBFUND20() {
        return BFUND20;
    }

    public boolean getBFUND21() {
        return BFUND21;
    }

    public boolean getBFUND22() {
        return BFUND22;
    }

    public boolean getBFUND23() {
        return BFUND23;
    }

    public boolean getBFUND24() {
        return BFUND24;
    }

    public boolean getBFUND5() {
        return BFUND5;
    }

    public boolean getBFUND6() {
        return BFUND6;
    }

    public boolean getBFUND7() {
        return BFUND7;
    }

    public boolean getBFUND8() {
        return BFUND8;
    }

    public byte getBPD19() {
        return BPD19;
    }

    public byte getBPRFLOSS2() {
        return BPRFLOSS2;
    }

    public byte getBPRFLOSS3() {
        return BPRFLOSS3;
    }

    public double getBUAMT() {
        return BUAMT;
    }

    public byte getBUPD() {
        return BUPD;
    }

    public byte getBUYLDB1() {
        return BUYLDB1;
    }

    public byte getBUYLDB2() {
        return BUYLDB2;
    }

    public byte getBUYLDB3() {
        return BUYLDB3;
    }

    public int getBUYLDEBT1() {
        return BUYLDEBT1;
    }

    public int getBUYLDEBT1_I() {
        return BUYLDEBT1_I;
    }

    public boolean getBUYLDEBT1_IFLAG() {
        return BUYLDEBT1_IFLAG;
    }

    public int getBUYLDEBT2() {
        return BUYLDEBT2;
    }

    public int getBUYLDEBT2_I() {
        return BUYLDEBT2_I;
    }

    public boolean getBUYLDEBT2_IFLAG() {
        return BUYLDEBT2_IFLAG;
    }

    public int getBUYLDEBT3() {
        return BUYLDEBT3;
    }

    public int getBUYLDEBT3_I() {
        return BUYLDEBT3_I;
    }

    public boolean getBUYLDEBT3_IFLAG() {
        return BUYLDEBT3_IFLAG;
    }

    public int getBUYLGDST() {
        return BUYLGDST;
    }

    public int getBUYLGDVAL1() {
        return BUYLGDVAL1;
    }

    public int getBUYLGDVAL2() {
        return BUYLGDVAL2;
    }

    public int getBUYLGDVAL3() {
        return BUYLGDVAL3;
    }

    public byte getBUYLGDVB1() {
        return BUYLGDVB1;
    }

    public byte getBUYLGDVB1_I() {
        return BUYLGDVB1_I;
    }

    public boolean getBUYLGDVB1_IFLAG() {
        return BUYLGDVB1_IFLAG;
    }

    public byte getBUYLGDVB2() {
        return BUYLGDVB2;
    }

    public byte getBUYLGDVB2_I() {
        return BUYLGDVB2_I;
    }

    public boolean getBUYLGDVB2_IFLAG() {
        return BUYLGDVB2_IFLAG;
    }

    public byte getBUYLGDVB3() {
        return BUYLGDVB3;
    }

    public byte getBUYLGDVB3_I() {
        return BUYLGDVB3_I;
    }

    public boolean getBUYLGDVB3_IFLAG() {
        return BUYLGDVB3_IFLAG;
    }

    public int getBUYLVAL1() {
        return BUYLVAL1;
    }

    public int getBUYLVAL1_I() {
        return BUYLVAL1_I;
    }

    public boolean getBUYLVAL1_IFLAG() {
        return BUYLVAL1_IFLAG;
    }

    public int getBUYLVAL2() {
        return BUYLVAL2;
    }

    public int getBUYLVAL2_I() {
        return BUYLVAL2_I;
    }

    public boolean getBUYLVAL2_IFLAG() {
        return BUYLVAL2_IFLAG;
    }

    public int getBUYLVAL3() {
        return BUYLVAL3;
    }

    public int getBUYLVAL3_I() {
        return BUYLVAL3_I;
    }

    public boolean getBUYLVAL3_IFLAG() {
        return BUYLVAL3_IFLAG;
    }

    public byte getBUYLVB1() {
        return BUYLVB1;
    }

    public byte getBUYLVB2() {
        return BUYLVB2;
    }

    public byte getBUYLVB3() {
        return BUYLVB3;
    }

    public byte getBVALB3() {
        return BVALB3;
    }

    public boolean getBVALWH11() {
        return BVALWH11;
    }

    public boolean getBVALWH12() {
        return BVALWH12;
    }

    public boolean getBVALWH15() {
        return BVALWH15;
    }

    public boolean getBVALWH16() {
        return BVALWH16;
    }

    public boolean getBVALWH17() {
        return BVALWH17;
    }

    public boolean getBVALWH18() {
        return BVALWH18;
    }

    public boolean getBVALWH4() {
        return BVALWH4;
    }

    public boolean getBVALWH5() {
        return BVALWH5;
    }

    public boolean getBVALWH6() {
        return BVALWH6;
    }

    public byte getCAREDUR() {
        return CAREDUR;
    }

    public byte getCAREHR() {
        return CAREHR;
    }

    public byte getCAREPS() {
        return CAREPS;
    }

    public short getCASEW2() {
        return CASEW2;
    }

    public byte getCHECK1() {
        return CHECK1;
    }

    public byte getCHECK2() {
        return CHECK2;
    }

    public byte getCHECKNDL() {
        return CHECKNDL;
    }

    public byte getCHOIC() {
        return CHOIC;
    }

    public byte getCHOIC10() {
        return CHOIC10;
    }

    public byte getCHOIC2() {
        return CHOIC2;
    }

    public byte getCHOIC3() {
        return CHOIC3;
    }

    public byte getCHOIC4() {
        return CHOIC4;
    }

    public byte getCHOIC5() {
        return CHOIC5;
    }

    public byte getCHOIC6() {
        return CHOIC6;
    }

    public byte getCHOIC7() {
        return CHOIC7;
    }

    public byte getCHOIC8() {
        return CHOIC8;
    }

    public byte getCHOIC9() {
        return CHOIC9;
    }

    public byte getCHOICP() {
        return CHOICP;
    }

    public byte getCHOICP10() {
        return CHOICP10;
    }

    public byte getCHOICP11() {
        return CHOICP11;
    }

    public boolean getCHOICP18() {
        return CHOICP18;
    }

    public boolean getCHOICP19() {
        return CHOICP19;
    }

    public byte getCHOICP2() {
        return CHOICP2;
    }

    public byte getCHOICP3() {
        return CHOICP3;
    }

    public byte getCHOICP4() {
        return CHOICP4;
    }

    public byte getCHOICP5() {
        return CHOICP5;
    }

    public byte getCHOICP6() {
        return CHOICP6;
    }

    public byte getCHOICP7() {
        return CHOICP7;
    }

    public byte getCHOICP8() {
        return CHOICP8;
    }

    public byte getCHOICP9() {
        return CHOICP9;
    }

    public double getCOMBAM() {
        return COMBAM;
    }

    public byte getCOMBPD() {
        return COMBPD;
    }

    public double getCOMBWK() {
        return COMBWK;
    }

    public byte getCOMMI() {
        return COMMI;
    }

    public boolean getCONTSUB() {
        return CONTSUB;
    }

    public byte getCTBEN() {
        return CTBEN;
    }

    public byte getCURSTAT() {
        return CURSTAT;
    }

    public byte getCUTBACK() {
        return CUTBACK;
    }

    public byte getDADVACT1() {
        return DADVACT1;
    }

    public byte getDADVACT2() {
        return DADVACT2;
    }

    public byte getDADVACT3() {
        return DADVACT3;
    }

    public byte getDADVMTH() {
        return DADVMTH;
    }

    public byte getDBURDW1() {
        return DBURDW1;
    }

    public boolean getDBURDW7() {
        return DBURDW7;
    }

    public byte getDBURD___W2() {
        return DBURD___W2;
    }

    public byte getDC12BEH() {
        return DC12BEH;
    }

    public byte getDC12BEH2() {
        return DC12BEH2;
    }

    public byte getDC12BEH3() {
        return DC12BEH3;
    }

    public byte getDC12BEH4() {
        return DC12BEH4;
    }

    public byte getDC12BEH5() {
        return DC12BEH5;
    }

    public short getDC12OWE() {
        return DC12OWE;
    }

    public short getDC12OWE2() {
        return DC12OWE2;
    }

    public short getDC12OWE3() {
        return DC12OWE3;
    }

    public short getDC12OWE4() {
        return DC12OWE4;
    }

    public short getDC12OWE5() {
        return DC12OWE5;
    }

    public byte getDCNUM2() {
        return DCNUM2;
    }

    public byte getDCNUM2_I() {
        return DCNUM2_I;
    }

    public byte getDCNUM2_IFLAG() {
        return DCNUM2_IFLAG;
    }

    public short getDCOINV4() {
        return DCOINV4;
    }

    public boolean getDCOINVB4() {
        return DCOINVB4;
    }

    public boolean getDCOSHV10() {
        return DCOSHV10;
    }

    public boolean getDCOSHV4() {
        return DCOSHV4;
    }

    public boolean getDCOSHV5() {
        return DCOSHV5;
    }

    public boolean getDCOSHV6() {
        return DCOSHV6;
    }

    public boolean getDCOSHV7() {
        return DCOSHV7;
    }

    public boolean getDCOSHV8() {
        return DCOSHV8;
    }

    public boolean getDCOSHV9() {
        return DCOSHV9;
    }

    public boolean getDCOSHVB3() {
        return DCOSHVB3;
    }

    public double getDCVAL1() {
        return DCVAL1;
    }

    public int getDCVAL2() {
        return DCVAL2;
    }

    public boolean getDHBANY08() {
        return DHBANY08;
    }

    public boolean getDHBANY08_I() {
        return DHBANY08_I;
    }

    public boolean getDHBANY08_IFLAG() {
        return DHBANY08_IFLAG;
    }

    public boolean getDHBANY09() {
        return DHBANY09;
    }

    public boolean getDHBANY09_I() {
        return DHBANY09_I;
    }

    public boolean getDHBANY09_IFLAG() {
        return DHBANY09_IFLAG;
    }

    public boolean getDHBANY10() {
        return DHBANY10;
    }

    public boolean getDHBANY10_I() {
        return DHBANY10_I;
    }

    public boolean getDHBANY10_IFLAG() {
        return DHBANY10_IFLAG;
    }

    public boolean getDHBANY11() {
        return DHBANY11;
    }

    public boolean getDHBANY11_I() {
        return DHBANY11_I;
    }

    public boolean getDHBANY11_IFLAG() {
        return DHBANY11_IFLAG;
    }

    public boolean getDLIND() {
        return DLIND;
    }

    public byte getDLNNM() {
        return DLNNM;
    }

    public byte getDLNNM_I() {
        return DLNNM_I;
    }

    public byte getDLNNM_IFLAG() {
        return DLNNM_IFLAG;
    }

    public byte getDLOLD1() {
        return DLOLD1;
    }

    public byte getDLOLD2() {
        return DLOLD2;
    }

    public byte getDLOLD3() {
        return DLOLD3;
    }

    public byte getDLOLD4() {
        return DLOLD4;
    }

    public byte getDLOLD5() {
        return DLOLD5;
    }

    public byte getDLONM() {
        return DLONM;
    }

    public boolean getDLWHY13() {
        return DLWHY13;
    }

    public boolean getDLWHY14() {
        return DLWHY14;
    }

    public boolean getDLWHY19() {
        return DLWHY19;
    }

    public boolean getDLWHY20() {
        return DLWHY20;
    }

    public boolean getDLWHY21() {
        return DLWHY21;
    }

    public boolean getDLWHY24() {
        return DLWHY24;
    }

    public boolean getDLWHY25() {
        return DLWHY25;
    }

    public boolean getDLWHY26() {
        return DLWHY26;
    }

    public boolean getDLWHY27() {
        return DLWHY27;
    }

    public boolean getDLWHY28() {
        return DLWHY28;
    }

    public boolean getDLWHY30() {
        return DLWHY30;
    }

    public boolean getDLWHY31() {
        return DLWHY31;
    }

    public boolean getDLWHY32() {
        return DLWHY32;
    }

    public boolean getDLWHY33() {
        return DLWHY33;
    }

    public boolean getDLWHY34() {
        return DLWHY34;
    }

    public boolean getDLWHY35() {
        return DLWHY35;
    }

    public boolean getDLWHY6() {
        return DLWHY6;
    }

    public boolean getDLWHY7() {
        return DLWHY7;
    }

    public byte getDS12BEH() {
        return DS12BEH;
    }

    public byte getDS12BEH2() {
        return DS12BEH2;
    }

    public byte getDS12BEH3() {
        return DS12BEH3;
    }

    public byte getDS12BEH4() {
        return DS12BEH4;
    }

    public byte getDS12BEH5() {
        return DS12BEH5;
    }

    public byte getDS12OWE() {
        return DS12OWE;
    }

    public short getDS12OWE2() {
        return DS12OWE2;
    }

    public byte getDS12OWE3() {
        return DS12OWE3;
    }

    public boolean getDS12OWE4() {
        return DS12OWE4;
    }

    public boolean getDS12OWE5() {
        return DS12OWE5;
    }

    public byte getDSNUM2() {
        return DSNUM2;
    }

    public byte getDSNUM2_I() {
        return DSNUM2_I;
    }

    public byte getDSNUM2_IFLAG() {
        return DSNUM2_IFLAG;
    }

    public int getDTLOWE() {
        return DTLOWE;
    }

    public short getDTLOWE2() {
        return DTLOWE2;
    }

    public short getDTLOWE2_I() {
        return DTLOWE2_I;
    }

    public byte getDTLOWE2_IFLAG() {
        return DTLOWE2_IFLAG;
    }

    public short getDTLOWE3() {
        return DTLOWE3;
    }

    public short getDTLOWE3_I() {
        return DTLOWE3_I;
    }

    public byte getDTLOWE3_IFLAG() {
        return DTLOWE3_IFLAG;
    }

    public byte getDTLOWEB() {
        return DTLOWEB;
    }

    public byte getDTLOWEB2() {
        return DTLOWEB2;
    }

    public boolean getDTLOWEB3() {
        return DTLOWEB3;
    }

    public int getDTLOWE_I() {
        return DTLOWE_I;
    }

    public byte getDTLOWE_IFLAG() {
        return DTLOWE_IFLAG;
    }

    public byte getDTLTYPE() {
        return DTLTYPE;
    }

    public byte getDTLTYPE2() {
        return DTLTYPE2;
    }

    public byte getDTLTYPE2_I() {
        return DTLTYPE2_I;
    }

    public byte getDTLTYPE2_IFLAG() {
        return DTLTYPE2_IFLAG;
    }

    public byte getDTLTYPE3() {
        return DTLTYPE3;
    }

    public byte getDTLTYPE3_I() {
        return DTLTYPE3_I;
    }

    public byte getDTLTYPE3_IFLAG() {
        return DTLTYPE3_IFLAG;
    }

    public byte getDTLTYPE_I() {
        return DTLTYPE_I;
    }

    public byte getDTLTYPE_IFLAG() {
        return DTLTYPE_IFLAG;
    }

    public short getDTTOWE() {
        return DTTOWE;
    }

    public boolean getDTTOWE10() {
        return DTTOWE10;
    }

    public boolean getDTTOWE11() {
        return DTTOWE11;
    }

    public boolean getDTTOWE12() {
        return DTTOWE12;
    }

    public boolean getDTTOWE13() {
        return DTTOWE13;
    }

    public boolean getDTTOWE14() {
        return DTTOWE14;
    }

    public boolean getDTTOWE15() {
        return DTTOWE15;
    }

    public short getDTTOWE2() {
        return DTTOWE2;
    }

    public boolean getDTTOWE3() {
        return DTTOWE3;
    }

    public short getDTTOWE4() {
        return DTTOWE4;
    }

    public boolean getDTTOWE5() {
        return DTTOWE5;
    }

    public boolean getDTTOWE6() {
        return DTTOWE6;
    }

    public boolean getDTTOWE7() {
        return DTTOWE7;
    }

    public boolean getDTTOWE8() {
        return DTTOWE8;
    }

    public boolean getDTTOWE9() {
        return DTTOWE9;
    }

    public byte getDTTOWEB() {
        return DTTOWEB;
    }

    public boolean getDTTOWEB10() {
        return DTTOWEB10;
    }

    public boolean getDTTOWEB11() {
        return DTTOWEB11;
    }

    public boolean getDTTOWEB12() {
        return DTTOWEB12;
    }

    public boolean getDTTOWEB13() {
        return DTTOWEB13;
    }

    public boolean getDTTOWEB14() {
        return DTTOWEB14;
    }

    public boolean getDTTOWEB15() {
        return DTTOWEB15;
    }

    public boolean getDTTOWEB2() {
        return DTTOWEB2;
    }

    public boolean getDTTOWEB3() {
        return DTTOWEB3;
    }

    public boolean getDTTOWEB4() {
        return DTTOWEB4;
    }

    public boolean getDTTOWEB5() {
        return DTTOWEB5;
    }

    public boolean getDTTOWEB6() {
        return DTTOWEB6;
    }

    public boolean getDTTOWEB7() {
        return DTTOWEB7;
    }

    public boolean getDTTOWEB8() {
        return DTTOWEB8;
    }

    public boolean getDTTOWEB9() {
        return DTTOWEB9;
    }

    public byte getDVAGE4() {
        return DVAGE4;
    }

    public byte getDVAGE5() {
        return DVAGE5;
    }

    public byte getDVAGE6() {
        return DVAGE6;
    }

    public byte getDVAGE9() {
        return DVAGE9;
    }

    public byte getDVAGEW2BAND() {
        return DVAGEW2BAND;
    }

    public short getDVCOINV4() {
        return DVCOINV4;
    }

    public int getDVDBINC4() {
        return DVDBINC4;
    }

    public short getDVDBINC5() {
        return DVDBINC5;
    }

    public short getDVDBINC6() {
        return DVDBINC6;
    }

    public double getDVDBLUMP4() {
        return DVDBLUMP4;
    }

    public double getDVDBLUMP5() {
        return DVDBLUMP5;
    }

    public int getDVDBLUMP6() {
        return DVDBLUMP6;
    }

    public double getDVDBOPEN2T() {
        return DVDBOPEN2T;
    }

    public double getDVDBOPENT() {
        return DVDBOPENT;
    }

    public int getDVNWFLN() {
        return DVNWFLN;
    }

    public int getDVNWILN() {
        return DVNWILN;
    }

    public double getDVPENINC() {
        return DVPENINC;
    }

    public double getDVPENINC2() {
        return DVPENINC2;
    }

    public byte getDVPUBLPRIV() {
        return DVPUBLPRIV;
    }

    public byte getDVSAME() {
        return DVSAME;
    }

    public double getDVSPS() {
        return DVSPS;
    }

    public double getDVWID() {
        return DVWID;
    }

    public byte getECHLCAR() {
        return ECHLCAR;
    }

    public byte getECHLSUP() {
        return ECHLSUP;
    }

    public boolean getEDAGE() {
        return EDAGE;
    }

    public byte getEFOOD() {
        return EFOOD;
    }

    public byte getEFUEL() {
        return EFUEL;
    }

    public byte getEINTRO() {
        return EINTRO;
    }

    public byte getELARGE1() {
        return ELARGE1;
    }

    public byte getELARGE2() {
        return ELARGE2;
    }

    public byte getELARGE3() {
        return ELARGE3;
    }

    public byte getELARGE4() {
        return ELARGE4;
    }

    public byte getELARGE5() {
        return ELARGE5;
    }

    public byte getELARGE6() {
        return ELARGE6;
    }

    public byte getELARGE7() {
        return ELARGE7;
    }

    public boolean getELARGE8() {
        return ELARGE8;
    }

    public byte getELGEAMB() {
        return ELGEAMB;
    }

    public byte getEMEALS() {
        return EMEALS;
    }

    public boolean getEMPNO() {
        return EMPNO;
    }

    public byte getES2000() {
        return ES2000;
    }

    public byte getESATYPE() {
        return ESATYPE;
    }

    public byte getETRANS() {
        return ETRANS;
    }

    public byte getEYE1() {
        return EYE1;
    }

    public byte getEYE2() {
        return EYE2;
    }

    public byte getEYE3() {
        return EYE3;
    }

    public byte getEYE4() {
        return EYE4;
    }

    public byte getEYE5() {
        return EYE5;
    }

    public byte getEYE6() {
        return EYE6;
    }

    public byte getEYE7() {
        return EYE7;
    }

    public byte getEYE8() {
        return EYE8;
    }

    public byte getFBFAED() {
        return FBFAED;
    }

    public byte getFBMOED() {
        return FBMOED;
    }

    public byte getFBSIBS() {
        return FBSIBS;
    }

    public byte getFBSITU() {
        return FBSITU;
    }

    public byte getFBTEN() {
        return FBTEN;
    }

    public byte getFCISAWD() {
        return FCISAWD;
    }

    public byte getFCISCE() {
        return FCISCE;
    }

    public byte getFCIWDAB() {
        return FCIWDAB;
    }

    public byte getFCIWNUM() {
        return FCIWNUM;
    }

    public byte getFNDCASH01() {
        return FNDCASH01;
    }

    public byte getFNDCASH02() {
        return FNDCASH02;
    }

    public byte getFNDCASH03() {
        return FNDCASH03;
    }

    public byte getFNDCASH04() {
        return FNDCASH04;
    }

    public byte getFNDCASH05() {
        return FNDCASH05;
    }

    public byte getFNDCASH06() {
        return FNDCASH06;
    }

    public byte getFNDCASH07() {
        return FNDCASH07;
    }

    public byte getFNDCASH08() {
        return FNDCASH08;
    }

    public byte getFNDCASH09() {
        return FNDCASH09;
    }

    public byte getFNDCASH10() {
        return FNDCASH10;
    }

    public byte getFNDCASH11() {
        return FNDCASH11;
    }

    public byte getFNDCASH12() {
        return FNDCASH12;
    }

    public byte getFNDCASH13() {
        return FNDCASH13;
    }

    public byte getFNDCASH14() {
        return FNDCASH14;
    }

    public boolean getFNDCASH15() {
        return FNDCASH15;
    }

    public boolean getFNDCASH16() {
        return FNDCASH16;
    }

    public byte getFSAVAB() {
        return FSAVAB;
    }

    public byte getFSAVED() {
        return FSAVED;
    }

    public int getFSHADA() {
        return FSHADA;
    }

    public byte getFSHADAB() {
        return FSHADAB;
    }

    public byte getFSHADD() {
        return FSHADD;
    }

    public boolean getFSTYPIN4() {
        return FSTYPIN4;
    }

    public boolean getFSTYPIN5() {
        return FSTYPIN5;
    }

    public boolean getFSTYPSH5() {
        return FSTYPSH5;
    }

    public byte getFTHECST() {
        return FTHECST;
    }

    public byte getFTSTUD() {
        return FTSTUD;
    }

    public byte getFWITHD() {
        return FWITHD;
    }

    public byte getGROSSPER() {
        return GROSSPER;
    }

    public byte getGRSAMK() {
        return GRSAMK;
    }

    public byte getGRSEESM() {
        return GRSEESM;
    }

    public byte getGRSEESW() {
        return GRSEESW;
    }

    public int getGRSSEMJB() {
        return GRSSEMJB;
    }

    public byte getGSTDNW() {
        return GSTDNW;
    }

    public byte getHOUSBEN() {
        return HOUSBEN;
    }

    public boolean getIGDS13() {
        return IGDS13;
    }

    public boolean getIGDS14() {
        return IGDS14;
    }

    public boolean getIGDS17() {
        return IGDS17;
    }

    public boolean getIGDS18() {
        return IGDS18;
    }

    public boolean getIGDS19() {
        return IGDS19;
    }

    public boolean getIGDS20() {
        return IGDS20;
    }

    public boolean getIGDS21() {
        return IGDS21;
    }

    public boolean getIGDS7() {
        return IGDS7;
    }

    public short getILNPBAM() {
        return ILNPBAM;
    }

    public byte getILNPBK() {
        return ILNPBK;
    }

    public byte getILNUSE01() {
        return ILNUSE01;
    }

    public byte getILNUSE02() {
        return ILNUSE02;
    }

    public byte getILNUSE03() {
        return ILNUSE03;
    }

    public byte getILNUSE04() {
        return ILNUSE04;
    }

    public byte getILNUSE05() {
        return ILNUSE05;
    }

    public boolean getILNUSE06() {
        return ILNUSE06;
    }

    public boolean getILNUSE07() {
        return ILNUSE07;
    }

    public boolean getILNUSE08() {
        return ILNUSE08;
    }

    public boolean getILNUSE09() {
        return ILNUSE09;
    }

    public boolean getILNUSE10() {
        return ILNUSE10;
    }

    public int getILNVAL() {
        return ILNVAL;
    }

    public byte getILNVALB() {
        return ILNVALB;
    }

    public byte getILOAN() {
        return ILOAN;
    }

    public byte getINCDROP() {
        return INCDROP;
    }

    public byte getINDFREQ() {
        return INDFREQ;
    }

    public boolean getISADULT() {
        return ISADULT;
    }

    public boolean getIWAT6() {
        return IWAT6;
    }

    public double getLONGIT_CALWGT() {
        return LONGIT_CALWGT;
    }

    public byte getLVTDAY() {
        return LVTDAY;
    }

    public byte getMARSTA() {
        return MARSTA;
    }

    public byte getMRECJB() {
        return MRECJB;
    }

    public byte getMTHECST() {
        return MTHECST;
    }

    public byte getNEWFCMX() {
        return NEWFCMX;
    }

    public byte getNEWGIFT() {
        return NEWGIFT;
    }

    public boolean getNOFA() {
        return NOFA;
    }

    public int getNWFLNVAL1() {
        return NWFLNVAL1;
    }

    public int getNWFLNVAL2() {
        return NWFLNVAL2;
    }

    public short getNWFLNVAL3() {
        return NWFLNVAL3;
    }

    public byte getNWHP() {
        return NWHP;
    }

    public byte getNWHPNO() {
        return NWHPNO;
    }

    public int getNWILNVAL1() {
        return NWILNVAL1;
    }

    public short getNWILNVAL2() {
        return NWILNVAL2;
    }

    public short getNWILNVAL3() {
        return NWILNVAL3;
    }

    public byte getNWLN() {
        return NWLN;
    }

    public byte getNWLNNO() {
        return NWLNNO;
    }

    public byte getNWLNNO_I() {
        return NWLNNO_I;
    }

    public byte getNWLNNO_IFLAG() {
        return NWLNNO_IFLAG;
    }

    public byte getNWLN_I() {
        return NWLN_I;
    }

    public byte getNWLN_IFLAG() {
        return NWLN_IFLAG;
    }

    public byte getOEXPINC01() {
        return OEXPINC01;
    }

    public byte getOEXPINC02() {
        return OEXPINC02;
    }

    public byte getOEXPINC03() {
        return OEXPINC03;
    }

    public byte getOEXPINC04() {
        return OEXPINC04;
    }

    public byte getOEXPINC05() {
        return OEXPINC05;
    }

    public byte getOEXPINC06() {
        return OEXPINC06;
    }

    public byte getOEXPINC07() {
        return OEXPINC07;
    }

    public byte getOEXPINC08() {
        return OEXPINC08;
    }

    public byte getOEXPINC09() {
        return OEXPINC09;
    }

    public byte getOEXPINC10() {
        return OEXPINC10;
    }

    public byte getOEXPINC11() {
        return OEXPINC11;
    }

    public byte getOEXPINC12() {
        return OEXPINC12;
    }

    public byte getOEXPINC13() {
        return OEXPINC13;
    }

    public boolean getOEXPINC14() {
        return OEXPINC14;
    }

    public boolean getOEXPINC15() {
        return OEXPINC15;
    }

    public byte getOIMPRS1() {
        return OIMPRS1;
    }

    public byte getOIMPRS2() {
        return OIMPRS2;
    }

    public byte getOIMPRS3() {
        return OIMPRS3;
    }

    public byte getOIMPRS4() {
        return OIMPRS4;
    }

    public byte getOIMPRS5() {
        return OIMPRS5;
    }

    public byte getOIMPRS6() {
        return OIMPRS6;
    }

    public boolean getOIMPRS7() {
        return OIMPRS7;
    }

    public boolean getOIMPRS8() {
        return OIMPRS8;
    }

    public boolean getOIMPRS9() {
        return OIMPRS9;
    }

    public byte getOINTROL() {
        return OINTROL;
    }

    public boolean getOINTROM() {
        return OINTROM;
    }

    public byte getONOSAVE1() {
        return ONOSAVE1;
    }

    public byte getONOSAVE2() {
        return ONOSAVE2;
    }

    public byte getONOSAVE3() {
        return ONOSAVE3;
    }

    public byte getONOSAVE4() {
        return ONOSAVE4;
    }

    public byte getONOSAVE5() {
        return ONOSAVE5;
    }

    public boolean getONOSAVE6() {
        return ONOSAVE6;
    }

    public boolean getONOSAVE7() {
        return ONOSAVE7;
    }

    public boolean getONOSAVE8() {
        return ONOSAVE8;
    }

    public boolean getONOSAVE9() {
        return ONOSAVE9;
    }

    public byte getOPENSAV() {
        return OPENSAV;
    }

    public byte getORGNSED() {
        return ORGNSED;
    }

    public byte getOSAFERE2() {
        return OSAFERE2;
    }

    public byte getOSAFERET() {
        return OSAFERET;
    }

    public byte getOSAV2Y() {
        return OSAV2Y;
    }

    public byte getOSAVA() {
        return OSAVA;
    }

    public byte getOSAVB() {
        return OSAVB;
    }

    public byte getOSAVC() {
        return OSAVC;
    }

    public byte getOSAVEXT() {
        return OSAVEXT;
    }

    public byte getOSITCH() {
        return OSITCH;
    }

    public byte getOTHASCH() {
        return OTHASCH;
    }

    public byte getOTHASVB() {
        return OTHASVB;
    }

    public int getOTHASVL() {
        return OTHASVL;
    }

    public boolean getOTRUST15() {
        return OTRUST15;
    }

    public byte getOWAIT() {
        return OWAIT;
    }

    public byte getOWHYSAV01() {
        return OWHYSAV01;
    }

    public byte getOWHYSAV02() {
        return OWHYSAV02;
    }

    public byte getOWHYSAV03() {
        return OWHYSAV03;
    }

    public byte getOWHYSAV04() {
        return OWHYSAV04;
    }

    public byte getOWHYSAV05() {
        return OWHYSAV05;
    }

    public byte getOWHYSAV06() {
        return OWHYSAV06;
    }

    public byte getOWHYSAV07() {
        return OWHYSAV07;
    }

    public byte getOWHYSAV08() {
        return OWHYSAV08;
    }

    public byte getOWHYSAV09() {
        return OWHYSAV09;
    }

    public byte getOWHYSAV10() {
        return OWHYSAV10;
    }

    public byte getOWRSRS01() {
        return OWRSRS01;
    }

    public byte getOWRSRS02() {
        return OWRSRS02;
    }

    public byte getOWRSRS03() {
        return OWRSRS03;
    }

    public byte getOWRSRS04() {
        return OWRSRS04;
    }

    public byte getOWRSRS05() {
        return OWRSRS05;
    }

    public byte getOWRSRS06() {
        return OWRSRS06;
    }

    public byte getOWRSRS07() {
        return OWRSRS07;
    }

    public boolean getOWRSRS08() {
        return OWRSRS08;
    }

    public boolean getOWRSRS09() {
        return OWRSRS09;
    }

    public boolean getOWRSRS10() {
        return OWRSRS10;
    }

    public byte getPADDFUT() {
        return PADDFUT;
    }

    public boolean getPADDFUT2() {
        return PADDFUT2;
    }

    public byte getPAGESTP() {
        return PAGESTP;
    }

    public byte getPANYO() {
        return PANYO;
    }

    public byte getPANYO_I() {
        return PANYO_I;
    }

    public boolean getPANYO_IFLAG() {
        return PANYO_IFLAG;
    }

    public byte getPASTMN() {
        return PASTMN;
    }

    public boolean getPASTMN2() {
        return PASTMN2;
    }

    public short getPASTYR() {
        return PASTYR;
    }

    public short getPASTYR2() {
        return PASTYR2;
    }

    public short getPAVCAM() {
        return PAVCAM;
    }

    public short getPAVCAM2() {
        return PAVCAM2;
    }

    public byte getPAVCFG() {
        return PAVCFG;
    }

    public boolean getPAVCFG2() {
        return PAVCFG2;
    }

    public double getPAVCFR() {
        return PAVCFR;
    }

    public byte getPAVCFR2() {
        return PAVCFR2;
    }

    public byte getPAVCH() {
        return PAVCH;
    }

    public byte getPAVCH2() {
        return PAVCH2;
    }

    public byte getPAVCIN() {
        return PAVCIN;
    }

    public byte getPAVCIN2() {
        return PAVCIN2;
    }

    public byte getPAVCPR() {
        return PAVCPR;
    }

    public boolean getPAVCPR2() {
        return PAVCPR2;
    }

    public int getPAVCUV() {
        return PAVCUV;
    }

    public int getPAVCUV2() {
        return PAVCUV2;
    }

    public int getPAVCUV2_I() {
        return PAVCUV2_I;
    }

    public boolean getPAVCUV2_IFLAG() {
        return PAVCUV2_IFLAG;
    }

    public int getPAVCUV_I() {
        return PAVCUV_I;
    }

    public boolean getPAVCUV_IFLAG() {
        return PAVCUV_IFLAG;
    }

    public byte getPAVCVB() {
        return PAVCVB;
    }

    public byte getPAVCVB2() {
        return PAVCVB2;
    }

    public byte getPAVDOC() {
        return PAVDOC;
    }

    public byte getPAVDOC2() {
        return PAVDOC2;
    }

    public boolean getPAYINC7() {
        return PAYINC7;
    }

    public byte getPBDOCS() {
        return PBDOCS;
    }

    public byte getPBDOCS2() {
        return PBDOCS2;
    }

    public byte getPBFRAC() {
        return PBFRAC;
    }

    public byte getPBFRAC2() {
        return PBFRAC2;
    }

    public byte getPBFRAC2_I() {
        return PBFRAC2_I;
    }

    public boolean getPBFRAC2_IFLAG() {
        return PBFRAC2_IFLAG;
    }

    public byte getPBFRAC_I() {
        return PBFRAC_I;
    }

    public boolean getPBFRAC_IFLAG() {
        return PBFRAC_IFLAG;
    }

    public int getPBINCA() {
        return PBINCA;
    }

    public int getPBINCA2() {
        return PBINCA2;
    }

    public double getPBINCF() {
        return PBINCF;
    }

    public double getPBINCF2() {
        return PBINCF2;
    }

    public byte getPBINCH() {
        return PBINCH;
    }

    public byte getPBINCH2() {
        return PBINCH2;
    }

    public byte getPBLMVB() {
        return PBLMVB;
    }

    public byte getPBLMVB2() {
        return PBLMVB2;
    }

    public int getPBLUMV() {
        return PBLUMV;
    }

    public int getPBLUMV2() {
        return PBLUMV2;
    }

    public int getPBLUMV2_I() {
        return PBLUMV2_I;
    }

    public boolean getPBLUMV2_IFLAG() {
        return PBLUMV2_IFLAG;
    }

    public int getPBLUMV_I() {
        return PBLUMV_I;
    }

    public boolean getPBLUMV_IFLAG() {
        return PBLUMV_IFLAG;
    }

    public byte getPBQUAL() {
        return PBQUAL;
    }

    public byte getPBQUAL2() {
        return PBQUAL2;
    }

    public byte getPBQUAL2_I() {
        return PBQUAL2_I;
    }

    public boolean getPBQUAL2_IFLAG() {
        return PBQUAL2_IFLAG;
    }

    public byte getPBQUAL_I() {
        return PBQUAL_I;
    }

    public boolean getPBQUAL_IFLAG() {
        return PBQUAL_IFLAG;
    }

    public byte getPBSTMN() {
        return PBSTMN;
    }

    public byte getPBSTMN2() {
        return PBSTMN2;
    }

    public short getPBSTYR() {
        return PBSTYR;
    }

    public short getPBSTYR2() {
        return PBSTYR2;
    }

    public byte getPCCFST1() {
        return PCCFST1;
    }

    public byte getPCCFST1_I() {
        return PCCFST1_I;
    }

    public boolean getPCCFST1_IFLAG() {
        return PCCFST1_IFLAG;
    }

    public byte getPCCFST2() {
        return PCCFST2;
    }

    public byte getPCCFST2_I() {
        return PCCFST2_I;
    }

    public boolean getPCCFST2_IFLAG() {
        return PCCFST2_IFLAG;
    }

    public boolean getPCCFST3() {
        return PCCFST3;
    }

    public boolean getPCCFST3_I() {
        return PCCFST3_I;
    }

    public boolean getPCCFST3_IFLAG() {
        return PCCFST3_IFLAG;
    }

    public byte getPCDOCS() {
        return PCDOCS;
    }

    public byte getPCDOCS2() {
        return PCDOCS2;
    }

    public byte getPCNEW() {
        return PCNEW;
    }

    public byte getPCNUM() {
        return PCNUM;
    }

    public byte getPCONT() {
        return PCONT;
    }

    public byte getPCONT_I() {
        return PCONT_I;
    }

    public boolean getPCONT_IFLAG() {
        return PCONT_IFLAG;
    }

    public byte getPCSTMN() {
        return PCSTMN;
    }

    public byte getPCSTMN2() {
        return PCSTMN2;
    }

    public short getPCSTYR() {
        return PCSTYR;
    }

    public short getPCSTYR2() {
        return PCSTYR2;
    }

    public byte getPDBCAL() {
        return PDBCAL;
    }

    public byte getPDBCAL2() {
        return PDBCAL2;
    }

    public int getPDCVAL() {
        return PDCVAL;
    }

    public int getPDCVAL2() {
        return PDCVAL2;
    }

    public int getPDCVAL2_I() {
        return PDCVAL2_I;
    }

    public boolean getPDCVAL2_IFLAG() {
        return PDCVAL2_IFLAG;
    }

    public double getPDCVAL_I() {
        return PDCVAL_I;
    }

    public boolean getPDCVAL_IFLAG() {
        return PDCVAL_IFLAG;
    }

    public byte getPDCVB() {
        return PDCVB;
    }

    public byte getPDCVB2() {
        return PDCVB2;
    }

    public byte getPERMJB() {
        return PERMJB;
    }

    public byte getPERNOWK() {
        return PERNOWK;
    }

    public byte getPERSONW2() {
        return PERSONW2;
    }

    public byte getPESAME() {
        return PESAME;
    }

    public byte getPESAME_I() {
        return PESAME_I;
    }

    public byte getPESAME_IFLAG() {
        return PESAME_IFLAG;
    }

    public byte getPEWYNO05() {
        return PEWYNO05;
    }

    public boolean getPFACCU3() {
        return PFACCU3;
    }

    public boolean getPFACCU5() {
        return PFACCU5;
    }

    public boolean getPFACCU6() {
        return PFACCU6;
    }

    public byte getPFANEH() {
        return PFANEH;
    }

    public byte getPFANEH2() {
        return PFANEH2;
    }

    public boolean getPFANEH3() {
        return PFANEH3;
    }

    public boolean getPFANEXM() {
        return PFANEXM;
    }

    public short getPFANEXY() {
        return PFANEXY;
    }

    public byte getPFANGA() {
        return PFANGA;
    }

    public byte getPFANGA2() {
        return PFANGA2;
    }

    public byte getPFANGA3() {
        return PFANGA3;
    }

    public byte getPFANIF() {
        return PFANIF;
    }

    public byte getPFANIF2() {
        return PFANIF2;
    }

    public boolean getPFANIF3() {
        return PFANIF3;
    }

    public byte getPFANJT() {
        return PFANJT;
    }

    public byte getPFANJT2() {
        return PFANJT2;
    }

    public byte getPFANJT3() {
        return PFANJT3;
    }

    public byte getPFANLM() {
        return PFANLM;
    }

    public boolean getPFANLM2() {
        return PFANLM2;
    }

    public byte getPFANN1() {
        return PFANN1;
    }

    public byte getPFANN11() {
        return PFANN11;
    }

    public boolean getPFANN12() {
        return PFANN12;
    }

    public boolean getPFANN2() {
        return PFANN2;
    }

    public boolean getPFANN3() {
        return PFANN3;
    }

    public byte getPFANN6() {
        return PFANN6;
    }

    public boolean getPFANN7() {
        return PFANN7;
    }

    public byte getPFANVB() {
        return PFANVB;
    }

    public short getPFANVI() {
        return PFANVI;
    }

    public short getPFANVI2() {
        return PFANVI2;
    }

    public short getPFANVI3() {
        return PFANVI3;
    }

    public short getPFBEG() {
        return PFBEG;
    }

    public short getPFBEG2() {
        return PFBEG2;
    }

    public short getPFBEG3() {
        return PFBEG3;
    }

    public short getPFBEG4() {
        return PFBEG4;
    }

    public boolean getPFBEG5() {
        return PFBEG5;
    }

    public boolean getPFBEG6() {
        return PFBEG6;
    }

    public byte getPFCASH() {
        return PFCASH;
    }

    public byte getPFCASH2() {
        return PFCASH2;
    }

    public byte getPFCASH2_I() {
        return PFCASH2_I;
    }

    public boolean getPFCASH2_IFLAG() {
        return PFCASH2_IFLAG;
    }

    public byte getPFCASH3() {
        return PFCASH3;
    }

    public byte getPFCASH3_I() {
        return PFCASH3_I;
    }

    public boolean getPFCASH3_IFLAG() {
        return PFCASH3_IFLAG;
    }

    public byte getPFCASH4() {
        return PFCASH4;
    }

    public byte getPFCASH4_I() {
        return PFCASH4_I;
    }

    public boolean getPFCASH4_IFLAG() {
        return PFCASH4_IFLAG;
    }

    public byte getPFCASH_I() {
        return PFCASH_I;
    }

    public boolean getPFCASH_IFLAG() {
        return PFCASH_IFLAG;
    }

    public byte getPFCRET1() {
        return PFCRET1;
    }

    public byte getPFCRET2() {
        return PFCRET2;
    }

    public byte getPFCRET3() {
        return PFCRET3;
    }

    public byte getPFCRET4() {
        return PFCRET4;
    }

    public byte getPFCRET5() {
        return PFCRET5;
    }

    public byte getPFCRET6() {
        return PFCRET6;
    }

    public int getPFCURV() {
        return PFCURV;
    }

    public int getPFCURV2() {
        return PFCURV2;
    }

    public double getPFCURV2_I() {
        return PFCURV2_I;
    }

    public byte getPFCURV2_IFLAG() {
        return PFCURV2_IFLAG;
    }

    public int getPFCURV3() {
        return PFCURV3;
    }

    public double getPFCURV3_I() {
        return PFCURV3_I;
    }

    public byte getPFCURV3_IFLAG() {
        return PFCURV3_IFLAG;
    }

    public int getPFCURV4() {
        return PFCURV4;
    }

    public int getPFCURV4_I() {
        return PFCURV4_I;
    }

    public byte getPFCURV4_IFLAG() {
        return PFCURV4_IFLAG;
    }

    public int getPFCURV5() {
        return PFCURV5;
    }

    public double getPFCURV5_I() {
        return PFCURV5_I;
    }

    public byte getPFCURV5_IFLAG() {
        return PFCURV5_IFLAG;
    }

    public int getPFCURV6() {
        return PFCURV6;
    }

    public double getPFCURV6_I() {
        return PFCURV6_I;
    }

    public boolean getPFCURV6_IFLAG() {
        return PFCURV6_IFLAG;
    }

    public double getPFCURV_I() {
        return PFCURV_I;
    }

    public byte getPFCURV_IFLAG() {
        return PFCURV_IFLAG;
    }

    public byte getPFCUVB() {
        return PFCUVB;
    }

    public byte getPFCUVB2() {
        return PFCUVB2;
    }

    public byte getPFCUVB3() {
        return PFCUVB3;
    }

    public byte getPFCUVB4() {
        return PFCUVB4;
    }

    public byte getPFCUVB5() {
        return PFCUVB5;
    }

    public boolean getPFCUVB6() {
        return PFCUVB6;
    }

    public int getPFDDV() {
        return PFDDV;
    }

    public int getPFDDV2() {
        return PFDDV2;
    }

    public int getPFDDV2_I() {
        return PFDDV2_I;
    }

    public byte getPFDDV2_IFLAG() {
        return PFDDV2_IFLAG;
    }

    public int getPFDDV3() {
        return PFDDV3;
    }

    public int getPFDDV3_I() {
        return PFDDV3_I;
    }

    public byte getPFDDV3_IFLAG() {
        return PFDDV3_IFLAG;
    }

    public int getPFDDV4() {
        return PFDDV4;
    }

    public int getPFDDV4_I() {
        return PFDDV4_I;
    }

    public byte getPFDDV4_IFLAG() {
        return PFDDV4_IFLAG;
    }

    public boolean getPFDDV5() {
        return PFDDV5;
    }

    public boolean getPFDDV6() {
        return PFDDV6;
    }

    public byte getPFDDVB() {
        return PFDDVB;
    }

    public byte getPFDDVB2() {
        return PFDDVB2;
    }

    public byte getPFDDVB3() {
        return PFDDVB3;
    }

    public boolean getPFDDVB4() {
        return PFDDVB4;
    }

    public boolean getPFDDVB5() {
        return PFDDVB5;
    }

    public boolean getPFDDVB6() {
        return PFDDVB6;
    }

    public int getPFDDV_I() {
        return PFDDV_I;
    }

    public byte getPFDDV_IFLAG() {
        return PFDDV_IFLAG;
    }

    public byte getPFDOCS() {
        return PFDOCS;
    }

    public byte getPFDOCS2() {
        return PFDOCS2;
    }

    public byte getPFDOCS3() {
        return PFDOCS3;
    }

    public byte getPFDOCS4() {
        return PFDOCS4;
    }

    public byte getPFDOCS5() {
        return PFDOCS5;
    }

    public byte getPFDOCS6() {
        return PFDOCS6;
    }

    public byte getPFDRAW() {
        return PFDRAW;
    }

    public byte getPFDRAW2_I() {
        return PFDRAW2_I;
    }

    public byte getPFDRAW2_IFLAG() {
        return PFDRAW2_IFLAG;
    }

    public byte getPFDRAW3() {
        return PFDRAW3;
    }

    public byte getPFDRAW3_I() {
        return PFDRAW3_I;
    }

    public byte getPFDRAW3_IFLAG() {
        return PFDRAW3_IFLAG;
    }

    public boolean getPFDRAW4() {
        return PFDRAW4;
    }

    public boolean getPFDRAW4_I() {
        return PFDRAW4_I;
    }

    public byte getPFDRAW4_IFLAG() {
        return PFDRAW4_IFLAG;
    }

    public boolean getPFDRAW5() {
        return PFDRAW5;
    }

    public boolean getPFDRAW6() {
        return PFDRAW6;
    }

    public byte getPFDRAW_I() {
        return PFDRAW_I;
    }

    public byte getPFDRAW_IFLAG() {
        return PFDRAW_IFLAG;
    }

    public byte getPFDRA___W2() {
        return PFDRA___W2;
    }

    public short getPFDRINC() {
        return PFDRINC;
    }

    public short getPFDRINC2() {
        return PFDRINC2;
    }

    public boolean getPFDRINC3() {
        return PFDRINC3;
    }

    public boolean getPFDRINC4() {
        return PFDRINC4;
    }

    public boolean getPFDRINC5() {
        return PFDRINC5;
    }

    public boolean getPFDRINC6() {
        return PFDRINC6;
    }

    public boolean getPFDRINCB() {
        return PFDRINCB;
    }

    public boolean getPFDRINCB2() {
        return PFDRINCB2;
    }

    public boolean getPFDRINCB3() {
        return PFDRINCB3;
    }

    public boolean getPFDRINCB4() {
        return PFDRINCB4;
    }

    public boolean getPFDRINCB5() {
        return PFDRINCB5;
    }

    public boolean getPFDRINCB6() {
        return PFDRINCB6;
    }

    public boolean getPFDRVB() {
        return PFDRVB;
    }

    public boolean getPFDRVB2() {
        return PFDRVB2;
    }

    public boolean getPFDRVB3() {
        return PFDRVB3;
    }

    public boolean getPFDRVB4() {
        return PFDRVB4;
    }

    public boolean getPFDRVB5() {
        return PFDRVB5;
    }

    public boolean getPFDRVB6() {
        return PFDRVB6;
    }

    public int getPFDRVI() {
        return PFDRVI;
    }

    public int getPFDRVI2() {
        return PFDRVI2;
    }

    public boolean getPFDRVI3() {
        return PFDRVI3;
    }

    public boolean getPFDRVI4() {
        return PFDRVI4;
    }

    public boolean getPFDRVI5() {
        return PFDRVI5;
    }

    public boolean getPFDRVI6() {
        return PFDRVI6;
    }

    public byte getPFEN() {
        return PFEN;
    }

    public short getPFEND() {
        return PFEND;
    }

    public short getPFEND2() {
        return PFEND2;
    }

    public short getPFEND3() {
        return PFEND3;
    }

    public short getPFEND4() {
        return PFEND4;
    }

    public boolean getPFEND5() {
        return PFEND5;
    }

    public boolean getPFEND6() {
        return PFEND6;
    }

    public byte getPFENNUM() {
        return PFENNUM;
    }

    public boolean getPFFAAG() {
        return PFFAAG;
    }

    public byte getPFFAAG2() {
        return PFFAAG2;
    }

    public boolean getPFFAAG3() {
        return PFFAAG3;
    }

    public boolean getPFFAAG4() {
        return PFFAAG4;
    }

    public boolean getPFFAAG5() {
        return PFFAAG5;
    }

    public boolean getPFFAAG6() {
        return PFFAAG6;
    }

    public byte getPFFAN11() {
        return PFFAN11;
    }

    public byte getPFFAN16() {
        return PFFAN16;
    }

    public byte getPFFAN2() {
        return PFFAN2;
    }

    public byte getPFFAN6() {
        return PFFAN6;
    }

    public byte getPFFAWH1() {
        return PFFAWH1;
    }

    public byte getPFFAWH13() {
        return PFFAWH13;
    }

    public byte getPFFAWH7() {
        return PFFAWH7;
    }

    public int getPFINCA() {
        return PFINCA;
    }

    public int getPFINCA2() {
        return PFINCA2;
    }

    public double getPFINCA2_I() {
        return PFINCA2_I;
    }

    public boolean getPFINCA2_IFLAG() {
        return PFINCA2_IFLAG;
    }

    public double getPFINCA3() {
        return PFINCA3;
    }

    public double getPFINCA3_I() {
        return PFINCA3_I;
    }

    public boolean getPFINCA3_IFLAG() {
        return PFINCA3_IFLAG;
    }

    public double getPFINCA4() {
        return PFINCA4;
    }

    public short getPFINCA4_I() {
        return PFINCA4_I;
    }

    public boolean getPFINCA4_IFLAG() {
        return PFINCA4_IFLAG;
    }

    public short getPFINCA5() {
        return PFINCA5;
    }

    public short getPFINCA5_I() {
        return PFINCA5_I;
    }

    public boolean getPFINCA5_IFLAG() {
        return PFINCA5_IFLAG;
    }

    public short getPFINCA6() {
        return PFINCA6;
    }

    public short getPFINCA6_I() {
        return PFINCA6_I;
    }

    public boolean getPFINCA6_IFLAG() {
        return PFINCA6_IFLAG;
    }

    public double getPFINCA_I() {
        return PFINCA_I;
    }

    public boolean getPFINCA_IFLAG() {
        return PFINCA_IFLAG;
    }

    public byte getPFINCP() {
        return PFINCP;
    }

    public byte getPFINCP2() {
        return PFINCP2;
    }

    public byte getPFINCP2_I() {
        return PFINCP2_I;
    }

    public boolean getPFINCP2_IFLAG() {
        return PFINCP2_IFLAG;
    }

    public byte getPFINCP3() {
        return PFINCP3;
    }

    public byte getPFINCP3_I() {
        return PFINCP3_I;
    }

    public boolean getPFINCP3_IFLAG() {
        return PFINCP3_IFLAG;
    }

    public byte getPFINCP4() {
        return PFINCP4;
    }

    public byte getPFINCP4_I() {
        return PFINCP4_I;
    }

    public boolean getPFINCP4_IFLAG() {
        return PFINCP4_IFLAG;
    }

    public byte getPFINCP5() {
        return PFINCP5;
    }

    public byte getPFINCP5_I() {
        return PFINCP5_I;
    }

    public boolean getPFINCP5_IFLAG() {
        return PFINCP5_IFLAG;
    }

    public byte getPFINCP6() {
        return PFINCP6;
    }

    public byte getPFINCP6_I() {
        return PFINCP6_I;
    }

    public boolean getPFINCP6_IFLAG() {
        return PFINCP6_IFLAG;
    }

    public byte getPFINCP_I() {
        return PFINCP_I;
    }

    public boolean getPFINCP_IFLAG() {
        return PFINCP_IFLAG;
    }

    public byte getPFLMUS() {
        return PFLMUS;
    }

    public byte getPFLMUS2() {
        return PFLMUS2;
    }

    public byte getPFLMUS3() {
        return PFLMUS3;
    }

    public byte getPFLMUS4() {
        return PFLMUS4;
    }

    public boolean getPFLMUS5() {
        return PFLMUS5;
    }

    public boolean getPFLMUS6() {
        return PFLMUS6;
    }

    public int getPFLMV() {
        return PFLMV;
    }

    public int getPFLMV2() {
        return PFLMV2;
    }

    public int getPFLMV3() {
        return PFLMV3;
    }

    public int getPFLMV4() {
        return PFLMV4;
    }

    public boolean getPFLMV5() {
        return PFLMV5;
    }

    public boolean getPFLMV6() {
        return PFLMV6;
    }

    public byte getPFLMVB() {
        return PFLMVB;
    }

    public byte getPFLMVB2() {
        return PFLMVB2;
    }

    public byte getPFLMVB3() {
        return PFLMVB3;
    }

    public boolean getPFLMVB4() {
        return PFLMVB4;
    }

    public boolean getPFLMVB5() {
        return PFLMVB5;
    }

    public boolean getPFLMVB6() {
        return PFLMVB6;
    }

    public byte getPFLUM() {
        return PFLUM;
    }

    public byte getPFLUM2() {
        return PFLUM2;
    }

    public byte getPFLUM2_I() {
        return PFLUM2_I;
    }

    public byte getPFLUM2_IFLAG() {
        return PFLUM2_IFLAG;
    }

    public byte getPFLUM3() {
        return PFLUM3;
    }

    public byte getPFLUM3_I() {
        return PFLUM3_I;
    }

    public byte getPFLUM3_IFLAG() {
        return PFLUM3_IFLAG;
    }

    public byte getPFLUM4() {
        return PFLUM4;
    }

    public byte getPFLUM4_I() {
        return PFLUM4_I;
    }

    public byte getPFLUM4_IFLAG() {
        return PFLUM4_IFLAG;
    }

    public byte getPFLUM5() {
        return PFLUM5;
    }

    public boolean getPFLUM5_I() {
        return PFLUM5_I;
    }

    public byte getPFLUM5_IFLAG() {
        return PFLUM5_IFLAG;
    }

    public byte getPFLUM6() {
        return PFLUM6;
    }

    public boolean getPFLUM6_I() {
        return PFLUM6_I;
    }

    public byte getPFLUM6_IFLAG() {
        return PFLUM6_IFLAG;
    }

    public byte getPFLUMALL() {
        return PFLUMALL;
    }

    public byte getPFLUMALL2() {
        return PFLUMALL2;
    }

    public byte getPFLUMALL2_I() {
        return PFLUMALL2_I;
    }

    public byte getPFLUMALL2_IFLAG() {
        return PFLUMALL2_IFLAG;
    }

    public byte getPFLUMALL3() {
        return PFLUMALL3;
    }

    public byte getPFLUMALL3_I() {
        return PFLUMALL3_I;
    }

    public byte getPFLUMALL3_IFLAG() {
        return PFLUMALL3_IFLAG;
    }

    public byte getPFLUMALL4() {
        return PFLUMALL4;
    }

    public byte getPFLUMALL4_I() {
        return PFLUMALL4_I;
    }

    public byte getPFLUMALL4_IFLAG() {
        return PFLUMALL4_IFLAG;
    }

    public byte getPFLUMALL_I() {
        return PFLUMALL_I;
    }

    public byte getPFLUMALL_IFLAG() {
        return PFLUMALL_IFLAG;
    }

    public int getPFLUMV() {
        return PFLUMV;
    }

    public int getPFLUMV2() {
        return PFLUMV2;
    }

    public double getPFLUMV2_I() {
        return PFLUMV2_I;
    }

    public boolean getPFLUMV2_IFLAG() {
        return PFLUMV2_IFLAG;
    }

    public int getPFLUMV3() {
        return PFLUMV3;
    }

    public int getPFLUMV3_I() {
        return PFLUMV3_I;
    }

    public boolean getPFLUMV3_IFLAG() {
        return PFLUMV3_IFLAG;
    }

    public int getPFLUMV4() {
        return PFLUMV4;
    }

    public int getPFLUMV4_I() {
        return PFLUMV4_I;
    }

    public boolean getPFLUMV4_IFLAG() {
        return PFLUMV4_IFLAG;
    }

    public int getPFLUMV5() {
        return PFLUMV5;
    }

    public int getPFLUMV5_I() {
        return PFLUMV5_I;
    }

    public byte getPFLUMV5_IFLAG() {
        return PFLUMV5_IFLAG;
    }

    public int getPFLUMV6() {
        return PFLUMV6;
    }

    public int getPFLUMV6_I() {
        return PFLUMV6_I;
    }

    public boolean getPFLUMV6_IFLAG() {
        return PFLUMV6_IFLAG;
    }

    public double getPFLUMV_I() {
        return PFLUMV_I;
    }

    public boolean getPFLUMV_IFLAG() {
        return PFLUMV_IFLAG;
    }

    public byte getPFLUM_I() {
        return PFLUM_I;
    }

    public byte getPFLUM_IFLAG() {
        return PFLUM_IFLAG;
    }

    public byte getPFLUVB() {
        return PFLUVB;
    }

    public byte getPFLUVB2() {
        return PFLUVB2;
    }

    public byte getPFLUVB3() {
        return PFLUVB3;
    }

    public byte getPFLUVB4() {
        return PFLUVB4;
    }

    public byte getPFLUVB5() {
        return PFLUVB5;
    }

    public boolean getPFLUVB6() {
        return PFLUVB6;
    }

    public byte getPFNEW() {
        return PFNEW;
    }

    public byte getPFNEWNO() {
        return PFNEWNO;
    }

    public byte getPFNEWNO_I() {
        return PFNEWNO_I;
    }

    public boolean getPFNEWNO_IFLAG() {
        return PFNEWNO_IFLAG;
    }

    public byte getPFNEW_I() {
        return PFNEW_I;
    }

    public boolean getPFNEW_IFLAG() {
        return PFNEW_IFLAG;
    }

    public byte getPFNUM2() {
        return PFNUM2;
    }

    public byte getPFOCTY() {
        return PFOCTY;
    }

    public byte getPFOCTY2() {
        return PFOCTY2;
    }

    public byte getPFOCTY2_I() {
        return PFOCTY2_I;
    }

    public boolean getPFOCTY2_IFLAG() {
        return PFOCTY2_IFLAG;
    }

    public byte getPFOCTY3() {
        return PFOCTY3;
    }

    public byte getPFOCTY3_I() {
        return PFOCTY3_I;
    }

    public boolean getPFOCTY3_IFLAG() {
        return PFOCTY3_IFLAG;
    }

    public byte getPFOCTY4() {
        return PFOCTY4;
    }

    public byte getPFOCTY4_I() {
        return PFOCTY4_I;
    }

    public boolean getPFOCTY4_IFLAG() {
        return PFOCTY4_IFLAG;
    }

    public byte getPFOCTY5() {
        return PFOCTY5;
    }

    public byte getPFOCTY5_I() {
        return PFOCTY5_I;
    }

    public byte getPFOCTY5_IFLAG() {
        return PFOCTY5_IFLAG;
    }

    public byte getPFOCTY6() {
        return PFOCTY6;
    }

    public byte getPFOCTY6_I() {
        return PFOCTY6_I;
    }

    public byte getPFOCTY6_IFLAG() {
        return PFOCTY6_IFLAG;
    }

    public byte getPFOCTY_I() {
        return PFOCTY_I;
    }

    public boolean getPFOCTY_IFLAG() {
        return PFOCTY_IFLAG;
    }

    public byte getPFPENVB() {
        return PFPENVB;
    }

    public boolean getPFPENVB2() {
        return PFPENVB2;
    }

    public boolean getPFPENVB3() {
        return PFPENVB3;
    }

    public boolean getPFPENVB4() {
        return PFPENVB4;
    }

    public boolean getPFPENVB5() {
        return PFPENVB5;
    }

    public boolean getPFPENVB6() {
        return PFPENVB6;
    }

    public int getPFPENVI() {
        return PFPENVI;
    }

    public short getPFPENVI2() {
        return PFPENVI2;
    }

    public short getPFPENVI3() {
        return PFPENVI3;
    }

    public short getPFPENVI4() {
        return PFPENVI4;
    }

    public boolean getPFPENVI5() {
        return PFPENVI5;
    }

    public boolean getPFPENVI6() {
        return PFPENVI6;
    }

    public byte getPFREC() {
        return PFREC;
    }

    public byte getPFREC2() {
        return PFREC2;
    }

    public byte getPFREC2_I() {
        return PFREC2_I;
    }

    public boolean getPFREC2_IFLAG() {
        return PFREC2_IFLAG;
    }

    public byte getPFREC3() {
        return PFREC3;
    }

    public byte getPFREC3_I() {
        return PFREC3_I;
    }

    public boolean getPFREC3_IFLAG() {
        return PFREC3_IFLAG;
    }

    public byte getPFREC4() {
        return PFREC4;
    }

    public byte getPFREC4_I() {
        return PFREC4_I;
    }

    public boolean getPFREC4_IFLAG() {
        return PFREC4_IFLAG;
    }

    public byte getPFREC5() {
        return PFREC5;
    }

    public byte getPFREC5_I() {
        return PFREC5_I;
    }

    public boolean getPFREC5_IFLAG() {
        return PFREC5_IFLAG;
    }

    public byte getPFREC6() {
        return PFREC6;
    }

    public byte getPFREC6_I() {
        return PFREC6_I;
    }

    public boolean getPFREC6_IFLAG() {
        return PFREC6_IFLAG;
    }

    public byte getPFREC_I() {
        return PFREC_I;
    }

    public boolean getPFREC_IFLAG() {
        return PFREC_IFLAG;
    }

    public byte getPFREM() {
        return PFREM;
    }

    public byte getPFREM2() {
        return PFREM2;
    }

    public byte getPFREM2_I() {
        return PFREM2_I;
    }

    public byte getPFREM2_IFLAG() {
        return PFREM2_IFLAG;
    }

    public byte getPFREM3() {
        return PFREM3;
    }

    public byte getPFREM3_I() {
        return PFREM3_I;
    }

    public byte getPFREM3_IFLAG() {
        return PFREM3_IFLAG;
    }

    public byte getPFREM4() {
        return PFREM4;
    }

    public byte getPFREM4_I() {
        return PFREM4_I;
    }

    public byte getPFREM4_IFLAG() {
        return PFREM4_IFLAG;
    }

    public boolean getPFREM5() {
        return PFREM5;
    }

    public boolean getPFREM6() {
        return PFREM6;
    }

    public byte getPFREM_I() {
        return PFREM_I;
    }

    public byte getPFREM_IFLAG() {
        return PFREM_IFLAG;
    }

    public byte getPFSIPTY1() {
        return PFSIPTY1;
    }

    public byte getPFSIPTY10() {
        return PFSIPTY10;
    }

    public boolean getPFSIPTY11() {
        return PFSIPTY11;
    }

    public boolean getPFSIPTY12() {
        return PFSIPTY12;
    }

    public boolean getPFSIPTY13() {
        return PFSIPTY13;
    }

    public boolean getPFSIPTY14() {
        return PFSIPTY14;
    }

    public byte getPFSIPTY15() {
        return PFSIPTY15;
    }

    public boolean getPFSIPTY16() {
        return PFSIPTY16;
    }

    public boolean getPFSIPTY17() {
        return PFSIPTY17;
    }

    public boolean getPFSIPTY18() {
        return PFSIPTY18;
    }

    public boolean getPFSIPTY19() {
        return PFSIPTY19;
    }

    public byte getPFSIPTY2() {
        return PFSIPTY2;
    }

    public byte getPFSIPTY22() {
        return PFSIPTY22;
    }

    public boolean getPFSIPTY23() {
        return PFSIPTY23;
    }

    public boolean getPFSIPTY24() {
        return PFSIPTY24;
    }

    public byte getPFSIPTY4() {
        return PFSIPTY4;
    }

    public byte getPFSIPTY5() {
        return PFSIPTY5;
    }

    public byte getPFSIPTY6() {
        return PFSIPTY6;
    }

    public boolean getPFSIPTY7() {
        return PFSIPTY7;
    }

    public byte getPFSIPTY8() {
        return PFSIPTY8;
    }

    public byte getPFSIPTY9() {
        return PFSIPTY9;
    }

    public byte getPFSTMM() {
        return PFSTMM;
    }

    public byte getPFSTMM2() {
        return PFSTMM2;
    }

    public byte getPFSTMM3() {
        return PFSTMM3;
    }

    public byte getPFSTMM4() {
        return PFSTMM4;
    }

    public byte getPFSTMM5() {
        return PFSTMM5;
    }

    public byte getPFSTMM6() {
        return PFSTMM6;
    }

    public short getPFSTMY() {
        return PFSTMY;
    }

    public short getPFSTMY2() {
        return PFSTMY2;
    }

    public short getPFSTMY3() {
        return PFSTMY3;
    }

    public short getPFSTMY4() {
        return PFSTMY4;
    }

    public short getPFSTMY5() {
        return PFSTMY5;
    }

    public short getPFSTMY6() {
        return PFSTMY6;
    }

    public byte getPFTYP() {
        return PFTYP;
    }

    public byte getPFTYP2() {
        return PFTYP2;
    }

    public byte getPFTYP2_I() {
        return PFTYP2_I;
    }

    public boolean getPFTYP2_IFLAG() {
        return PFTYP2_IFLAG;
    }

    public byte getPFTYP3() {
        return PFTYP3;
    }

    public byte getPFTYP3_I() {
        return PFTYP3_I;
    }

    public boolean getPFTYP3_IFLAG() {
        return PFTYP3_IFLAG;
    }

    public byte getPFTYP4() {
        return PFTYP4;
    }

    public byte getPFTYP4_I() {
        return PFTYP4_I;
    }

    public boolean getPFTYP4_IFLAG() {
        return PFTYP4_IFLAG;
    }

    public byte getPFTYP5() {
        return PFTYP5;
    }

    public byte getPFTYP5_I() {
        return PFTYP5_I;
    }

    public boolean getPFTYP5_IFLAG() {
        return PFTYP5_IFLAG;
    }

    public byte getPFTYP6() {
        return PFTYP6;
    }

    public byte getPFTYP6_I() {
        return PFTYP6_I;
    }

    public boolean getPFTYP6_IFLAG() {
        return PFTYP6_IFLAG;
    }

    public byte getPFTYP_I() {
        return PFTYP_I;
    }

    public boolean getPFTYP_IFLAG() {
        return PFTYP_IFLAG;
    }

    public short getPIRREG() {
        return PIRREG;
    }

    public short getPIRREG2() {
        return PIRREG2;
    }

    public byte getPMORTC() {
        return PMORTC;
    }

    public byte getPMORTC2() {
        return PMORTC2;
    }

    public byte getPMORTC3() {
        return PMORTC3;
    }

    public byte getPNEWMEM() {
        return PNEWMEM;
    }

    public byte getPNOWK() {
        return PNOWK;
    }

    public byte getPNOWKLN() {
        return PNOWKLN;
    }

    public byte getPNUMOS() {
        return PNUMOS;
    }

    public byte getPOADD1() {
        return POADD1;
    }

    public byte getPOADD1_I() {
        return POADD1_I;
    }

    public boolean getPOADD1_IFLAG() {
        return POADD1_IFLAG;
    }

    public byte getPOADD2() {
        return POADD2;
    }

    public byte getPOADD2_I() {
        return POADD2_I;
    }

    public boolean getPOADD2_IFLAG() {
        return POADD2_IFLAG;
    }

    public boolean getPOADD3() {
        return POADD3;
    }

    public boolean getPOADD3_I() {
        return POADD3_I;
    }

    public boolean getPOADD3_IFLAG() {
        return POADD3_IFLAG;
    }

    public byte getPOADD4() {
        return POADD4;
    }

    public byte getPOADD4_I() {
        return POADD4_I;
    }

    public boolean getPOADD4_IFLAG() {
        return POADD4_IFLAG;
    }

    public boolean getPOADD5() {
        return POADD5;
    }

    public boolean getPOADD5_I() {
        return POADD5_I;
    }

    public boolean getPOADD5_IFLAG() {
        return POADD5_IFLAG;
    }

    public boolean getPOADD6() {
        return POADD6;
    }

    public boolean getPOADD6_I() {
        return POADD6_I;
    }

    public boolean getPOADD6_IFLAG() {
        return POADD6_IFLAG;
    }

    public boolean getPOANEH() {
        return POANEH;
    }

    public boolean getPOANEH2() {
        return POANEH2;
    }

    public boolean getPOANEXM() {
        return POANEXM;
    }

    public boolean getPOANEXY() {
        return POANEXY;
    }

    public byte getPOANGA() {
        return POANGA;
    }

    public boolean getPOANGA2() {
        return POANGA2;
    }

    public byte getPOANIF() {
        return POANIF;
    }

    public boolean getPOANIF2() {
        return POANIF2;
    }

    public byte getPOANJT() {
        return POANJT;
    }

    public boolean getPOANJT2() {
        return POANJT2;
    }

    public byte getPOANLM() {
        return POANLM;
    }

    public boolean getPOANLM2() {
        return POANLM2;
    }

    public byte getPOANN1() {
        return POANN1;
    }

    public boolean getPOANN2() {
        return POANN2;
    }

    public boolean getPOANN3() {
        return POANN3;
    }

    public boolean getPOANN4() {
        return POANN4;
    }

    public byte getPOANN5() {
        return POANN5;
    }

    public boolean getPOANN6() {
        return POANN6;
    }

    public boolean getPOANN7() {
        return POANN7;
    }

    public boolean getPOANN8() {
        return POANN8;
    }

    public boolean getPOANVB() {
        return POANVB;
    }

    public boolean getPOANVB2() {
        return POANVB2;
    }

    public short getPOANVI() {
        return POANVI;
    }

    public short getPOANVI2() {
        return POANVI2;
    }

    public byte getPOCASH() {
        return POCASH;
    }

    public byte getPOCASH2() {
        return POCASH2;
    }

    public int getPOCNAM2() {
        return POCNAM2;
    }

    public short getPOCNAM3() {
        return POCNAM3;
    }

    public byte getPOCNDRS1() {
        return POCNDRS1;
    }

    public boolean getPOCNDRS10() {
        return POCNDRS10;
    }

    public boolean getPOCNDRS11() {
        return POCNDRS11;
    }

    public boolean getPOCNDRS12() {
        return POCNDRS12;
    }

    public byte getPOCNDRS2() {
        return POCNDRS2;
    }

    public byte getPOCNDRS3() {
        return POCNDRS3;
    }

    public boolean getPOCNDRS4() {
        return POCNDRS4;
    }

    public boolean getPOCNDRS5() {
        return POCNDRS5;
    }

    public boolean getPOCNDRS6() {
        return POCNDRS6;
    }

    public byte getPOCNDRS7() {
        return POCNDRS7;
    }

    public boolean getPOCNDRS8() {
        return POCNDRS8;
    }

    public boolean getPOCNDRS9() {
        return POCNDRS9;
    }

    public byte getPOCNFG() {
        return POCNFG;
    }

    public byte getPOCNFG2() {
        return POCNFG2;
    }

    public double getPOCNFR() {
        return POCNFR;
    }

    public double getPOCNFR2() {
        return POCNFR2;
    }

    public byte getPOCNHOW() {
        return POCNHOW;
    }

    public boolean getPOCNHO___W2() {
        return POCNHO___W2;
    }

    public byte getPOCNLRS1() {
        return POCNLRS1;
    }

    public byte getPOCNLRS2() {
        return POCNLRS2;
    }

    public boolean getPOCNLRS3() {
        return POCNLRS3;
    }

    public boolean getPOCNLRS4() {
        return POCNLRS4;
    }

    public boolean getPOCNLRS5() {
        return POCNLRS5;
    }

    public boolean getPOCNLRS6() {
        return POCNLRS6;
    }

    public boolean getPOCNLRS7() {
        return POCNLRS7;
    }

    public boolean getPOCNLRS8() {
        return POCNLRS8;
    }

    public byte getPOCNMSC2() {
        return POCNMSC2;
    }

    public byte getPOCNPLN() {
        return POCNPLN;
    }

    public byte getPOCNPLN2() {
        return POCNPLN2;
    }

    public byte getPOCNPR() {
        return POCNPR;
    }

    public byte getPOCNPR2() {
        return POCNPR2;
    }

    public byte getPOCNVOL() {
        return POCNVOL;
    }

    public byte getPOCNVOL2() {
        return POCNVOL2;
    }

    public byte getPOCONCH() {
        return POCONCH;
    }

    public byte getPOCONCH2() {
        return POCONCH2;
    }

    public byte getPOCONH() {
        return POCONH;
    }

    public byte getPOCONH2() {
        return POCONH2;
    }

    public byte getPOCTYP() {
        return POCTYP;
    }

    public byte getPOCTYP2() {
        return POCTYP2;
    }

    public byte getPOCTYP2_I() {
        return POCTYP2_I;
    }

    public boolean getPOCTYP2_IFLAG() {
        return POCTYP2_IFLAG;
    }

    public byte getPOCTYP_I() {
        return POCTYP_I;
    }

    public boolean getPOCTYP_IFLAG() {
        return POCTYP_IFLAG;
    }

    public int getPODRINC() {
        return PODRINC;
    }

    public int getPODRINC2() {
        return PODRINC2;
    }

    public boolean getPODRINCB() {
        return PODRINCB;
    }

    public boolean getPODRINCB2() {
        return PODRINCB2;
    }

    public boolean getPODRVB() {
        return PODRVB;
    }

    public boolean getPODRVB2() {
        return PODRVB2;
    }

    public short getPODRVI() {
        return PODRVI;
    }

    public int getPODRVI2() {
        return PODRVI2;
    }

    public short getPOEMAM() {
        return POEMAM;
    }

    public int getPOEMAM2() {
        return POEMAM2;
    }

    public byte getPOEMFG() {
        return POEMFG;
    }

    public byte getPOEMFG2() {
        return POEMFG2;
    }

    public double getPOEMFR() {
        return POEMFR;
    }

    public double getPOEMFR2() {
        return POEMFR2;
    }

    public byte getPOEMP() {
        return POEMP;
    }

    public byte getPOEMP2() {
        return POEMP2;
    }

    public byte getPOEMPH() {
        return POEMPH;
    }

    public byte getPOEMPH2() {
        return POEMPH2;
    }

    public byte getPOEMPR() {
        return POEMPR;
    }

    public byte getPOEMPR2() {
        return POEMPR2;
    }

    public byte getPOFAAG() {
        return POFAAG;
    }

    public byte getPOFAAG2() {
        return POFAAG2;
    }

    public byte getPOFAN1() {
        return POFAN1;
    }

    public boolean getPOFAN10() {
        return POFAN10;
    }

    public boolean getPOFAN11() {
        return POFAN11;
    }

    public boolean getPOFAN12() {
        return POFAN12;
    }

    public byte getPOFAN2() {
        return POFAN2;
    }

    public byte getPOFAN3() {
        return POFAN3;
    }

    public byte getPOFAN4() {
        return POFAN4;
    }

    public boolean getPOFAN5() {
        return POFAN5;
    }

    public byte getPOFAN6() {
        return POFAN6;
    }

    public byte getPOFAN7() {
        return POFAN7;
    }

    public boolean getPOFAN8() {
        return POFAN8;
    }

    public boolean getPOFAN9() {
        return POFAN9;
    }

    public byte getPOFAWH1() {
        return POFAWH1;
    }

    public boolean getPOFAWH10() {
        return POFAWH10;
    }

    public boolean getPOFAWH11() {
        return POFAWH11;
    }

    public boolean getPOFAWH12() {
        return POFAWH12;
    }

    public boolean getPOFAWH2() {
        return POFAWH2;
    }

    public boolean getPOFAWH3() {
        return POFAWH3;
    }

    public boolean getPOFAWH4() {
        return POFAWH4;
    }

    public boolean getPOFAWH5() {
        return POFAWH5;
    }

    public byte getPOFAWH6() {
        return POFAWH6;
    }

    public byte getPOFAWH7() {
        return POFAWH7;
    }

    public boolean getPOFAWH8() {
        return POFAWH8;
    }

    public boolean getPOFAWH9() {
        return POFAWH9;
    }

    public short getPOJOIN() {
        return POJOIN;
    }

    public short getPOJOIN2() {
        return POJOIN2;
    }

    public byte getPOLMUS1() {
        return POLMUS1;
    }

    public boolean getPOLMUS10() {
        return POLMUS10;
    }

    public boolean getPOLMUS11() {
        return POLMUS11;
    }

    public boolean getPOLMUS12() {
        return POLMUS12;
    }

    public byte getPOLMUS2() {
        return POLMUS2;
    }

    public byte getPOLMUS3() {
        return POLMUS3;
    }

    public byte getPOLMUS4() {
        return POLMUS4;
    }

    public boolean getPOLMUS5() {
        return POLMUS5;
    }

    public boolean getPOLMUS6() {
        return POLMUS6;
    }

    public byte getPOLMUS7() {
        return POLMUS7;
    }

    public boolean getPOLMUS8() {
        return POLMUS8;
    }

    public boolean getPOLMUS9() {
        return POLMUS9;
    }

    public int getPOLMV() {
        return POLMV;
    }

    public int getPOLMV2() {
        return POLMV2;
    }

    public boolean getPOLMVB() {
        return POLMVB;
    }

    public boolean getPOLMVB2() {
        return POLMVB2;
    }

    public byte getPOLSYR() {
        return POLSYR;
    }

    public byte getPOLSYR2() {
        return POLSYR2;
    }

    public byte getPOLUM() {
        return POLUM;
    }

    public byte getPOLUM2() {
        return POLUM2;
    }

    public byte getPOMETH() {
        return POMETH;
    }

    public byte getPOMETH2() {
        return POMETH2;
    }

    public byte getPOPENVB() {
        return POPENVB;
    }

    public boolean getPOPENVB2() {
        return POPENVB2;
    }

    public int getPOPENVI() {
        return POPENVI;
    }

    public int getPOPENVI2() {
        return POPENVI2;
    }

    public byte getPOPYCH() {
        return POPYCH;
    }

    public byte getPOPYCH2() {
        return POPYCH2;
    }

    public byte getPORAGE2T() {
        return PORAGE2T;
    }

    public byte getPORAGET() {
        return PORAGET;
    }

    public short getPOYRAM() {
        return POYRAM;
    }

    public int getPOYRAM2() {
        return POYRAM2;
    }

    public byte getPPACCU() {
        return PPACCU;
    }

    public byte getPPACCU2() {
        return PPACCU2;
    }

    public byte getPPACCU3() {
        return PPACCU3;
    }

    public byte getPPANEH() {
        return PPANEH;
    }

    public byte getPPANEH2() {
        return PPANEH2;
    }

    public boolean getPPANEH3() {
        return PPANEH3;
    }

    public boolean getPPANEXM() {
        return PPANEXM;
    }

    public boolean getPPANEXM2() {
        return PPANEXM2;
    }

    public boolean getPPANEXM3() {
        return PPANEXM3;
    }

    public short getPPANEXY() {
        return PPANEXY;
    }

    public boolean getPPANEXY2() {
        return PPANEXY2;
    }

    public boolean getPPANEXY3() {
        return PPANEXY3;
    }

    public byte getPPANGA() {
        return PPANGA;
    }

    public byte getPPANGA2() {
        return PPANGA2;
    }

    public byte getPPANGA3() {
        return PPANGA3;
    }

    public byte getPPANIF() {
        return PPANIF;
    }

    public byte getPPANIF2() {
        return PPANIF2;
    }

    public byte getPPANIF3() {
        return PPANIF3;
    }

    public byte getPPANJT() {
        return PPANJT;
    }

    public byte getPPANJT2() {
        return PPANJT2;
    }

    public byte getPPANJT3() {
        return PPANJT3;
    }

    public byte getPPANLM() {
        return PPANLM;
    }

    public byte getPPANLM2() {
        return PPANLM2;
    }

    public boolean getPPANLM3() {
        return PPANLM3;
    }

    public byte getPPANN1() {
        return PPANN1;
    }

    public boolean getPPANN10() {
        return PPANN10;
    }

    public boolean getPPANN11() {
        return PPANN11;
    }

    public boolean getPPANN12() {
        return PPANN12;
    }

    public boolean getPPANN2() {
        return PPANN2;
    }

    public boolean getPPANN3() {
        return PPANN3;
    }

    public boolean getPPANN4() {
        return PPANN4;
    }

    public byte getPPANN5() {
        return PPANN5;
    }

    public boolean getPPANN6() {
        return PPANN6;
    }

    public boolean getPPANN7() {
        return PPANN7;
    }

    public boolean getPPANN8() {
        return PPANN8;
    }

    public byte getPPANN9() {
        return PPANN9;
    }

    public boolean getPPANVB() {
        return PPANVB;
    }

    public boolean getPPANVB2() {
        return PPANVB2;
    }

    public boolean getPPANVB3() {
        return PPANVB3;
    }

    public short getPPANVI() {
        return PPANVI;
    }

    public short getPPANVI2() {
        return PPANVI2;
    }

    public short getPPANVI3() {
        return PPANVI3;
    }

    public byte getPPCASH() {
        return PPCASH;
    }

    public byte getPPCASH2() {
        return PPCASH2;
    }

    public byte getPPCASH3() {
        return PPCASH3;
    }

    public byte getPPCNDRS1() {
        return PPCNDRS1;
    }

    public byte getPPCNDRS17() {
        return PPCNDRS17;
    }

    public byte getPPCNDRS2() {
        return PPCNDRS2;
    }

    public boolean getPPCNDRS3() {
        return PPCNDRS3;
    }

    public byte getPPCNDRS9() {
        return PPCNDRS9;
    }

    public byte getPPCNHOW() {
        return PPCNHOW;
    }

    public byte getPPCNHOW3() {
        return PPCNHOW3;
    }

    public byte getPPCNHO___W2() {
        return PPCNHO___W2;
    }

    public byte getPPCNLRS1() {
        return PPCNLRS1;
    }

    public byte getPPCNLRS2() {
        return PPCNLRS2;
    }

    public byte getPPCNLRS3() {
        return PPCNLRS3;
    }

    public byte getPPCNLRS5() {
        return PPCNLRS5;
    }

    public byte getPPCNLRS9() {
        return PPCNLRS9;
    }

    public byte getPPCNPLN() {
        return PPCNPLN;
    }

    public byte getPPCNPLN2() {
        return PPCNPLN2;
    }

    public byte getPPCNPLN3() {
        return PPCNPLN3;
    }

    public byte getPPCONCH() {
        return PPCONCH;
    }

    public byte getPPCONCH2() {
        return PPCONCH2;
    }

    public byte getPPCONCH3() {
        return PPCONCH3;
    }

    public byte getPPDOCS() {
        return PPDOCS;
    }

    public byte getPPDOCS2() {
        return PPDOCS2;
    }

    public byte getPPDOCS3() {
        return PPDOCS3;
    }

    public int getPPDRINC() {
        return PPDRINC;
    }

    public short getPPDRINC2() {
        return PPDRINC2;
    }

    public boolean getPPDRINC3() {
        return PPDRINC3;
    }

    public byte getPPDRINCB() {
        return PPDRINCB;
    }

    public boolean getPPDRINCB2() {
        return PPDRINCB2;
    }

    public byte getPPDRVB() {
        return PPDRVB;
    }

    public boolean getPPDRVB2() {
        return PPDRVB2;
    }

    public boolean getPPDRVB3() {
        return PPDRVB3;
    }

    public int getPPDRVI() {
        return PPDRVI;
    }

    public int getPPDRVI2() {
        return PPDRVI2;
    }

    public boolean getPPDRVI3() {
        return PPDRVI3;
    }

    public short getPPEIRA() {
        return PPEIRA;
    }

    public short getPPEIRA2() {
        return PPEIRA2;
    }

    public boolean getPPEIRA3() {
        return PPEIRA3;
    }

    public boolean getPPEIRF() {
        return PPEIRF;
    }

    public boolean getPPEIRF2() {
        return PPEIRF2;
    }

    public boolean getPPEIRF3() {
        return PPEIRF3;
    }

    public byte getPPEIRH() {
        return PPEIRH;
    }

    public byte getPPEIRH2() {
        return PPEIRH2;
    }

    public byte getPPEIRH3() {
        return PPEIRH3;
    }

    public int getPPEMAM() {
        return PPEMAM;
    }

    public short getPPEMAM2() {
        return PPEMAM2;
    }

    public short getPPEMAM3() {
        return PPEMAM3;
    }

    public double getPPEMFR() {
        return PPEMFR;
    }

    public byte getPPEMFR2() {
        return PPEMFR2;
    }

    public byte getPPEMFR3() {
        return PPEMFR3;
    }

    public byte getPPEMP() {
        return PPEMP;
    }

    public byte getPPEMP2() {
        return PPEMP2;
    }

    public byte getPPEMP3() {
        return PPEMP3;
    }

    public byte getPPEMPH() {
        return PPEMPH;
    }

    public byte getPPEMPH2() {
        return PPEMPH2;
    }

    public byte getPPEMPH3() {
        return PPEMPH3;
    }

    public byte getPPEMPR() {
        return PPEMPR;
    }

    public byte getPPEMPR2() {
        return PPEMPR2;
    }

    public byte getPPEMPR3() {
        return PPEMPR3;
    }

    public byte getPPEVRG() {
        return PPEVRG;
    }

    public byte getPPEVRG2() {
        return PPEVRG2;
    }

    public byte getPPEVRG3() {
        return PPEVRG3;
    }

    public boolean getPPFAAG() {
        return PPFAAG;
    }

    public boolean getPPFAAG2() {
        return PPFAAG2;
    }

    public boolean getPPFAAG3() {
        return PPFAAG3;
    }

    public byte getPPFAN1() {
        return PPFAN1;
    }

    public boolean getPPFAN10() {
        return PPFAN10;
    }

    public byte getPPFAN11() {
        return PPFAN11;
    }

    public boolean getPPFAN12() {
        return PPFAN12;
    }

    public boolean getPPFAN13() {
        return PPFAN13;
    }

    public boolean getPPFAN14() {
        return PPFAN14;
    }

    public boolean getPPFAN15() {
        return PPFAN15;
    }

    public byte getPPFAN2() {
        return PPFAN2;
    }

    public boolean getPPFAN3() {
        return PPFAN3;
    }

    public boolean getPPFAN4() {
        return PPFAN4;
    }

    public boolean getPPFAN5() {
        return PPFAN5;
    }

    public byte getPPFAN6() {
        return PPFAN6;
    }

    public boolean getPPFAN7() {
        return PPFAN7;
    }

    public boolean getPPFAN8() {
        return PPFAN8;
    }

    public boolean getPPFAN9() {
        return PPFAN9;
    }

    public byte getPPFAWH1() {
        return PPFAWH1;
    }

    public boolean getPPFAWH10() {
        return PPFAWH10;
    }

    public boolean getPPFAWH11() {
        return PPFAWH11;
    }

    public boolean getPPFAWH12() {
        return PPFAWH12;
    }

    public boolean getPPFAWH13() {
        return PPFAWH13;
    }

    public boolean getPPFAWH14() {
        return PPFAWH14;
    }

    public boolean getPPFAWH15() {
        return PPFAWH15;
    }

    public boolean getPPFAWH16() {
        return PPFAWH16;
    }

    public boolean getPPFAWH17() {
        return PPFAWH17;
    }

    public boolean getPPFAWH18() {
        return PPFAWH18;
    }

    public boolean getPPFAWH19() {
        return PPFAWH19;
    }

    public boolean getPPFAWH2() {
        return PPFAWH2;
    }

    public boolean getPPFAWH20() {
        return PPFAWH20;
    }

    public boolean getPPFAWH21() {
        return PPFAWH21;
    }

    public boolean getPPFAWH3() {
        return PPFAWH3;
    }

    public boolean getPPFAWH4() {
        return PPFAWH4;
    }

    public boolean getPPFAWH5() {
        return PPFAWH5;
    }

    public boolean getPPFAWH6() {
        return PPFAWH6;
    }

    public boolean getPPFAWH7() {
        return PPFAWH7;
    }

    public byte getPPFAWH8() {
        return PPFAWH8;
    }

    public boolean getPPFAWH9() {
        return PPFAWH9;
    }

    public byte getPPIRNO() {
        return PPIRNO;
    }

    public byte getPPIRNO2() {
        return PPIRNO2;
    }

    public boolean getPPIRNO3() {
        return PPIRNO3;
    }

    public int getPPIRRA() {
        return PPIRRA;
    }

    public int getPPIRRA2() {
        return PPIRRA2;
    }

    public short getPPIRRA3() {
        return PPIRRA3;
    }

    public byte getPPIRRF() {
        return PPIRRF;
    }

    public boolean getPPIRRF2() {
        return PPIRRF2;
    }

    public boolean getPPIRRF3() {
        return PPIRRF3;
    }

    public byte getPPIRRH() {
        return PPIRRH;
    }

    public byte getPPIRRH2() {
        return PPIRRH2;
    }

    public boolean getPPIRRH3() {
        return PPIRRH3;
    }

    public short getPPIRRY() {
        return PPIRRY;
    }

    public short getPPIRRY2() {
        return PPIRRY2;
    }

    public short getPPIRRY3() {
        return PPIRRY3;
    }

    public short getPPLASY() {
        return PPLASY;
    }

    public short getPPLASY2() {
        return PPLASY2;
    }

    public short getPPLASY3() {
        return PPLASY3;
    }

    public byte getPPLMUS() {
        return PPLMUS;
    }

    public byte getPPLMUS2() {
        return PPLMUS2;
    }

    public boolean getPPLMUS3() {
        return PPLMUS3;
    }

    public int getPPLMV() {
        return PPLMV;
    }

    public int getPPLMV2() {
        return PPLMV2;
    }

    public short getPPLMV3() {
        return PPLMV3;
    }

    public boolean getPPLMVB() {
        return PPLMVB;
    }

    public boolean getPPLMVB2() {
        return PPLMVB2;
    }

    public boolean getPPLMVB3() {
        return PPLMVB3;
    }

    public int getPPLSTA() {
        return PPLSTA;
    }

    public int getPPLSTA2() {
        return PPLSTA2;
    }

    public int getPPLSTA3() {
        return PPLSTA3;
    }

    public byte getPPLSTP() {
        return PPLSTP;
    }

    public byte getPPLSTP2() {
        return PPLSTP2;
    }

    public byte getPPLSTP3() {
        return PPLSTP3;
    }

    public byte getPPLUM() {
        return PPLUM;
    }

    public byte getPPLUM2() {
        return PPLUM2;
    }

    public byte getPPLUM3() {
        return PPLUM3;
    }

    public byte getPPNINS() {
        return PPNINS;
    }

    public byte getPPNINS2() {
        return PPNINS2;
    }

    public byte getPPNINS3() {
        return PPNINS3;
    }

    public byte getPPORG() {
        return PPORG;
    }

    public byte getPPORG2() {
        return PPORG2;
    }

    public byte getPPORG3() {
        return PPORG3;
    }

    public byte getPPPAY() {
        return PPPAY;
    }

    public byte getPPPAY2() {
        return PPPAY2;
    }

    public byte getPPPAY3() {
        return PPPAY3;
    }

    public int getPPRGAM() {
        return PPRGAM;
    }

    public int getPPRGAM2() {
        return PPRGAM2;
    }

    public int getPPRGAM3() {
        return PPRGAM3;
    }

    public byte getPPRGFG() {
        return PPRGFG;
    }

    public byte getPPRGFG2() {
        return PPRGFG2;
    }

    public boolean getPPRGFG3() {
        return PPRGFG3;
    }

    public double getPPRGFR() {
        return PPRGFR;
    }

    public byte getPPRGFR2() {
        return PPRGFR2;
    }

    public boolean getPPRGFR3() {
        return PPRGFR3;
    }

    public byte getPPRGH() {
        return PPRGH;
    }

    public byte getPPRGH2() {
        return PPRGH2;
    }

    public byte getPPRGH3() {
        return PPRGH3;
    }

    public byte getPPRGPE() {
        return PPRGPE;
    }

    public byte getPPRGPE2() {
        return PPRGPE2;
    }

    public byte getPPRGPE3() {
        return PPRGPE3;
    }

    public byte getPPSIPP() {
        return PPSIPP;
    }

    public byte getPPSIPP2() {
        return PPSIPP2;
    }

    public byte getPPSIPP3() {
        return PPSIPP3;
    }

    public byte getPPSTMN() {
        return PPSTMN;
    }

    public byte getPPSTMN2() {
        return PPSTMN2;
    }

    public byte getPPSTMN3() {
        return PPSTMN3;
    }

    public short getPPSTYR() {
        return PPSTYR;
    }

    public short getPPSTYR2() {
        return PPSTYR2;
    }

    public short getPPSTYR3() {
        return PPSTYR3;
    }

    public byte getPPTYP() {
        return PPTYP;
    }

    public byte getPPTYP2() {
        return PPTYP2;
    }

    public byte getPPTYP3() {
        return PPTYP3;
    }

    public int getPPVAL() {
        return PPVAL;
    }

    public int getPPVAL2() {
        return PPVAL2;
    }

    public double getPPVAL2_I() {
        return PPVAL2_I;
    }

    public byte getPPVAL2_IFLAG() {
        return PPVAL2_IFLAG;
    }

    public int getPPVAL3() {
        return PPVAL3;
    }

    public double getPPVAL3_I() {
        return PPVAL3_I;
    }

    public boolean getPPVAL3_IFLAG() {
        return PPVAL3_IFLAG;
    }

    public byte getPPVALB() {
        return PPVALB;
    }

    public byte getPPVALB2() {
        return PPVALB2;
    }

    public byte getPPVALB3() {
        return PPVALB3;
    }

    public double getPPVAL_I() {
        return PPVAL_I;
    }

    public byte getPPVAL_IFLAG() {
        return PPVAL_IFLAG;
    }

    public short getPPYRST() {
        return PPYRST;
    }

    public short getPPYRST2() {
        return PPYRST2;
    }

    public short getPPYRST3() {
        return PPYRST3;
    }

    public byte getPPYSTP1() {
        return PPYSTP1;
    }

    public byte getPPYSTP15() {
        return PPYSTP15;
    }

    public byte getPPYSTP2() {
        return PPYSTP2;
    }

    public byte getPPYSTP3() {
        return PPYSTP3;
    }

    public byte getPPYSTP8() {
        return PPYSTP8;
    }

    public byte getPPYSTP9() {
        return PPYSTP9;
    }

    public boolean getPRACCU2() {
        return PRACCU2;
    }

    public boolean getPRACCU3() {
        return PRACCU3;
    }

    public boolean getPRACCU5() {
        return PRACCU5;
    }

    public boolean getPRACCU6() {
        return PRACCU6;
    }

    public byte getPREVPENS() {
        return PREVPENS;
    }

    public byte getPRODTS01() {
        return PRODTS01;
    }

    public byte getPRODTS02() {
        return PRODTS02;
    }

    public byte getPRODTS03() {
        return PRODTS03;
    }

    public byte getPRODTS04() {
        return PRODTS04;
    }

    public byte getPRODTS05() {
        return PRODTS05;
    }

    public byte getPRODTS06() {
        return PRODTS06;
    }

    public byte getPRODTS07() {
        return PRODTS07;
    }

    public byte getPRODTS08() {
        return PRODTS08;
    }

    public byte getPRODTS09() {
        return PRODTS09;
    }

    public byte getPRODTS10() {
        return PRODTS10;
    }

    public byte getPRODTS11() {
        return PRODTS11;
    }

    public boolean getPRODTS12() {
        return PRODTS12;
    }

    public byte getPRODTS201() {
        return PRODTS201;
    }

    public byte getPRODTS202() {
        return PRODTS202;
    }

    public byte getPRODTS203() {
        return PRODTS203;
    }

    public byte getPRODTS204() {
        return PRODTS204;
    }

    public byte getPRODTS205() {
        return PRODTS205;
    }

    public byte getPRODTS206() {
        return PRODTS206;
    }

    public byte getPRODTS207() {
        return PRODTS207;
    }

    public byte getPRODTS208() {
        return PRODTS208;
    }

    public byte getPRODTS209() {
        return PRODTS209;
    }

    public byte getPRODTS210() {
        return PRODTS210;
    }

    public boolean getPROXPERS() {
        return PROXPERS;
    }

    public byte getPROXYNUM() {
        return PROXYNUM;
    }

    public int getPSPEXPA() {
        return PSPEXPA;
    }

    public int getPSPEXPA_I() {
        return PSPEXPA_I;
    }

    public boolean getPSPEXPA_IFLAG() {
        return PSPEXPA_IFLAG;
    }

    public byte getPSPEXPH() {
        return PSPEXPH;
    }

    public byte getPSPEXPH_I() {
        return PSPEXPH_I;
    }

    public boolean getPSPEXPH_IFLAG() {
        return PSPEXPH_IFLAG;
    }

    public byte getPSPLUM() {
        return PSPLUM;
    }

    public int getPSPLUVAL() {
        return PSPLUVAL;
    }

    public byte getPSPSE() {
        return PSPSE;
    }

    public byte getPSPSE_I() {
        return PSPSE_I;
    }

    public boolean getPSPSE_IFLAG() {
        return PSPSE_IFLAG;
    }

    public byte getPSTYPE1() {
        return PSTYPE1;
    }

    public byte getPSTYPE10() {
        return PSTYPE10;
    }

    public byte getPSTYPE11() {
        return PSTYPE11;
    }

    public boolean getPSTYPE12() {
        return PSTYPE12;
    }

    public boolean getPSTYPE13() {
        return PSTYPE13;
    }

    public boolean getPSTYPE14() {
        return PSTYPE14;
    }

    public byte getPSTYPE15() {
        return PSTYPE15;
    }

    public byte getPSTYPE16() {
        return PSTYPE16;
    }

    public boolean getPSTYPE17() {
        return PSTYPE17;
    }

    public boolean getPSTYPE18() {
        return PSTYPE18;
    }

    public boolean getPSTYPE19() {
        return PSTYPE19;
    }

    public byte getPSTYPE2() {
        return PSTYPE2;
    }

    public boolean getPSTYPE20() {
        return PSTYPE20;
    }

    public byte getPSTYPE3() {
        return PSTYPE3;
    }

    public byte getPSTYPE4() {
        return PSTYPE4;
    }

    public byte getPSTYPE5() {
        return PSTYPE5;
    }

    public byte getPSTYPE6() {
        return PSTYPE6;
    }

    public boolean getPSTYPE7() {
        return PSTYPE7;
    }

    public byte getPSTYPE8() {
        return PSTYPE8;
    }

    public byte getPSTYPE9() {
        return PSTYPE9;
    }

    public byte getPWLUM() {
        return PWLUM;
    }

    public int getPWLUVAL() {
        return PWLUVAL;
    }

    public byte getR01() {
        return R01;
    }

    public byte getR02() {
        return R02;
    }

    public byte getR03() {
        return R03;
    }

    public byte getR04() {
        return R04;
    }

    public byte getR05() {
        return R05;
    }

    public byte getR06() {
        return R06;
    }

    public byte getR07() {
        return R07;
    }

    public byte getR08() {
        return R08;
    }

    public byte getR09() {
        return R09;
    }

    public boolean getR10() {
        return R10;
    }

    public boolean getR11() {
        return R11;
    }

    public byte getRNYDAY() {
        return RNYDAY;
    }

    public byte getSAMEJOB1() {
        return SAMEJOB1;
    }

    public byte getSAMEJOB2() {
        return SAMEJOB2;
    }

    public byte getSAMEJOB3() {
        return SAMEJOB3;
    }

    public byte getSAMEJOB4() {
        return SAMEJOB4;
    }

    public byte getSAMEJOB5() {
        return SAMEJOB5;
    }

    public byte getSAMEJOB6() {
        return SAMEJOB6;
    }

    public byte getSAMEMP() {
        return SAMEMP;
    }

    public byte getSAMJOB() {
        return SAMJOB;
    }

    public int getSEAMT() {
        return SEAMT;
    }

    public byte getSECTOR() {
        return SECTOR;
    }

    public byte getSECTR2() {
        return SECTR2;
    }

    public int getSICCODE() {
        return SICCODE;
    }

    public short getSJ12G() {
        return SJ12G;
    }

    public short getSJ12N() {
        return SJ12N;
    }

    public short getSJGRS() {
        return SJGRS;
    }

    public short getSJNET() {
        return SJNET;
    }

    public int getSJSEG() {
        return SJSEG;
    }

    public byte getSMTPEN() {
        return SMTPEN;
    }

    public byte getSOURC01() {
        return SOURC01;
    }

    public byte getSOURC02() {
        return SOURC02;
    }

    public byte getSOURC03() {
        return SOURC03;
    }

    public byte getSOURC04() {
        return SOURC04;
    }

    public byte getSOURC05() {
        return SOURC05;
    }

    public byte getSOURC06() {
        return SOURC06;
    }

    public byte getSOURC07() {
        return SOURC07;
    }

    public byte getSOURC08() {
        return SOURC08;
    }

    public boolean getSOURC09() {
        return SOURC09;
    }

    public byte getSOURC103() {
        return SOURC103;
    }

    public byte getSOURC104() {
        return SOURC104;
    }

    public byte getSOURC105() {
        return SOURC105;
    }

    public byte getSOURC106() {
        return SOURC106;
    }

    public byte getSOURC107() {
        return SOURC107;
    }

    public byte getSOURC108() {
        return SOURC108;
    }

    public boolean getSOURC109() {
        return SOURC109;
    }

    public byte getSOURC120() {
        return SOURC120;
    }

    public boolean getSOURC121() {
        return SOURC121;
    }

    public boolean getSOURC122() {
        return SOURC122;
    }

    public boolean getSOURC123() {
        return SOURC123;
    }

    public boolean getSOURC124() {
        return SOURC124;
    }

    public boolean getSOURC125() {
        return SOURC125;
    }

    public boolean getSOURC126() {
        return SOURC126;
    }

    public byte getSOURC137() {
        return SOURC137;
    }

    public byte getSOURC154() {
        return SOURC154;
    }

    public byte getSOURC155() {
        return SOURC155;
    }

    public boolean getSOURC156() {
        return SOURC156;
    }

    public byte getSOURC172() {
        return SOURC172;
    }

    public byte getSOURC18() {
        return SOURC18;
    }

    public byte getSOURC19() {
        return SOURC19;
    }

    public byte getSOURC2() {
        return SOURC2;
    }

    public byte getSOURC20() {
        return SOURC20;
    }

    public byte getSOURC21() {
        return SOURC21;
    }

    public byte getSOURC22() {
        return SOURC22;
    }

    public byte getSOURC23() {
        return SOURC23;
    }

    public byte getSOURC24() {
        return SOURC24;
    }

    public boolean getSOURC25() {
        return SOURC25;
    }

    public boolean getSOURC26() {
        return SOURC26;
    }

    public byte getSOURC2P() {
        return SOURC2P;
    }

    public byte getSOURC2P10() {
        return SOURC2P10;
    }

    public byte getSOURC2P11() {
        return SOURC2P11;
    }

    public byte getSOURC2P2() {
        return SOURC2P2;
    }

    public byte getSOURC2P3() {
        return SOURC2P3;
    }

    public byte getSOURC2P4() {
        return SOURC2P4;
    }

    public byte getSOURC2P5() {
        return SOURC2P5;
    }

    public byte getSOURC2P6() {
        return SOURC2P6;
    }

    public byte getSOURC2P7() {
        return SOURC2P7;
    }

    public byte getSOURC2P8() {
        return SOURC2P8;
    }

    public byte getSOURC2P9() {
        return SOURC2P9;
    }

    public byte getSOURC3() {
        return SOURC3;
    }

    public byte getSOURC35() {
        return SOURC35;
    }

    public byte getSOURC36() {
        return SOURC36;
    }

    public byte getSOURC37() {
        return SOURC37;
    }

    public byte getSOURC38() {
        return SOURC38;
    }

    public byte getSOURC39() {
        return SOURC39;
    }

    public byte getSOURC4() {
        return SOURC4;
    }

    public byte getSOURC40() {
        return SOURC40;
    }

    public byte getSOURC41() {
        return SOURC41;
    }

    public byte getSOURC5() {
        return SOURC5;
    }

    public byte getSOURC52() {
        return SOURC52;
    }

    public byte getSOURC53() {
        return SOURC53;
    }

    public byte getSOURC54() {
        return SOURC54;
    }

    public byte getSOURC55() {
        return SOURC55;
    }

    public byte getSOURC56() {
        return SOURC56;
    }

    public byte getSOURC57() {
        return SOURC57;
    }

    public boolean getSOURC58() {
        return SOURC58;
    }

    public byte getSOURC6() {
        return SOURC6;
    }

    public byte getSOURC69() {
        return SOURC69;
    }

    public byte getSOURC7() {
        return SOURC7;
    }

    public byte getSOURC70() {
        return SOURC70;
    }

    public byte getSOURC71() {
        return SOURC71;
    }

    public byte getSOURC72() {
        return SOURC72;
    }

    public byte getSOURC73() {
        return SOURC73;
    }

    public byte getSOURC74() {
        return SOURC74;
    }

    public boolean getSOURC75() {
        return SOURC75;
    }

    public byte getSOURC8() {
        return SOURC8;
    }

    public byte getSOURC86() {
        return SOURC86;
    }

    public byte getSOURC87() {
        return SOURC87;
    }

    public byte getSOURC88() {
        return SOURC88;
    }

    public byte getSOURC89() {
        return SOURC89;
    }

    public byte getSOURC9() {
        return SOURC9;
    }

    public byte getSOURC90() {
        return SOURC90;
    }

    public byte getSOURC91() {
        return SOURC91;
    }

    public boolean getSOURC92() {
        return SOURC92;
    }

    public byte getSOURCP01() {
        return SOURCP01;
    }

    public byte getSOURCP02() {
        return SOURCP02;
    }

    public byte getSOURCP03() {
        return SOURCP03;
    }

    public byte getSOURCP04() {
        return SOURCP04;
    }

    public byte getSOURCP05() {
        return SOURCP05;
    }

    public byte getSOURCP06() {
        return SOURCP06;
    }

    public byte getSOURCP07() {
        return SOURCP07;
    }

    public byte getSOURCP08() {
        return SOURCP08;
    }

    public byte getSOURCP09() {
        return SOURCP09;
    }

    public boolean getSOURCP102() {
        return SOURCP102;
    }

    public byte getSOURCP103() {
        return SOURCP103;
    }

    public byte getSOURCP104() {
        return SOURCP104;
    }

    public byte getSOURCP105() {
        return SOURCP105;
    }

    public byte getSOURCP106() {
        return SOURCP106;
    }

    public byte getSOURCP107() {
        return SOURCP107;
    }

    public boolean getSOURCP11() {
        return SOURCP11;
    }

    public boolean getSOURCP12() {
        return SOURCP12;
    }

    public byte getSOURCP120() {
        return SOURCP120;
    }

    public boolean getSOURCP121() {
        return SOURCP121;
    }

    public boolean getSOURCP122() {
        return SOURCP122;
    }

    public boolean getSOURCP123() {
        return SOURCP123;
    }

    public boolean getSOURCP124() {
        return SOURCP124;
    }

    public boolean getSOURCP125() {
        return SOURCP125;
    }

    public byte getSOURCP137() {
        return SOURCP137;
    }

    public byte getSOURCP154() {
        return SOURCP154;
    }

    public boolean getSOURCP155() {
        return SOURCP155;
    }

    public byte getSOURCP171() {
        return SOURCP171;
    }

    public byte getSOURCP18() {
        return SOURCP18;
    }

    public byte getSOURCP19() {
        return SOURCP19;
    }

    public byte getSOURCP20() {
        return SOURCP20;
    }

    public byte getSOURCP21() {
        return SOURCP21;
    }

    public byte getSOURCP22() {
        return SOURCP22;
    }

    public byte getSOURCP23() {
        return SOURCP23;
    }

    public byte getSOURCP24() {
        return SOURCP24;
    }

    public byte getSOURCP25() {
        return SOURCP25;
    }

    public byte getSOURCP26() {
        return SOURCP26;
    }

    public byte getSOURCP27() {
        return SOURCP27;
    }

    public boolean getSOURCP28() {
        return SOURCP28;
    }

    public boolean getSOURCP290() {
        return SOURCP290;
    }

    public byte getSOURCP35() {
        return SOURCP35;
    }

    public byte getSOURCP36() {
        return SOURCP36;
    }

    public byte getSOURCP37() {
        return SOURCP37;
    }

    public byte getSOURCP38() {
        return SOURCP38;
    }

    public byte getSOURCP39() {
        return SOURCP39;
    }

    public byte getSOURCP40() {
        return SOURCP40;
    }

    public byte getSOURCP41() {
        return SOURCP41;
    }

    public byte getSOURCP42() {
        return SOURCP42;
    }

    public byte getSOURCP43() {
        return SOURCP43;
    }

    public boolean getSOURCP44() {
        return SOURCP44;
    }

    public byte getSOURCP52() {
        return SOURCP52;
    }

    public byte getSOURCP53() {
        return SOURCP53;
    }

    public byte getSOURCP54() {
        return SOURCP54;
    }

    public byte getSOURCP55() {
        return SOURCP55;
    }

    public byte getSOURCP56() {
        return SOURCP56;
    }

    public byte getSOURCP57() {
        return SOURCP57;
    }

    public byte getSOURCP58() {
        return SOURCP58;
    }

    public boolean getSOURCP59() {
        return SOURCP59;
    }

    public boolean getSOURCP60() {
        return SOURCP60;
    }

    public boolean getSOURCP61() {
        return SOURCP61;
    }

    public byte getSOURCP69() {
        return SOURCP69;
    }

    public byte getSOURCP70() {
        return SOURCP70;
    }

    public byte getSOURCP71() {
        return SOURCP71;
    }

    public byte getSOURCP72() {
        return SOURCP72;
    }

    public byte getSOURCP73() {
        return SOURCP73;
    }

    public boolean getSOURCP74() {
        return SOURCP74;
    }

    public boolean getSOURCP75() {
        return SOURCP75;
    }

    public boolean getSOURCP76() {
        return SOURCP76;
    }

    public byte getSOURCP86() {
        return SOURCP86;
    }

    public byte getSOURCP87() {
        return SOURCP87;
    }

    public byte getSOURCP88() {
        return SOURCP88;
    }

    public byte getSOURCP89() {
        return SOURCP89;
    }

    public byte getSOURCP90() {
        return SOURCP90;
    }

    public byte getSPENDM() {
        return SPENDM;
    }

    public boolean getSSFAM1() {
        return SSFAM1;
    }

    public byte getSSNOUNITS() {
        return SSNOUNITS;
    }

    public boolean getSTATUS() {
        return STATUS;
    }

    public byte getTACC() {
        return TACC;
    }

    public byte getTACC2() {
        return TACC2;
    }

    public byte getTACC3() {
        return TACC3;
    }

    public boolean getTADDVB() {
        return TADDVB;
    }

    public boolean getTADDVB2() {
        return TADDVB2;
    }

    public boolean getTADDVB3() {
        return TADDVB3;
    }

    public int getTADDVL() {
        return TADDVL;
    }

    public int getTADDVL2() {
        return TADDVL2;
    }

    public boolean getTADDVL3() {
        return TADDVL3;
    }

    public byte getTBCAP() {
        return TBCAP;
    }

    public byte getTBCAP2() {
        return TBCAP2;
    }

    public byte getTBCAP3() {
        return TBCAP3;
    }

    public short getTBCAPY() {
        return TBCAPY;
    }

    public short getTBCAPY2() {
        return TBCAPY2;
    }

    public boolean getTBCAPY3() {
        return TBCAPY3;
    }

    public byte getTBCKNO() {
        return TBCKNO;
    }

    public byte getTBCKNO2() {
        return TBCKNO2;
    }

    public boolean getTBCKNO3() {
        return TBCKNO3;
    }

    public byte getTBEN1() {
        return TBEN1;
    }

    public byte getTBEN10() {
        return TBEN10;
    }

    public byte getTBEN11() {
        return TBEN11;
    }

    public boolean getTBEN12() {
        return TBEN12;
    }

    public boolean getTBEN13() {
        return TBEN13;
    }

    public boolean getTBEN14() {
        return TBEN14;
    }

    public boolean getTBEN15() {
        return TBEN15;
    }

    public boolean getTBEN16() {
        return TBEN16;
    }

    public byte getTBEN17() {
        return TBEN17;
    }

    public byte getTBEN18() {
        return TBEN18;
    }

    public boolean getTBEN19() {
        return TBEN19;
    }

    public byte getTBEN2() {
        return TBEN2;
    }

    public boolean getTBEN20() {
        return TBEN20;
    }

    public boolean getTBEN21() {
        return TBEN21;
    }

    public boolean getTBEN22() {
        return TBEN22;
    }

    public boolean getTBEN23() {
        return TBEN23;
    }

    public boolean getTBEN24() {
        return TBEN24;
    }

    public byte getTBEN3() {
        return TBEN3;
    }

    public byte getTBEN4() {
        return TBEN4;
    }

    public boolean getTBEN5() {
        return TBEN5;
    }

    public boolean getTBEN6() {
        return TBEN6;
    }

    public boolean getTBEN7() {
        return TBEN7;
    }

    public boolean getTBEN8() {
        return TBEN8;
    }

    public byte getTBEN9() {
        return TBEN9;
    }

    public byte getTBINC() {
        return TBINC;
    }

    public byte getTBINC2() {
        return TBINC2;
    }

    public byte getTBINC3() {
        return TBINC3;
    }

    public int getTBREC() {
        return TBREC;
    }

    public int getTBREC2() {
        return TBREC2;
    }

    public short getTBREC3() {
        return TBREC3;
    }

    public byte getTBRECB() {
        return TBRECB;
    }

    public byte getTBRECB2() {
        return TBRECB2;
    }

    public boolean getTBRECB3() {
        return TBRECB3;
    }

    public byte getTBVALB() {
        return TBVALB;
    }

    public byte getTBVALB2() {
        return TBVALB2;
    }

    public byte getTBVALB3() {
        return TBVALB3;
    }

    public boolean getTCONT1() {
        return TCONT1;
    }

    public boolean getTCONT2() {
        return TCONT2;
    }

    public byte getTDUP() {
        return TDUP;
    }

    public byte getTDUP2() {
        return TDUP2;
    }

    public byte getTDUP3() {
        return TDUP3;
    }

    public byte getTDUPA() {
        return TDUPA;
    }

    public byte getTDUPA2() {
        return TDUPA2;
    }

    public boolean getTDUPA3() {
        return TDUPA3;
    }

    public byte getTJNT1() {
        return TJNT1;
    }

    public byte getTJNT2() {
        return TJNT2;
    }

    public byte getTJNT3() {
        return TJNT3;
    }

    public boolean getTJNT4() {
        return TJNT4;
    }

    public byte getTJNT5() {
        return TJNT5;
    }

    public boolean getTJNT6() {
        return TJNT6;
    }

    public byte getTSNEW() {
        return TSNEW;
    }

    public byte getTSNO() {
        return TSNO;
    }

    public byte getTSNO2() {
        return TSNO2;
    }

    public byte getTSNO3() {
        return TSNO3;
    }

    public byte getTSNUM2() {
        return TSNUM2;
    }

    public int getTVAL() {
        return TVAL;
    }

    public int getTVAL2() {
        return TVAL2;
    }

    public int getTVAL3() {
        return TVAL3;
    }

    public byte getTVALB() {
        return TVALB;
    }

    public byte getTVALB2() {
        return TVALB2;
    }

    public byte getTVALB3() {
        return TVALB3;
    }

    public byte getTWHO1() {
        return TWHO1;
    }

    public boolean getTWHO10() {
        return TWHO10;
    }

    public boolean getTWHO11() {
        return TWHO11;
    }

    public boolean getTWHO12() {
        return TWHO12;
    }

    public byte getTWHO13() {
        return TWHO13;
    }

    public boolean getTWHO14() {
        return TWHO14;
    }

    public boolean getTWHO15() {
        return TWHO15;
    }

    public boolean getTWHO16() {
        return TWHO16;
    }

    public boolean getTWHO17() {
        return TWHO17;
    }

    public boolean getTWHO18() {
        return TWHO18;
    }

    public byte getTWHO2() {
        return TWHO2;
    }

    public boolean getTWHO3() {
        return TWHO3;
    }

    public boolean getTWHO4() {
        return TWHO4;
    }

    public boolean getTWHO5() {
        return TWHO5;
    }

    public boolean getTWHO6() {
        return TWHO6;
    }

    public byte getTWHO7() {
        return TWHO7;
    }

    public boolean getTWHO8() {
        return TWHO8;
    }

    public boolean getTWHO9() {
        return TWHO9;
    }

    public byte getUBUYLET() {
        return UBUYLET;
    }

    public byte getUBUYLET_I() {
        return UBUYLET_I;
    }

    public boolean getUBUYLET_IFLAG() {
        return UBUYLET_IFLAG;
    }

    public byte getUBUYTOL() {
        return UBUYTOL;
    }

    public boolean getUBUYTOL2() {
        return UBUYTOL2;
    }

    public boolean getUBUYTOL3() {
        return UBUYTOL3;
    }

    public boolean getUBUYTOL4() {
        return UBUYTOL4;
    }

    public boolean getUBUYTOL5() {
        return UBUYTOL5;
    }

    public boolean getUPNO() {
        return UPNO;
    }

    public int getVALPBLUM1() {
        return VALPBLUM1;
    }

    public int getVALPBLUM2() {
        return VALPBLUM2;
    }

    public byte getWKBETW() {
        return WKBETW;
    }

    public byte getWKHRS() {
        return WKHRS;
    }

    public byte getWKHRSIR() {
        return WKHRSIR;
    }

    public byte getWPENTYPE() {
        return WPENTYPE;
    }

    public byte getXMARSTA() {
        return XMARSTA;
    }

    public double getXS_CALWGT() {
        return XS_CALWGT;
    }


    public WaAS_W2PRecord(WaAS_RecordID i, String line) throws Exception {
        super(i);
        s = line.split("\t");
        initCASEW2(s[0]);
        initPERSONW2(s[1]);
        initPERSONW1(s[2]);
        initYEAR(s[3]);
        initMONTH(s[4]);
        initTYPE(s[5]);
        initP_FLAG1(s[6]);
        initP_FLAG3(s[7]);
        initP_FLAG4(s[8]);
        initIOUT1(s[9]);
        initLONGIT_CALWGT(s[10]);
        initXS_CALWGT(s[11]);
        initBUILDDB1(s[12]);
        initBUILDDB2(s[13]);
        initBUILDDB3(s[14]);
        initBUILDDEBT1(s[15]);
        initBUILDDEBT1_I(s[16]);
        initBUILDDEBT1_IFLAG(s[17]);
        initBUILDDEBT2(s[18]);
        initBUILDDEBT2_I(s[19]);
        initBUILDDEBT2_IFLAG(s[20]);
        initBUILDDEBT3(s[21]);
        initBUILDDEBT3_I(s[22]);
        initBUILDDEBT3_IFLAG(s[23]);
        initBUILDVAL1(s[24]);
        initBUILDVAL1_I(s[25]);
        initBUILDVAL1_IFLAG(s[26]);
        initBUILDVAL2(s[27]);
        initBUILDVAL2_I(s[28]);
        initBUILDVAL2_IFLAG(s[29]);
        initBUILDVAL3(s[30]);
        initBUILDVAL3_I(s[31]);
        initBUILDVAL3_IFLAG(s[32]);
        initBUILDVB1(s[33]);
        initBUILDVB2(s[34]);
        initBUILDVB3(s[35]);
        initBUYLDB1(s[36]);
        initBUYLDB2(s[37]);
        initBUYLDB3(s[38]);
        initBUYLDEBT1(s[39]);
        initBUYLDEBT1_I(s[40]);
        initBUYLDEBT1_IFLAG(s[41]);
        initBUYLDEBT2(s[42]);
        initBUYLDEBT2_I(s[43]);
        initBUYLDEBT2_IFLAG(s[44]);
        initBUYLDEBT3(s[45]);
        initBUYLDEBT3_I(s[46]);
        initBUYLDEBT3_IFLAG(s[47]);
        initBUYLGDST(s[48]);
        initBUYLGDVAL1(s[49]);
        initBUYLGDVAL2(s[50]);
        initBUYLGDVAL3(s[51]);
        initBUYLGDVB1(s[52]);
        initBUYLGDVB1_I(s[53]);
        initBUYLGDVB1_IFLAG(s[54]);
        initBUYLGDVB2(s[55]);
        initBUYLGDVB2_I(s[56]);
        initBUYLGDVB2_IFLAG(s[57]);
        initBUYLGDVB3(s[58]);
        initBUYLGDVB3_I(s[59]);
        initBUYLGDVB3_IFLAG(s[60]);
        initBUYLVAL1(s[61]);
        initBUYLVAL1_I(s[62]);
        initBUYLVAL1_IFLAG(s[63]);
        initBUYLVAL2(s[64]);
        initBUYLVAL2_I(s[65]);
        initBUYLVAL2_IFLAG(s[66]);
        initBUYLVAL3(s[67]);
        initBUYLVAL3_I(s[68]);
        initBUYLVAL3_IFLAG(s[69]);
        initBUYLVB1(s[70]);
        initBUYLVB2(s[71]);
        initBUYLVB3(s[72]);
        initHOUSEGDVAL1(s[73]);
        initHOUSEGDVAL2(s[74]);
        initHOUSEGDVAL3(s[75]);
        initHOUSEGDVB1(s[76]);
        initHOUSEGDVB1_I(s[77]);
        initHOUSEGDVB1_IFLAG(s[78]);
        initHOUSEGDVB2(s[79]);
        initHOUSEGDVB2_I(s[80]);
        initHOUSEGDVB2_IFLAG(s[81]);
        initHOUSEGDVB3(s[82]);
        initHOUSEGDVB3_I(s[83]);
        initHOUSEGDVB3_IFLAG(s[84]);
        initHOUSGDST(s[85]);
        initHSEDB1(s[86]);
        initHSEDB2(s[87]);
        initHSEDB3(s[88]);
        initHSEDEBT1(s[89]);
        initHSEDEBT1_I(s[90]);
        initHSEDEBT1_IFLAG(s[91]);
        initHSEDEBT2(s[92]);
        initHSEDEBT2_I(s[93]);
        initHSEDEBT2_IFLAG(s[94]);
        initHSEDEBT3(s[95]);
        initHSEDEBT3_I(s[96]);
        initHSEDEBT3_IFLAG(s[97]);
        initHSEVAL1(s[98]);
        initHSEVAL1_I(s[99]);
        initHSEVAL1_IFLAG(s[100]);
        initHSEVAL2(s[101]);
        initHSEVAL2_I(s[102]);
        initHSEVAL2_IFLAG(s[103]);
        initHSEVAL3(s[104]);
        initHSEVAL3_I(s[105]);
        initHSEVAL3_IFLAG(s[106]);
        initHSEVB1(s[107]);
        initHSEVB2(s[108]);
        initHSEVB3(s[109]);
        initLANDOSDB1(s[110]);
        initLANDOSDB2(s[111]);
        initLANDOSDB3(s[112]);
        initLANDOSDEBT1(s[113]);
        initLANDOSDEBT1_I(s[114]);
        initLANDOSDEBT1_IFLAG(s[115]);
        initLANDOSDEBT2(s[116]);
        initLANDOSDEBT2_I(s[117]);
        initLANDOSDEBT2_IFLAG(s[118]);
        initLANDOSDEBT3(s[119]);
        initLANDOSDEBT3_I(s[120]);
        initLANDOSDEBT3_IFLAG(s[121]);
        initLANDOSVAL1(s[122]);
        initLANDOSVAL1_I(s[123]);
        initLANDOSVAL1_IFLAG(s[124]);
        initLANDOSVAL2(s[125]);
        initLANDOSVAL2_I(s[126]);
        initLANDOSVAL2_IFLAG(s[127]);
        initLANDOSVAL3(s[128]);
        initLANDOSVAL3_I(s[129]);
        initLANDOSVAL3_IFLAG(s[130]);
        initLANDOSVB1(s[131]);
        initLANDOSVB2(s[132]);
        initLANDOSVB3(s[133]);
        initLANDUKDB1(s[134]);
        initLANDUKDB2(s[135]);
        initLANDUKDB3(s[136]);
        initLANDUKDEBT1(s[137]);
        initLANDUKDEBT1_I(s[138]);
        initLANDUKDEBT1_IFLAG(s[139]);
        initLANDUKDEBT2(s[140]);
        initLANDUKDEBT2_I(s[141]);
        initLANDUKDEBT2_IFLAG(s[142]);
        initLANDUKDEBT3(s[143]);
        initLANDUKDEBT3_I(s[144]);
        initLANDUKDEBT3_IFLAG(s[145]);
        initLANDUKVAL1(s[146]);
        initLANDUKVAL1_I(s[147]);
        initLANDUKVAL1_IFLAG(s[148]);
        initLANDUKVAL2(s[149]);
        initLANDUKVAL2_I(s[150]);
        initLANDUKVAL2_IFLAG(s[151]);
        initLANDUKVAL3(s[152]);
        initLANDUKVAL3_I(s[153]);
        initLANDUKVAL3_IFLAG(s[154]);
        initLANDUKVB1(s[155]);
        initLANDUKVB2(s[156]);
        initLANDUKVB3(s[157]);
        initOPROPDB1(s[158]);
        initOPROPDB2(s[159]);
        initOPROPDB3(s[160]);
        initOPROPDEBT1(s[161]);
        initOPROPDEBT1_I(s[162]);
        initOPROPDEBT1_IFLAG(s[163]);
        initOPROPDEBT2(s[164]);
        initOPROPDEBT2_I(s[165]);
        initOPROPDEBT2_IFLAG(s[166]);
        initOPROPDEBT3(s[167]);
        initOPROPDEBT3_I(s[168]);
        initOPROPDEBT3_IFLAG(s[169]);
        initOPROPVAL1(s[170]);
        initOPROPVAL1_I(s[171]);
        initOPROPVAL1_IFLAG(s[172]);
        initOPROPVAL2(s[173]);
        initOPROPVAL2_I(s[174]);
        initOPROPVAL2_IFLAG(s[175]);
        initOPROPVAL3(s[176]);
        initOPROPVAL3_I(s[177]);
        initOPROPVAL3_IFLAG(s[178]);
        initOPROPVB1(s[179]);
        initOPROPVB2(s[180]);
        initOPROPVB3(s[181]);
        initUBUYLET(s[182]);
        initUBUYLET_I(s[183]);
        initUBUYLET_IFLAG(s[184]);
        initUBUYTOL(s[185]);
        initUBUYTOL2(s[186]);
        initUBUYTOL3(s[187]);
        initUBUYTOL4(s[188]);
        initUBUYTOL5(s[189]);
        initUDEBT(s[190]);
        initUDEBT2(s[191]);
        initUDEBT3(s[192]);
        initUDEBT4(s[193]);
        initUDEBT5(s[194]);
        initUDEBTB(s[195]);
        initUDEBTB2(s[196]);
        initUDEBTB3(s[197]);
        initUDEBTB4(s[198]);
        initUDEBTB5(s[199]);
        initUGDVB(s[200]);
        initUGDVB2(s[201]);
        initUGDVB3(s[202]);
        initUGDVB4(s[203]);
        initUGDVB5(s[204]);
        initULAND(s[205]);
        initULAND2(s[206]);
        initULAND3(s[207]);
        initULAND4(s[208]);
        initULAND5(s[209]);
        initUNMTYP(s[210]);
        initUNUMBD(s[211]);
        initUNUMBD_I(s[212]);
        initUNUMBD_IFLAG(s[213]);
        initUNUMHS(s[214]);
        initUNUMHS_I(s[215]);
        initUNUMHS_IFLAG(s[216]);
        initUNUMLA(s[217]);
        initUNUMLA_I(s[218]);
        initUNUMLA_IFLAG(s[219]);
        initUNUMOV(s[220]);
        initUNUMOV_I(s[221]);
        initUNUMOV_IFLAG(s[222]);
        initUNUMRE(s[223]);
        initUNUMRE_I(s[224]);
        initUNUMRE_IFLAG(s[225]);
        initUPNO(s[226]);
        initUPROP1(s[227]);
        initUPROP1_I(s[228]);
        initUPROP1_IFLAG(s[229]);
        initUPROP2(s[230]);
        initUPROP2_I(s[231]);
        initUPROP2_IFLAG(s[232]);
        initUPROP3(s[233]);
        initUPROP3_I(s[234]);
        initUPROP3_IFLAG(s[235]);
        initUPROP4(s[236]);
        initUPROP4_I(s[237]);
        initUPROP4_IFLAG(s[238]);
        initUPRSH1(s[239]);
        initUPRSH2(s[240]);
        initUPRSH3(s[241]);
        initUPRSH4(s[242]);
        initUPRSH5(s[243]);
        initUPRSH6(s[244]);
        initUPRSH7(s[245]);
        initUPRSH8(s[246]);
        initUPRSH9(s[247]);
        initUPRSH10(s[248]);
        initUVAL(s[249]);
        initUVAL2(s[250]);
        initUVAL3(s[251]);
        initUVAL4(s[252]);
        initUVAL5(s[253]);
        initUVALB(s[254]);
        initUVALB2(s[255]);
        initUVALB3(s[256]);
        initUVALB4(s[257]);
        initUVALB5(s[258]);
        initCACTF(s[259]);
        initCACTF_I(s[260]);
        initCACTF_IFLAG(s[261]);
        initCACTV(s[262]);
        initCACTV_I(s[263]);
        initCACTV_IFLAG(s[264]);
        initCASAV(s[265]);
        initCASAV_I(s[266]);
        initCASAV_IFLAG(s[267]);
        initCASVB(s[268]);
        initCASVV(s[269]);
        initCASVV_I(s[270]);
        initCASVV_IFLAG(s[271]);
        initCHECKCC(s[272]);
        initCHECKDL(s[273]);
        initCHECKHB(s[274]);
        initCHECKHP(s[275]);
        initCHECKMO(s[276]);
        initCHECKNDL(s[277]);
        initCHECKST(s[278]);
        initCOMMIT1(s[279]);
        initCOMMIT2(s[280]);
        initCOMMIT3(s[281]);
        initCOMMIT4(s[282]);
        initCOMMIT5(s[283]);
        initCURRAC(s[284]);
        initDADVACT1(s[285]);
        initDADVACT2(s[286]);
        initDADVACT3(s[287]);
        initDADVMTH(s[288]);
        initDBURDA(s[289]);
        initDBURDH(s[290]);
        initDBURDW1(s[291]);
        initDBURD(s[292]);
        initDBURD___W2(s[293]);
        initDBURDW3(s[294]);
        initDBURDW4(s[295]);
        initDBURDW5(s[296]);
        initDBURDW6(s[297]);
        initDBURDW7(s[298]);
        initDC12BEH(s[299]);
        initDC12BEH2(s[300]);
        initDC12BEH3(s[301]);
        initDC12BEH4(s[302]);
        initDC12BEH5(s[303]);
        initDC12OWE(s[304]);
        initDC12OWE2(s[305]);
        initDC12OWE3(s[306]);
        initDC12OWE4(s[307]);
        initDC12OWE5(s[308]);
        initDCAMC(s[309]);
        initDCAMC_I(s[310]);
        initDCAMC_IFLAG(s[311]);
        initDCAMC2(s[312]);
        initDCAMC2_I(s[313]);
        initDCAMC2_IFLAG(s[314]);
        initDCAMC3(s[315]);
        initDCAMC3_I(s[316]);
        initDCAMC3_IFLAG(s[317]);
        initDCAMC4(s[318]);
        initDCAMC4_I(s[319]);
        initDCAMC4_IFLAG(s[320]);
        initDCAMC5(s[321]);
        initDCAMC5_I(s[322]);
        initDCAMC5_IFLAG(s[323]);
        initDCAMD(s[324]);
        initDCAMD_I(s[325]);
        initDCAMD_IFLAG(s[326]);
        initDCAMD2(s[327]);
        initDCAMD2_I(s[328]);
        initDCAMD2_IFLAG(s[329]);
        initDCAMD3(s[330]);
        initDCAMD3_I(s[331]);
        initDCAMD3_IFLAG(s[332]);
        initDCAMD4(s[333]);
        initDCAMD4_I(s[334]);
        initDCAMD4_IFLAG(s[335]);
        initDCAMD5(s[336]);
        initDCAMD5_I(s[337]);
        initDCAMD5_IFLAG(s[338]);
        initDCAMOS(s[339]);
        initDCAMOS2(s[340]);
        initDCAMOS3(s[341]);
        initDCAMOS4(s[342]);
        initDCAMOS5(s[343]);
        initDCAMP(s[344]);
        initDCAMP_I(s[345]);
        initDCAMP_IFLAG(s[346]);
        initDCAMP2(s[347]);
        initDCAMP2_I(s[348]);
        initDCAMP2_IFLAG(s[349]);
        initDCAMP3(s[350]);
        initDCAMP3_I(s[351]);
        initDCAMP3_IFLAG(s[352]);
        initDCAMP4(s[353]);
        initDCAMP4_I(s[354]);
        initDCAMP4_IFLAG(s[355]);
        initDCAMP5(s[356]);
        initDCAMP5_I(s[357]);
        initDCAMP5_IFLAG(s[358]);
        initDCANU(s[359]);
        initDCANU_I(s[360]);
        initDCANU_IFLAG(s[361]);
        initDCANY(s[362]);
        initDCANY_I(s[363]);
        initDCANY_IFLAG(s[364]);
        initDCCINTR(s[365]);
        initDCCOS(s[366]);
        initDCCOS_I(s[367]);
        initDCCOS_IFLAG(s[368]);
        initDCCOS2(s[369]);
        initDCCOS2_I(s[370]);
        initDCCOS2_IFLAG(s[371]);
        initDCCOS3(s[372]);
        initDCCOS3_I(s[373]);
        initDCCOS3_IFLAG(s[374]);
        initDCCOS4(s[375]);
        initDCCOS4_I(s[376]);
        initDCCOS4_IFLAG(s[377]);
        initDCCOS5(s[378]);
        initDCCOS5_I(s[379]);
        initDCCOS5_IFLAG(s[380]);
        initDCCSP(s[381]);
        initDCCSP_I(s[382]);
        initDCCSP_IFLAG(s[383]);
        initDCCSP2(s[384]);
        initDCCSP2_I(s[385]);
        initDCCSP2_IFLAG(s[386]);
        initDCCSP3(s[387]);
        initDCCSP3_I(s[388]);
        initDCCSP3_IFLAG(s[389]);
        initDCCSP4(s[390]);
        initDCCSP4_I(s[391]);
        initDCCSP4_IFLAG(s[392]);
        initDCCSP5(s[393]);
        initDCCSP5_I(s[394]);
        initDCCSP5_IFLAG(s[395]);
        initDCESB(s[396]);
        initDCESB2(s[397]);
        initDCESB3(s[398]);
        initDCESB4(s[399]);
        initDCESB5(s[400]);
        initDCINZ(s[401]);
        initDCINZ2(s[402]);
        initDCINZ3(s[403]);
        initDCINZ4(s[404]);
        initDCINZ5(s[405]);
        initDCNAM(s[406]);
        initDCNAM_I(s[407]);
        initDCNAM_IFLAG(s[408]);
        initDCNAM2(s[409]);
        initDCNAM2_I(s[410]);
        initDCNAM2_IFLAG(s[411]);
        initDCNAM3(s[412]);
        initDCNAM3_I(s[413]);
        initDCNAM3_IFLAG(s[414]);
        initDCNAM4(s[415]);
        initDCNAM4_I(s[416]);
        initDCNAM4_IFLAG(s[417]);
        initDCNAM5(s[418]);
        initDCNAM5_I(s[419]);
        initDCNAM5_IFLAG(s[420]);
        initDCNUM2(s[421]);
        initDCNUM2_I(s[422]);
        initDCNUM2_IFLAG(s[423]);
        initDCNUM(s[424]);
        initDCNUM_I(s[425]);
        initDCNUM_IFLAG(s[426]);
        initDCOINV(s[427]);
        initDCOINV_I(s[428]);
        initDCOINV_IFLAG(s[429]);
        initDCOINV2(s[430]);
        initDCOINV2_I(s[431]);
        initDCOINV2_IFLAG(s[432]);
        initDCOINV3(s[433]);
        initDCOINV4(s[434]);
        initDCOINVB(s[435]);
        initDCOINVB2(s[436]);
        initDCOINVB3(s[437]);
        initDCOINVB4(s[438]);
        initDCONM10(s[439]);
        initDCONM10_I(s[440]);
        initDCONM10_IFLAG(s[441]);
        initDCONM1(s[442]);
        initDCONM1_I(s[443]);
        initDCONM1_IFLAG(s[444]);
        initDCONM2(s[445]);
        initDCONM2_I(s[446]);
        initDCONM2_IFLAG(s[447]);
        initDCONM3(s[448]);
        initDCONM3_I(s[449]);
        initDCONM3_IFLAG(s[450]);
        initDCONM4(s[451]);
        initDCONM4_I(s[452]);
        initDCONM4_IFLAG(s[453]);
        initDCONM5(s[454]);
        initDCONM5_I(s[455]);
        initDCONM5_IFLAG(s[456]);
        initDCONM6(s[457]);
        initDCONM6_I(s[458]);
        initDCONM6_IFLAG(s[459]);
        initDCONM7(s[460]);
        initDCONM7_I(s[461]);
        initDCONM7_IFLAG(s[462]);
        initDCONM8(s[463]);
        initDCONM8_I(s[464]);
        initDCONM8_IFLAG(s[465]);
        initDCONM9(s[466]);
        initDCONM9_I(s[467]);
        initDCONM9_IFLAG(s[468]);
        initDCOSHV(s[469]);
        initDCOSHV_I(s[470]);
        initDCOSHV_IFLAG(s[471]);
        initDCOSHV2(s[472]);
        initDCOSHV2_I(s[473]);
        initDCOSHV2_IFLAG(s[474]);
        initDCOSHV3(s[475]);
        initDCOSHV4(s[476]);
        initDCOSHV5(s[477]);
        initDCOSHV6(s[478]);
        initDCOSHV7(s[479]);
        initDCOSHV8(s[480]);
        initDCOSHV9(s[481]);
        initDCOSHV10(s[482]);
        initDCOSHVB(s[483]);
        initDCOSHVB2(s[484]);
        initDCOSHVB3(s[485]);
        initDCPER(s[486]);
        initDCPER2(s[487]);
        initDCPER3(s[488]);
        initDCPER4(s[489]);
        initDCPER5(s[490]);
        initDCREC(s[491]);
        initDCREC_I(s[492]);
        initDCREC_IFLAG(s[493]);
        initDCREC2(s[494]);
        initDCREC2_I(s[495]);
        initDCREC2_IFLAG(s[496]);
        initDCREC3(s[497]);
        initDCREC3_I(s[498]);
        initDCREC3_IFLAG(s[499]);
        initDCREC4(s[500]);
        initDCREC4_I(s[501]);
        initDCREC4_IFLAG(s[502]);
        initDCREC5(s[503]);
        initDCREC5_I(s[504]);
        initDCREC5_IFLAG(s[505]);
        initDCRSP(s[506]);
        initDCRSP_I(s[507]);
        initDCRSP_IFLAG(s[508]);
        initDCRSP2(s[509]);
        initDCRSP2_I(s[510]);
        initDCRSP2_IFLAG(s[511]);
        initDCRSP3(s[512]);
        initDCRSP3_I(s[513]);
        initDCRSP3_IFLAG(s[514]);
        initDCRSP4(s[515]);
        initDCRSP4_I(s[516]);
        initDCRSP4_IFLAG(s[517]);
        initDCRSP5(s[518]);
        initDCRSP5_I(s[519]);
        initDCRSP5_IFLAG(s[520]);
        initDHBAMT01(s[521]);
        initDHBAMT01_I(s[522]);
        initDHBAMT01_IFLAG(s[523]);
        initDHBAMT02(s[524]);
        initDHBAMT02_I(s[525]);
        initDHBAMT02_IFLAG(s[526]);
        initDHBAMT03(s[527]);
        initDHBAMT03_I(s[528]);
        initDHBAMT03_IFLAG(s[529]);
        initDHBAMT04(s[530]);
        initDHBAMT04_I(s[531]);
        initDHBAMT04_IFLAG(s[532]);
        initDHBAMT05(s[533]);
        initDHBAMT05_I(s[534]);
        initDHBAMT05_IFLAG(s[535]);
        initDHBAMT06(s[536]);
        initDHBAMT06_I(s[537]);
        initDHBAMT06_IFLAG(s[538]);
        initDHBAMT07(s[539]);
        initDHBAMT07_I(s[540]);
        initDHBAMT07_IFLAG(s[541]);
        initDHBAMT08(s[542]);
        initDHBAMT08_I(s[543]);
        initDHBAMT08_IFLAG(s[544]);
        initDHBAMT09(s[545]);
        initDHBAMT09_I(s[546]);
        initDHBAMT09_IFLAG(s[547]);
        initDHBAMT10(s[548]);
        initDHBAMT10_I(s[549]);
        initDHBAMT10_IFLAG(s[550]);
        initDHBAMT11(s[551]);
        initDHBAMT11_I(s[552]);
        initDHBAMT11_IFLAG(s[553]);
        initDHBANY01(s[554]);
        initDHBANY01_I(s[555]);
        initDHBANY01_IFLAG(s[556]);
        initDHBANY02(s[557]);
        initDHBANY02_I(s[558]);
        initDHBANY02_IFLAG(s[559]);
        initDHBANY03(s[560]);
        initDHBANY03_I(s[561]);
        initDHBANY03_IFLAG(s[562]);
        initDHBANY04(s[563]);
        initDHBANY04_I(s[564]);
        initDHBANY04_IFLAG(s[565]);
        initDHBANY05(s[566]);
        initDHBANY05_I(s[567]);
        initDHBANY05_IFLAG(s[568]);
        initDHBANY06(s[569]);
        initDHBANY06_I(s[570]);
        initDHBANY06_IFLAG(s[571]);
        initDHBANY07(s[572]);
        initDHBANY07_I(s[573]);
        initDHBANY07_IFLAG(s[574]);
        initDHBANY08(s[575]);
        initDHBANY08_I(s[576]);
        initDHBANY08_IFLAG(s[577]);
        initDHBANY09(s[578]);
        initDHBANY09_I(s[579]);
        initDHBANY09_IFLAG(s[580]);
        initDHBANY10(s[581]);
        initDHBANY10_I(s[582]);
        initDHBANY10_IFLAG(s[583]);
        initDHBANY11(s[584]);
        initDHBANY11_I(s[585]);
        initDHBANY11_IFLAG(s[586]);
        initDHBEST01(s[587]);
        initDHBEST02(s[588]);
        initDHBEST03(s[589]);
        initDHBEST04(s[590]);
        initDHBEST05(s[591]);
        initDHBEST06(s[592]);
        initDHBEST07(s[593]);
        initDHBEST08(s[594]);
        initDHBEST09(s[595]);
        initDHBEST10(s[596]);
        initDHBEST11(s[597]);
        initDHBFIX(s[598]);
        initDHPANY1(s[599]);
        initDHPANY1_I(s[600]);
        initDHPANY1_IFLAG(s[601]);
        initDHPANY2(s[602]);
        initDHPANY2_I(s[603]);
        initDHPANY2_IFLAG(s[604]);
        initDHPANY3(s[605]);
        initDHPANY3_I(s[606]);
        initDHPANY3_IFLAG(s[607]);
        initDHPBEH(s[608]);
        initDHPBEH_I(s[609]);
        initDHPBEH_IFLAG(s[610]);
        initDHPBEH2(s[611]);
        initDHPBEH2_I(s[612]);
        initDHPBEH2_IFLAG(s[613]);
        initDHPBEH3(s[614]);
        initDHPBEH3_I(s[615]);
        initDHPBEH3_IFLAG(s[616]);
        initDHPBEH4(s[617]);
        initDHPBEH4_I(s[618]);
        initDHPBEH4_IFLAG(s[619]);
        initDHPBEH5(s[620]);
        initDHPBEH5_I(s[621]);
        initDHPBEH5_IFLAG(s[622]);
        initDHPEST(s[623]);
        initDHPEST2(s[624]);
        initDHPEST3(s[625]);
        initDHPEST4(s[626]);
        initDHPEST5(s[627]);
        initDHPINS(s[628]);
        initDHPINS_I(s[629]);
        initDHPINS_IFLAG(s[630]);
        initDHPINS2(s[631]);
        initDHPINS2_I(s[632]);
        initDHPINS2_IFLAG(s[633]);
        initDHPINS3(s[634]);
        initDHPINS3_I(s[635]);
        initDHPINS3_IFLAG(s[636]);
        initDHPINS4(s[637]);
        initDHPINS4_I(s[638]);
        initDHPINS4_IFLAG(s[639]);
        initDHPINS5(s[640]);
        initDHPINS5_I(s[641]);
        initDHPINS5_IFLAG(s[642]);
        initDHPINT(s[643]);
        initDHPINT2(s[644]);
        initDHPINT3(s[645]);
        initDHPINT4(s[646]);
        initDHPINT5(s[647]);
        initDHPNUM(s[648]);
        initDHPNUM_I(s[649]);
        initDHPNUM_IFLAG(s[650]);
        initDHPOFT(s[651]);
        initDHPOFT_I(s[652]);
        initDHPOFT_IFLAG(s[653]);
        initDHPOFT2(s[654]);
        initDHPOFT2_I(s[655]);
        initDHPOFT2_IFLAG(s[656]);
        initDHPOFT3(s[657]);
        initDHPOFT3_I(s[658]);
        initDHPOFT3_IFLAG(s[659]);
        initDHPOFT4(s[660]);
        initDHPOFT4_I(s[661]);
        initDHPOFT4_IFLAG(s[662]);
        initDHPOFT5(s[663]);
        initDHPOFT5_I(s[664]);
        initDHPOFT5_IFLAG(s[665]);
        initDHPOWE(s[666]);
        initDHPOWE_I(s[667]);
        initDHPOWE_IFLAG(s[668]);
        initDHPOWE2(s[669]);
        initDHPOWE2_I(s[670]);
        initDHPOWE2_IFLAG(s[671]);
        initDHPOWE3(s[672]);
        initDHPOWE3_I(s[673]);
        initDHPOWE3_IFLAG(s[674]);
        initDHPOWE4(s[675]);
        initDHPOWE4_I(s[676]);
        initDHPOWE4_IFLAG(s[677]);
        initDHPOWE5(s[678]);
        initDHPOWE5_I(s[679]);
        initDHPOWE5_IFLAG(s[680]);
        initDHPWEST(s[681]);
        initDHPWEST2(s[682]);
        initDHPWEST3(s[683]);
        initDHPWEST4(s[684]);
        initDHPWEST5(s[685]);
        initDHPWHNM(s[686]);
        initDHPWHNM_I(s[687]);
        initDHPWHNM_IFLAG(s[688]);
        initDHPWHNM2(s[689]);
        initDHPWHNM2_I(s[690]);
        initDHPWHNM2_IFLAG(s[691]);
        initDHPWHNM3(s[692]);
        initDHPWHNM3_I(s[693]);
        initDHPWHNM3_IFLAG(s[694]);
        initDHPWHNM4(s[695]);
        initDHPWHNM4_I(s[696]);
        initDHPWHNM4_IFLAG(s[697]);
        initDHPWHNM5(s[698]);
        initDHPWHNM5_I(s[699]);
        initDHPWHNM5_IFLAG(s[700]);
        initDHPWHNY(s[701]);
        initDHPWHNY_I(s[702]);
        initDHPWHNY_IFLAG(s[703]);
        initDHPWHNY2(s[704]);
        initDHPWHNY2_I(s[705]);
        initDHPWHNY2_IFLAG(s[706]);
        initDHPWHNY3(s[707]);
        initDHPWHNY3_I(s[708]);
        initDHPWHNY3_IFLAG(s[709]);
        initDHPWHNY4(s[710]);
        initDHPWHNY4_I(s[711]);
        initDHPWHNY4_IFLAG(s[712]);
        initDHPWHNY5(s[713]);
        initDHPWHNY5_I(s[714]);
        initDHPWHNY5_IFLAG(s[715]);
        initDLANY(s[716]);
        initDLANY_I(s[717]);
        initDLANY_IFLAG(s[718]);
        initDLBEH(s[719]);
        initDLBEH_I(s[720]);
        initDLBEH_IFLAG(s[721]);
        initDLBEH2(s[722]);
        initDLBEH2_I(s[723]);
        initDLBEH2_IFLAG(s[724]);
        initDLBEH3(s[725]);
        initDLBEH3_I(s[726]);
        initDLBEH3_IFLAG(s[727]);
        initDLBEH4(s[728]);
        initDLBEH4_I(s[729]);
        initDLBEH4_IFLAG(s[730]);
        initDLBEH5(s[731]);
        initDLBEH5_I(s[732]);
        initDLBEH5_IFLAG(s[733]);
        initDLEST(s[734]);
        initDLEST2(s[735]);
        initDLEST3(s[736]);
        initDLEST4(s[737]);
        initDLIND(s[738]);
        initDLINS(s[739]);
        initDLINS_I(s[740]);
        initDLINS_IFLAG(s[741]);
        initDLINS2(s[742]);
        initDLINS2_I(s[743]);
        initDLINS2_IFLAG(s[744]);
        initDLINS3(s[745]);
        initDLINS3_I(s[746]);
        initDLINS3_IFLAG(s[747]);
        initDLINS4(s[748]);
        initDLINS4_I(s[749]);
        initDLINS4_IFLAG(s[750]);
        initDLINS5(s[751]);
        initDLINS5_I(s[752]);
        initDLINS5_IFLAG(s[753]);
        initDLINT2(s[754]);
        initDLINT3(s[755]);
        initDLINT4(s[756]);
        initDLINT5(s[757]);
        initDLINT(s[758]);
        initDLNNM(s[759]);
        initDLNNM_I(s[760]);
        initDLNNM_IFLAG(s[761]);
        initDLNUM(s[762]);
        initDLNUM_I(s[763]);
        initDLNUM_IFLAG(s[764]);
        initDLOFT(s[765]);
        initDLOFT_I(s[766]);
        initDLOFT_IFLAG(s[767]);
        initDLOFT2(s[768]);
        initDLOFT2_I(s[769]);
        initDLOFT2_IFLAG(s[770]);
        initDLOFT3(s[771]);
        initDLOFT3_I(s[772]);
        initDLOFT3_IFLAG(s[773]);
        initDLOFT4(s[774]);
        initDLOFT4_I(s[775]);
        initDLOFT4_IFLAG(s[776]);
        initDLOFT5(s[777]);
        initDLOFT5_I(s[778]);
        initDLOFT5_IFLAG(s[779]);
        initDLOLD1(s[780]);
        initDLOLD2(s[781]);
        initDLOLD3(s[782]);
        initDLOLD4(s[783]);
        initDLOLD5(s[784]);
        initDLONM(s[785]);
        initDLOWE(s[786]);
        initDLOWE_I(s[787]);
        initDLOWE_IFLAG(s[788]);
        initDLOWE2(s[789]);
        initDLOWE2_I(s[790]);
        initDLOWE2_IFLAG(s[791]);
        initDLOWE3(s[792]);
        initDLOWE3_I(s[793]);
        initDLOWE3_IFLAG(s[794]);
        initDLOWE4(s[795]);
        initDLOWE4_I(s[796]);
        initDLOWE4_IFLAG(s[797]);
        initDLOWE5(s[798]);
        initDLOWE5_I(s[799]);
        initDLOWE5_IFLAG(s[800]);
        initDLSEC(s[801]);
        initDLSEC2(s[802]);
        initDLSEC3(s[803]);
        initDLSEC4(s[804]);
        initDLSEC5(s[805]);
        initDLTYPE(s[806]);
        initDLTYPE_I(s[807]);
        initDLTYPE_IFLAG(s[808]);
        initDLTYPE2(s[809]);
        initDLTYPE2_I(s[810]);
        initDLTYPE2_IFLAG(s[811]);
        initDLTYPE3(s[812]);
        initDLTYPE3_I(s[813]);
        initDLTYPE3_IFLAG(s[814]);
        initDLTYPE4(s[815]);
        initDLTYPE4_I(s[816]);
        initDLTYPE4_IFLAG(s[817]);
        initDLTYPE5(s[818]);
        initDLTYPE5_I(s[819]);
        initDLTYPE5_IFLAG(s[820]);
        initDLWEST(s[821]);
        initDLWEST2(s[822]);
        initDLWEST3(s[823]);
        initDLWEST4(s[824]);
        initDLWEST5(s[825]);
        initDLWHNM(s[826]);
        initDLWHNM_I(s[827]);
        initDLWHNM_IFLAG(s[828]);
        initDLWHNM2(s[829]);
        initDLWHNM2_I(s[830]);
        initDLWHNM2_IFLAG(s[831]);
        initDLWHNM3(s[832]);
        initDLWHNM3_I(s[833]);
        initDLWHNM3_IFLAG(s[834]);
        initDLWHNM4(s[835]);
        initDLWHNM4_I(s[836]);
        initDLWHNM4_IFLAG(s[837]);
        initDLWHNM5(s[838]);
        initDLWHNM5_I(s[839]);
        initDLWHNM5_IFLAG(s[840]);
        initDLWHNY(s[841]);
        initDLWHNY_I(s[842]);
        initDLWHNY_IFLAG(s[843]);
        initDLWHNY2(s[844]);
        initDLWHNY2_I(s[845]);
        initDLWHNY2_IFLAG(s[846]);
        initDLWHNY3(s[847]);
        initDLWHNY3_I(s[848]);
        initDLWHNY3_IFLAG(s[849]);
        initDLWHNY4(s[850]);
        initDLWHNY4_I(s[851]);
        initDLWHNY4_IFLAG(s[852]);
        initDLWHNY5(s[853]);
        initDLWHNY5_I(s[854]);
        initDLWHNY5_IFLAG(s[855]);
        initDLWHY1(s[856]);
        initDLWHY2(s[857]);
        initDLWHY30(s[858]);
        initDLWHY31(s[859]);
        initDLWHY32(s[860]);
        initDLWHY33(s[861]);
        initDLWHY34(s[862]);
        initDLWHY35(s[863]);
        initDLWHY3(s[864]);
        initDLWHY4(s[865]);
        initDLWHY5(s[866]);
        initDLWHY6(s[867]);
        initDLWHY7(s[868]);
        initDLWHY8(s[869]);
        initDLWHY9(s[870]);
        initDLWHY10(s[871]);
        initDLWHY11(s[872]);
        initDLWHY12(s[873]);
        initDLWHY13(s[874]);
        initDLWHY14(s[875]);
        initDLWHY15(s[876]);
        initDLWHY16(s[877]);
        initDLWHY17(s[878]);
        initDLWHY18(s[879]);
        initDLWHY19(s[880]);
        initDLWHY20(s[881]);
        initDLWHY21(s[882]);
        initDLWHY22(s[883]);
        initDLWHY23(s[884]);
        initDLWHY24(s[885]);
        initDLWHY25(s[886]);
        initDLWHY26(s[887]);
        initDLWHY27(s[888]);
        initDLWHY28(s[889]);
        initDLWHY29(s[890]);
        initDMOANY(s[891]);
        initDMOANY_I(s[892]);
        initDMOANY_IFLAG(s[893]);
        initDMOBEH2(s[894]);
        initDMOBEH2_I(s[895]);
        initDMOBEH2_IFLAG(s[896]);
        initDMOBEH3(s[897]);
        initDMOBEH3_I(s[898]);
        initDMOBEH3_IFLAG(s[899]);
        initDMOBEH4(s[900]);
        initDMOBEH4_I(s[901]);
        initDMOBEH4_IFLAG(s[902]);
        initDMOBEH5(s[903]);
        initDMOBEH5_I(s[904]);
        initDMOBEH5_IFLAG(s[905]);
        initDMOBEH(s[906]);
        initDMOBEH_I(s[907]);
        initDMOBEH_IFLAG(s[908]);
        initDMOEST(s[909]);
        initDMOEST2(s[910]);
        initDMOEST3(s[911]);
        initDMOEST4(s[912]);
        initDMOEST5(s[913]);
        initDMOINS(s[914]);
        initDMOINS_I(s[915]);
        initDMOINS_IFLAG(s[916]);
        initDMOINS2(s[917]);
        initDMOINS2_I(s[918]);
        initDMOINS2_IFLAG(s[919]);
        initDMOINS3(s[920]);
        initDMOINS3_I(s[921]);
        initDMOINS3_IFLAG(s[922]);
        initDMOINS4(s[923]);
        initDMOINS4_I(s[924]);
        initDMOINS4_IFLAG(s[925]);
        initDMOINS5(s[926]);
        initDMOINS5_I(s[927]);
        initDMOINS5_IFLAG(s[928]);
        initDMOINT(s[929]);
        initDMOINT2(s[930]);
        initDMOINT3(s[931]);
        initDMOINT4(s[932]);
        initDMOINT5(s[933]);
        initDMONUM(s[934]);
        initDMONUM_I(s[935]);
        initDMONUM_IFLAG(s[936]);
        initDMOOFT(s[937]);
        initDMOOFT_I(s[938]);
        initDMOOFT_IFLAG(s[939]);
        initDMOOFT2(s[940]);
        initDMOOFT2_I(s[941]);
        initDMOOFT2_IFLAG(s[942]);
        initDMOOFT3(s[943]);
        initDMOOFT3_I(s[944]);
        initDMOOFT3_IFLAG(s[945]);
        initDMOOFT4(s[946]);
        initDMOOFT4_I(s[947]);
        initDMOOFT4_IFLAG(s[948]);
        initDMOOFT5(s[949]);
        initDMOOFT5_I(s[950]);
        initDMOOFT5_IFLAG(s[951]);
        initDMOOWE(s[952]);
        initDMOOWE_I(s[953]);
        initDMOOWE_IFLAG(s[954]);
        initDMOOWE2(s[955]);
        initDMOOWE2_I(s[956]);
        initDMOOWE2_IFLAG(s[957]);
        initDMOOWE3(s[958]);
        initDMOOWE3_I(s[959]);
        initDMOOWE3_IFLAG(s[960]);
        initDMOOWE4(s[961]);
        initDMOOWE4_I(s[962]);
        initDMOOWE4_IFLAG(s[963]);
        initDMOOWE5(s[964]);
        initDMOOWE5_I(s[965]);
        initDMOOWE5_IFLAG(s[966]);
        initDMOWEST(s[967]);
        initDMOWEST2(s[968]);
        initDMOWEST3(s[969]);
        initDMOWEST4(s[970]);
        initDMOWEST5(s[971]);
        initDMOWHNM(s[972]);
        initDMOWHNM_I(s[973]);
        initDMOWHNM_IFLAG(s[974]);
        initDMOWHNM2(s[975]);
        initDMOWHNM2_I(s[976]);
        initDMOWHNM2_IFLAG(s[977]);
        initDMOWHNM3(s[978]);
        initDMOWHNM3_I(s[979]);
        initDMOWHNM3_IFLAG(s[980]);
        initDMOWHNM4(s[981]);
        initDMOWHNM4_I(s[982]);
        initDMOWHNM4_IFLAG(s[983]);
        initDMOWHNM5(s[984]);
        initDMOWHNM5_I(s[985]);
        initDMOWHNM5_IFLAG(s[986]);
        initDMOWHNY(s[987]);
        initDMOWHNY_I(s[988]);
        initDMOWHNY_IFLAG(s[989]);
        initDMOWHNY2(s[990]);
        initDMOWHNY2_I(s[991]);
        initDMOWHNY2_IFLAG(s[992]);
        initDMOWHNY3(s[993]);
        initDMOWHNY3_I(s[994]);
        initDMOWHNY3_IFLAG(s[995]);
        initDMOWHNY4(s[996]);
        initDMOWHNY4_I(s[997]);
        initDMOWHNY4_IFLAG(s[998]);
        initDMOWHNY5(s[999]);
        initDMOWHNY5_I(s[1000]);
        initDMOWHNY5_IFLAG(s[1001]);
        initDS12BEH(s[1002]);
        initDS12BEH2(s[1003]);
        initDS12BEH3(s[1004]);
        initDS12BEH4(s[1005]);
        initDS12BEH5(s[1006]);
        initDS12OWE(s[1007]);
        initDS12OWE2(s[1008]);
        initDS12OWE3(s[1009]);
        initDS12OWE4(s[1010]);
        initDS12OWE5(s[1011]);
        initDSAMC(s[1012]);
        initDSAMC_I(s[1013]);
        initDSAMC_IFLAG(s[1014]);
        initDSAMC2(s[1015]);
        initDSAMC2_I(s[1016]);
        initDSAMC2_IFLAG(s[1017]);
        initDSAMC3(s[1018]);
        initDSAMC3_I(s[1019]);
        initDSAMC3_IFLAG(s[1020]);
        initDSAMC4(s[1021]);
        initDSAMC4_I(s[1022]);
        initDSAMC4_IFLAG(s[1023]);
        initDSAMC5(s[1024]);
        initDSAMC5_I(s[1025]);
        initDSAMC5_IFLAG(s[1026]);
        initDSAMD(s[1027]);
        initDSAMD_I(s[1028]);
        initDSAMD_IFLAG(s[1029]);
        initDSAMD2(s[1030]);
        initDSAMD2_I(s[1031]);
        initDSAMD2_IFLAG(s[1032]);
        initDSAMD3(s[1033]);
        initDSAMD3_I(s[1034]);
        initDSAMD3_IFLAG(s[1035]);
        initDSAMD4(s[1036]);
        initDSAMD4_I(s[1037]);
        initDSAMD4_IFLAG(s[1038]);
        initDSAMD5(s[1039]);
        initDSAMD5_I(s[1040]);
        initDSAMD5_IFLAG(s[1041]);
        initDSAMOS(s[1042]);
        initDSAMOS2(s[1043]);
        initDSAMOS3(s[1044]);
        initDSAMOS4(s[1045]);
        initDSAMOS5(s[1046]);
        initDSAMP(s[1047]);
        initDSAMP_I(s[1048]);
        initDSAMP_IFLAG(s[1049]);
        initDSAMP2(s[1050]);
        initDSAMP2_I(s[1051]);
        initDSAMP2_IFLAG(s[1052]);
        initDSAMP3(s[1053]);
        initDSAMP3_I(s[1054]);
        initDSAMP3_IFLAG(s[1055]);
        initDSAMP4(s[1056]);
        initDSAMP4_I(s[1057]);
        initDSAMP4_IFLAG(s[1058]);
        initDSAMP5(s[1059]);
        initDSAMP5_I(s[1060]);
        initDSAMP5_IFLAG(s[1061]);
        initDSANU1(s[1062]);
        initDSANU1_I(s[1063]);
        initDSANU1_IFLAG(s[1064]);
        initDSANU2(s[1065]);
        initDSANU2_I(s[1066]);
        initDSANU2_IFLAG(s[1067]);
        initDSANY1(s[1068]);
        initDSANY1_I(s[1069]);
        initDSANY1_IFLAG(s[1070]);
        initDSANY2(s[1071]);
        initDSANY2_I(s[1072]);
        initDSANY2_IFLAG(s[1073]);
        initDSCOS(s[1074]);
        initDSCOS_I(s[1075]);
        initDSCOS_IFLAG(s[1076]);
        initDSCOS2(s[1077]);
        initDSCOS2_I(s[1078]);
        initDSCOS2_IFLAG(s[1079]);
        initDSCOS3(s[1080]);
        initDSCOS3_I(s[1081]);
        initDSCOS3_IFLAG(s[1082]);
        initDSCOS4(s[1083]);
        initDSCOS4_I(s[1084]);
        initDSCOS4_IFLAG(s[1085]);
        initDSCOS5(s[1086]);
        initDSCOS5_I(s[1087]);
        initDSCOS5_IFLAG(s[1088]);
        initDSCSP(s[1089]);
        initDSCSP_I(s[1090]);
        initDSCSP_IFLAG(s[1091]);
        initDSCSP2(s[1092]);
        initDSCSP2_I(s[1093]);
        initDSCSP2_IFLAG(s[1094]);
        initDSCSP3(s[1095]);
        initDSCSP3_I(s[1096]);
        initDSCSP3_IFLAG(s[1097]);
        initDSCSP4(s[1098]);
        initDSCSP4_I(s[1099]);
        initDSCSP4_IFLAG(s[1100]);
        initDSCSP5(s[1101]);
        initDSCSP5_I(s[1102]);
        initDSCSP5_IFLAG(s[1103]);
        initDSESB2(s[1104]);
        initDSESB3(s[1105]);
        initDSESB4(s[1106]);
        initDSESB5(s[1107]);
        initDSESB(s[1108]);
        initDSLAMT(s[1109]);
        initDSLAMT_I(s[1110]);
        initDSLAMT_IFLAG(s[1111]);
        initDSLAMT2(s[1112]);
        initDSLAMT2_I(s[1113]);
        initDSLAMT2_IFLAG(s[1114]);
        initDSLAMT3(s[1115]);
        initDSLAMT3_I(s[1116]);
        initDSLAMT3_IFLAG(s[1117]);
        initDSLAMT4(s[1118]);
        initDSLAMT4_I(s[1119]);
        initDSLAMT4_IFLAG(s[1120]);
        initDSLAMT5(s[1121]);
        initDSLAMT5_I(s[1122]);
        initDSLAMT5_IFLAG(s[1123]);
        initDSLEST(s[1124]);
        initDSLEST2(s[1125]);
        initDSLEST3(s[1126]);
        initDSLEST4(s[1127]);
        initDSLEST5(s[1128]);
        initDSLPAY2(s[1129]);
        initDSLPAY2_I(s[1130]);
        initDSLPAY2_IFLAG(s[1131]);
        initDSLPAY3(s[1132]);
        initDSLPAY3_I(s[1133]);
        initDSLPAY3_IFLAG(s[1134]);
        initDSLPAY4(s[1135]);
        initDSLPAY4_I(s[1136]);
        initDSLPAY4_IFLAG(s[1137]);
        initDSLPAY5(s[1138]);
        initDSLPAY5_I(s[1139]);
        initDSLPAY5_IFLAG(s[1140]);
        initDSLPAY(s[1141]);
        initDSLPAY_I(s[1142]);
        initDSLPAY_IFLAG(s[1143]);
        initDSNAM(s[1144]);
        initDSNAM_I(s[1145]);
        initDSNAM_IFLAG(s[1146]);
        initDSNAM2(s[1147]);
        initDSNAM2_I(s[1148]);
        initDSNAM2_IFLAG(s[1149]);
        initDSNAM3(s[1150]);
        initDSNAM3_I(s[1151]);
        initDSNAM3_IFLAG(s[1152]);
        initDSNAM4(s[1153]);
        initDSNAM4_I(s[1154]);
        initDSNAM4_IFLAG(s[1155]);
        initDSNAM5(s[1156]);
        initDSNAM5_I(s[1157]);
        initDSNAM5_IFLAG(s[1158]);
        initDSNUM2(s[1159]);
        initDSNUM2_I(s[1160]);
        initDSNUM2_IFLAG(s[1161]);
        initDSNUM(s[1162]);
        initDSNUM_I(s[1163]);
        initDSNUM_IFLAG(s[1164]);
        initDSONM10(s[1165]);
        initDSONM10_I(s[1166]);
        initDSONM10_IFLAG(s[1167]);
        initDSONM1(s[1168]);
        initDSONM1_I(s[1169]);
        initDSONM1_IFLAG(s[1170]);
        initDSONM2(s[1171]);
        initDSONM2_I(s[1172]);
        initDSONM2_IFLAG(s[1173]);
        initDSONM3(s[1174]);
        initDSONM3_I(s[1175]);
        initDSONM3_IFLAG(s[1176]);
        initDSONM4(s[1177]);
        initDSONM4_I(s[1178]);
        initDSONM4_IFLAG(s[1179]);
        initDSONM5(s[1180]);
        initDSONM5_I(s[1181]);
        initDSONM5_IFLAG(s[1182]);
        initDSONM6(s[1183]);
        initDSONM6_I(s[1184]);
        initDSONM6_IFLAG(s[1185]);
        initDSONM7(s[1186]);
        initDSONM7_I(s[1187]);
        initDSONM7_IFLAG(s[1188]);
        initDSONM8(s[1189]);
        initDSONM8_I(s[1190]);
        initDSONM8_IFLAG(s[1191]);
        initDSONM9(s[1192]);
        initDSONM9_I(s[1193]);
        initDSONM9_IFLAG(s[1194]);
        initDSPER2(s[1195]);
        initDSPER(s[1196]);
        initDSREC(s[1197]);
        initDSREC_I(s[1198]);
        initDSREC_IFLAG(s[1199]);
        initDSREC2(s[1200]);
        initDSREC2_I(s[1201]);
        initDSREC2_IFLAG(s[1202]);
        initDSREC3(s[1203]);
        initDSREC3_I(s[1204]);
        initDSREC3_IFLAG(s[1205]);
        initDSREC4(s[1206]);
        initDSREC4_I(s[1207]);
        initDSREC4_IFLAG(s[1208]);
        initDSREC5(s[1209]);
        initDSREC5_I(s[1210]);
        initDSREC5_IFLAG(s[1211]);
        initDSRSP2(s[1212]);
        initDSRSP2_I(s[1213]);
        initDSRSP2_IFLAG(s[1214]);
        initDSRSP3(s[1215]);
        initDSRSP3_I(s[1216]);
        initDSRSP3_IFLAG(s[1217]);
        initDSRSP4(s[1218]);
        initDSRSP4_I(s[1219]);
        initDSRSP4_IFLAG(s[1220]);
        initDSRSP5(s[1221]);
        initDSRSP5_I(s[1222]);
        initDSRSP5_IFLAG(s[1223]);
        initDSRSP(s[1224]);
        initDSRSP_I(s[1225]);
        initDSRSP_IFLAG(s[1226]);
        initDTLOWE_I(s[1227]);
        initDTLOWE_IFLAG(s[1228]);
        initDTLOWE(s[1229]);
        initDTLOWE2(s[1230]);
        initDTLOWE2_I(s[1231]);
        initDTLOWE2_IFLAG(s[1232]);
        initDTLOWE3(s[1233]);
        initDTLOWE3_I(s[1234]);
        initDTLOWE3_IFLAG(s[1235]);
        initDTLOWEB2(s[1236]);
        initDTLOWEB3(s[1237]);
        initDTLOWEB(s[1238]);
        initDTLTYPE(s[1239]);
        initDTLTYPE_I(s[1240]);
        initDTLTYPE_IFLAG(s[1241]);
        initDTLTYPE2(s[1242]);
        initDTLTYPE2_I(s[1243]);
        initDTLTYPE2_IFLAG(s[1244]);
        initDTLTYPE3(s[1245]);
        initDTLTYPE3_I(s[1246]);
        initDTLTYPE3_IFLAG(s[1247]);
        initDTTOWE(s[1248]);
        initDTTOWE2(s[1249]);
        initDTTOWE3(s[1250]);
        initDTTOWE4(s[1251]);
        initDTTOWE5(s[1252]);
        initDTTOWE6(s[1253]);
        initDTTOWE7(s[1254]);
        initDTTOWE8(s[1255]);
        initDTTOWE9(s[1256]);
        initDTTOWE10(s[1257]);
        initDTTOWE11(s[1258]);
        initDTTOWE12(s[1259]);
        initDTTOWE13(s[1260]);
        initDTTOWE14(s[1261]);
        initDTTOWE15(s[1262]);
        initDTTOWEB(s[1263]);
        initDTTOWEB2(s[1264]);
        initDTTOWEB3(s[1265]);
        initDTTOWEB4(s[1266]);
        initDTTOWEB5(s[1267]);
        initDTTOWEB6(s[1268]);
        initDTTOWEB7(s[1269]);
        initDTTOWEB8(s[1270]);
        initDTTOWEB9(s[1271]);
        initDTTOWEB10(s[1272]);
        initDTTOWEB11(s[1273]);
        initDTTOWEB12(s[1274]);
        initDTTOWEB13(s[1275]);
        initDTTOWEB14(s[1276]);
        initDTTOWEB15(s[1277]);
        initFBONDTY1(s[1278]);
        initFBONDTY2(s[1279]);
        initFBONDTY3(s[1280]);
        initFBONDVB(s[1281]);
        initFBONDV(s[1282]);
        initFBONDV_I(s[1283]);
        initFBONDV_IFLAG(s[1284]);
        initFCACSH(s[1285]);
        initFCACSH_I(s[1286]);
        initFCACSH_IFLAG(s[1287]);
        initFCINVAL(s[1288]);
        initFCINVAL_I(s[1289]);
        initFCINVAL_IFLAG(s[1290]);
        initFCINVLB(s[1291]);
        initFCISAB(s[1292]);
        initFCISAV(s[1293]);
        initFCISAV_I(s[1294]);
        initFCISAV_IFLAG(s[1295]);
        initFCISAWD(s[1296]);
        initFCISCE(s[1297]);
        initFCIWDAB(s[1298]);
        initFCIWNUM(s[1299]);
        initFCNUMIN(s[1300]);
        initFCNUMIN_I(s[1301]);
        initFCNUMIN_IFLAG(s[1302]);
        initFCNUMSH(s[1303]);
        initFCNUMSH_I(s[1304]);
        initFCNUMSH_IFLAG(s[1305]);
        initFCOLLVB(s[1306]);
        initFCOLLV(s[1307]);
        initFCOLLV_I(s[1308]);
        initFCOLLV_IFLAG(s[1309]);
        initFCOVDIF(s[1310]);
        initFCOVDIN(s[1311]);
        initFCOVDIN_I(s[1312]);
        initFCOVDIN_IFLAG(s[1313]);
        initFCOVDSH(s[1314]);
        initFCOVDSH_I(s[1315]);
        initFCOVDSH_IFLAG(s[1316]);
        initFCOVNIN(s[1317]);
        initFCOVNIN_I(s[1318]);
        initFCOVNIN_IFLAG(s[1319]);
        initFCOVNSH(s[1320]);
        initFCOVNSH_I(s[1321]);
        initFCOVNSH_IFLAG(s[1322]);
        initFCSHVAL(s[1323]);
        initFCSHVAL_I(s[1324]);
        initFCSHVAL_IFLAG(s[1325]);
        initFCSHVLB(s[1326]);
        initFCSUPPR(s[1327]);
        initFEOPTV(s[1328]);
        initFEOPTV_I(s[1329]);
        initFEOPTV_IFLAG(s[1330]);
        initFEOPVB(s[1331]);
        initFESHAV(s[1332]);
        initFESHAV_I(s[1333]);
        initFESHAV_IFLAG(s[1334]);
        initFESHA(s[1335]);
        initFESHA_I(s[1336]);
        initFESHA_IFLAG(s[1337]);
        initFESHVB(s[1338]);
        initFGFOVB(s[1339]);
        initFGILTS1(s[1340]);
        initFGILTS1_I(s[1341]);
        initFGILTS1_IFLAG(s[1342]);
        initFGILTS2(s[1343]);
        initFGILTS2_I(s[1344]);
        initFGILTS2_IFLAG(s[1345]);
        initFGILTS3(s[1346]);
        initFGILTS3_I(s[1347]);
        initFGILTS3_IFLAG(s[1348]);
        initFGILTS4(s[1349]);
        initFGILTS4_I(s[1350]);
        initFGILTS4_IFLAG(s[1351]);
        initFGLTFOV(s[1352]);
        initFGLTFOV_I(s[1353]);
        initFGLTFOV_IFLAG(s[1354]);
        initFGLTUKV(s[1355]);
        initFGLTUKV_I(s[1356]);
        initFGLTUKV_IFLAG(s[1357]);
        initFGUKVB(s[1358]);
        initFIISAB(s[1359]);
        initFIISAV(s[1360]);
        initFIISAV_I(s[1361]);
        initFIISAV_IFLAG(s[1362]);
        initFINCVB(s[1363]);
        initFINCV(s[1364]);
        initFINFLV(s[1365]);
        initFINFLV_I(s[1366]);
        initFINFLV_IFLAG(s[1367]);
        initFINFSAV1(s[1368]);
        initFINFSAV1_I(s[1369]);
        initFINFSAV1_IFLAG(s[1370]);
        initFINFSAV2(s[1371]);
        initFINFSAV2_I(s[1372]);
        initFINFSAV2_IFLAG(s[1373]);
        initFINFSAV3(s[1374]);
        initFINFSAV3_I(s[1375]);
        initFINFSAV3_IFLAG(s[1376]);
        initFINFSAV4(s[1377]);
        initFINFSAV4_I(s[1378]);
        initFINFSAV4_IFLAG(s[1379]);
        initFINFVB(s[1380]);
        initFINFV(s[1381]);
        initFINFV_I(s[1382]);
        initFINFV_IFLAG(s[1383]);
        initFINSV(s[1384]);
        initFINSV_I(s[1385]);
        initFINSV_IFLAG(s[1386]);
        initFINS(s[1387]);
        initFINS_I(s[1388]);
        initFINS_IFLAG(s[1389]);
        initFINVOTV(s[1390]);
        initFINVOTV_I(s[1391]);
        initFINVOTV_IFLAG(s[1392]);
        initFINVOVB(s[1393]);
        initFINVTY01(s[1394]);
        initFINVTY01_I(s[1395]);
        initFINVTY01_IFLAG(s[1396]);
        initFINVTY02(s[1397]);
        initFINVTY02_I(s[1398]);
        initFINVTY02_IFLAG(s[1399]);
        initFINVTY03(s[1400]);
        initFINVTY03_I(s[1401]);
        initFINVTY03_IFLAG(s[1402]);
        initFINVTY04(s[1403]);
        initFINVTY04_I(s[1404]);
        initFINVTY04_IFLAG(s[1405]);
        initFINVTY05(s[1406]);
        initFINVTY05_I(s[1407]);
        initFINVTY05_IFLAG(s[1408]);
        initFINVTY06(s[1409]);
        initFINVTY06_I(s[1410]);
        initFINVTY06_IFLAG(s[1411]);
        initFINVTY07(s[1412]);
        initFINVTY07_I(s[1413]);
        initFINVTY07_IFLAG(s[1414]);
        initFINVTY08(s[1415]);
        initFINVTY08_I(s[1416]);
        initFINVTY08_IFLAG(s[1417]);
        initFINVTY09(s[1418]);
        initFINVTY09_I(s[1419]);
        initFINVTY09_IFLAG(s[1420]);
        initFINVTY10(s[1421]);
        initFINVTY10_I(s[1422]);
        initFINVTY10_IFLAG(s[1423]);
        initFINVTY11(s[1424]);
        initFISA1(s[1425]);
        initFISA1_I(s[1426]);
        initFISA1_IFLAG(s[1427]);
        initFISA2(s[1428]);
        initFISA2_I(s[1429]);
        initFISA2_IFLAG(s[1430]);
        initFKISAB(s[1431]);
        initFKISAV(s[1432]);
        initFKISAV_I(s[1433]);
        initFKISAV_IFLAG(s[1434]);
        initFLFENVB(s[1435]);
        initFLFENV(s[1436]);
        initFLFENV_I(s[1437]);
        initFLFENV_IFLAG(s[1438]);
        initFLFFSVB(s[1439]);
        initFLFFSV(s[1440]);
        initFLFFSV_I(s[1441]);
        initFLFFSV_IFLAG(s[1442]);
        initFLFSIVB(s[1443]);
        initFLFSIV(s[1444]);
        initFLFSIV_I(s[1445]);
        initFLFSIV_IFLAG(s[1446]);
        initFLFTEVB(s[1447]);
        initFLFTEV(s[1448]);
        initFLFTEV_I(s[1449]);
        initFLFTEV_IFLAG(s[1450]);
        initFLOANVB(s[1451]);
        initFLPROD1(s[1452]);
        initFLPROD1_I(s[1453]);
        initFLPROD1_IFLAG(s[1454]);
        initFLPROD2(s[1455]);
        initFLPROD2_I(s[1456]);
        initFLPROD2_IFLAG(s[1457]);
        initFLPROD3(s[1458]);
        initFLPROD3_I(s[1459]);
        initFLPROD3_IFLAG(s[1460]);
        initFLPROD4(s[1461]);
        initFLPROD4_I(s[1462]);
        initFLPROD4_IFLAG(s[1463]);
        initFNSVAL(s[1464]);
        initFNSVAL_I(s[1465]);
        initFNSVAL_IFLAG(s[1466]);
        initFNSVB(s[1467]);
        initFSACSH(s[1468]);
        initFSACSH_I(s[1469]);
        initFSACSH_IFLAG(s[1470]);
        initFSAVAB(s[1471]);
        initFSAVED(s[1472]);
        initFSHADAB(s[1473]);
        initFSHADA(s[1474]);
        initFSHADD(s[1475]);
        initFSHARE1(s[1476]);
        initFSHARE1_I(s[1477]);
        initFSHARE1_IFLAG(s[1478]);
        initFSHARE2(s[1479]);
        initFSHARE2_I(s[1480]);
        initFSHARE2_IFLAG(s[1481]);
        initFSHARE3(s[1482]);
        initFSHARE3_I(s[1483]);
        initFSHARE3_IFLAG(s[1484]);
        initFSHOSVB(s[1485]);
        initFSHOSV(s[1486]);
        initFSHOSV_I(s[1487]);
        initFSHOSV_IFLAG(s[1488]);
        initFSHUKVB(s[1489]);
        initFSHUKV(s[1490]);
        initFSHUKV_I(s[1491]);
        initFSHUKV_IFLAG(s[1492]);
        initFSINVAL(s[1493]);
        initFSINVAL_I(s[1494]);
        initFSINVAL_IFLAG(s[1495]);
        initFSINVLB(s[1496]);
        initFSNUMIN(s[1497]);
        initFSNUMIN_I(s[1498]);
        initFSNUMIN_IFLAG(s[1499]);
        initFSNUMSH(s[1500]);
        initFSNUMSH_I(s[1501]);
        initFSNUMSH_IFLAG(s[1502]);
        initFSOSHAV(s[1503]);
        initFSOSVLB(s[1504]);
        initFSSHVAL(s[1505]);
        initFSSHVAL_I(s[1506]);
        initFSSHVAL_IFLAG(s[1507]);
        initFSSHVLB(s[1508]);
        initFSSUPPR(s[1509]);
        initFSTYPIN1(s[1510]);
        initFSTYPIN2(s[1511]);
        initFSTYPIN3(s[1512]);
        initFSTYPIN4(s[1513]);
        initFSTYPIN5(s[1514]);
        initFSTYPSH1(s[1515]);
        initFSTYPSH2(s[1516]);
        initFSTYPSH3(s[1517]);
        initFSTYPSH4(s[1518]);
        initFSTYPSH5(s[1519]);
        initIGDS10(s[1520]);
        initIGDS11(s[1521]);
        initIGDS12(s[1522]);
        initIGDS13(s[1523]);
        initIGDS14(s[1524]);
        initIGDS15(s[1525]);
        initIGDS16(s[1526]);
        initIGDS17(s[1527]);
        initIGDS18(s[1528]);
        initIGDS19(s[1529]);
        initIGDS1(s[1530]);
        initIGDS20(s[1531]);
        initIGDS21(s[1532]);
        initIGDS2(s[1533]);
        initIGDS3(s[1534]);
        initIGDS4(s[1535]);
        initIGDS5(s[1536]);
        initIGDS6(s[1537]);
        initIGDS7(s[1538]);
        initIGDS8(s[1539]);
        initIGDS9(s[1540]);
        initIGFVALB(s[1541]);
        initIGIFVAL(s[1542]);
        initIHRCNUM(s[1543]);
        initIHRECNT(s[1544]);
        initIHSE1(s[1545]);
        initIHSE2(s[1546]);
        initIHSE7(s[1547]);
        initILACB(s[1548]);
        initILACC(s[1549]);
        initILGIFT(s[1550]);
        initILIFB(s[1551]);
        initILIFE(s[1552]);
        initILINB(s[1553]);
        initILINS(s[1554]);
        initILNPBAM(s[1555]);
        initILNPBK(s[1556]);
        initILNUSE01(s[1557]);
        initILNUSE02(s[1558]);
        initILNUSE03(s[1559]);
        initILNUSE04(s[1560]);
        initILNUSE05(s[1561]);
        initILNUSE06(s[1562]);
        initILNUSE07(s[1563]);
        initILNUSE08(s[1564]);
        initILNUSE09(s[1565]);
        initILNUSE10(s[1566]);
        initILNVALB(s[1567]);
        initILNVAL(s[1568]);
        initILOAN(s[1569]);
        initILOTB(s[1570]);
        initILOTH(s[1571]);
        initILRDB(s[1572]);
        initILRED(s[1573]);
        initILUMP(s[1574]);
        initILUMTY1(s[1575]);
        initILUMTY2(s[1576]);
        initILUMTY3(s[1577]);
        initILUMTY4(s[1578]);
        initILUPB(s[1579]);
        initILUPP(s[1580]);
        initILWIN(s[1581]);
        initILWNB(s[1582]);
        initINSPOL(s[1583]);
        initIVAL2(s[1584]);
        initIVAL3(s[1585]);
        initIVALB2(s[1586]);
        initIVALB3(s[1587]);
        initIVALB(s[1588]);
        initIVAL(s[1589]);
        initIWAT10(s[1590]);
        initIWAT13(s[1591]);
        initIWAT14(s[1592]);
        initIWAT1(s[1593]);
        initIWAT2(s[1594]);
        initIWAT3(s[1595]);
        initIWAT4(s[1596]);
        initIWAT5(s[1597]);
        initIWAT6(s[1598]);
        initIWAT7(s[1599]);
        initIWAT8(s[1600]);
        initIWAT9(s[1601]);
        initIWHO2(s[1602]);
        initIWHO3(s[1603]);
        initIWHO(s[1604]);
        initNEWFCMX(s[1605]);
        initNEWGIFT(s[1606]);
        initNWFLNVAL1(s[1607]);
        initNWFLNVAL2(s[1608]);
        initNWFLNVAL3(s[1609]);
        initNWHPNO(s[1610]);
        initNWHP(s[1611]);
        initNWILNVAL1(s[1612]);
        initNWILNVAL2(s[1613]);
        initNWILNVAL3(s[1614]);
        initNWLNNO(s[1615]);
        initNWLNNO_I(s[1616]);
        initNWLNNO_IFLAG(s[1617]);
        initNWLN(s[1618]);
        initNWLN_I(s[1619]);
        initNWLN_IFLAG(s[1620]);
        initOCSVR1(s[1621]);
        initOCSVR2(s[1622]);
        initOCSVR3(s[1623]);
        initOCSVR4(s[1624]);
        initOCSVR5(s[1625]);
        initOCSVR6(s[1626]);
        initOCSVR7(s[1627]);
        initOCSVR8(s[1628]);
        initOIMPRS1(s[1629]);
        initOIMPRS2(s[1630]);
        initOIMPRS3(s[1631]);
        initOIMPRS4(s[1632]);
        initOIMPRS5(s[1633]);
        initOIMPRS6(s[1634]);
        initOIMPRS7(s[1635]);
        initOIMPRS8(s[1636]);
        initOIMPRS9(s[1637]);
        initOINTROL(s[1638]);
        initOINTROM(s[1639]);
        initORETINC(s[1640]);
        initOSITCH(s[1641]);
        initOSITUAT(s[1642]);
        initOTHASCH(s[1643]);
        initOTHASVB(s[1644]);
        initOTHASVL(s[1645]);
        initOTHERFA(s[1646]);
        initOTHSHARE(s[1647]);
        initOTRUST01(s[1648]);
        initOTRUST02(s[1649]);
        initOTRUST03(s[1650]);
        initOTRUST04(s[1651]);
        initOTRUST05(s[1652]);
        initOTRUST06(s[1653]);
        initOTRUST07(s[1654]);
        initOTRUST08(s[1655]);
        initOTRUST09(s[1656]);
        initOTRUST10(s[1657]);
        initOTRUST11(s[1658]);
        initOTRUST12(s[1659]);
        initOTRUST13(s[1660]);
        initOTRUST14(s[1661]);
        initOTRUST15(s[1662]);
        initPNSBOND(s[1663]);
        initSAVDEP(s[1664]);
        initSELECTAD(s[1665]);
        initSELECTAD_I(s[1666]);
        initSELECTAD_IFLAG(s[1667]);
        initSLNOS1(s[1668]);
        initSLNOS2(s[1669]);
        initSLNOS3(s[1670]);
        initT_FLNS(s[1671]);
        initT_LNS(s[1672]);
        initT_SLNS(s[1673]);
        initTACC2(s[1674]);
        initTACC3(s[1675]);
        initTACC(s[1676]);
        initTADDVB2(s[1677]);
        initTADDVB3(s[1678]);
        initTADDVB(s[1679]);
        initTADDVL2(s[1680]);
        initTADDVL3(s[1681]);
        initTADDVL(s[1682]);
        initTBCAP2(s[1683]);
        initTBCAP3(s[1684]);
        initTBCAP(s[1685]);
        initTBCAPY2(s[1686]);
        initTBCAPY3(s[1687]);
        initTBCAPY(s[1688]);
        initTBCKNO2(s[1689]);
        initTBCKNO3(s[1690]);
        initTBCKNO(s[1691]);
        initTBEN1(s[1692]);
        initTBEN2(s[1693]);
        initTBEN3(s[1694]);
        initTBEN4(s[1695]);
        initTBEN5(s[1696]);
        initTBEN6(s[1697]);
        initTBEN7(s[1698]);
        initTBEN8(s[1699]);
        initTBEN9(s[1700]);
        initTBEN10(s[1701]);
        initTBEN11(s[1702]);
        initTBEN12(s[1703]);
        initTBEN13(s[1704]);
        initTBEN14(s[1705]);
        initTBEN15(s[1706]);
        initTBEN16(s[1707]);
        initTBEN17(s[1708]);
        initTBEN18(s[1709]);
        initTBEN19(s[1710]);
        initTBEN20(s[1711]);
        initTBEN21(s[1712]);
        initTBEN22(s[1713]);
        initTBEN23(s[1714]);
        initTBEN24(s[1715]);
        initTBENEF(s[1716]);
        initTBENNUM(s[1717]);
        initTBINC(s[1718]);
        initTBINC2(s[1719]);
        initTBINC3(s[1720]);
        initTBREC(s[1721]);
        initTBREC2(s[1722]);
        initTBREC3(s[1723]);
        initTBRECB(s[1724]);
        initTBRECB2(s[1725]);
        initTBRECB3(s[1726]);
        initTBVALB2(s[1727]);
        initTBVALB3(s[1728]);
        initTBVALB(s[1729]);
        initTCONT1(s[1730]);
        initTCONT2(s[1731]);
        initTDUP(s[1732]);
        initTDUP2(s[1733]);
        initTDUP3(s[1734]);
        initTDUPA(s[1735]);
        initTDUPA2(s[1736]);
        initTDUPA3(s[1737]);
        initTINTRO(s[1738]);
        initTJNT1(s[1739]);
        initTJNT2(s[1740]);
        initTJNT3(s[1741]);
        initTJNT4(s[1742]);
        initTJNT5(s[1743]);
        initTJNT6(s[1744]);
        initTSETT(s[1745]);
        initTSNEW(s[1746]);
        initTSNO2(s[1747]);
        initTSNO3(s[1748]);
        initTSNO(s[1749]);
        initTSNUM2(s[1750]);
        initTSNUM(s[1751]);
        initTVAL(s[1752]);
        initTVAL2(s[1753]);
        initTVAL3(s[1754]);
        initTVALB(s[1755]);
        initTVALB2(s[1756]);
        initTVALB3(s[1757]);
        initTWHO1(s[1758]);
        initTWHO2(s[1759]);
        initTWHO3(s[1760]);
        initTWHO4(s[1761]);
        initTWHO5(s[1762]);
        initTWHO6(s[1763]);
        initTWHO7(s[1764]);
        initTWHO8(s[1765]);
        initTWHO9(s[1766]);
        initTWHO10(s[1767]);
        initTWHO11(s[1768]);
        initTWHO12(s[1769]);
        initTWHO13(s[1770]);
        initTWHO14(s[1771]);
        initTWHO15(s[1772]);
        initTWHO16(s[1773]);
        initTWHO17(s[1774]);
        initTWHO18(s[1775]);
        initUITRUST(s[1776]);
        initXINSOL(s[1777]);
        initXINTYP(s[1778]);
        initDVANYARR(s[1779]);
        initDVCACRVAL(s[1780]);
        initDVCACTV(s[1781]);
        initDVCAODVAL(s[1782]);
        initDVCASVV(s[1783]);
        initDVCAVAL(s[1784]);
        initDVCHMARR(s[1785]);
        initDVCISAV(s[1786]);
        initDVCOINV2(s[1787]);
        initDVCOINV3(s[1788]);
        initDVCOINV4(s[1789]);
        initDVCOINV(s[1790]);
        initDVCRTARR(s[1791]);
        initDVCTARR(s[1792]);
        initDVDHPOWE2(s[1793]);
        initDVDHPOWE3(s[1794]);
        initDVDHPOWE4(s[1795]);
        initDVDHPOWE5(s[1796]);
        initDVDHPOWE(s[1797]);
        initDVDLOWE2(s[1798]);
        initDVDLOWE3(s[1799]);
        initDVDLOWE4(s[1800]);
        initDVDLOWE5(s[1801]);
        initDVDLOWE(s[1802]);
        initDVDMOOWE2(s[1803]);
        initDVDMOOWE3(s[1804]);
        initDVDMOOWE4(s[1805]);
        initDVDMOOWE5(s[1806]);
        initDVDMOOWE(s[1807]);
        initDVELARR(s[1808]);
        initDVFBONDV(s[1809]);
        initDVFCINVAL(s[1810]);
        initDVFCOLLV(s[1811]);
        initDVFEOPTV(s[1812]);
        initDVFESHARES(s[1813]);
        initDVFESHAV(s[1814]);
        initDVFFASSETS(s[1815]);
        initDVFGLTFOV(s[1816]);
        initDVFGLTUKV(s[1817]);
        initDVFINFLV(s[1818]);
        initDVFINFVAL(s[1819]);
        initDVFINFV(s[1820]);
        initDVFINVOTV(s[1821]);
        initDVFLFENV(s[1822]);
        initDVFLFFSV(s[1823]);
        initDVFLFSIV(s[1824]);
        initDVFLFTEV(s[1825]);
        initDVFNSVAL(s[1826]);
        initDVFSHOSV(s[1827]);
        initDVFSHUKV(s[1828]);
        initDVFSINVAL(s[1829]);
        initDVGASARR(s[1830]);
        initDVHPAR(s[1831]);
        initDVIISAV(s[1832]);
        initDVINSV(s[1833]);
        initDVISAVAL(s[1834]);
        initDVKISAV(s[1835]);
        initDVLNAR(s[1836]);
        initDVMOAR(s[1837]);
        initDVNWFLN(s[1838]);
        initDVNWILN(s[1839]);
        initDVOTHARR(s[1840]);
        initDVRNTARR(s[1841]);
        initDVSAVAL(s[1842]);
        initDVSHCVAL(s[1843]);
        initDVSHODVAL2(s[1844]);
        initDVSHODVAL3(s[1845]);
        initDVSHODVAL(s[1846]);
        initDVSHSVAL(s[1847]);
        initDVTAXARR(s[1848]);
        initDVTELARR(s[1849]);
        initDVVATARR(s[1850]);
        initDVWATARR(s[1851]);
        initEMPSHARE(s[1852]);
        initFLNOS1(s[1853]);
        initFLNOS2(s[1854]);
        initFLNOS3(s[1855]);
        initFLNOS4(s[1856]);
        initFLNOS5(s[1857]);
        initFNSAV1(s[1858]);
        initFNSAV2(s[1859]);
        initFNSAV3(s[1860]);
        initFNSAV4(s[1861]);
        initFTIBOND(s[1862]);
        initFWITHD(s[1863]);
        initGCBGILT(s[1864]);
        initHASCC(s[1865]);
        initHASHP(s[1866]);
        initHASLF(s[1867]);
        initHASMO(s[1868]);
        initHASPLINF(s[1869]);
        initHASSC(s[1870]);
        initHASSL(s[1871]);
        initHFINL(s[1872]);
        initHFINW_EXCENDW(s[1873]);
        initHPARR(s[1874]);
        initHPLFT2(s[1875]);
        initHPLFT3(s[1876]);
        initHPLFT4(s[1877]);
        initHPLFT5(s[1878]);
        initHPLFT(s[1879]);
        initHPOS1(s[1880]);
        initHPOS2(s[1881]);
        initHPOS3(s[1882]);
        initHPOS4(s[1883]);
        initHPOS5(s[1884]);
        initINS(s[1885]);
        initISA(s[1886]);
        initLNARR(s[1887]);
        initLNLFT(s[1888]);
        initLNLFT2(s[1889]);
        initLNLFT3(s[1890]);
        initLNLFT4(s[1891]);
        initLNLFT5(s[1892]);
        initLNOS1(s[1893]);
        initLNOS2(s[1894]);
        initLNOS3(s[1895]);
        initLNOS4(s[1896]);
        initLNOS5(s[1897]);
        initMOARR(s[1898]);
        initMOLFT(s[1899]);
        initMOLFT2(s[1900]);
        initMOLFT3(s[1901]);
        initMOLFT4(s[1902]);
        initMOLFT5(s[1903]);
        initMOOS1(s[1904]);
        initMOOS2(s[1905]);
        initMOOS3(s[1906]);
        initMOOS4(s[1907]);
        initMOOS5(s[1908]);
        initNOFA(s[1909]);
        initTOTBILLARR(s[1910]);
        initTOTCC(s[1911]);
        initTOTHP(s[1912]);
        initTOTLOS(s[1913]);
        initTOTMO(s[1914]);
        initTOTSC(s[1915]);
        initCHECK1(s[1916]);
        initCHECK2(s[1917]);
        initOIGOE(s[1918]);
        initOIGOE_I(s[1919]);
        initOIGOE_IFLAG(s[1920]);
        initOIGOS(s[1921]);
        initOIGOS_I(s[1922]);
        initOIGOS_IFLAG(s[1923]);
        initOIGPP(s[1924]);
        initOIGPP_I(s[1925]);
        initOIGPP_IFLAG(s[1926]);
        initOINOE(s[1927]);
        initOINOS(s[1928]);
        initOINPP(s[1929]);
        initOLARGE(s[1930]);
        initOPENS01(s[1931]);
        initOPENS02(s[1932]);
        initOPENS03(s[1933]);
        initOPENS04(s[1934]);
        initOPENS05(s[1935]);
        initOPENS06(s[1936]);
        initOPENS07(s[1937]);
        initOPENS08(s[1938]);
        initOPENSAV(s[1939]);
        initOSTANDL(s[1940]);
        initOTHSRC1(s[1941]);
        initOTHSRC1_I(s[1942]);
        initOTHSRC1_IFLAG(s[1943]);
        initOTHSRC2(s[1944]);
        initOTHSRC2_I(s[1945]);
        initOTHSRC2_IFLAG(s[1946]);
        initOTHSRC3(s[1947]);
        initOTHSRC3_I(s[1948]);
        initOTHSRC3_IFLAG(s[1949]);
        initPADDFUT(s[1950]);
        initPADDFUT2(s[1951]);
        initPANYO(s[1952]);
        initPANYO_I(s[1953]);
        initPANYO_IFLAG(s[1954]);
        initPASTMN(s[1955]);
        initPASTMN2(s[1956]);
        initPASTYR(s[1957]);
        initPASTYR2(s[1958]);
        initPAVCAM(s[1959]);
        initPAVCAM2(s[1960]);
        initPAVCFG(s[1961]);
        initPAVCFG2(s[1962]);
        initPAVCFR(s[1963]);
        initPAVCFR2(s[1964]);
        initPAVCH(s[1965]);
        initPAVCH2(s[1966]);
        initPAVCIN(s[1967]);
        initPAVCIN2(s[1968]);
        initPAVCPR(s[1969]);
        initPAVCPR2(s[1970]);
        initPAVCUV2(s[1971]);
        initPAVCUV2_I(s[1972]);
        initPAVCUV2_IFLAG(s[1973]);
        initPAVCUV(s[1974]);
        initPAVCUV_I(s[1975]);
        initPAVCUV_IFLAG(s[1976]);
        initPAVCVB2(s[1977]);
        initPAVCVB(s[1978]);
        initPAVDOC2(s[1979]);
        initPAVDOC(s[1980]);
        initPBDOCS(s[1981]);
        initPBDOCS2(s[1982]);
        initPBFRAC(s[1983]);
        initPBFRAC_I(s[1984]);
        initPBFRAC_IFLAG(s[1985]);
        initPBFRAC2(s[1986]);
        initPBFRAC2_I(s[1987]);
        initPBFRAC2_IFLAG(s[1988]);
        initPBINCA(s[1989]);
        initPBINCA2(s[1990]);
        initPBINCF(s[1991]);
        initPBINCF2(s[1992]);
        initPBINCH(s[1993]);
        initPBINCH2(s[1994]);
        initPBLMVB(s[1995]);
        initPBLMVB2(s[1996]);
        initPBLUMV(s[1997]);
        initPBLUMV_I(s[1998]);
        initPBLUMV_IFLAG(s[1999]);
        initPBLUMV2(s[2000]);
        initPBLUMV2_I(s[2001]);
        initPBLUMV2_IFLAG(s[2002]);
        initPBQUAL(s[2003]);
        initPBQUAL_I(s[2004]);
        initPBQUAL_IFLAG(s[2005]);
        initPBQUAL2(s[2006]);
        initPBQUAL2_I(s[2007]);
        initPBQUAL2_IFLAG(s[2008]);
        initPBSTMN(s[2009]);
        initPBSTMN2(s[2010]);
        initPBSTYR(s[2011]);
        initPBSTYR2(s[2012]);
        initPCCFST1(s[2013]);
        initPCCFST1_I(s[2014]);
        initPCCFST1_IFLAG(s[2015]);
        initPCCFST2(s[2016]);
        initPCCFST2_I(s[2017]);
        initPCCFST2_IFLAG(s[2018]);
        initPCCFST3(s[2019]);
        initPCCFST3_I(s[2020]);
        initPCCFST3_IFLAG(s[2021]);
        initPCDOCS(s[2022]);
        initPCDOCS2(s[2023]);
        initPCNEW(s[2024]);
        initPCNUM(s[2025]);
        initPCONT(s[2026]);
        initPCONT_I(s[2027]);
        initPCONT_IFLAG(s[2028]);
        initPCSTMN(s[2029]);
        initPCSTMN2(s[2030]);
        initPCSTYR(s[2031]);
        initPCSTYR2(s[2032]);
        initPDBCAL(s[2033]);
        initPDBCAL2(s[2034]);
        initPDCVAL2(s[2035]);
        initPDCVAL2_I(s[2036]);
        initPDCVAL2_IFLAG(s[2037]);
        initPDCVAL(s[2038]);
        initPDCVAL_I(s[2039]);
        initPDCVAL_IFLAG(s[2040]);
        initPDCVB(s[2041]);
        initPDCVB2(s[2042]);
        initPEANYO(s[2043]);
        initPECONT(s[2044]);
        initPEMELG(s[2045]);
        initPEMELG_I(s[2046]);
        initPEMELG_IFLAG(s[2047]);
        initPEMFIN(s[2048]);
        initPEMMEM(s[2049]);
        initPEMMEM_I(s[2050]);
        initPEMMEM_IFLAG(s[2051]);
        initPEMOFF(s[2052]);
        initPEMOFF_I(s[2053]);
        initPEMOFF_IFLAG(s[2054]);
        initPESAME(s[2055]);
        initPESAME_I(s[2056]);
        initPESAME_IFLAG(s[2057]);
        initPEVERC(s[2058]);
        initPEVERC_I(s[2059]);
        initPEVERC_IFLAG(s[2060]);
        initPEVERNC(s[2061]);
        initPEVERNC_I(s[2062]);
        initPEVERNC_IFLAG(s[2063]);
        initPEWYNO01(s[2064]);
        initPEWYNO02(s[2065]);
        initPEWYNO03(s[2066]);
        initPEWYNO04(s[2067]);
        initPEWYNO05(s[2068]);
        initPFACCU3(s[2069]);
        initPFACCU5(s[2070]);
        initPFACCU6(s[2071]);
        initPFANEH(s[2072]);
        initPFANEH2(s[2073]);
        initPFANEH3(s[2074]);
        initPFANEXM(s[2075]);
        initPFANEXY(s[2076]);
        initPFANGA(s[2077]);
        initPFANGA2(s[2078]);
        initPFANGA3(s[2079]);
        initPFANIF(s[2080]);
        initPFANIF2(s[2081]);
        initPFANIF3(s[2082]);
        initPFANJT(s[2083]);
        initPFANJT2(s[2084]);
        initPFANJT3(s[2085]);
        initPFANLM(s[2086]);
        initPFANLM2(s[2087]);
        initPFANN11(s[2088]);
        initPFANN12(s[2089]);
        initPFANN1(s[2090]);
        initPFANN2(s[2091]);
        initPFANN3(s[2092]);
        initPFANN6(s[2093]);
        initPFANN7(s[2094]);
        initPFANVB(s[2095]);
        initPFANVI(s[2096]);
        initPFANVI2(s[2097]);
        initPFANVI3(s[2098]);
        initPFBEG(s[2099]);
        initPFBEG2(s[2100]);
        initPFBEG3(s[2101]);
        initPFBEG4(s[2102]);
        initPFBEG5(s[2103]);
        initPFBEG6(s[2104]);
        initPFCASH(s[2105]);
        initPFCASH_I(s[2106]);
        initPFCASH_IFLAG(s[2107]);
        initPFCASH2(s[2108]);
        initPFCASH2_I(s[2109]);
        initPFCASH2_IFLAG(s[2110]);
        initPFCASH3(s[2111]);
        initPFCASH3_I(s[2112]);
        initPFCASH3_IFLAG(s[2113]);
        initPFCASH4(s[2114]);
        initPFCASH4_I(s[2115]);
        initPFCASH4_IFLAG(s[2116]);
        initPFCRET1(s[2117]);
        initPFCRET2(s[2118]);
        initPFCRET3(s[2119]);
        initPFCRET4(s[2120]);
        initPFCRET5(s[2121]);
        initPFCRET6(s[2122]);
        initPFCURV(s[2123]);
        initPFCURV_I(s[2124]);
        initPFCURV_IFLAG(s[2125]);
        initPFCURV2(s[2126]);
        initPFCURV2_I(s[2127]);
        initPFCURV2_IFLAG(s[2128]);
        initPFCURV3(s[2129]);
        initPFCURV3_I(s[2130]);
        initPFCURV3_IFLAG(s[2131]);
        initPFCURV4(s[2132]);
        initPFCURV4_I(s[2133]);
        initPFCURV4_IFLAG(s[2134]);
        initPFCURV5(s[2135]);
        initPFCURV5_I(s[2136]);
        initPFCURV5_IFLAG(s[2137]);
        initPFCURV6(s[2138]);
        initPFCURV6_I(s[2139]);
        initPFCURV6_IFLAG(s[2140]);
        initPFCUVB(s[2141]);
        initPFCUVB2(s[2142]);
        initPFCUVB3(s[2143]);
        initPFCUVB4(s[2144]);
        initPFCUVB5(s[2145]);
        initPFCUVB6(s[2146]);
        initPFDDV(s[2147]);
        initPFDDV_I(s[2148]);
        initPFDDV_IFLAG(s[2149]);
        initPFDDV2(s[2150]);
        initPFDDV2_I(s[2151]);
        initPFDDV2_IFLAG(s[2152]);
        initPFDDV3(s[2153]);
        initPFDDV3_I(s[2154]);
        initPFDDV3_IFLAG(s[2155]);
        initPFDDV4(s[2156]);
        initPFDDV4_I(s[2157]);
        initPFDDV4_IFLAG(s[2158]);
        initPFDDV5(s[2159]);
        initPFDDV6(s[2160]);
        initPFDDVB(s[2161]);
        initPFDDVB2(s[2162]);
        initPFDDVB3(s[2163]);
        initPFDDVB4(s[2164]);
        initPFDDVB5(s[2165]);
        initPFDDVB6(s[2166]);
        initPFDOCS2(s[2167]);
        initPFDOCS3(s[2168]);
        initPFDOCS4(s[2169]);
        initPFDOCS5(s[2170]);
        initPFDOCS6(s[2171]);
        initPFDOCS(s[2172]);
        initPFDRAW(s[2173]);
        initPFDRAW_I(s[2174]);
        initPFDRAW_IFLAG(s[2175]);
        initPFDRA___W2(s[2176]);
        initPFDRAW2_I(s[2177]);
        initPFDRAW2_IFLAG(s[2178]);
        initPFDRAW3(s[2179]);
        initPFDRAW3_I(s[2180]);
        initPFDRAW3_IFLAG(s[2181]);
        initPFDRAW4(s[2182]);
        initPFDRAW4_I(s[2183]);
        initPFDRAW4_IFLAG(s[2184]);
        initPFDRAW5(s[2185]);
        initPFDRAW6(s[2186]);
        initPFDRINC(s[2187]);
        initPFDRINC2(s[2188]);
        initPFDRINC3(s[2189]);
        initPFDRINC4(s[2190]);
        initPFDRINC5(s[2191]);
        initPFDRINC6(s[2192]);
        initPFDRINCB(s[2193]);
        initPFDRINCB2(s[2194]);
        initPFDRINCB3(s[2195]);
        initPFDRINCB4(s[2196]);
        initPFDRINCB5(s[2197]);
        initPFDRINCB6(s[2198]);
        initPFDRVB(s[2199]);
        initPFDRVB2(s[2200]);
        initPFDRVB3(s[2201]);
        initPFDRVB4(s[2202]);
        initPFDRVB5(s[2203]);
        initPFDRVB6(s[2204]);
        initPFDRVI2(s[2205]);
        initPFDRVI3(s[2206]);
        initPFDRVI4(s[2207]);
        initPFDRVI5(s[2208]);
        initPFDRVI6(s[2209]);
        initPFDRVI(s[2210]);
        initPFEND(s[2211]);
        initPFEND2(s[2212]);
        initPFEND3(s[2213]);
        initPFEND4(s[2214]);
        initPFEND5(s[2215]);
        initPFEND6(s[2216]);
        initPFENNUM(s[2217]);
        initPFEN(s[2218]);
        initPFFAAG(s[2219]);
        initPFFAAG2(s[2220]);
        initPFFAAG3(s[2221]);
        initPFFAAG4(s[2222]);
        initPFFAAG5(s[2223]);
        initPFFAAG6(s[2224]);
        initPFFAN2(s[2225]);
        initPFFAN6(s[2226]);
        initPFFAN11(s[2227]);
        initPFFAN16(s[2228]);
        initPFFAWH1(s[2229]);
        initPFFAWH7(s[2230]);
        initPFFAWH13(s[2231]);
        initPFINCA(s[2232]);
        initPFINCA_I(s[2233]);
        initPFINCA_IFLAG(s[2234]);
        initPFINCA2(s[2235]);
        initPFINCA2_I(s[2236]);
        initPFINCA2_IFLAG(s[2237]);
        initPFINCA3(s[2238]);
        initPFINCA3_I(s[2239]);
        initPFINCA3_IFLAG(s[2240]);
        initPFINCA4(s[2241]);
        initPFINCA4_I(s[2242]);
        initPFINCA4_IFLAG(s[2243]);
        initPFINCA5(s[2244]);
        initPFINCA5_I(s[2245]);
        initPFINCA5_IFLAG(s[2246]);
        initPFINCA6(s[2247]);
        initPFINCA6_I(s[2248]);
        initPFINCA6_IFLAG(s[2249]);
        initPFINCP(s[2250]);
        initPFINCP_I(s[2251]);
        initPFINCP_IFLAG(s[2252]);
        initPFINCP2(s[2253]);
        initPFINCP2_I(s[2254]);
        initPFINCP2_IFLAG(s[2255]);
        initPFINCP3(s[2256]);
        initPFINCP3_I(s[2257]);
        initPFINCP3_IFLAG(s[2258]);
        initPFINCP4(s[2259]);
        initPFINCP4_I(s[2260]);
        initPFINCP4_IFLAG(s[2261]);
        initPFINCP5(s[2262]);
        initPFINCP5_I(s[2263]);
        initPFINCP5_IFLAG(s[2264]);
        initPFINCP6(s[2265]);
        initPFINCP6_I(s[2266]);
        initPFINCP6_IFLAG(s[2267]);
        initPFLMUS(s[2268]);
        initPFLMUS2(s[2269]);
        initPFLMUS3(s[2270]);
        initPFLMUS4(s[2271]);
        initPFLMUS5(s[2272]);
        initPFLMUS6(s[2273]);
        initPFLMV(s[2274]);
        initPFLMV2(s[2275]);
        initPFLMV3(s[2276]);
        initPFLMV4(s[2277]);
        initPFLMV5(s[2278]);
        initPFLMV6(s[2279]);
        initPFLMVB(s[2280]);
        initPFLMVB2(s[2281]);
        initPFLMVB3(s[2282]);
        initPFLMVB4(s[2283]);
        initPFLMVB5(s[2284]);
        initPFLMVB6(s[2285]);
        initPFLUM(s[2286]);
        initPFLUM_I(s[2287]);
        initPFLUM_IFLAG(s[2288]);
        initPFLUM2(s[2289]);
        initPFLUM2_I(s[2290]);
        initPFLUM2_IFLAG(s[2291]);
        initPFLUM3(s[2292]);
        initPFLUM3_I(s[2293]);
        initPFLUM3_IFLAG(s[2294]);
        initPFLUM4(s[2295]);
        initPFLUM4_I(s[2296]);
        initPFLUM4_IFLAG(s[2297]);
        initPFLUM5(s[2298]);
        initPFLUM5_I(s[2299]);
        initPFLUM5_IFLAG(s[2300]);
        initPFLUM6(s[2301]);
        initPFLUM6_I(s[2302]);
        initPFLUM6_IFLAG(s[2303]);
        initPFLUMALL(s[2304]);
        initPFLUMALL_I(s[2305]);
        initPFLUMALL_IFLAG(s[2306]);
        initPFLUMALL2(s[2307]);
        initPFLUMALL2_I(s[2308]);
        initPFLUMALL2_IFLAG(s[2309]);
        initPFLUMALL3(s[2310]);
        initPFLUMALL3_I(s[2311]);
        initPFLUMALL3_IFLAG(s[2312]);
        initPFLUMALL4(s[2313]);
        initPFLUMALL4_I(s[2314]);
        initPFLUMALL4_IFLAG(s[2315]);
        initPFLUMV(s[2316]);
        initPFLUMV_I(s[2317]);
        initPFLUMV_IFLAG(s[2318]);
        initPFLUMV2(s[2319]);
        initPFLUMV2_I(s[2320]);
        initPFLUMV2_IFLAG(s[2321]);
        initPFLUMV3(s[2322]);
        initPFLUMV3_I(s[2323]);
        initPFLUMV3_IFLAG(s[2324]);
        initPFLUMV4(s[2325]);
        initPFLUMV4_I(s[2326]);
        initPFLUMV4_IFLAG(s[2327]);
        initPFLUMV5(s[2328]);
        initPFLUMV5_I(s[2329]);
        initPFLUMV5_IFLAG(s[2330]);
        initPFLUMV6(s[2331]);
        initPFLUMV6_I(s[2332]);
        initPFLUMV6_IFLAG(s[2333]);
        initPFLUVB(s[2334]);
        initPFLUVB2(s[2335]);
        initPFLUVB3(s[2336]);
        initPFLUVB4(s[2337]);
        initPFLUVB5(s[2338]);
        initPFLUVB6(s[2339]);
        initPFNEWNO(s[2340]);
        initPFNEWNO_I(s[2341]);
        initPFNEWNO_IFLAG(s[2342]);
        initPFNEW(s[2343]);
        initPFNEW_I(s[2344]);
        initPFNEW_IFLAG(s[2345]);
        initPFNUM2(s[2346]);
        initPFNUM(s[2347]);
        initPFNUM_I(s[2348]);
        initPFNUM_IFLAG(s[2349]);
        initPFOCTY(s[2350]);
        initPFOCTY_I(s[2351]);
        initPFOCTY_IFLAG(s[2352]);
        initPFOCTY2(s[2353]);
        initPFOCTY2_I(s[2354]);
        initPFOCTY2_IFLAG(s[2355]);
        initPFOCTY3(s[2356]);
        initPFOCTY3_I(s[2357]);
        initPFOCTY3_IFLAG(s[2358]);
        initPFOCTY4(s[2359]);
        initPFOCTY4_I(s[2360]);
        initPFOCTY4_IFLAG(s[2361]);
        initPFOCTY5(s[2362]);
        initPFOCTY5_I(s[2363]);
        initPFOCTY5_IFLAG(s[2364]);
        initPFOCTY6(s[2365]);
        initPFOCTY6_I(s[2366]);
        initPFOCTY6_IFLAG(s[2367]);
        initPFPENVB(s[2368]);
        initPFPENVB2(s[2369]);
        initPFPENVB3(s[2370]);
        initPFPENVB4(s[2371]);
        initPFPENVB5(s[2372]);
        initPFPENVB6(s[2373]);
        initPFPENVI(s[2374]);
        initPFPENVI2(s[2375]);
        initPFPENVI3(s[2376]);
        initPFPENVI4(s[2377]);
        initPFPENVI5(s[2378]);
        initPFPENVI6(s[2379]);
        initPFREC(s[2380]);
        initPFREC_I(s[2381]);
        initPFREC_IFLAG(s[2382]);
        initPFREC2(s[2383]);
        initPFREC2_I(s[2384]);
        initPFREC2_IFLAG(s[2385]);
        initPFREC3(s[2386]);
        initPFREC3_I(s[2387]);
        initPFREC3_IFLAG(s[2388]);
        initPFREC4(s[2389]);
        initPFREC4_I(s[2390]);
        initPFREC4_IFLAG(s[2391]);
        initPFREC5(s[2392]);
        initPFREC5_I(s[2393]);
        initPFREC5_IFLAG(s[2394]);
        initPFREC6(s[2395]);
        initPFREC6_I(s[2396]);
        initPFREC6_IFLAG(s[2397]);
        initPFREM(s[2398]);
        initPFREM_I(s[2399]);
        initPFREM_IFLAG(s[2400]);
        initPFREM2(s[2401]);
        initPFREM2_I(s[2402]);
        initPFREM2_IFLAG(s[2403]);
        initPFREM3(s[2404]);
        initPFREM3_I(s[2405]);
        initPFREM3_IFLAG(s[2406]);
        initPFREM4(s[2407]);
        initPFREM4_I(s[2408]);
        initPFREM4_IFLAG(s[2409]);
        initPFREM5(s[2410]);
        initPFREM6(s[2411]);
        initPFSIPTY1(s[2412]);
        initPFSIPTY2(s[2413]);
        initPFSIPTY4(s[2414]);
        initPFSIPTY5(s[2415]);
        initPFSIPTY6(s[2416]);
        initPFSIPTY7(s[2417]);
        initPFSIPTY8(s[2418]);
        initPFSIPTY9(s[2419]);
        initPFSIPTY10(s[2420]);
        initPFSIPTY11(s[2421]);
        initPFSIPTY12(s[2422]);
        initPFSIPTY13(s[2423]);
        initPFSIPTY14(s[2424]);
        initPFSIPTY15(s[2425]);
        initPFSIPTY16(s[2426]);
        initPFSIPTY17(s[2427]);
        initPFSIPTY18(s[2428]);
        initPFSIPTY19(s[2429]);
        initPFSIPTY22(s[2430]);
        initPFSIPTY23(s[2431]);
        initPFSIPTY24(s[2432]);
        initPFSTMM(s[2433]);
        initPFSTMM2(s[2434]);
        initPFSTMM3(s[2435]);
        initPFSTMM4(s[2436]);
        initPFSTMM5(s[2437]);
        initPFSTMM6(s[2438]);
        initPFSTMY(s[2439]);
        initPFSTMY2(s[2440]);
        initPFSTMY3(s[2441]);
        initPFSTMY4(s[2442]);
        initPFSTMY5(s[2443]);
        initPFSTMY6(s[2444]);
        initPFTYP(s[2445]);
        initPFTYP_I(s[2446]);
        initPFTYP_IFLAG(s[2447]);
        initPFTYP2(s[2448]);
        initPFTYP2_I(s[2449]);
        initPFTYP2_IFLAG(s[2450]);
        initPFTYP3(s[2451]);
        initPFTYP3_I(s[2452]);
        initPFTYP3_IFLAG(s[2453]);
        initPFTYP4(s[2454]);
        initPFTYP4_I(s[2455]);
        initPFTYP4_IFLAG(s[2456]);
        initPFTYP5(s[2457]);
        initPFTYP5_I(s[2458]);
        initPFTYP5_IFLAG(s[2459]);
        initPFTYP6(s[2460]);
        initPFTYP6_I(s[2461]);
        initPFTYP6_IFLAG(s[2462]);
        initPINCINP(s[2463]);
        initPINCT(s[2464]);
        initPINTRE(s[2465]);
        initPINTRN(s[2466]);
        initPIRREG(s[2467]);
        initPIRREG2(s[2468]);
        initPMORTC(s[2469]);
        initPMORTC2(s[2470]);
        initPMORTC3(s[2471]);
        initPNANYO(s[2472]);
        initPNCONT(s[2473]);
        initPNEWMEM(s[2474]);
        initPNUMOS(s[2475]);
        initPNUMSC(s[2476]);
        initPNUMSC_I(s[2477]);
        initPNUMSC_IFLAG(s[2478]);
        initPOADD1(s[2479]);
        initPOADD1_I(s[2480]);
        initPOADD1_IFLAG(s[2481]);
        initPOADD2(s[2482]);
        initPOADD2_I(s[2483]);
        initPOADD2_IFLAG(s[2484]);
        initPOADD3(s[2485]);
        initPOADD3_I(s[2486]);
        initPOADD3_IFLAG(s[2487]);
        initPOADD4(s[2488]);
        initPOADD4_I(s[2489]);
        initPOADD4_IFLAG(s[2490]);
        initPOADD5(s[2491]);
        initPOADD5_I(s[2492]);
        initPOADD5_IFLAG(s[2493]);
        initPOADD6(s[2494]);
        initPOADD6_I(s[2495]);
        initPOADD6_IFLAG(s[2496]);
        initPOANEH(s[2497]);
        initPOANEH2(s[2498]);
        initPOANEXM(s[2499]);
        initPOANEXY(s[2500]);
        initPOANGA(s[2501]);
        initPOANGA2(s[2502]);
        initPOANIF(s[2503]);
        initPOANIF2(s[2504]);
        initPOANJT(s[2505]);
        initPOANJT2(s[2506]);
        initPOANLM(s[2507]);
        initPOANLM2(s[2508]);
        initPOANN1(s[2509]);
        initPOANN2(s[2510]);
        initPOANN3(s[2511]);
        initPOANN4(s[2512]);
        initPOANN5(s[2513]);
        initPOANN6(s[2514]);
        initPOANN7(s[2515]);
        initPOANN8(s[2516]);
        initPOANVB(s[2517]);
        initPOANVB2(s[2518]);
        initPOANVI(s[2519]);
        initPOANVI2(s[2520]);
        initPOCASH(s[2521]);
        initPOCASH2(s[2522]);
        initPOCNAM2(s[2523]);
        initPOCNAM3(s[2524]);
        initPOCNDRS1(s[2525]);
        initPOCNDRS2(s[2526]);
        initPOCNDRS3(s[2527]);
        initPOCNDRS4(s[2528]);
        initPOCNDRS5(s[2529]);
        initPOCNDRS6(s[2530]);
        initPOCNDRS7(s[2531]);
        initPOCNDRS8(s[2532]);
        initPOCNDRS9(s[2533]);
        initPOCNDRS10(s[2534]);
        initPOCNDRS11(s[2535]);
        initPOCNDRS12(s[2536]);
        initPOCNFG(s[2537]);
        initPOCNFG2(s[2538]);
        initPOCNFR(s[2539]);
        initPOCNFR2(s[2540]);
        initPOCNHOW(s[2541]);
        initPOCNHO___W2(s[2542]);
        initPOCNLRS1(s[2543]);
        initPOCNLRS2(s[2544]);
        initPOCNLRS3(s[2545]);
        initPOCNLRS4(s[2546]);
        initPOCNLRS5(s[2547]);
        initPOCNLRS6(s[2548]);
        initPOCNLRS7(s[2549]);
        initPOCNLRS8(s[2550]);
        initPOCNMSC(s[2551]);
        initPOCNMSC_I(s[2552]);
        initPOCNMSC_IFLAG(s[2553]);
        initPOCNMSC2(s[2554]);
        initPOCNPLN(s[2555]);
        initPOCNPLN2(s[2556]);
        initPOCNPR(s[2557]);
        initPOCNPR2(s[2558]);
        initPOCNVOL(s[2559]);
        initPOCNVOL2(s[2560]);
        initPOCONCH(s[2561]);
        initPOCONCH2(s[2562]);
        initPOCONH(s[2563]);
        initPOCONH2(s[2564]);
        initPOCTYP(s[2565]);
        initPOCTYP_I(s[2566]);
        initPOCTYP_IFLAG(s[2567]);
        initPOCTYP2(s[2568]);
        initPOCTYP2_I(s[2569]);
        initPOCTYP2_IFLAG(s[2570]);
        initPODRINC(s[2571]);
        initPODRINC2(s[2572]);
        initPODRINCB(s[2573]);
        initPODRINCB2(s[2574]);
        initPODRVB(s[2575]);
        initPODRVB2(s[2576]);
        initPODRVI(s[2577]);
        initPODRVI2(s[2578]);
        initPOEMAM(s[2579]);
        initPOEMAM2(s[2580]);
        initPOEMFG(s[2581]);
        initPOEMFG2(s[2582]);
        initPOEMFR(s[2583]);
        initPOEMFR2(s[2584]);
        initPOEMP2(s[2585]);
        initPOEMPH(s[2586]);
        initPOEMPH2(s[2587]);
        initPOEMPR(s[2588]);
        initPOEMPR2(s[2589]);
        initPOEMP(s[2590]);
        initPOFAAG(s[2591]);
        initPOFAAG2(s[2592]);
        initPOFAN1(s[2593]);
        initPOFAN2(s[2594]);
        initPOFAN3(s[2595]);
        initPOFAN4(s[2596]);
        initPOFAN5(s[2597]);
        initPOFAN6(s[2598]);
        initPOFAN7(s[2599]);
        initPOFAN8(s[2600]);
        initPOFAN9(s[2601]);
        initPOFAN10(s[2602]);
        initPOFAN11(s[2603]);
        initPOFAN12(s[2604]);
        initPOFAWH1(s[2605]);
        initPOFAWH2(s[2606]);
        initPOFAWH3(s[2607]);
        initPOFAWH4(s[2608]);
        initPOFAWH5(s[2609]);
        initPOFAWH6(s[2610]);
        initPOFAWH7(s[2611]);
        initPOFAWH8(s[2612]);
        initPOFAWH9(s[2613]);
        initPOFAWH10(s[2614]);
        initPOFAWH11(s[2615]);
        initPOFAWH12(s[2616]);
        initPOJOIN(s[2617]);
        initPOJOIN2(s[2618]);
        initPOLMUS1(s[2619]);
        initPOLMUS2(s[2620]);
        initPOLMUS3(s[2621]);
        initPOLMUS4(s[2622]);
        initPOLMUS5(s[2623]);
        initPOLMUS6(s[2624]);
        initPOLMUS7(s[2625]);
        initPOLMUS8(s[2626]);
        initPOLMUS9(s[2627]);
        initPOLMUS10(s[2628]);
        initPOLMUS11(s[2629]);
        initPOLMUS12(s[2630]);
        initPOLMV(s[2631]);
        initPOLMV2(s[2632]);
        initPOLMVB(s[2633]);
        initPOLMVB2(s[2634]);
        initPOLSYR(s[2635]);
        initPOLSYR2(s[2636]);
        initPOLUM(s[2637]);
        initPOLUM2(s[2638]);
        initPOMETH(s[2639]);
        initPOMETH2(s[2640]);
        initPOPENVB(s[2641]);
        initPOPENVB2(s[2642]);
        initPOPENVI(s[2643]);
        initPOPENVI2(s[2644]);
        initPOPYCH(s[2645]);
        initPOPYCH2(s[2646]);
        initPOYRAM(s[2647]);
        initPOYRAM2(s[2648]);
        initPPACCU(s[2649]);
        initPPACCU2(s[2650]);
        initPPACCU3(s[2651]);
        initPPANEH(s[2652]);
        initPPANEH2(s[2653]);
        initPPANEH3(s[2654]);
        initPPANEXM(s[2655]);
        initPPANEXM2(s[2656]);
        initPPANEXM3(s[2657]);
        initPPANEXY(s[2658]);
        initPPANEXY2(s[2659]);
        initPPANEXY3(s[2660]);
        initPPANGA(s[2661]);
        initPPANGA2(s[2662]);
        initPPANGA3(s[2663]);
        initPPANIF(s[2664]);
        initPPANIF2(s[2665]);
        initPPANIF3(s[2666]);
        initPPANJT(s[2667]);
        initPPANJT2(s[2668]);
        initPPANJT3(s[2669]);
        initPPANLM(s[2670]);
        initPPANLM2(s[2671]);
        initPPANLM3(s[2672]);
        initPPANN1(s[2673]);
        initPPANN2(s[2674]);
        initPPANN3(s[2675]);
        initPPANN4(s[2676]);
        initPPANN5(s[2677]);
        initPPANN6(s[2678]);
        initPPANN7(s[2679]);
        initPPANN8(s[2680]);
        initPPANN9(s[2681]);
        initPPANN10(s[2682]);
        initPPANN11(s[2683]);
        initPPANN12(s[2684]);
        initPPANVB(s[2685]);
        initPPANVB2(s[2686]);
        initPPANVB3(s[2687]);
        initPPANVI(s[2688]);
        initPPANVI2(s[2689]);
        initPPANVI3(s[2690]);
        initPPCASH(s[2691]);
        initPPCASH2(s[2692]);
        initPPCASH3(s[2693]);
        initPPCNDRS1(s[2694]);
        initPPCNDRS2(s[2695]);
        initPPCNDRS3(s[2696]);
        initPPCNDRS9(s[2697]);
        initPPCNDRS17(s[2698]);
        initPPCNHOW(s[2699]);
        initPPCNHO___W2(s[2700]);
        initPPCNHOW3(s[2701]);
        initPPCNLRS1(s[2702]);
        initPPCNLRS2(s[2703]);
        initPPCNLRS3(s[2704]);
        initPPCNLRS5(s[2705]);
        initPPCNLRS9(s[2706]);
        initPPCNPLN(s[2707]);
        initPPCNPLN2(s[2708]);
        initPPCNPLN3(s[2709]);
        initPPCONCH(s[2710]);
        initPPCONCH2(s[2711]);
        initPPCONCH3(s[2712]);
        initPPDOCS(s[2713]);
        initPPDOCS2(s[2714]);
        initPPDOCS3(s[2715]);
        initPPDRINC(s[2716]);
        initPPDRINC2(s[2717]);
        initPPDRINC3(s[2718]);
        initPPDRINCB(s[2719]);
        initPPDRINCB2(s[2720]);
        initPPDRVB(s[2721]);
        initPPDRVB2(s[2722]);
        initPPDRVB3(s[2723]);
        initPPDRVI(s[2724]);
        initPPDRVI2(s[2725]);
        initPPDRVI3(s[2726]);
        initPPEIRA(s[2727]);
        initPPEIRA2(s[2728]);
        initPPEIRA3(s[2729]);
        initPPEIRF(s[2730]);
        initPPEIRF2(s[2731]);
        initPPEIRF3(s[2732]);
        initPPEIRH(s[2733]);
        initPPEIRH2(s[2734]);
        initPPEIRH3(s[2735]);
        initPPEMAM(s[2736]);
        initPPEMAM2(s[2737]);
        initPPEMAM3(s[2738]);
        initPPEMFR(s[2739]);
        initPPEMFR2(s[2740]);
        initPPEMFR3(s[2741]);
        initPPEMP(s[2742]);
        initPPEMP2(s[2743]);
        initPPEMP3(s[2744]);
        initPPEMPH(s[2745]);
        initPPEMPH2(s[2746]);
        initPPEMPH3(s[2747]);
        initPPEMPR(s[2748]);
        initPPEMPR2(s[2749]);
        initPPEMPR3(s[2750]);
        initPPEVRG2(s[2751]);
        initPPEVRG3(s[2752]);
        initPPEVRG(s[2753]);
        initPPFAAG(s[2754]);
        initPPFAAG2(s[2755]);
        initPPFAAG3(s[2756]);
        initPPFAN1(s[2757]);
        initPPFAN2(s[2758]);
        initPPFAN3(s[2759]);
        initPPFAN4(s[2760]);
        initPPFAN5(s[2761]);
        initPPFAN6(s[2762]);
        initPPFAN7(s[2763]);
        initPPFAN8(s[2764]);
        initPPFAN9(s[2765]);
        initPPFAN10(s[2766]);
        initPPFAN11(s[2767]);
        initPPFAN12(s[2768]);
        initPPFAN13(s[2769]);
        initPPFAN14(s[2770]);
        initPPFAN15(s[2771]);
        initPPFAWH1(s[2772]);
        initPPFAWH2(s[2773]);
        initPPFAWH3(s[2774]);
        initPPFAWH4(s[2775]);
        initPPFAWH5(s[2776]);
        initPPFAWH6(s[2777]);
        initPPFAWH7(s[2778]);
        initPPFAWH8(s[2779]);
        initPPFAWH9(s[2780]);
        initPPFAWH10(s[2781]);
        initPPFAWH11(s[2782]);
        initPPFAWH12(s[2783]);
        initPPFAWH13(s[2784]);
        initPPFAWH14(s[2785]);
        initPPFAWH15(s[2786]);
        initPPFAWH16(s[2787]);
        initPPFAWH17(s[2788]);
        initPPFAWH18(s[2789]);
        initPPFAWH19(s[2790]);
        initPPFAWH20(s[2791]);
        initPPFAWH21(s[2792]);
        initPPIRNO(s[2793]);
        initPPIRNO2(s[2794]);
        initPPIRNO3(s[2795]);
        initPPIRRA(s[2796]);
        initPPIRRA2(s[2797]);
        initPPIRRA3(s[2798]);
        initPPIRRF(s[2799]);
        initPPIRRF2(s[2800]);
        initPPIRRF3(s[2801]);
        initPPIRRH(s[2802]);
        initPPIRRH2(s[2803]);
        initPPIRRH3(s[2804]);
        initPPIRRY(s[2805]);
        initPPIRRY2(s[2806]);
        initPPIRRY3(s[2807]);
        initPPLASY(s[2808]);
        initPPLASY2(s[2809]);
        initPPLASY3(s[2810]);
        initPPLMUS(s[2811]);
        initPPLMUS2(s[2812]);
        initPPLMUS3(s[2813]);
        initPPLMV(s[2814]);
        initPPLMV2(s[2815]);
        initPPLMV3(s[2816]);
        initPPLMVB(s[2817]);
        initPPLMVB2(s[2818]);
        initPPLMVB3(s[2819]);
        initPPLSTA(s[2820]);
        initPPLSTA2(s[2821]);
        initPPLSTA3(s[2822]);
        initPPLSTP(s[2823]);
        initPPLSTP2(s[2824]);
        initPPLSTP3(s[2825]);
        initPPLUM(s[2826]);
        initPPLUM2(s[2827]);
        initPPLUM3(s[2828]);
        initPPNINS(s[2829]);
        initPPNINS2(s[2830]);
        initPPNINS3(s[2831]);
        initPPORG(s[2832]);
        initPPORG2(s[2833]);
        initPPORG3(s[2834]);
        initPPPAY(s[2835]);
        initPPPAY2(s[2836]);
        initPPPAY3(s[2837]);
        initPPRGAM(s[2838]);
        initPPRGAM2(s[2839]);
        initPPRGAM3(s[2840]);
        initPPRGFG(s[2841]);
        initPPRGFG2(s[2842]);
        initPPRGFG3(s[2843]);
        initPPRGFR(s[2844]);
        initPPRGFR2(s[2845]);
        initPPRGFR3(s[2846]);
        initPPRGH(s[2847]);
        initPPRGH2(s[2848]);
        initPPRGH3(s[2849]);
        initPPRGPE(s[2850]);
        initPPRGPE2(s[2851]);
        initPPRGPE3(s[2852]);
        initPPRNMSC(s[2853]);
        initPPRNMSC_I(s[2854]);
        initPPRNMSC_IFLAG(s[2855]);
        initPPSIPP(s[2856]);
        initPPSIPP2(s[2857]);
        initPPSIPP3(s[2858]);
        initPPSTMN(s[2859]);
        initPPSTMN2(s[2860]);
        initPPSTMN3(s[2861]);
        initPPSTYR(s[2862]);
        initPPSTYR2(s[2863]);
        initPPSTYR3(s[2864]);
        initPPTYP(s[2865]);
        initPPTYP2(s[2866]);
        initPPTYP3(s[2867]);
        initPPVAL(s[2868]);
        initPPVAL_I(s[2869]);
        initPPVAL_IFLAG(s[2870]);
        initPPVAL2(s[2871]);
        initPPVAL2_I(s[2872]);
        initPPVAL2_IFLAG(s[2873]);
        initPPVAL3(s[2874]);
        initPPVAL3_I(s[2875]);
        initPPVAL3_IFLAG(s[2876]);
        initPPVALB(s[2877]);
        initPPVALB2(s[2878]);
        initPPVALB3(s[2879]);
        initPPYRST(s[2880]);
        initPPYRST2(s[2881]);
        initPPYRST3(s[2882]);
        initPPYSTP1(s[2883]);
        initPPYSTP2(s[2884]);
        initPPYSTP3(s[2885]);
        initPPYSTP8(s[2886]);
        initPPYSTP9(s[2887]);
        initPPYSTP10(s[2888]);
        initPPYSTP15(s[2889]);
        initPRACCU(s[2890]);
        initPRACCU2(s[2891]);
        initPRACCU3(s[2892]);
        initPRACCU5(s[2893]);
        initPRACCU6(s[2894]);
        initPRETAIN(s[2895]);
        initPRETAIN_I(s[2896]);
        initPRETAIN_IFLAG(s[2897]);
        initPREVPENS(s[2898]);
        initPSCHM_F(s[2899]);
        initPSCHM_F_I(s[2900]);
        initPSCHM_F_IFLAG(s[2901]);
        initPSCHM_S(s[2902]);
        initPSCHM_S_I(s[2903]);
        initPSCHM_S_IFLAG(s[2904]);
        initPSCHM_T(s[2905]);
        initPSCHM_T_I(s[2906]);
        initPSCHM_T_IFLAG(s[2907]);
        initPSCHY_F(s[2908]);
        initPSCHY_S(s[2909]);
        initPSCHY_T(s[2910]);
        initPSPEXPA(s[2911]);
        initPSPEXPA_I(s[2912]);
        initPSPEXPA_IFLAG(s[2913]);
        initPSPEXPH(s[2914]);
        initPSPEXPH_I(s[2915]);
        initPSPEXPH_IFLAG(s[2916]);
        initPSPLUM(s[2917]);
        initPSPLUVAL(s[2918]);
        initPSPSE(s[2919]);
        initPSPSE_I(s[2920]);
        initPSPSE_IFLAG(s[2921]);
        initPSTYPE1(s[2922]);
        initPSTYPE2(s[2923]);
        initPSTYPE3(s[2924]);
        initPSTYPE4(s[2925]);
        initPSTYPE5(s[2926]);
        initPSTYPE6(s[2927]);
        initPSTYPE7(s[2928]);
        initPSTYPE8(s[2929]);
        initPSTYPE9(s[2930]);
        initPSTYPE10(s[2931]);
        initPSTYPE11(s[2932]);
        initPSTYPE12(s[2933]);
        initPSTYPE13(s[2934]);
        initPSTYPE14(s[2935]);
        initPSTYPE15(s[2936]);
        initPSTYPE16(s[2937]);
        initPSTYPE17(s[2938]);
        initPSTYPE18(s[2939]);
        initPSTYPE19(s[2940]);
        initPSTYPE20(s[2941]);
        initPWEXPA(s[2942]);
        initPWEXPA_I(s[2943]);
        initPWEXPA_IFLAG(s[2944]);
        initPWEXPH(s[2945]);
        initPWEXPH_I(s[2946]);
        initPWEXPH_IFLAG(s[2947]);
        initPWIDFUT(s[2948]);
        initPWIDFUT_I(s[2949]);
        initPWIDFUT_IFLAG(s[2950]);
        initPWLUM(s[2951]);
        initPWLUVAL(s[2952]);
        initACCFRAC(s[2953]);
        initACCFRAC2(s[2954]);
        initASAFT(s[2955]);
        initASAF2T(s[2956]);
        initDCVAL1(s[2957]);
        initDCVAL2(s[2958]);
        initDVDBINC1(s[2959]);
        initDVDBINC2(s[2960]);
        initDVDBINC3(s[2961]);
        initDVDBINC4(s[2962]);
        initDVDBINC5(s[2963]);
        initDVDBINC6(s[2964]);
        initDVDBINCALL(s[2965]);
        initDVDBLUMP1(s[2966]);
        initDVDBLUMP2(s[2967]);
        initDVDBLUMP3(s[2968]);
        initDVDBLUMP4(s[2969]);
        initDVDBLUMP5(s[2970]);
        initDVDBLUMP6(s[2971]);
        initDVDBOPEN2T(s[2972]);
        initDVDBOPENT(s[2973]);
        initDVDBRWEALTHVAL(s[2974]);
        initDVHASAVC(s[2975]);
        initDVHASDB(s[2976]);
        initDVHASDC(s[2977]);
        initDVHASPFCUR(s[2978]);
        initDVHASPFD(s[2979]);
        initDVHASPP(s[2980]);
        initDVPAVCUV(s[2981]);
        initDVPENINC2(s[2982]);
        initDVPENINC(s[2983]);
        initDVPFCURVAL(s[2984]);
        initDVPFDDV(s[2985]);
        initDVPINPVAL(s[2986]);
        initDVPPVAL(s[2987]);
        initDVPUBLPRIV(s[2988]);
        initDVSPEN(s[2989]);
        initDVSPS(s[2990]);
        initDVVALDBLUM(s[2991]);
        initDVVALDBT(s[2992]);
        initDVVALDCOS(s[2993]);
        initDVVALPBLUM(s[2994]);
        initDVWID(s[2995]);
        initPORAGET(s[2996]);
        initPORAGE2T(s[2997]);
        initPWID(s[2998]);
        initSPASAF(s[2999]);
        initTOTPEN(s[3000]);
        initVALPBLUM1(s[3001]);
        initVALPBLUM2(s[3002]);
        initCHOIC(s[3003]);
        initCHOIC2(s[3004]);
        initCHOIC3(s[3005]);
        initCHOIC4(s[3006]);
        initCHOIC5(s[3007]);
        initCHOIC6(s[3008]);
        initCHOIC7(s[3009]);
        initCHOIC8(s[3010]);
        initCHOIC9(s[3011]);
        initCHOIC10(s[3012]);
        initCHOICP(s[3013]);
        initCHOICP2(s[3014]);
        initCHOICP3(s[3015]);
        initCHOICP4(s[3016]);
        initCHOICP5(s[3017]);
        initCHOICP6(s[3018]);
        initCHOICP7(s[3019]);
        initCHOICP8(s[3020]);
        initCHOICP9(s[3021]);
        initCHOICP10(s[3022]);
        initCHOICP11(s[3023]);
        initCHOICP18(s[3024]);
        initCHOICP19(s[3025]);
        initCOMMI(s[3026]);
        initCONTSUB(s[3027]);
        initCUTBACK(s[3028]);
        initECHLCAR(s[3029]);
        initECHLSUP(s[3030]);
        initEFOOD(s[3031]);
        initEFUEL(s[3032]);
        initEINTRO(s[3033]);
        initELARGE1(s[3034]);
        initELARGE2(s[3035]);
        initELARGE3(s[3036]);
        initELARGE4(s[3037]);
        initELARGE5(s[3038]);
        initELARGE6(s[3039]);
        initELARGE7(s[3040]);
        initELARGE8(s[3041]);
        initELGEAMB(s[3042]);
        initEMEALS(s[3043]);
        initETRANS(s[3044]);
        initEYE1(s[3045]);
        initEYE2(s[3046]);
        initEYE3(s[3047]);
        initEYE4(s[3048]);
        initEYE5(s[3049]);
        initEYE6(s[3050]);
        initEYE7(s[3051]);
        initEYE8(s[3052]);
        initFNDCASH01(s[3053]);
        initFNDCASH02(s[3054]);
        initFNDCASH03(s[3055]);
        initFNDCASH04(s[3056]);
        initFNDCASH05(s[3057]);
        initFNDCASH06(s[3058]);
        initFNDCASH07(s[3059]);
        initFNDCASH08(s[3060]);
        initFNDCASH09(s[3061]);
        initFNDCASH10(s[3062]);
        initFNDCASH11(s[3063]);
        initFNDCASH12(s[3064]);
        initFNDCASH13(s[3065]);
        initFNDCASH14(s[3066]);
        initFNDCASH15(s[3067]);
        initFNDCASH16(s[3068]);
        initGSTDNW(s[3069]);
        initINCDROP(s[3070]);
        initINDFREQ(s[3071]);
        initLVTDAY(s[3072]);
        initOEXPINC01(s[3073]);
        initOEXPINC02(s[3074]);
        initOEXPINC03(s[3075]);
        initOEXPINC04(s[3076]);
        initOEXPINC05(s[3077]);
        initOEXPINC06(s[3078]);
        initOEXPINC07(s[3079]);
        initOEXPINC08(s[3080]);
        initOEXPINC09(s[3081]);
        initOEXPINC10(s[3082]);
        initOEXPINC11(s[3083]);
        initOEXPINC12(s[3084]);
        initOEXPINC13(s[3085]);
        initOEXPINC14(s[3086]);
        initOEXPINC15(s[3087]);
        initOINTEND(s[3088]);
        initOLEFTDO(s[3089]);
        initOLEFT(s[3090]);
        initOLONG(s[3091]);
        initOLONGYR(s[3092]);
        initONOSAVE1(s[3093]);
        initONOSAVE2(s[3094]);
        initONOSAVE3(s[3095]);
        initONOSAVE4(s[3096]);
        initONOSAVE5(s[3097]);
        initONOSAVE6(s[3098]);
        initONOSAVE7(s[3099]);
        initONOSAVE8(s[3100]);
        initONOSAVE9(s[3101]);
        initORGNSED(s[3102]);
        initORISKA(s[3103]);
        initORISKC(s[3104]);
        initORUNDO01(s[3105]);
        initORUNDO02(s[3106]);
        initORUNDO03(s[3107]);
        initORUNDO04(s[3108]);
        initORUNDO05(s[3109]);
        initORUNDO06(s[3110]);
        initORUNDO07(s[3111]);
        initORUNDO08(s[3112]);
        initORUNOUT(s[3113]);
        initOSAFERE2(s[3114]);
        initOSAFERET(s[3115]);
        initOSAV2Y(s[3116]);
        initOSAVA(s[3117]);
        initOSAVB(s[3118]);
        initOSAVC(s[3119]);
        initOSAVEXT(s[3120]);
        initOUNDER(s[3121]);
        initOWAIT(s[3122]);
        initOWHYSAV01(s[3123]);
        initOWHYSAV02(s[3124]);
        initOWHYSAV03(s[3125]);
        initOWHYSAV04(s[3126]);
        initOWHYSAV05(s[3127]);
        initOWHYSAV06(s[3128]);
        initOWHYSAV07(s[3129]);
        initOWHYSAV08(s[3130]);
        initOWHYSAV09(s[3131]);
        initOWHYSAV10(s[3132]);
        initOWRSRS01(s[3133]);
        initOWRSRS02(s[3134]);
        initOWRSRS03(s[3135]);
        initOWRSRS04(s[3136]);
        initOWRSRS05(s[3137]);
        initOWRSRS06(s[3138]);
        initOWRSRS07(s[3139]);
        initOWRSRS08(s[3140]);
        initOWRSRS09(s[3141]);
        initOWRSRS10(s[3142]);
        initPRODTS01(s[3143]);
        initPRODTS02(s[3144]);
        initPRODTS03(s[3145]);
        initPRODTS04(s[3146]);
        initPRODTS05(s[3147]);
        initPRODTS06(s[3148]);
        initPRODTS07(s[3149]);
        initPRODTS08(s[3150]);
        initPRODTS09(s[3151]);
        initPRODTS10(s[3152]);
        initPRODTS11(s[3153]);
        initPRODTS12(s[3154]);
        initPRODTS201(s[3155]);
        initPRODTS202(s[3156]);
        initPRODTS203(s[3157]);
        initPRODTS204(s[3158]);
        initPRODTS205(s[3159]);
        initPRODTS206(s[3160]);
        initPRODTS207(s[3161]);
        initPRODTS208(s[3162]);
        initPRODTS209(s[3163]);
        initPRODTS210(s[3164]);
        initRNYDAY(s[3165]);
        initSOURC2(s[3166]);
        initSOURC3(s[3167]);
        initSOURC4(s[3168]);
        initSOURC5(s[3169]);
        initSOURC6(s[3170]);
        initSOURC7(s[3171]);
        initSOURC8(s[3172]);
        initSOURC9(s[3173]);
        initSOURC01(s[3174]);
        initSOURC02(s[3175]);
        initSOURC03(s[3176]);
        initSOURC04(s[3177]);
        initSOURC05(s[3178]);
        initSOURC06(s[3179]);
        initSOURC07(s[3180]);
        initSOURC08(s[3181]);
        initSOURC09(s[3182]);
        initSOURC18(s[3183]);
        initSOURC19(s[3184]);
        initSOURC20(s[3185]);
        initSOURC21(s[3186]);
        initSOURC22(s[3187]);
        initSOURC23(s[3188]);
        initSOURC24(s[3189]);
        initSOURC25(s[3190]);
        initSOURC26(s[3191]);
        initSOURC35(s[3192]);
        initSOURC36(s[3193]);
        initSOURC37(s[3194]);
        initSOURC38(s[3195]);
        initSOURC39(s[3196]);
        initSOURC40(s[3197]);
        initSOURC41(s[3198]);
        initSOURC52(s[3199]);
        initSOURC53(s[3200]);
        initSOURC54(s[3201]);
        initSOURC55(s[3202]);
        initSOURC56(s[3203]);
        initSOURC57(s[3204]);
        initSOURC58(s[3205]);
        initSOURC69(s[3206]);
        initSOURC70(s[3207]);
        initSOURC71(s[3208]);
        initSOURC72(s[3209]);
        initSOURC73(s[3210]);
        initSOURC74(s[3211]);
        initSOURC75(s[3212]);
        initSOURC86(s[3213]);
        initSOURC87(s[3214]);
        initSOURC88(s[3215]);
        initSOURC89(s[3216]);
        initSOURC90(s[3217]);
        initSOURC91(s[3218]);
        initSOURC92(s[3219]);
        initSOURC103(s[3220]);
        initSOURC104(s[3221]);
        initSOURC105(s[3222]);
        initSOURC106(s[3223]);
        initSOURC107(s[3224]);
        initSOURC108(s[3225]);
        initSOURC109(s[3226]);
        initSOURC120(s[3227]);
        initSOURC121(s[3228]);
        initSOURC122(s[3229]);
        initSOURC123(s[3230]);
        initSOURC124(s[3231]);
        initSOURC125(s[3232]);
        initSOURC126(s[3233]);
        initSOURC137(s[3234]);
        initSOURC154(s[3235]);
        initSOURC155(s[3236]);
        initSOURC156(s[3237]);
        initSOURC172(s[3238]);
        initSOURCP01(s[3239]);
        initSOURCP02(s[3240]);
        initSOURCP03(s[3241]);
        initSOURCP04(s[3242]);
        initSOURCP05(s[3243]);
        initSOURCP06(s[3244]);
        initSOURCP07(s[3245]);
        initSOURCP08(s[3246]);
        initSOURCP09(s[3247]);
        initSOURCP11(s[3248]);
        initSOURCP12(s[3249]);
        initSOURCP18(s[3250]);
        initSOURCP19(s[3251]);
        initSOURCP20(s[3252]);
        initSOURCP21(s[3253]);
        initSOURCP22(s[3254]);
        initSOURCP23(s[3255]);
        initSOURCP24(s[3256]);
        initSOURCP25(s[3257]);
        initSOURCP26(s[3258]);
        initSOURCP27(s[3259]);
        initSOURCP28(s[3260]);
        initSOURCP35(s[3261]);
        initSOURCP36(s[3262]);
        initSOURCP37(s[3263]);
        initSOURCP38(s[3264]);
        initSOURCP39(s[3265]);
        initSOURCP40(s[3266]);
        initSOURCP41(s[3267]);
        initSOURCP42(s[3268]);
        initSOURCP43(s[3269]);
        initSOURCP44(s[3270]);
        initSOURCP52(s[3271]);
        initSOURCP53(s[3272]);
        initSOURCP54(s[3273]);
        initSOURCP55(s[3274]);
        initSOURCP56(s[3275]);
        initSOURCP57(s[3276]);
        initSOURCP58(s[3277]);
        initSOURCP59(s[3278]);
        initSOURCP60(s[3279]);
        initSOURCP61(s[3280]);
        initSOURCP69(s[3281]);
        initSOURCP70(s[3282]);
        initSOURCP71(s[3283]);
        initSOURCP72(s[3284]);
        initSOURCP73(s[3285]);
        initSOURCP74(s[3286]);
        initSOURCP75(s[3287]);
        initSOURCP76(s[3288]);
        initSOURCP86(s[3289]);
        initSOURCP87(s[3290]);
        initSOURCP88(s[3291]);
        initSOURCP89(s[3292]);
        initSOURCP90(s[3293]);
        initSOURCP102(s[3294]);
        initSOURCP103(s[3295]);
        initSOURCP104(s[3296]);
        initSOURCP105(s[3297]);
        initSOURCP106(s[3298]);
        initSOURCP107(s[3299]);
        initSOURCP120(s[3300]);
        initSOURCP121(s[3301]);
        initSOURCP122(s[3302]);
        initSOURCP123(s[3303]);
        initSOURCP124(s[3304]);
        initSOURCP125(s[3305]);
        initSOURCP137(s[3306]);
        initSOURCP154(s[3307]);
        initSOURCP155(s[3308]);
        initSOURCP171(s[3309]);
        initSOURCP290(s[3310]);
        initSOURC2P(s[3311]);
        initSOURC2P2(s[3312]);
        initSOURC2P3(s[3313]);
        initSOURC2P4(s[3314]);
        initSOURC2P5(s[3315]);
        initSOURC2P6(s[3316]);
        initSOURC2P7(s[3317]);
        initSOURC2P8(s[3318]);
        initSOURC2P9(s[3319]);
        initSOURC2P10(s[3320]);
        initSOURC2P11(s[3321]);
        initSPENDM(s[3322]);
        initATTALL(s[3323]);
        initATTEND(s[3324]);
        initBACCBEG2(s[3325]);
        initBACCBEG3(s[3326]);
        initBACCBEG(s[3327]);
        initBACCEND2(s[3328]);
        initBACCEND3(s[3329]);
        initBACCEND(s[3330]);
        initBACCSA2(s[3331]);
        initBACCSA3(s[3332]);
        initBACCSA(s[3333]);
        initBACCSB2(s[3334]);
        initBACCSB3(s[3335]);
        initBACCSB(s[3336]);
        initBAMT10(s[3337]);
        initBAMT11(s[3338]);
        initBAMT12(s[3339]);
        initBAMT13(s[3340]);
        initBAMT14(s[3341]);
        initBAMT15(s[3342]);
        initBAMT16(s[3343]);
        initBAMT17(s[3344]);
        initBAMT18(s[3345]);
        initBAMT19(s[3346]);
        initBAMT2(s[3347]);
        initBAMT3(s[3348]);
        initBAMT4(s[3349]);
        initBAMT5(s[3350]);
        initBAMT6(s[3351]);
        initBAMT7(s[3352]);
        initBAMT8(s[3353]);
        initBAMT9(s[3354]);
        initBAMTDK10(s[3355]);
        initBAMTDK11(s[3356]);
        initBAMTDK12(s[3357]);
        initBAMTDK13(s[3358]);
        initBAMTDK14(s[3359]);
        initBAMTDK15(s[3360]);
        initBAMTDK16(s[3361]);
        initBAMTDK17(s[3362]);
        initBAMTDK18(s[3363]);
        initBAMTDK19(s[3364]);
        initBAMTDK2(s[3365]);
        initBAMTDK3(s[3366]);
        initBAMTDK4(s[3367]);
        initBAMTDK5(s[3368]);
        initBAMTDK6(s[3369]);
        initBAMTDK7(s[3370]);
        initBAMTDK8(s[3371]);
        initBAMTDK9(s[3372]);
        initBAMTDK(s[3373]);
        initBAMT(s[3374]);
        initBBEFORE2(s[3375]);
        initBBEFORE3(s[3376]);
        initBBEFORE(s[3377]);
        initBDEBTS2(s[3378]);
        initBDEBTS3(s[3379]);
        initBDEBTS(s[3380]);
        initBDIRNI2(s[3381]);
        initBDIRNI3(s[3382]);
        initBDIRNI(s[3383]);
        initBDOCS2(s[3384]);
        initBDOCS3(s[3385]);
        initBDOCS(s[3386]);
        initBEMPN2(s[3387]);
        initBEMPN3(s[3388]);
        initBEMPN(s[3389]);
        initBEN1Q1(s[3390]);
        initBEN1Q2(s[3391]);
        initBEN1Q3(s[3392]);
        initBEN1Q4(s[3393]);
        initBEN2Q1(s[3394]);
        initBEN2Q2(s[3395]);
        initBEN2Q3(s[3396]);
        initBENUS(s[3397]);
        initBFUND10(s[3398]);
        initBFUND11(s[3399]);
        initBFUND12(s[3400]);
        initBFUND13(s[3401]);
        initBFUND14(s[3402]);
        initBFUND15(s[3403]);
        initBFUND16(s[3404]);
        initBFUND17(s[3405]);
        initBFUND18(s[3406]);
        initBFUND19(s[3407]);
        initBFUND1(s[3408]);
        initBFUND20(s[3409]);
        initBFUND21(s[3410]);
        initBFUND22(s[3411]);
        initBFUND23(s[3412]);
        initBFUND24(s[3413]);
        initBFUND2(s[3414]);
        initBFUND3(s[3415]);
        initBFUND4(s[3416]);
        initBFUND5(s[3417]);
        initBFUND6(s[3418]);
        initBFUND7(s[3419]);
        initBFUND8(s[3420]);
        initBFUND9(s[3421]);
        initBMOREBUS(s[3422]);
        initBNATINS2(s[3423]);
        initBNATINS3(s[3424]);
        initBNATINS(s[3425]);
        initBONAMT(s[3426]);
        initBONTAX(s[3427]);
        initBOWED2(s[3428]);
        initBOWED3(s[3429]);
        initBOWED(s[3430]);
        initBOWN2(s[3431]);
        initBOWN3(s[3432]);
        initBOWN(s[3433]);
        initBPART2(s[3434]);
        initBPART3(s[3435]);
        initBPART(s[3436]);
        initBPAST(s[3437]);
        initBPD10(s[3438]);
        initBPD11(s[3439]);
        initBPD12(s[3440]);
        initBPD13(s[3441]);
        initBPD14(s[3442]);
        initBPD15(s[3443]);
        initBPD16(s[3444]);
        initBPD17(s[3445]);
        initBPD18(s[3446]);
        initBPD19(s[3447]);
        initBPD2(s[3448]);
        initBPD3(s[3449]);
        initBPD4(s[3450]);
        initBPD5(s[3451]);
        initBPD6(s[3452]);
        initBPD7(s[3453]);
        initBPD8(s[3454]);
        initBPD9(s[3455]);
        initBPD(s[3456]);
        initBPRFLOSS2(s[3457]);
        initBPRFLOSS3(s[3458]);
        initBPRFLOSS(s[3459]);
        initBPROFIT2(s[3460]);
        initBPROFIT3(s[3461]);
        initBPROFIT(s[3462]);
        initBPROPN2(s[3463]);
        initBPROPN3(s[3464]);
        initBPROPN(s[3465]);
        initBRETIRE2(s[3466]);
        initBRETIRE3(s[3467]);
        initBRETIRE(s[3468]);
        initBSELLAB(s[3469]);
        initBSELLAM(s[3470]);
        initBSELLTX(s[3471]);
        initBSELLYR(s[3472]);
        initBSIZE2(s[3473]);
        initBSIZE3(s[3474]);
        initBSIZE(s[3475]);
        initBSTART2(s[3476]);
        initBSTART3(s[3477]);
        initBSTART(s[3478]);
        initBTAX2(s[3479]);
        initBTAX3(s[3480]);
        initBTAX(s[3481]);
        initBTYPE2(s[3482]);
        initBTYPE3(s[3483]);
        initBTYPE(s[3484]);
        initBUAMT(s[3485]);
        initBUPD(s[3486]);
        initBVAL2(s[3487]);
        initBVAL3(s[3488]);
        initBVALB2(s[3489]);
        initBVALB3(s[3490]);
        initBVALB(s[3491]);
        initBVALQ2(s[3492]);
        initBVALQ3(s[3493]);
        initBVALQ(s[3494]);
        initBVAL(s[3495]);
        initBVALWH10(s[3496]);
        initBVALWH11(s[3497]);
        initBVALWH12(s[3498]);
        initBVALWH13(s[3499]);
        initBVALWH14(s[3500]);
        initBVALWH15(s[3501]);
        initBVALWH16(s[3502]);
        initBVALWH17(s[3503]);
        initBVALWH18(s[3504]);
        initBVALWH1(s[3505]);
        initBVALWH2(s[3506]);
        initBVALWH3(s[3507]);
        initBVALWH4(s[3508]);
        initBVALWH5(s[3509]);
        initBVALWH6(s[3510]);
        initBVALWH7(s[3511]);
        initBVALWH8(s[3512]);
        initBVALWH9(s[3513]);
        initBWORTHB(s[3514]);
        initBWORTH(s[3515]);
        initBYEAR2(s[3516]);
        initBYEAR3(s[3517]);
        initBYEAR(s[3518]);
        initCAREDUR(s[3519]);
        initCAREHR(s[3520]);
        initCAREPS(s[3521]);
        initCARER1Q(s[3522]);
        initCOMBAM(s[3523]);
        initCOMBPD(s[3524]);
        initCOMBWK(s[3525]);
        initCOURSE(s[3526]);
        initCTBEN(s[3527]);
        initCURSTAT(s[3528]);
        initDISBEN1(s[3529]);
        initDISBEN2(s[3530]);
        initDISBEN3(s[3531]);
        initDISEVER(s[3532]);
        initDISTYPE1(s[3533]);
        initDISTYPE2(s[3534]);
        initDISTYPE3(s[3535]);
        initDISTYPE4(s[3536]);
        initDISTYPE5(s[3537]);
        initDISTYPE6(s[3538]);
        initDISTYPE7(s[3539]);
        initDISTYPE8(s[3540]);
        initDISTYPE9(s[3541]);
        initDTJBL(s[3542]);
        initDVAGE4(s[3543]);
        initDVAGE5(s[3544]);
        initDVAGE6(s[3545]);
        initDVAGE9(s[3546]);
        initDVGRSPAY(s[3547]);
        initDVILO3A(s[3548]);
        initDVILO4A(s[3549]);
        initDVJB12ML(s[3550]);
        initDVMRDF(s[3551]);
        initDVNETPAY(s[3552]);
        initDVSAME(s[3553]);
        initEDAGE(s[3554]);
        initEDATTN1(s[3555]);
        initEDATTN2(s[3556]);
        initEDATTN3(s[3557]);
        initEDLEVEL(s[3558]);
        initEMPNO(s[3559]);
        initEMPN(s[3560]);
        initEMPSTY(s[3561]);
        initEMSHAR1(s[3562]);
        initEMSHAR2(s[3563]);
        initEMSHAR3(s[3564]);
        initENROLL(s[3565]);
        initES2000(s[3566]);
        initESATYPE(s[3567]);
        initFBFAED(s[3568]);
        initFBMOED(s[3569]);
        initFBSIBS(s[3570]);
        initFBSITU(s[3571]);
        initFBTEN(s[3572]);
        initFTED19(s[3573]);
        initFTED(s[3574]);
        initFTHECST(s[3575]);
        initFTPTWK(s[3576]);
        initFTSTUD(s[3577]);
        initGROSSPER(s[3578]);
        initGRSAMK(s[3579]);
        initGRSEESM(s[3580]);
        initGRSEESW(s[3581]);
        initGRSESM(s[3582]);
        initGRSESP(s[3583]);
        initGRSSEMJB(s[3584]);
        initHASCHD(s[3585]);
        initHASDEP(s[3586]);
        initHASNDEP(s[3587]);
        initHOUSBEN(s[3588]);
        initILLLIM(s[3589]);
        initINTRO(s[3590]);
        initISADULT(s[3591]);
        initISCH1618(s[3592]);
        initISCHILD(s[3593]);
        initISDEP(s[3594]);
        initISHRPPART(s[3595]);
        initISHRP(s[3596]);
        initISNDEP(s[3597]);
        initJBAWAY(s[3598]);
        initJOBNO(s[3599]);
        initLIVWTH(s[3600]);
        initLKTIME(s[3601]);
        initLOOKED(s[3602]);
        initLSILL(s[3603]);
        initMARBEF(s[3604]);
        initMARSTA(s[3605]);
        initMRECJB(s[3606]);
        initMTHECST(s[3607]);
        initNSSEC3(s[3608]);
        initNSSEC5(s[3609]);
        initNSSEC8(s[3610]);
        initNSSECB(s[3611]);
        initOIGGT(s[3612]);
        initOIGRR(s[3613]);
        initOINEG(s[3614]);
        initOINFR(s[3615]);
        initOINGT(s[3616]);
        initOINMA(s[3617]);
        initOINOP(s[3618]);
        initOINRO(s[3619]);
        initOINRR(s[3620]);
        initONETEN(s[3621]);
        initOVERSPA(s[3622]);
        initOWNBUS(s[3623]);
        initPAGERET(s[3624]);
        initPAGESTP(s[3625]);
        initPARTNER(s[3626]);
        initPARTNO(s[3627]);
        initPAYBON(s[3628]);
        initPAYESM(s[3629]);
        initPAYESP(s[3630]);
        initPAYINC1(s[3631]);
        initPAYINC2(s[3632]);
        initPAYINC3(s[3633]);
        initPAYINC4(s[3634]);
        initPAYINC5(s[3635]);
        initPAYINC6(s[3636]);
        initPAYINC7(s[3637]);
        initPAYPER(s[3638]);
        initPAYSLP(s[3639]);
        initPEARLRS(s[3640]);
        initPERMJB(s[3641]);
        initPERNOWK(s[3642]);
        initPERSPROX(s[3643]);
        initPEXPRET(s[3644]);
        initPFULRET(s[3645]);
        initPNOWKLN(s[3646]);
        initPNOWK(s[3647]);
        initPRCRELIG(s[3648]);
        initPROXPERS(s[3649]);
        initPROXYNUM(s[3650]);
        initPSITF(s[3651]);
        initPSIT(s[3652]);
        initQHEALTH1(s[3653]);
        initQUALCHK(s[3654]);
        initR01(s[3655]);
        initR02(s[3656]);
        initR03(s[3657]);
        initR04(s[3658]);
        initR05(s[3659]);
        initR06(s[3660]);
        initR07(s[3661]);
        initR08(s[3662]);
        initR09(s[3663]);
        initR10(s[3664]);
        initR11(s[3665]);
        initREGLRPY1(s[3666]);
        initREGLRPY2(s[3667]);
        initRELBUS(s[3668]);
        initRENTAMT(s[3669]);
        initRENTPAY(s[3670]);
        initSAMEJOB1(s[3671]);
        initSAMEJOB2(s[3672]);
        initSAMEJOB3(s[3673]);
        initSAMEJOB4(s[3674]);
        initSAMEJOB5(s[3675]);
        initSAMEJOB6(s[3676]);
        initSAMEMP(s[3677]);
        initSAMJOB(s[3678]);
        initSCHEMEET(s[3679]);
        initSEAMK(s[3680]);
        initSEAML(s[3681]);
        initSEAMT(s[3682]);
        initSECTOR(s[3683]);
        initSECTR2(s[3684]);
        initSEESM(s[3685]);
        initSEESW(s[3686]);
        initSEMN(s[3687]);
        initSEMPSTY(s[3688]);
        initSEPEL(s[3689]);
        initSEPER(s[3690]);
        initSEX(s[3691]);
        initSICCODE(s[3692]);
        initSINGPAR(s[3693]);
        initSJ12G(s[3694]);
        initSJ12N(s[3695]);
        initSJEMP1(s[3696]);
        initSJEMP2(s[3697]);
        initSJGRS(s[3698]);
        initSJNET(s[3699]);
        initSJOB2(s[3700]);
        initSJSEG(s[3701]);
        initSMTPEN(s[3702]);
        initSOC2010_1DIGIT(s[3703]);
        initSOC2010_2DIGIT(s[3704]);
        initSOLO(s[3705]);
        initSSFAM1(s[3706]);
        initSSNOUNITS(s[3707]);
        initSSPART(s[3708]);
        initSSPNO(s[3709]);
        initSTARTJ(s[3710]);
        initSTATUS(s[3711]);
        initSTAT(s[3712]);
        initSVISE(s[3713]);
        initTEA(s[3714]);
        initTRAINEE(s[3715]);
        initTXCRED1(s[3716]);
        initTXCRED2(s[3717]);
        initWHOREATT(s[3718]);
        initWHORECAR(s[3719]);
        initWHOREMOB(s[3720]);
        initWKBETW(s[3721]);
        initWKHRSIR(s[3722]);
        initWKHRS(s[3723]);
        initWORKAGE(s[3724]);
        initWPENTYPE(s[3725]);
        initWRKING(s[3726]);
        initXMARSTA(s[3727]);
        initYINACT(s[3728]);
        initSTAT_I(s[3729]);
        initEMPSTAT2(s[3730]);
        initEVERWK(s[3731]);
        initSIC2007D(s[3732]);
        initCASEW1(s[3733]);
        initDVAGE17(s[3734]);
        initGOR(s[3735]);
        initDVAGEW2BAND(s[3736]);
    }

    @Override
    public WaAS_RecordID getID() {
        return (WaAS_RecordID) id;
    }
}
