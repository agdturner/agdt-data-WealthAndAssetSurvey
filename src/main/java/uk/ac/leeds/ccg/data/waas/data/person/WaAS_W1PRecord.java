/**
 * Source code generated by uk.ac.leeds.ccg.data.waascg.process.WaASCG_Main
 */

package uk.ac.leeds.ccg.data.waas.data.person;
import uk.ac.leeds.ccg.data.waas.data.id.WaAS_RecordID;

public class WaAS_W1PRecord extends WaAS_W1W2PRecord {

    protected double ACCFRAC_F;

    protected double ACCFRAC_S;

    protected double ASAFT_F;

    protected double ASAFT_S;

    protected byte BPRFLOS2;

    protected byte BPRFLOS3;

    protected byte BSELLYB;

    protected boolean BVAL2FLAG;

    protected int BVAL2_I;

    protected boolean BVALFLAG;

    protected int BVAL_I;

    protected byte DBURDW2;

    protected byte DBURD___W1;

    protected byte DC12M;

    protected short DCOINV3_I;

    protected byte DCOINV3_IFLAG;

    protected byte DS12M;

    protected byte DS12M_I;

    protected boolean DS12M_IFLAG;

    protected byte DVAGEW1BAND;

    protected int DVBDEBT;

    protected int DVBVAL;

    protected double DVDBOPENT_F;

    protected double DVDBOPENT_S;

    protected int DVGRSJOB2;

    protected int DVGRSSEJOB;

    protected int DVHDEBT;

    protected int DVHVAL;

    protected int DVLOSDEBT;

    protected int DVLOSV;

    protected int DVLUKDEBT;

    protected int DVLUKV;

    protected int DVNETJOB2;

    protected int DVOPDEBT;

    protected int DVOPVAL;

    protected double DVPENINC_F;

    protected double DVPENINC_S;

    protected int DVPEPV;

    protected int DVSEAMT;

    protected byte FCOSHAV;

    protected byte FCOSVLB;

    protected byte FCOSVLB_I;

    protected byte FCOSVLB_IFLAG;

    protected byte FINVTY11_I;

    protected boolean FINVTY11_IFLAG;

    protected int FPEPV;

    protected byte FPEPVB;

    protected int FPEPV_I;

    protected byte FPEPV_IFLAG;

    protected byte FSHMUT;

    protected byte FSHPRI;

    protected byte FSOSVLB_I;

    protected byte FSOSVLB_IFLAG;

    protected double HPYLFT2_I;

    protected double HPYLFT3_I;

    protected double HPYLFT4_I;

    protected double HPYLFT5_I;

    protected double HPYLFT_I;

    protected int IEVAL;

    protected int IEVAL2;

    protected int IEVAL3;

    protected byte IEVALB;

    protected byte IEVALB2;

    protected byte IEVALB3;

    protected short IEYR;

    protected short IEYR2;

    protected short IEYR3;

    protected byte IFUTVIB;

    protected byte IGFUSE1;

    protected byte IGFUSE2;

    protected byte IGFUSE3;

    protected boolean IGFUSE4;

    protected boolean IGFUSE5;

    protected byte IHATTI;

    protected byte IHEV;

    protected byte IHEVNO;

    protected byte IHFUT;

    protected byte IHINTRO;

    protected boolean ISPART;

    protected byte ISWITCH;

    protected byte IWILL;

    protected boolean LMATNUM;

    protected short OBSPV;

    protected byte OBUY1;

    protected byte OCREDI1;

    protected byte OEXPIN01;

    protected byte OEXPIN02;

    protected byte OEXPIN03;

    protected byte OEXPIN04;

    protected byte OEXPIN05;

    protected byte OEXPIN06;

    protected byte OEXPIN07;

    protected byte OEXPIN08;

    protected byte OEXPIN09;

    protected byte OEXPIN10;

    protected byte OEXPIN11;

    protected boolean OEXPIN12;

    protected byte OINCA;

    protected byte OLSAVE;

    protected byte OMATH;

    protected byte ONOSAV01;

    protected byte ONOSAV02;

    protected byte ONOSAV03;

    protected byte ONOSAV04;

    protected byte ONOSAV05;

    protected boolean ONOSAV06;

    protected byte OPROFF;

    protected byte OPROFF0;

    protected boolean OPROFF1;

    protected boolean OPROFF2;

    protected boolean OPROFF3;

    protected byte OPROFFW01;

    protected byte OPROFFW02;

    protected byte OPROFFW03;

    protected byte OPROFFW04;

    protected byte OPROFFW05;

    protected byte OPROFFW06;

    protected byte OPROFFW07;

    protected byte OPROFFW08;

    protected byte OPROFFW09;

    protected byte OPROPE;

    protected byte OSAVED;

    protected byte OSAVER1;

    protected byte OSAVG;

    protected byte OSECUR;

    protected byte OSHOP;

    protected byte OSOURCE1;

    protected byte OSOURCE2;

    protected byte OSOURCE3;

    protected byte OSOURCE4;

    protected byte OSOURCE5;

    protected byte OSOURCE6;

    protected byte OSTAND;

    protected byte OSTATE;

    protected byte OWHYSA01;

    protected byte OWHYSA02;

    protected byte OWHYSA03;

    protected byte OWHYSA04;

    protected byte OWHYSA05;

    protected byte OWHYSA06;

    protected byte OWHYSA07;

    protected byte OWHYSA08;

    protected byte OWHYSA09;

    protected boolean OWHYSA10;

    protected byte PADDYR_F;

    protected byte PASTMM_F;

    protected short PASTMY_F;

    protected int PAVCAM_F;

    protected short PAVCAM_S;

    protected double PAVCFR_F;

    protected byte PAVCFR_S;

    protected byte PAVCH_F;

    protected byte PAVCH_S;

    protected byte PAVCIN_F;

    protected boolean PAVCIN_S;

    protected byte PAVCPR_F;

    protected byte PAVCPR_S;

    protected int PAVCUV_F;

    protected double PAVCUV_F_I;

    protected boolean PAVCUV_F_IFLAG;

    protected short PAVCUV_S;

    protected short PAVCUV_S_I;

    protected boolean PAVCUV_S_IFLAG;

    protected byte PAVCVB_F;

    protected byte PAVCVB_S;

    protected byte PAVDOC_F;

    protected boolean PAVDOC_S;

    protected byte PAYPER_I;

    protected byte PAYPER_IFLAG;

    protected byte PBDOCS_F;

    protected byte PBDOCS_S;

    protected byte PBFRAC_F;

    protected byte PBFRAC_F_I;

    protected boolean PBFRAC_F_IFLAG;

    protected byte PBFRAC_S;

    protected byte PBFRAC_S_I;

    protected boolean PBFRAC_S_IFLAG;

    protected int PBINCA_F;

    protected int PBINCA_S;

    protected double PBINCF_F;

    protected byte PBINCF_S;

    protected byte PBINCH_F;

    protected byte PBINCH_S;

    protected byte PBLMVB_F;

    protected byte PBLMVB_S;

    protected int PBLUMV_F;

    protected double PBLUMV_F_I;

    protected boolean PBLUMV_F_IFLAG;

    protected int PBLUMV_S;

    protected double PBLUMV_S_I;

    protected boolean PBLUMV_S_IFLAG;

    protected byte PBQUAL_F;

    protected byte PBQUAL_F_I;

    protected boolean PBQUAL_F_IFLAG;

    protected byte PBQUAL_S;

    protected byte PBQUAL_S_I;

    protected boolean PBQUAL_S_IFLAG;

    protected byte PBSTMM_F;

    protected byte PBSTMM_S;

    protected short PBSTMY_F;

    protected short PBSTMY_S;

    protected byte PCDOCS_F;

    protected byte PCDOCS_S;

    protected byte PCSTMM_F;

    protected byte PCSTMM_S;

    protected short PCSTMY_F;

    protected short PCSTMY_S;

    protected byte PDBCAL_F;

    protected byte PDBCAL_S;

    protected int PDCVAL_F;

    protected double PDCVAL_F_I;

    protected boolean PDCVAL_F_IFLAG;

    protected int PDCVAL_S;

    protected double PDCVAL_S_I;

    protected boolean PDCVAL_S_IFLAG;

    protected byte PDCVB_F;

    protected byte PDCVB_S;

    protected byte PEANYO_I;

    protected boolean PEANYO_IFLAG;

    protected byte PECONT_I;

    protected boolean PECONT_IFLAG;

    protected boolean PEP;

    protected short PFBEG_F;

    protected short PFBEG_S;

    protected short PFBEG_T;

    protected int PFCURV_F;

    protected double PFCURV_F_I;

    protected boolean PFCURV_F_IFLAG;

    protected int PFCURV_S;

    protected double PFCURV_S_I;

    protected boolean PFCURV_S_IFLAG;

    protected int PFCURV_T;

    protected double PFCURV_T_I;

    protected boolean PFCURV_T_IFLAG;

    protected byte PFCUVB_F;

    protected byte PFCUVB_S;

    protected byte PFCUVB_T;

    protected byte PFDDVB_F;

    protected byte PFDDVB_S;

    protected byte PFDDVB_T;

    protected int PFDDV_F;

    protected int PFDDV_F_I;

    protected boolean PFDDV_F_IFLAG;

    protected int PFDDV_S;

    protected int PFDDV_S_I;

    protected boolean PFDDV_S_IFLAG;

    protected int PFDDV_T;

    protected int PFDDV_T_I;

    protected boolean PFDDV_T_IFLAG;

    protected byte PFDOCS_F;

    protected byte PFDOCS_S;

    protected byte PFDOCS_T;

    protected byte PFDRAW_F;

    protected byte PFDRAW_F_I;

    protected boolean PFDRAW_F_IFLAG;

    protected byte PFDRAW_S;

    protected byte PFDRAW_S_I;

    protected boolean PFDRAW_S_IFLAG;

    protected byte PFDRAW_T;

    protected byte PFDRAW_T_I;

    protected boolean PFDRAW_T_IFLAG;

    protected short PFEND_F;

    protected short PFEND_S;

    protected short PFEND_T;

    protected int PFINCA_F;

    protected double PFINCA_F_I;

    protected boolean PFINCA_F_IFLAG;

    protected int PFINCA_S;

    protected double PFINCA_S_I;

    protected boolean PFINCA_S_IFLAG;

    protected short PFINCA_T;

    protected double PFINCA_T_I;

    protected boolean PFINCA_T_IFLAG;

    protected byte PFINCP_F;

    protected byte PFINCP_F_I;

    protected boolean PFINCP_F_IFLAG;

    protected byte PFINCP_S;

    protected byte PFINCP_S_I;

    protected boolean PFINCP_S_IFLAG;

    protected byte PFINCP_T;

    protected byte PFINCP_T_I;

    protected boolean PFINCP_T_IFLAG;

    protected int PFLUMV_F;

    protected double PFLUMV_F_I;

    protected boolean PFLUMV_F_IFLAG;

    protected int PFLUMV_S;

    protected double PFLUMV_S_I;

    protected boolean PFLUMV_S_IFLAG;

    protected int PFLUMV_T;

    protected int PFLUMV_T_I;

    protected boolean PFLUMV_T_IFLAG;

    protected byte PFLUVB_F;

    protected byte PFLUVB_S;

    protected byte PFLUVB_T;

    protected byte PFOCTY_F;

    protected byte PFOCTY_F_I;

    protected boolean PFOCTY_F_IFLAG;

    protected byte PFOCTY_S;

    protected byte PFOCTY_S_I;

    protected boolean PFOCTY_S_IFLAG;

    protected byte PFOCTY_T;

    protected byte PFOCTY_T_I;

    protected boolean PFOCTY_T_IFLAG;

    protected byte PFREC_F;

    protected byte PFREC_F_I;

    protected boolean PFREC_F_IFLAG;

    protected byte PFREC_S;

    protected byte PFREC_S_I;

    protected boolean PFREC_S_IFLAG;

    protected byte PFREC_T;

    protected byte PFREC_T_I;

    protected boolean PFREC_T_IFLAG;

    protected byte PFSTMM_F;

    protected byte PFSTMM_S;

    protected byte PFSTMM_T;

    protected short PFSTMY_F;

    protected short PFSTMY_S;

    protected short PFSTMY_T;

    protected byte PFTYP_F;

    protected byte PFTYP_F_I;

    protected boolean PFTYP_F_IFLAG;

    protected byte PFTYP_S;

    protected byte PFTYP_S_I;

    protected boolean PFTYP_S_IFLAG;

    protected byte PFTYP_T;

    protected byte PFTYP_T_I;

    protected boolean PFTYP_T_IFLAG;

    protected boolean PINTRE_I;

    protected boolean PINTRE_IFLAG;

    protected boolean PINTRN_I;

    protected boolean PINTRN_IFLAG;

    protected short PIRREG_F;

    protected byte PMORTC_F;

    protected byte PMORTC_S;

    protected byte PNANYO_I;

    protected boolean PNANYO_IFLAG;

    protected byte PNCONT_I;

    protected boolean PNCONT_IFLAG;

    protected byte POADD_F1;

    protected byte POADD_F1_I;

    protected boolean POADD_F1_IFLAG;

    protected byte POADD_F2;

    protected byte POADD_F2_I;

    protected boolean POADD_F2_IFLAG;

    protected byte POADD_S1;

    protected byte POADD_S1_I;

    protected boolean POADD_S1_IFLAG;

    protected boolean POADD_S2;

    protected boolean POADD_S2_I;

    protected boolean POADD_S2_IFLAG;

    protected int POCNAM_F;

    protected short POCNAM_S;

    protected byte POCNFG_F;

    protected byte POCNFG_S;

    protected double POCNFR_F;

    protected double POCNFR_S;

    protected byte POCNPR_F;

    protected byte POCNPR_S;

    protected byte POCONH_F;

    protected byte POCONH_S;

    protected byte POCTYP_F;

    protected byte POCTYP_F_I;

    protected boolean POCTYP_F_IFLAG;

    protected byte POCTYP_S;

    protected byte POCTYP_S_I;

    protected boolean POCTYP_S_IFLAG;

    protected int POEMAM_F;

    protected short POEMAM_S;

    protected double POEMFR_F;

    protected double POEMFR_S;

    protected byte POEMPC_F;

    protected byte POEMPC_S;

    protected byte POEMPH_F;

    protected byte POEMPH_S;

    protected byte POEMPR_F;

    protected byte POEMPR_S;

    protected short POJOIN_F;

    protected short POJOIN_S;

    protected byte POLSYR_F;

    protected byte POLSYR_S;

    protected byte POMETH_F;

    protected byte POMETH_S;

    protected byte POPYCH_F;

    protected byte POPYCH_S;

    protected byte PORAGET_F;

    protected byte PORAGET_S;

    protected byte PORAGE_F;

    protected byte PORAGE_S;

    protected byte PORATE_F;

    protected byte PORATE_S;

    protected short POYRAM_F;

    protected short POYRAM_S;

    protected byte PPACCU_F;

    protected byte PPACCU_S;

    protected byte PPDOCS_F;

    protected byte PPDOCS_S;

    protected short PPEIRA_F;

    protected short PPEIRA_S;

    protected boolean PPEIRF_F;

    protected boolean PPEIRF_S;

    protected byte PPEIRH_F;

    protected byte PPEIRH_S;

    protected short PPEMAM_F;

    protected short PPEMAM_S;

    protected double PPEMFR_F;

    protected double PPEMFR_S;

    protected byte PPEMPH_F;

    protected byte PPEMPH_S;

    protected byte PPEMPR_F;

    protected byte PPEMPR_S;

    protected byte PPEMP_F;

    protected byte PPEMP_S;

    protected byte PPEVRG_F;

    protected byte PPEVRG_S;

    protected int PPIRRA_F;

    protected int PPIRRA_S;

    protected byte PPIRRH_F;

    protected byte PPIRRH_S;

    protected byte PPIRRN_F;

    protected byte PPIRRN_S;

    protected short PPIRRY_F;

    protected short PPIRRY_S;

    protected short PPLASY_F;

    protected short PPLASY_S;

    protected int PPLSTA_F;

    protected int PPLSTA_S;

    protected byte PPLSTP_F;

    protected byte PPLSTP_S;

    protected byte PPNINS_F;

    protected byte PPNINS_S;

    protected byte PPORG_F;

    protected byte PPORG_S;

    protected byte PPPAY_F;

    protected byte PPPAY_S;

    protected int PPRGAM_F;

    protected short PPRGAM_S;

    protected byte PPRGFG_F;

    protected boolean PPRGFG_S;

    protected double PPRGFR_F;

    protected double PPRGFR_S;

    protected byte PPRGH_F;

    protected byte PPRGH_S;

    protected byte PPRGPE_F;

    protected byte PPRGPE_S;

    protected byte PPSTMM_F;

    protected byte PPSTMM_S;

    protected short PPSTMY_F;

    protected short PPSTMY_S;

    protected byte PPTYP_F;

    protected byte PPTYP_S;

    protected byte PPVALB_F;

    protected byte PPVALB_F_I;

    protected byte PPVALB_S;

    protected byte PPVALB_S_I;

    protected int PPVAL_F;

    protected double PPVAL_F_I;

    protected boolean PPVAL_F_IFLAG;

    protected int PPVAL_S;

    protected double PPVAL_S_I;

    protected boolean PPVAL_S_IFLAG;

    protected short PPYRST_F;

    protected short PPYRST_S;

    protected byte PPYSTP_1;

    protected byte PPYSTP_2;

    protected byte PPYSTP_3;

    protected byte PPYSTP_8;

    protected byte PPYSTP_9;

    protected boolean REGLRPY3;

    protected short SEAML_I;

    protected boolean SEAML_IFLAG;

    protected byte SEINT;

    protected byte SEPEL_I;

    protected boolean SEPEL_IFLAG;

    protected byte SEPER_I;

    protected boolean SEPER_IFLAG;

    protected byte SJEMP1_I;

    protected byte SJEMP1_IFLAG;

    protected byte SJEMP2_I;

    protected byte SJEMP2_IFLAG;

    protected byte SJOB2_I;

    protected byte SJOB2_IFLAG;

    protected short SLNOS4;

    protected short SLNOS5;

    protected double XS_WGT;

    protected final void initACCFRAC_F(String s) {
        if (!s.trim().isEmpty()) {
            ACCFRAC_F = Double.parseDouble(s);
        } else {
            ACCFRAC_F = Double.NaN;
        }
    }

    protected final void initACCFRAC_S(String s) {
        if (!s.trim().isEmpty()) {
            ACCFRAC_S = Double.parseDouble(s);
        } else {
            ACCFRAC_S = Double.NaN;
        }
    }

    protected final void initASAFT_F(String s) {
        if (!s.trim().isEmpty()) {
            ASAFT_F = Double.parseDouble(s);
        } else {
            ASAFT_F = Double.NaN;
        }
    }

    protected final void initASAFT_S(String s) {
        if (!s.trim().isEmpty()) {
            ASAFT_S = Double.parseDouble(s);
        } else {
            ASAFT_S = Double.NaN;
        }
    }

    protected final void initBPRFLOS2(String s) {
        if (!s.trim().isEmpty()) {
            BPRFLOS2 = Byte.parseByte(s);
        } else {
            BPRFLOS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPRFLOS3(String s) {
        if (!s.trim().isEmpty()) {
            BPRFLOS3 = Byte.parseByte(s);
        } else {
            BPRFLOS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBSELLYB(String s) {
        if (!s.trim().isEmpty()) {
            BSELLYB = Byte.parseByte(s);
        } else {
            BSELLYB = Byte.MIN_VALUE;
        }
    }

    protected final void initBVAL2FLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                BVAL2FLAG = false;
            } else {
                BVAL2FLAG = true;
            }
        }
    }

    protected final void initBVAL2_I(String s) {
        if (!s.trim().isEmpty()) {
            BVAL2_I = Integer.parseInt(s);
        } else {
            BVAL2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initBVALFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                BVALFLAG = false;
            } else {
                BVALFLAG = true;
            }
        }
    }

    protected final void initBVAL_I(String s) {
        if (!s.trim().isEmpty()) {
            BVAL_I = Integer.parseInt(s);
        } else {
            BVAL_I = Integer.MIN_VALUE;
        }
    }

    protected final void initDBURDW2(String s) {
        if (!s.trim().isEmpty()) {
            DBURDW2 = Byte.parseByte(s);
        } else {
            DBURDW2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDBURD___W1(String s) {
        if (!s.trim().isEmpty()) {
            DBURD___W1 = Byte.parseByte(s);
        } else {
            DBURD___W1 = Byte.MIN_VALUE;
        }
    }

    protected final void initDC12M(String s) {
        if (!s.trim().isEmpty()) {
            DC12M = Byte.parseByte(s);
        } else {
            DC12M = Byte.MIN_VALUE;
        }
    }

    protected final void initDCOINV3_I(String s) {
        if (!s.trim().isEmpty()) {
            DCOINV3_I = Short.parseShort(s);
        } else {
            DCOINV3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDCOINV3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCOINV3_IFLAG = Byte.parseByte(s);
        } else {
            DCOINV3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDS12M(String s) {
        if (!s.trim().isEmpty()) {
            DS12M = Byte.parseByte(s);
        } else {
            DS12M = Byte.MIN_VALUE;
        }
    }

    protected final void initDS12M_I(String s) {
        if (!s.trim().isEmpty()) {
            DS12M_I = Byte.parseByte(s);
        } else {
            DS12M_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDS12M_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DS12M_IFLAG = false;
            } else {
                DS12M_IFLAG = true;
            }
        }
    }

    protected final void initDVAGEW1BAND(String s) {
        if (!s.trim().isEmpty()) {
            DVAGEW1BAND = Byte.parseByte(s);
        } else {
            DVAGEW1BAND = Byte.MIN_VALUE;
        }
    }

    protected final void initDVBDEBT(String s) {
        if (!s.trim().isEmpty()) {
            DVBDEBT = Integer.parseInt(s);
        } else {
            DVBDEBT = Integer.MIN_VALUE;
        }
    }

    protected final void initDVBVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVBVAL = Integer.parseInt(s);
        } else {
            DVBVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initDVDBOPENT_F(String s) {
        if (!s.trim().isEmpty()) {
            DVDBOPENT_F = Double.parseDouble(s);
        } else {
            DVDBOPENT_F = Double.NaN;
        }
    }

    protected final void initDVDBOPENT_S(String s) {
        if (!s.trim().isEmpty()) {
            DVDBOPENT_S = Double.parseDouble(s);
        } else {
            DVDBOPENT_S = Double.NaN;
        }
    }

    protected final void initDVGRSJOB2(String s) {
        if (!s.trim().isEmpty()) {
            DVGRSJOB2 = Integer.parseInt(s);
        } else {
            DVGRSJOB2 = Integer.MIN_VALUE;
        }
    }

    protected final void initDVGRSSEJOB(String s) {
        if (!s.trim().isEmpty()) {
            DVGRSSEJOB = Integer.parseInt(s);
        } else {
            DVGRSSEJOB = Integer.MIN_VALUE;
        }
    }

    protected final void initDVHDEBT(String s) {
        if (!s.trim().isEmpty()) {
            DVHDEBT = Integer.parseInt(s);
        } else {
            DVHDEBT = Integer.MIN_VALUE;
        }
    }

    protected final void initDVHVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVHVAL = Integer.parseInt(s);
        } else {
            DVHVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initDVLOSDEBT(String s) {
        if (!s.trim().isEmpty()) {
            DVLOSDEBT = Integer.parseInt(s);
        } else {
            DVLOSDEBT = Integer.MIN_VALUE;
        }
    }

    protected final void initDVLOSV(String s) {
        if (!s.trim().isEmpty()) {
            DVLOSV = Integer.parseInt(s);
        } else {
            DVLOSV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVLUKDEBT(String s) {
        if (!s.trim().isEmpty()) {
            DVLUKDEBT = Integer.parseInt(s);
        } else {
            DVLUKDEBT = Integer.MIN_VALUE;
        }
    }

    protected final void initDVLUKV(String s) {
        if (!s.trim().isEmpty()) {
            DVLUKV = Integer.parseInt(s);
        } else {
            DVLUKV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVNETJOB2(String s) {
        if (!s.trim().isEmpty()) {
            DVNETJOB2 = Integer.parseInt(s);
        } else {
            DVNETJOB2 = Integer.MIN_VALUE;
        }
    }

    protected final void initDVOPDEBT(String s) {
        if (!s.trim().isEmpty()) {
            DVOPDEBT = Integer.parseInt(s);
        } else {
            DVOPDEBT = Integer.MIN_VALUE;
        }
    }

    protected final void initDVOPVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVOPVAL = Integer.parseInt(s);
        } else {
            DVOPVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initDVPENINC_F(String s) {
        if (!s.trim().isEmpty()) {
            DVPENINC_F = Double.parseDouble(s);
        } else {
            DVPENINC_F = Double.NaN;
        }
    }

    protected final void initDVPENINC_S(String s) {
        if (!s.trim().isEmpty()) {
            DVPENINC_S = Double.parseDouble(s);
        } else {
            DVPENINC_S = Double.NaN;
        }
    }

    protected final void initDVPEPV(String s) {
        if (!s.trim().isEmpty()) {
            DVPEPV = Integer.parseInt(s);
        } else {
            DVPEPV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVSEAMT(String s) {
        if (!s.trim().isEmpty()) {
            DVSEAMT = Integer.parseInt(s);
        } else {
            DVSEAMT = Integer.MIN_VALUE;
        }
    }

    protected final void initFCOSHAV(String s) {
        if (!s.trim().isEmpty()) {
            FCOSHAV = Byte.parseByte(s);
        } else {
            FCOSHAV = Byte.MIN_VALUE;
        }
    }

    protected final void initFCOSVLB(String s) {
        if (!s.trim().isEmpty()) {
            FCOSVLB = Byte.parseByte(s);
        } else {
            FCOSVLB = Byte.MIN_VALUE;
        }
    }

    protected final void initFCOSVLB_I(String s) {
        if (!s.trim().isEmpty()) {
            FCOSVLB_I = Byte.parseByte(s);
        } else {
            FCOSVLB_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFCOSVLB_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FCOSVLB_IFLAG = Byte.parseByte(s);
        } else {
            FCOSVLB_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY11_I(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY11_I = Byte.parseByte(s);
        } else {
            FINVTY11_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY11_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                FINVTY11_IFLAG = false;
            } else {
                FINVTY11_IFLAG = true;
            }
        }
    }

    protected final void initFPEPV(String s) {
        if (!s.trim().isEmpty()) {
            FPEPV = Integer.parseInt(s);
        } else {
            FPEPV = Integer.MIN_VALUE;
        }
    }

    protected final void initFPEPVB(String s) {
        if (!s.trim().isEmpty()) {
            FPEPVB = Byte.parseByte(s);
        } else {
            FPEPVB = Byte.MIN_VALUE;
        }
    }

    protected final void initFPEPV_I(String s) {
        if (!s.trim().isEmpty()) {
            FPEPV_I = Integer.parseInt(s);
        } else {
            FPEPV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFPEPV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FPEPV_IFLAG = Byte.parseByte(s);
        } else {
            FPEPV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFSHMUT(String s) {
        if (!s.trim().isEmpty()) {
            FSHMUT = Byte.parseByte(s);
        } else {
            FSHMUT = Byte.MIN_VALUE;
        }
    }

    protected final void initFSHPRI(String s) {
        if (!s.trim().isEmpty()) {
            FSHPRI = Byte.parseByte(s);
        } else {
            FSHPRI = Byte.MIN_VALUE;
        }
    }

    protected final void initFSOSVLB_I(String s) {
        if (!s.trim().isEmpty()) {
            FSOSVLB_I = Byte.parseByte(s);
        } else {
            FSOSVLB_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFSOSVLB_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FSOSVLB_IFLAG = Byte.parseByte(s);
        } else {
            FSOSVLB_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initHPYLFT2_I(String s) {
        if (!s.trim().isEmpty()) {
            HPYLFT2_I = Double.parseDouble(s);
        } else {
            HPYLFT2_I = Double.NaN;
        }
    }

    protected final void initHPYLFT3_I(String s) {
        if (!s.trim().isEmpty()) {
            HPYLFT3_I = Double.parseDouble(s);
        } else {
            HPYLFT3_I = Double.NaN;
        }
    }

    protected final void initHPYLFT4_I(String s) {
        if (!s.trim().isEmpty()) {
            HPYLFT4_I = Double.parseDouble(s);
        } else {
            HPYLFT4_I = Double.NaN;
        }
    }

    protected final void initHPYLFT5_I(String s) {
        if (!s.trim().isEmpty()) {
            HPYLFT5_I = Double.parseDouble(s);
        } else {
            HPYLFT5_I = Double.NaN;
        }
    }

    protected final void initHPYLFT_I(String s) {
        if (!s.trim().isEmpty()) {
            HPYLFT_I = Double.parseDouble(s);
        } else {
            HPYLFT_I = Double.NaN;
        }
    }

    protected final void initIEVAL(String s) {
        if (!s.trim().isEmpty()) {
            IEVAL = Integer.parseInt(s);
        } else {
            IEVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initIEVAL2(String s) {
        if (!s.trim().isEmpty()) {
            IEVAL2 = Integer.parseInt(s);
        } else {
            IEVAL2 = Integer.MIN_VALUE;
        }
    }

    protected final void initIEVAL3(String s) {
        if (!s.trim().isEmpty()) {
            IEVAL3 = Integer.parseInt(s);
        } else {
            IEVAL3 = Integer.MIN_VALUE;
        }
    }

    protected final void initIEVALB(String s) {
        if (!s.trim().isEmpty()) {
            IEVALB = Byte.parseByte(s);
        } else {
            IEVALB = Byte.MIN_VALUE;
        }
    }

    protected final void initIEVALB2(String s) {
        if (!s.trim().isEmpty()) {
            IEVALB2 = Byte.parseByte(s);
        } else {
            IEVALB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initIEVALB3(String s) {
        if (!s.trim().isEmpty()) {
            IEVALB3 = Byte.parseByte(s);
        } else {
            IEVALB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initIEYR(String s) {
        if (!s.trim().isEmpty()) {
            IEYR = Short.parseShort(s);
        } else {
            IEYR = Short.MIN_VALUE;
        }
    }

    protected final void initIEYR2(String s) {
        if (!s.trim().isEmpty()) {
            IEYR2 = Short.parseShort(s);
        } else {
            IEYR2 = Short.MIN_VALUE;
        }
    }

    protected final void initIEYR3(String s) {
        if (!s.trim().isEmpty()) {
            IEYR3 = Short.parseShort(s);
        } else {
            IEYR3 = Short.MIN_VALUE;
        }
    }

    protected final void initIFUTVIB(String s) {
        if (!s.trim().isEmpty()) {
            IFUTVIB = Byte.parseByte(s);
        } else {
            IFUTVIB = Byte.MIN_VALUE;
        }
    }

    protected final void initIGFUSE1(String s) {
        if (!s.trim().isEmpty()) {
            IGFUSE1 = Byte.parseByte(s);
        } else {
            IGFUSE1 = Byte.MIN_VALUE;
        }
    }

    protected final void initIGFUSE2(String s) {
        if (!s.trim().isEmpty()) {
            IGFUSE2 = Byte.parseByte(s);
        } else {
            IGFUSE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initIGFUSE3(String s) {
        if (!s.trim().isEmpty()) {
            IGFUSE3 = Byte.parseByte(s);
        } else {
            IGFUSE3 = Byte.MIN_VALUE;
        }
    }

    protected final void initIGFUSE4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IGFUSE4 = false;
            } else {
                IGFUSE4 = true;
            }
        }
    }

    protected final void initIGFUSE5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IGFUSE5 = false;
            } else {
                IGFUSE5 = true;
            }
        }
    }

    protected final void initIHATTI(String s) {
        if (!s.trim().isEmpty()) {
            IHATTI = Byte.parseByte(s);
        } else {
            IHATTI = Byte.MIN_VALUE;
        }
    }

    protected final void initIHEV(String s) {
        if (!s.trim().isEmpty()) {
            IHEV = Byte.parseByte(s);
        } else {
            IHEV = Byte.MIN_VALUE;
        }
    }

    protected final void initIHEVNO(String s) {
        if (!s.trim().isEmpty()) {
            IHEVNO = Byte.parseByte(s);
        } else {
            IHEVNO = Byte.MIN_VALUE;
        }
    }

    protected final void initIHFUT(String s) {
        if (!s.trim().isEmpty()) {
            IHFUT = Byte.parseByte(s);
        } else {
            IHFUT = Byte.MIN_VALUE;
        }
    }

    protected final void initIHINTRO(String s) {
        if (!s.trim().isEmpty()) {
            IHINTRO = Byte.parseByte(s);
        } else {
            IHINTRO = Byte.MIN_VALUE;
        }
    }

    protected final void initISPART(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ISPART = false;
            } else {
                ISPART = true;
            }
        }
    }

    protected final void initISWITCH(String s) {
        if (!s.trim().isEmpty()) {
            ISWITCH = Byte.parseByte(s);
        } else {
            ISWITCH = Byte.MIN_VALUE;
        }
    }

    protected final void initIWILL(String s) {
        if (!s.trim().isEmpty()) {
            IWILL = Byte.parseByte(s);
        } else {
            IWILL = Byte.MIN_VALUE;
        }
    }

    protected final void initLMATNUM(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                LMATNUM = false;
            } else {
                LMATNUM = true;
            }
        }
    }

    protected final void initOBSPV(String s) {
        if (!s.trim().isEmpty()) {
            OBSPV = Short.parseShort(s);
        } else {
            OBSPV = Short.MIN_VALUE;
        }
    }

    protected final void initOBUY1(String s) {
        if (!s.trim().isEmpty()) {
            OBUY1 = Byte.parseByte(s);
        } else {
            OBUY1 = Byte.MIN_VALUE;
        }
    }

    protected final void initOCREDI1(String s) {
        if (!s.trim().isEmpty()) {
            OCREDI1 = Byte.parseByte(s);
        } else {
            OCREDI1 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPIN01(String s) {
        if (!s.trim().isEmpty()) {
            OEXPIN01 = Byte.parseByte(s);
        } else {
            OEXPIN01 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPIN02(String s) {
        if (!s.trim().isEmpty()) {
            OEXPIN02 = Byte.parseByte(s);
        } else {
            OEXPIN02 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPIN03(String s) {
        if (!s.trim().isEmpty()) {
            OEXPIN03 = Byte.parseByte(s);
        } else {
            OEXPIN03 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPIN04(String s) {
        if (!s.trim().isEmpty()) {
            OEXPIN04 = Byte.parseByte(s);
        } else {
            OEXPIN04 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPIN05(String s) {
        if (!s.trim().isEmpty()) {
            OEXPIN05 = Byte.parseByte(s);
        } else {
            OEXPIN05 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPIN06(String s) {
        if (!s.trim().isEmpty()) {
            OEXPIN06 = Byte.parseByte(s);
        } else {
            OEXPIN06 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPIN07(String s) {
        if (!s.trim().isEmpty()) {
            OEXPIN07 = Byte.parseByte(s);
        } else {
            OEXPIN07 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPIN08(String s) {
        if (!s.trim().isEmpty()) {
            OEXPIN08 = Byte.parseByte(s);
        } else {
            OEXPIN08 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPIN09(String s) {
        if (!s.trim().isEmpty()) {
            OEXPIN09 = Byte.parseByte(s);
        } else {
            OEXPIN09 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPIN10(String s) {
        if (!s.trim().isEmpty()) {
            OEXPIN10 = Byte.parseByte(s);
        } else {
            OEXPIN10 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPIN11(String s) {
        if (!s.trim().isEmpty()) {
            OEXPIN11 = Byte.parseByte(s);
        } else {
            OEXPIN11 = Byte.MIN_VALUE;
        }
    }

    protected final void initOEXPIN12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OEXPIN12 = false;
            } else {
                OEXPIN12 = true;
            }
        }
    }

    protected final void initOINCA(String s) {
        if (!s.trim().isEmpty()) {
            OINCA = Byte.parseByte(s);
        } else {
            OINCA = Byte.MIN_VALUE;
        }
    }

    protected final void initOLSAVE(String s) {
        if (!s.trim().isEmpty()) {
            OLSAVE = Byte.parseByte(s);
        } else {
            OLSAVE = Byte.MIN_VALUE;
        }
    }

    protected final void initOMATH(String s) {
        if (!s.trim().isEmpty()) {
            OMATH = Byte.parseByte(s);
        } else {
            OMATH = Byte.MIN_VALUE;
        }
    }

    protected final void initONOSAV01(String s) {
        if (!s.trim().isEmpty()) {
            ONOSAV01 = Byte.parseByte(s);
        } else {
            ONOSAV01 = Byte.MIN_VALUE;
        }
    }

    protected final void initONOSAV02(String s) {
        if (!s.trim().isEmpty()) {
            ONOSAV02 = Byte.parseByte(s);
        } else {
            ONOSAV02 = Byte.MIN_VALUE;
        }
    }

    protected final void initONOSAV03(String s) {
        if (!s.trim().isEmpty()) {
            ONOSAV03 = Byte.parseByte(s);
        } else {
            ONOSAV03 = Byte.MIN_VALUE;
        }
    }

    protected final void initONOSAV04(String s) {
        if (!s.trim().isEmpty()) {
            ONOSAV04 = Byte.parseByte(s);
        } else {
            ONOSAV04 = Byte.MIN_VALUE;
        }
    }

    protected final void initONOSAV05(String s) {
        if (!s.trim().isEmpty()) {
            ONOSAV05 = Byte.parseByte(s);
        } else {
            ONOSAV05 = Byte.MIN_VALUE;
        }
    }

    protected final void initONOSAV06(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ONOSAV06 = false;
            } else {
                ONOSAV06 = true;
            }
        }
    }

    protected final void initOPROFF(String s) {
        if (!s.trim().isEmpty()) {
            OPROFF = Byte.parseByte(s);
        } else {
            OPROFF = Byte.MIN_VALUE;
        }
    }

    protected final void initOPROFF0(String s) {
        if (!s.trim().isEmpty()) {
            OPROFF0 = Byte.parseByte(s);
        } else {
            OPROFF0 = Byte.MIN_VALUE;
        }
    }

    protected final void initOPROFF1(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OPROFF1 = false;
            } else {
                OPROFF1 = true;
            }
        }
    }

    protected final void initOPROFF2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OPROFF2 = false;
            } else {
                OPROFF2 = true;
            }
        }
    }

    protected final void initOPROFF3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OPROFF3 = false;
            } else {
                OPROFF3 = true;
            }
        }
    }

    protected final void initOPROFFW01(String s) {
        if (!s.trim().isEmpty()) {
            OPROFFW01 = Byte.parseByte(s);
        } else {
            OPROFFW01 = Byte.MIN_VALUE;
        }
    }

    protected final void initOPROFFW02(String s) {
        if (!s.trim().isEmpty()) {
            OPROFFW02 = Byte.parseByte(s);
        } else {
            OPROFFW02 = Byte.MIN_VALUE;
        }
    }

    protected final void initOPROFFW03(String s) {
        if (!s.trim().isEmpty()) {
            OPROFFW03 = Byte.parseByte(s);
        } else {
            OPROFFW03 = Byte.MIN_VALUE;
        }
    }

    protected final void initOPROFFW04(String s) {
        if (!s.trim().isEmpty()) {
            OPROFFW04 = Byte.parseByte(s);
        } else {
            OPROFFW04 = Byte.MIN_VALUE;
        }
    }

    protected final void initOPROFFW05(String s) {
        if (!s.trim().isEmpty()) {
            OPROFFW05 = Byte.parseByte(s);
        } else {
            OPROFFW05 = Byte.MIN_VALUE;
        }
    }

    protected final void initOPROFFW06(String s) {
        if (!s.trim().isEmpty()) {
            OPROFFW06 = Byte.parseByte(s);
        } else {
            OPROFFW06 = Byte.MIN_VALUE;
        }
    }

    protected final void initOPROFFW07(String s) {
        if (!s.trim().isEmpty()) {
            OPROFFW07 = Byte.parseByte(s);
        } else {
            OPROFFW07 = Byte.MIN_VALUE;
        }
    }

    protected final void initOPROFFW08(String s) {
        if (!s.trim().isEmpty()) {
            OPROFFW08 = Byte.parseByte(s);
        } else {
            OPROFFW08 = Byte.MIN_VALUE;
        }
    }

    protected final void initOPROFFW09(String s) {
        if (!s.trim().isEmpty()) {
            OPROFFW09 = Byte.parseByte(s);
        } else {
            OPROFFW09 = Byte.MIN_VALUE;
        }
    }

    protected final void initOPROPE(String s) {
        if (!s.trim().isEmpty()) {
            OPROPE = Byte.parseByte(s);
        } else {
            OPROPE = Byte.MIN_VALUE;
        }
    }

    protected final void initOSAVED(String s) {
        if (!s.trim().isEmpty()) {
            OSAVED = Byte.parseByte(s);
        } else {
            OSAVED = Byte.MIN_VALUE;
        }
    }

    protected final void initOSAVER1(String s) {
        if (!s.trim().isEmpty()) {
            OSAVER1 = Byte.parseByte(s);
        } else {
            OSAVER1 = Byte.MIN_VALUE;
        }
    }

    protected final void initOSAVG(String s) {
        if (!s.trim().isEmpty()) {
            OSAVG = Byte.parseByte(s);
        } else {
            OSAVG = Byte.MIN_VALUE;
        }
    }

    protected final void initOSECUR(String s) {
        if (!s.trim().isEmpty()) {
            OSECUR = Byte.parseByte(s);
        } else {
            OSECUR = Byte.MIN_VALUE;
        }
    }

    protected final void initOSHOP(String s) {
        if (!s.trim().isEmpty()) {
            OSHOP = Byte.parseByte(s);
        } else {
            OSHOP = Byte.MIN_VALUE;
        }
    }

    protected final void initOSOURCE1(String s) {
        if (!s.trim().isEmpty()) {
            OSOURCE1 = Byte.parseByte(s);
        } else {
            OSOURCE1 = Byte.MIN_VALUE;
        }
    }

    protected final void initOSOURCE2(String s) {
        if (!s.trim().isEmpty()) {
            OSOURCE2 = Byte.parseByte(s);
        } else {
            OSOURCE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initOSOURCE3(String s) {
        if (!s.trim().isEmpty()) {
            OSOURCE3 = Byte.parseByte(s);
        } else {
            OSOURCE3 = Byte.MIN_VALUE;
        }
    }

    protected final void initOSOURCE4(String s) {
        if (!s.trim().isEmpty()) {
            OSOURCE4 = Byte.parseByte(s);
        } else {
            OSOURCE4 = Byte.MIN_VALUE;
        }
    }

    protected final void initOSOURCE5(String s) {
        if (!s.trim().isEmpty()) {
            OSOURCE5 = Byte.parseByte(s);
        } else {
            OSOURCE5 = Byte.MIN_VALUE;
        }
    }

    protected final void initOSOURCE6(String s) {
        if (!s.trim().isEmpty()) {
            OSOURCE6 = Byte.parseByte(s);
        } else {
            OSOURCE6 = Byte.MIN_VALUE;
        }
    }

    protected final void initOSTAND(String s) {
        if (!s.trim().isEmpty()) {
            OSTAND = Byte.parseByte(s);
        } else {
            OSTAND = Byte.MIN_VALUE;
        }
    }

    protected final void initOSTATE(String s) {
        if (!s.trim().isEmpty()) {
            OSTATE = Byte.parseByte(s);
        } else {
            OSTATE = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSA01(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSA01 = Byte.parseByte(s);
        } else {
            OWHYSA01 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSA02(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSA02 = Byte.parseByte(s);
        } else {
            OWHYSA02 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSA03(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSA03 = Byte.parseByte(s);
        } else {
            OWHYSA03 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSA04(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSA04 = Byte.parseByte(s);
        } else {
            OWHYSA04 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSA05(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSA05 = Byte.parseByte(s);
        } else {
            OWHYSA05 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSA06(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSA06 = Byte.parseByte(s);
        } else {
            OWHYSA06 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSA07(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSA07 = Byte.parseByte(s);
        } else {
            OWHYSA07 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSA08(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSA08 = Byte.parseByte(s);
        } else {
            OWHYSA08 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSA09(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSA09 = Byte.parseByte(s);
        } else {
            OWHYSA09 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSA10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OWHYSA10 = false;
            } else {
                OWHYSA10 = true;
            }
        }
    }

    protected final void initPADDYR_F(String s) {
        if (!s.trim().isEmpty()) {
            PADDYR_F = Byte.parseByte(s);
        } else {
            PADDYR_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPASTMM_F(String s) {
        if (!s.trim().isEmpty()) {
            PASTMM_F = Byte.parseByte(s);
        } else {
            PASTMM_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPASTMY_F(String s) {
        if (!s.trim().isEmpty()) {
            PASTMY_F = Short.parseShort(s);
        } else {
            PASTMY_F = Short.MIN_VALUE;
        }
    }

    protected final void initPAVCAM_F(String s) {
        if (!s.trim().isEmpty()) {
            PAVCAM_F = Integer.parseInt(s);
        } else {
            PAVCAM_F = Integer.MIN_VALUE;
        }
    }

    protected final void initPAVCAM_S(String s) {
        if (!s.trim().isEmpty()) {
            PAVCAM_S = Short.parseShort(s);
        } else {
            PAVCAM_S = Short.MIN_VALUE;
        }
    }

    protected final void initPAVCFR_F(String s) {
        if (!s.trim().isEmpty()) {
            PAVCFR_F = Double.parseDouble(s);
        } else {
            PAVCFR_F = Double.NaN;
        }
    }

    protected final void initPAVCFR_S(String s) {
        if (!s.trim().isEmpty()) {
            PAVCFR_S = Byte.parseByte(s);
        } else {
            PAVCFR_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCH_F(String s) {
        if (!s.trim().isEmpty()) {
            PAVCH_F = Byte.parseByte(s);
        } else {
            PAVCH_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCH_S(String s) {
        if (!s.trim().isEmpty()) {
            PAVCH_S = Byte.parseByte(s);
        } else {
            PAVCH_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCIN_F(String s) {
        if (!s.trim().isEmpty()) {
            PAVCIN_F = Byte.parseByte(s);
        } else {
            PAVCIN_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCIN_S(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PAVCIN_S = false;
            } else {
                PAVCIN_S = true;
            }
        }
    }

    protected final void initPAVCPR_F(String s) {
        if (!s.trim().isEmpty()) {
            PAVCPR_F = Byte.parseByte(s);
        } else {
            PAVCPR_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCPR_S(String s) {
        if (!s.trim().isEmpty()) {
            PAVCPR_S = Byte.parseByte(s);
        } else {
            PAVCPR_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCUV_F(String s) {
        if (!s.trim().isEmpty()) {
            PAVCUV_F = Integer.parseInt(s);
        } else {
            PAVCUV_F = Integer.MIN_VALUE;
        }
    }

    protected final void initPAVCUV_F_I(String s) {
        if (!s.trim().isEmpty()) {
            PAVCUV_F_I = Double.parseDouble(s);
        } else {
            PAVCUV_F_I = Double.NaN;
        }
    }

    protected final void initPAVCUV_F_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PAVCUV_F_IFLAG = false;
            } else {
                PAVCUV_F_IFLAG = true;
            }
        }
    }

    protected final void initPAVCUV_S(String s) {
        if (!s.trim().isEmpty()) {
            PAVCUV_S = Short.parseShort(s);
        } else {
            PAVCUV_S = Short.MIN_VALUE;
        }
    }

    protected final void initPAVCUV_S_I(String s) {
        if (!s.trim().isEmpty()) {
            PAVCUV_S_I = Short.parseShort(s);
        } else {
            PAVCUV_S_I = Short.MIN_VALUE;
        }
    }

    protected final void initPAVCUV_S_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PAVCUV_S_IFLAG = false;
            } else {
                PAVCUV_S_IFLAG = true;
            }
        }
    }

    protected final void initPAVCVB_F(String s) {
        if (!s.trim().isEmpty()) {
            PAVCVB_F = Byte.parseByte(s);
        } else {
            PAVCVB_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCVB_S(String s) {
        if (!s.trim().isEmpty()) {
            PAVCVB_S = Byte.parseByte(s);
        } else {
            PAVCVB_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVDOC_F(String s) {
        if (!s.trim().isEmpty()) {
            PAVDOC_F = Byte.parseByte(s);
        } else {
            PAVDOC_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVDOC_S(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PAVDOC_S = false;
            } else {
                PAVDOC_S = true;
            }
        }
    }

    protected final void initPAYPER_I(String s) {
        if (!s.trim().isEmpty()) {
            PAYPER_I = Byte.parseByte(s);
        } else {
            PAYPER_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPAYPER_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PAYPER_IFLAG = Byte.parseByte(s);
        } else {
            PAYPER_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPBDOCS_F(String s) {
        if (!s.trim().isEmpty()) {
            PBDOCS_F = Byte.parseByte(s);
        } else {
            PBDOCS_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPBDOCS_S(String s) {
        if (!s.trim().isEmpty()) {
            PBDOCS_S = Byte.parseByte(s);
        } else {
            PBDOCS_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPBFRAC_F(String s) {
        if (!s.trim().isEmpty()) {
            PBFRAC_F = Byte.parseByte(s);
        } else {
            PBFRAC_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPBFRAC_F_I(String s) {
        if (!s.trim().isEmpty()) {
            PBFRAC_F_I = Byte.parseByte(s);
        } else {
            PBFRAC_F_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPBFRAC_F_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PBFRAC_F_IFLAG = false;
            } else {
                PBFRAC_F_IFLAG = true;
            }
        }
    }

    protected final void initPBFRAC_S(String s) {
        if (!s.trim().isEmpty()) {
            PBFRAC_S = Byte.parseByte(s);
        } else {
            PBFRAC_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPBFRAC_S_I(String s) {
        if (!s.trim().isEmpty()) {
            PBFRAC_S_I = Byte.parseByte(s);
        } else {
            PBFRAC_S_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPBFRAC_S_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PBFRAC_S_IFLAG = false;
            } else {
                PBFRAC_S_IFLAG = true;
            }
        }
    }

    protected final void initPBINCA_F(String s) {
        if (!s.trim().isEmpty()) {
            PBINCA_F = Integer.parseInt(s);
        } else {
            PBINCA_F = Integer.MIN_VALUE;
        }
    }

    protected final void initPBINCA_S(String s) {
        if (!s.trim().isEmpty()) {
            PBINCA_S = Integer.parseInt(s);
        } else {
            PBINCA_S = Integer.MIN_VALUE;
        }
    }

    protected final void initPBINCF_F(String s) {
        if (!s.trim().isEmpty()) {
            PBINCF_F = Double.parseDouble(s);
        } else {
            PBINCF_F = Double.NaN;
        }
    }

    protected final void initPBINCF_S(String s) {
        if (!s.trim().isEmpty()) {
            PBINCF_S = Byte.parseByte(s);
        } else {
            PBINCF_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPBINCH_F(String s) {
        if (!s.trim().isEmpty()) {
            PBINCH_F = Byte.parseByte(s);
        } else {
            PBINCH_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPBINCH_S(String s) {
        if (!s.trim().isEmpty()) {
            PBINCH_S = Byte.parseByte(s);
        } else {
            PBINCH_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPBLMVB_F(String s) {
        if (!s.trim().isEmpty()) {
            PBLMVB_F = Byte.parseByte(s);
        } else {
            PBLMVB_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPBLMVB_S(String s) {
        if (!s.trim().isEmpty()) {
            PBLMVB_S = Byte.parseByte(s);
        } else {
            PBLMVB_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPBLUMV_F(String s) {
        if (!s.trim().isEmpty()) {
            PBLUMV_F = Integer.parseInt(s);
        } else {
            PBLUMV_F = Integer.MIN_VALUE;
        }
    }

    protected final void initPBLUMV_F_I(String s) {
        if (!s.trim().isEmpty()) {
            PBLUMV_F_I = Double.parseDouble(s);
        } else {
            PBLUMV_F_I = Double.NaN;
        }
    }

    protected final void initPBLUMV_F_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PBLUMV_F_IFLAG = false;
            } else {
                PBLUMV_F_IFLAG = true;
            }
        }
    }

    protected final void initPBLUMV_S(String s) {
        if (!s.trim().isEmpty()) {
            PBLUMV_S = Integer.parseInt(s);
        } else {
            PBLUMV_S = Integer.MIN_VALUE;
        }
    }

    protected final void initPBLUMV_S_I(String s) {
        if (!s.trim().isEmpty()) {
            PBLUMV_S_I = Double.parseDouble(s);
        } else {
            PBLUMV_S_I = Double.NaN;
        }
    }

    protected final void initPBLUMV_S_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PBLUMV_S_IFLAG = false;
            } else {
                PBLUMV_S_IFLAG = true;
            }
        }
    }

    protected final void initPBQUAL_F(String s) {
        if (!s.trim().isEmpty()) {
            PBQUAL_F = Byte.parseByte(s);
        } else {
            PBQUAL_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPBQUAL_F_I(String s) {
        if (!s.trim().isEmpty()) {
            PBQUAL_F_I = Byte.parseByte(s);
        } else {
            PBQUAL_F_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPBQUAL_F_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PBQUAL_F_IFLAG = false;
            } else {
                PBQUAL_F_IFLAG = true;
            }
        }
    }

    protected final void initPBQUAL_S(String s) {
        if (!s.trim().isEmpty()) {
            PBQUAL_S = Byte.parseByte(s);
        } else {
            PBQUAL_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPBQUAL_S_I(String s) {
        if (!s.trim().isEmpty()) {
            PBQUAL_S_I = Byte.parseByte(s);
        } else {
            PBQUAL_S_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPBQUAL_S_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PBQUAL_S_IFLAG = false;
            } else {
                PBQUAL_S_IFLAG = true;
            }
        }
    }

    protected final void initPBSTMM_F(String s) {
        if (!s.trim().isEmpty()) {
            PBSTMM_F = Byte.parseByte(s);
        } else {
            PBSTMM_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPBSTMM_S(String s) {
        if (!s.trim().isEmpty()) {
            PBSTMM_S = Byte.parseByte(s);
        } else {
            PBSTMM_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPBSTMY_F(String s) {
        if (!s.trim().isEmpty()) {
            PBSTMY_F = Short.parseShort(s);
        } else {
            PBSTMY_F = Short.MIN_VALUE;
        }
    }

    protected final void initPBSTMY_S(String s) {
        if (!s.trim().isEmpty()) {
            PBSTMY_S = Short.parseShort(s);
        } else {
            PBSTMY_S = Short.MIN_VALUE;
        }
    }

    protected final void initPCDOCS_F(String s) {
        if (!s.trim().isEmpty()) {
            PCDOCS_F = Byte.parseByte(s);
        } else {
            PCDOCS_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPCDOCS_S(String s) {
        if (!s.trim().isEmpty()) {
            PCDOCS_S = Byte.parseByte(s);
        } else {
            PCDOCS_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPCSTMM_F(String s) {
        if (!s.trim().isEmpty()) {
            PCSTMM_F = Byte.parseByte(s);
        } else {
            PCSTMM_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPCSTMM_S(String s) {
        if (!s.trim().isEmpty()) {
            PCSTMM_S = Byte.parseByte(s);
        } else {
            PCSTMM_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPCSTMY_F(String s) {
        if (!s.trim().isEmpty()) {
            PCSTMY_F = Short.parseShort(s);
        } else {
            PCSTMY_F = Short.MIN_VALUE;
        }
    }

    protected final void initPCSTMY_S(String s) {
        if (!s.trim().isEmpty()) {
            PCSTMY_S = Short.parseShort(s);
        } else {
            PCSTMY_S = Short.MIN_VALUE;
        }
    }

    protected final void initPDBCAL_F(String s) {
        if (!s.trim().isEmpty()) {
            PDBCAL_F = Byte.parseByte(s);
        } else {
            PDBCAL_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPDBCAL_S(String s) {
        if (!s.trim().isEmpty()) {
            PDBCAL_S = Byte.parseByte(s);
        } else {
            PDBCAL_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPDCVAL_F(String s) {
        if (!s.trim().isEmpty()) {
            PDCVAL_F = Integer.parseInt(s);
        } else {
            PDCVAL_F = Integer.MIN_VALUE;
        }
    }

    protected final void initPDCVAL_F_I(String s) {
        if (!s.trim().isEmpty()) {
            PDCVAL_F_I = Double.parseDouble(s);
        } else {
            PDCVAL_F_I = Double.NaN;
        }
    }

    protected final void initPDCVAL_F_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PDCVAL_F_IFLAG = false;
            } else {
                PDCVAL_F_IFLAG = true;
            }
        }
    }

    protected final void initPDCVAL_S(String s) {
        if (!s.trim().isEmpty()) {
            PDCVAL_S = Integer.parseInt(s);
        } else {
            PDCVAL_S = Integer.MIN_VALUE;
        }
    }

    protected final void initPDCVAL_S_I(String s) {
        if (!s.trim().isEmpty()) {
            PDCVAL_S_I = Double.parseDouble(s);
        } else {
            PDCVAL_S_I = Double.NaN;
        }
    }

    protected final void initPDCVAL_S_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PDCVAL_S_IFLAG = false;
            } else {
                PDCVAL_S_IFLAG = true;
            }
        }
    }

    protected final void initPDCVB_F(String s) {
        if (!s.trim().isEmpty()) {
            PDCVB_F = Byte.parseByte(s);
        } else {
            PDCVB_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPDCVB_S(String s) {
        if (!s.trim().isEmpty()) {
            PDCVB_S = Byte.parseByte(s);
        } else {
            PDCVB_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPEANYO_I(String s) {
        if (!s.trim().isEmpty()) {
            PEANYO_I = Byte.parseByte(s);
        } else {
            PEANYO_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPEANYO_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PEANYO_IFLAG = false;
            } else {
                PEANYO_IFLAG = true;
            }
        }
    }

    protected final void initPECONT_I(String s) {
        if (!s.trim().isEmpty()) {
            PECONT_I = Byte.parseByte(s);
        } else {
            PECONT_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPECONT_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PECONT_IFLAG = false;
            } else {
                PECONT_IFLAG = true;
            }
        }
    }

    protected final void initPEP(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PEP = false;
            } else {
                PEP = true;
            }
        }
    }

    protected final void initPFBEG_F(String s) {
        if (!s.trim().isEmpty()) {
            PFBEG_F = Short.parseShort(s);
        } else {
            PFBEG_F = Short.MIN_VALUE;
        }
    }

    protected final void initPFBEG_S(String s) {
        if (!s.trim().isEmpty()) {
            PFBEG_S = Short.parseShort(s);
        } else {
            PFBEG_S = Short.MIN_VALUE;
        }
    }

    protected final void initPFBEG_T(String s) {
        if (!s.trim().isEmpty()) {
            PFBEG_T = Short.parseShort(s);
        } else {
            PFBEG_T = Short.MIN_VALUE;
        }
    }

    protected final void initPFCURV_F(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV_F = Integer.parseInt(s);
        } else {
            PFCURV_F = Integer.MIN_VALUE;
        }
    }

    protected final void initPFCURV_F_I(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV_F_I = Double.parseDouble(s);
        } else {
            PFCURV_F_I = Double.NaN;
        }
    }

    protected final void initPFCURV_F_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFCURV_F_IFLAG = false;
            } else {
                PFCURV_F_IFLAG = true;
            }
        }
    }

    protected final void initPFCURV_S(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV_S = Integer.parseInt(s);
        } else {
            PFCURV_S = Integer.MIN_VALUE;
        }
    }

    protected final void initPFCURV_S_I(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV_S_I = Double.parseDouble(s);
        } else {
            PFCURV_S_I = Double.NaN;
        }
    }

    protected final void initPFCURV_S_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFCURV_S_IFLAG = false;
            } else {
                PFCURV_S_IFLAG = true;
            }
        }
    }

    protected final void initPFCURV_T(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV_T = Integer.parseInt(s);
        } else {
            PFCURV_T = Integer.MIN_VALUE;
        }
    }

    protected final void initPFCURV_T_I(String s) {
        if (!s.trim().isEmpty()) {
            PFCURV_T_I = Double.parseDouble(s);
        } else {
            PFCURV_T_I = Double.NaN;
        }
    }

    protected final void initPFCURV_T_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFCURV_T_IFLAG = false;
            } else {
                PFCURV_T_IFLAG = true;
            }
        }
    }

    protected final void initPFCUVB_F(String s) {
        if (!s.trim().isEmpty()) {
            PFCUVB_F = Byte.parseByte(s);
        } else {
            PFCUVB_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCUVB_S(String s) {
        if (!s.trim().isEmpty()) {
            PFCUVB_S = Byte.parseByte(s);
        } else {
            PFCUVB_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPFCUVB_T(String s) {
        if (!s.trim().isEmpty()) {
            PFCUVB_T = Byte.parseByte(s);
        } else {
            PFCUVB_T = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDDVB_F(String s) {
        if (!s.trim().isEmpty()) {
            PFDDVB_F = Byte.parseByte(s);
        } else {
            PFDDVB_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDDVB_S(String s) {
        if (!s.trim().isEmpty()) {
            PFDDVB_S = Byte.parseByte(s);
        } else {
            PFDDVB_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDDVB_T(String s) {
        if (!s.trim().isEmpty()) {
            PFDDVB_T = Byte.parseByte(s);
        } else {
            PFDDVB_T = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDDV_F(String s) {
        if (!s.trim().isEmpty()) {
            PFDDV_F = Integer.parseInt(s);
        } else {
            PFDDV_F = Integer.MIN_VALUE;
        }
    }

    protected final void initPFDDV_F_I(String s) {
        if (!s.trim().isEmpty()) {
            PFDDV_F_I = Integer.parseInt(s);
        } else {
            PFDDV_F_I = Integer.MIN_VALUE;
        }
    }

    protected final void initPFDDV_F_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFDDV_F_IFLAG = false;
            } else {
                PFDDV_F_IFLAG = true;
            }
        }
    }

    protected final void initPFDDV_S(String s) {
        if (!s.trim().isEmpty()) {
            PFDDV_S = Integer.parseInt(s);
        } else {
            PFDDV_S = Integer.MIN_VALUE;
        }
    }

    protected final void initPFDDV_S_I(String s) {
        if (!s.trim().isEmpty()) {
            PFDDV_S_I = Integer.parseInt(s);
        } else {
            PFDDV_S_I = Integer.MIN_VALUE;
        }
    }

    protected final void initPFDDV_S_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFDDV_S_IFLAG = false;
            } else {
                PFDDV_S_IFLAG = true;
            }
        }
    }

    protected final void initPFDDV_T(String s) {
        if (!s.trim().isEmpty()) {
            PFDDV_T = Integer.parseInt(s);
        } else {
            PFDDV_T = Integer.MIN_VALUE;
        }
    }

    protected final void initPFDDV_T_I(String s) {
        if (!s.trim().isEmpty()) {
            PFDDV_T_I = Integer.parseInt(s);
        } else {
            PFDDV_T_I = Integer.MIN_VALUE;
        }
    }

    protected final void initPFDDV_T_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFDDV_T_IFLAG = false;
            } else {
                PFDDV_T_IFLAG = true;
            }
        }
    }

    protected final void initPFDOCS_F(String s) {
        if (!s.trim().isEmpty()) {
            PFDOCS_F = Byte.parseByte(s);
        } else {
            PFDOCS_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDOCS_S(String s) {
        if (!s.trim().isEmpty()) {
            PFDOCS_S = Byte.parseByte(s);
        } else {
            PFDOCS_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDOCS_T(String s) {
        if (!s.trim().isEmpty()) {
            PFDOCS_T = Byte.parseByte(s);
        } else {
            PFDOCS_T = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDRAW_F(String s) {
        if (!s.trim().isEmpty()) {
            PFDRAW_F = Byte.parseByte(s);
        } else {
            PFDRAW_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDRAW_F_I(String s) {
        if (!s.trim().isEmpty()) {
            PFDRAW_F_I = Byte.parseByte(s);
        } else {
            PFDRAW_F_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDRAW_F_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFDRAW_F_IFLAG = false;
            } else {
                PFDRAW_F_IFLAG = true;
            }
        }
    }

    protected final void initPFDRAW_S(String s) {
        if (!s.trim().isEmpty()) {
            PFDRAW_S = Byte.parseByte(s);
        } else {
            PFDRAW_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDRAW_S_I(String s) {
        if (!s.trim().isEmpty()) {
            PFDRAW_S_I = Byte.parseByte(s);
        } else {
            PFDRAW_S_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDRAW_S_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFDRAW_S_IFLAG = false;
            } else {
                PFDRAW_S_IFLAG = true;
            }
        }
    }

    protected final void initPFDRAW_T(String s) {
        if (!s.trim().isEmpty()) {
            PFDRAW_T = Byte.parseByte(s);
        } else {
            PFDRAW_T = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDRAW_T_I(String s) {
        if (!s.trim().isEmpty()) {
            PFDRAW_T_I = Byte.parseByte(s);
        } else {
            PFDRAW_T_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDRAW_T_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFDRAW_T_IFLAG = false;
            } else {
                PFDRAW_T_IFLAG = true;
            }
        }
    }

    protected final void initPFEND_F(String s) {
        if (!s.trim().isEmpty()) {
            PFEND_F = Short.parseShort(s);
        } else {
            PFEND_F = Short.MIN_VALUE;
        }
    }

    protected final void initPFEND_S(String s) {
        if (!s.trim().isEmpty()) {
            PFEND_S = Short.parseShort(s);
        } else {
            PFEND_S = Short.MIN_VALUE;
        }
    }

    protected final void initPFEND_T(String s) {
        if (!s.trim().isEmpty()) {
            PFEND_T = Short.parseShort(s);
        } else {
            PFEND_T = Short.MIN_VALUE;
        }
    }

    protected final void initPFINCA_F(String s) {
        if (!s.trim().isEmpty()) {
            PFINCA_F = Integer.parseInt(s);
        } else {
            PFINCA_F = Integer.MIN_VALUE;
        }
    }

    protected final void initPFINCA_F_I(String s) {
        if (!s.trim().isEmpty()) {
            PFINCA_F_I = Double.parseDouble(s);
        } else {
            PFINCA_F_I = Double.NaN;
        }
    }

    protected final void initPFINCA_F_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFINCA_F_IFLAG = false;
            } else {
                PFINCA_F_IFLAG = true;
            }
        }
    }

    protected final void initPFINCA_S(String s) {
        if (!s.trim().isEmpty()) {
            PFINCA_S = Integer.parseInt(s);
        } else {
            PFINCA_S = Integer.MIN_VALUE;
        }
    }

    protected final void initPFINCA_S_I(String s) {
        if (!s.trim().isEmpty()) {
            PFINCA_S_I = Double.parseDouble(s);
        } else {
            PFINCA_S_I = Double.NaN;
        }
    }

    protected final void initPFINCA_S_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFINCA_S_IFLAG = false;
            } else {
                PFINCA_S_IFLAG = true;
            }
        }
    }

    protected final void initPFINCA_T(String s) {
        if (!s.trim().isEmpty()) {
            PFINCA_T = Short.parseShort(s);
        } else {
            PFINCA_T = Short.MIN_VALUE;
        }
    }

    protected final void initPFINCA_T_I(String s) {
        if (!s.trim().isEmpty()) {
            PFINCA_T_I = Double.parseDouble(s);
        } else {
            PFINCA_T_I = Double.NaN;
        }
    }

    protected final void initPFINCA_T_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFINCA_T_IFLAG = false;
            } else {
                PFINCA_T_IFLAG = true;
            }
        }
    }

    protected final void initPFINCP_F(String s) {
        if (!s.trim().isEmpty()) {
            PFINCP_F = Byte.parseByte(s);
        } else {
            PFINCP_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPFINCP_F_I(String s) {
        if (!s.trim().isEmpty()) {
            PFINCP_F_I = Byte.parseByte(s);
        } else {
            PFINCP_F_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFINCP_F_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFINCP_F_IFLAG = false;
            } else {
                PFINCP_F_IFLAG = true;
            }
        }
    }

    protected final void initPFINCP_S(String s) {
        if (!s.trim().isEmpty()) {
            PFINCP_S = Byte.parseByte(s);
        } else {
            PFINCP_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPFINCP_S_I(String s) {
        if (!s.trim().isEmpty()) {
            PFINCP_S_I = Byte.parseByte(s);
        } else {
            PFINCP_S_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFINCP_S_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFINCP_S_IFLAG = false;
            } else {
                PFINCP_S_IFLAG = true;
            }
        }
    }

    protected final void initPFINCP_T(String s) {
        if (!s.trim().isEmpty()) {
            PFINCP_T = Byte.parseByte(s);
        } else {
            PFINCP_T = Byte.MIN_VALUE;
        }
    }

    protected final void initPFINCP_T_I(String s) {
        if (!s.trim().isEmpty()) {
            PFINCP_T_I = Byte.parseByte(s);
        } else {
            PFINCP_T_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFINCP_T_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFINCP_T_IFLAG = false;
            } else {
                PFINCP_T_IFLAG = true;
            }
        }
    }

    protected final void initPFLUMV_F(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMV_F = Integer.parseInt(s);
        } else {
            PFLUMV_F = Integer.MIN_VALUE;
        }
    }

    protected final void initPFLUMV_F_I(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMV_F_I = Double.parseDouble(s);
        } else {
            PFLUMV_F_I = Double.NaN;
        }
    }

    protected final void initPFLUMV_F_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFLUMV_F_IFLAG = false;
            } else {
                PFLUMV_F_IFLAG = true;
            }
        }
    }

    protected final void initPFLUMV_S(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMV_S = Integer.parseInt(s);
        } else {
            PFLUMV_S = Integer.MIN_VALUE;
        }
    }

    protected final void initPFLUMV_S_I(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMV_S_I = Double.parseDouble(s);
        } else {
            PFLUMV_S_I = Double.NaN;
        }
    }

    protected final void initPFLUMV_S_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFLUMV_S_IFLAG = false;
            } else {
                PFLUMV_S_IFLAG = true;
            }
        }
    }

    protected final void initPFLUMV_T(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMV_T = Integer.parseInt(s);
        } else {
            PFLUMV_T = Integer.MIN_VALUE;
        }
    }

    protected final void initPFLUMV_T_I(String s) {
        if (!s.trim().isEmpty()) {
            PFLUMV_T_I = Integer.parseInt(s);
        } else {
            PFLUMV_T_I = Integer.MIN_VALUE;
        }
    }

    protected final void initPFLUMV_T_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFLUMV_T_IFLAG = false;
            } else {
                PFLUMV_T_IFLAG = true;
            }
        }
    }

    protected final void initPFLUVB_F(String s) {
        if (!s.trim().isEmpty()) {
            PFLUVB_F = Byte.parseByte(s);
        } else {
            PFLUVB_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUVB_S(String s) {
        if (!s.trim().isEmpty()) {
            PFLUVB_S = Byte.parseByte(s);
        } else {
            PFLUVB_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPFLUVB_T(String s) {
        if (!s.trim().isEmpty()) {
            PFLUVB_T = Byte.parseByte(s);
        } else {
            PFLUVB_T = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY_F(String s) {
        if (!s.trim().isEmpty()) {
            PFOCTY_F = Byte.parseByte(s);
        } else {
            PFOCTY_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY_F_I(String s) {
        if (!s.trim().isEmpty()) {
            PFOCTY_F_I = Byte.parseByte(s);
        } else {
            PFOCTY_F_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY_F_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFOCTY_F_IFLAG = false;
            } else {
                PFOCTY_F_IFLAG = true;
            }
        }
    }

    protected final void initPFOCTY_S(String s) {
        if (!s.trim().isEmpty()) {
            PFOCTY_S = Byte.parseByte(s);
        } else {
            PFOCTY_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY_S_I(String s) {
        if (!s.trim().isEmpty()) {
            PFOCTY_S_I = Byte.parseByte(s);
        } else {
            PFOCTY_S_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY_S_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFOCTY_S_IFLAG = false;
            } else {
                PFOCTY_S_IFLAG = true;
            }
        }
    }

    protected final void initPFOCTY_T(String s) {
        if (!s.trim().isEmpty()) {
            PFOCTY_T = Byte.parseByte(s);
        } else {
            PFOCTY_T = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY_T_I(String s) {
        if (!s.trim().isEmpty()) {
            PFOCTY_T_I = Byte.parseByte(s);
        } else {
            PFOCTY_T_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFOCTY_T_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFOCTY_T_IFLAG = false;
            } else {
                PFOCTY_T_IFLAG = true;
            }
        }
    }

    protected final void initPFREC_F(String s) {
        if (!s.trim().isEmpty()) {
            PFREC_F = Byte.parseByte(s);
        } else {
            PFREC_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREC_F_I(String s) {
        if (!s.trim().isEmpty()) {
            PFREC_F_I = Byte.parseByte(s);
        } else {
            PFREC_F_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREC_F_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFREC_F_IFLAG = false;
            } else {
                PFREC_F_IFLAG = true;
            }
        }
    }

    protected final void initPFREC_S(String s) {
        if (!s.trim().isEmpty()) {
            PFREC_S = Byte.parseByte(s);
        } else {
            PFREC_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREC_S_I(String s) {
        if (!s.trim().isEmpty()) {
            PFREC_S_I = Byte.parseByte(s);
        } else {
            PFREC_S_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREC_S_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFREC_S_IFLAG = false;
            } else {
                PFREC_S_IFLAG = true;
            }
        }
    }

    protected final void initPFREC_T(String s) {
        if (!s.trim().isEmpty()) {
            PFREC_T = Byte.parseByte(s);
        } else {
            PFREC_T = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREC_T_I(String s) {
        if (!s.trim().isEmpty()) {
            PFREC_T_I = Byte.parseByte(s);
        } else {
            PFREC_T_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFREC_T_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFREC_T_IFLAG = false;
            } else {
                PFREC_T_IFLAG = true;
            }
        }
    }

    protected final void initPFSTMM_F(String s) {
        if (!s.trim().isEmpty()) {
            PFSTMM_F = Byte.parseByte(s);
        } else {
            PFSTMM_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSTMM_S(String s) {
        if (!s.trim().isEmpty()) {
            PFSTMM_S = Byte.parseByte(s);
        } else {
            PFSTMM_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSTMM_T(String s) {
        if (!s.trim().isEmpty()) {
            PFSTMM_T = Byte.parseByte(s);
        } else {
            PFSTMM_T = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSTMY_F(String s) {
        if (!s.trim().isEmpty()) {
            PFSTMY_F = Short.parseShort(s);
        } else {
            PFSTMY_F = Short.MIN_VALUE;
        }
    }

    protected final void initPFSTMY_S(String s) {
        if (!s.trim().isEmpty()) {
            PFSTMY_S = Short.parseShort(s);
        } else {
            PFSTMY_S = Short.MIN_VALUE;
        }
    }

    protected final void initPFSTMY_T(String s) {
        if (!s.trim().isEmpty()) {
            PFSTMY_T = Short.parseShort(s);
        } else {
            PFSTMY_T = Short.MIN_VALUE;
        }
    }

    protected final void initPFTYP_F(String s) {
        if (!s.trim().isEmpty()) {
            PFTYP_F = Byte.parseByte(s);
        } else {
            PFTYP_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPFTYP_F_I(String s) {
        if (!s.trim().isEmpty()) {
            PFTYP_F_I = Byte.parseByte(s);
        } else {
            PFTYP_F_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFTYP_F_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFTYP_F_IFLAG = false;
            } else {
                PFTYP_F_IFLAG = true;
            }
        }
    }

    protected final void initPFTYP_S(String s) {
        if (!s.trim().isEmpty()) {
            PFTYP_S = Byte.parseByte(s);
        } else {
            PFTYP_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPFTYP_S_I(String s) {
        if (!s.trim().isEmpty()) {
            PFTYP_S_I = Byte.parseByte(s);
        } else {
            PFTYP_S_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFTYP_S_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFTYP_S_IFLAG = false;
            } else {
                PFTYP_S_IFLAG = true;
            }
        }
    }

    protected final void initPFTYP_T(String s) {
        if (!s.trim().isEmpty()) {
            PFTYP_T = Byte.parseByte(s);
        } else {
            PFTYP_T = Byte.MIN_VALUE;
        }
    }

    protected final void initPFTYP_T_I(String s) {
        if (!s.trim().isEmpty()) {
            PFTYP_T_I = Byte.parseByte(s);
        } else {
            PFTYP_T_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFTYP_T_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFTYP_T_IFLAG = false;
            } else {
                PFTYP_T_IFLAG = true;
            }
        }
    }

    protected final void initPINTRE_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PINTRE_I = false;
            } else {
                PINTRE_I = true;
            }
        }
    }

    protected final void initPINTRE_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PINTRE_IFLAG = false;
            } else {
                PINTRE_IFLAG = true;
            }
        }
    }

    protected final void initPINTRN_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PINTRN_I = false;
            } else {
                PINTRN_I = true;
            }
        }
    }

    protected final void initPINTRN_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PINTRN_IFLAG = false;
            } else {
                PINTRN_IFLAG = true;
            }
        }
    }

    protected final void initPIRREG_F(String s) {
        if (!s.trim().isEmpty()) {
            PIRREG_F = Short.parseShort(s);
        } else {
            PIRREG_F = Short.MIN_VALUE;
        }
    }

    protected final void initPMORTC_F(String s) {
        if (!s.trim().isEmpty()) {
            PMORTC_F = Byte.parseByte(s);
        } else {
            PMORTC_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPMORTC_S(String s) {
        if (!s.trim().isEmpty()) {
            PMORTC_S = Byte.parseByte(s);
        } else {
            PMORTC_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPNANYO_I(String s) {
        if (!s.trim().isEmpty()) {
            PNANYO_I = Byte.parseByte(s);
        } else {
            PNANYO_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPNANYO_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PNANYO_IFLAG = false;
            } else {
                PNANYO_IFLAG = true;
            }
        }
    }

    protected final void initPNCONT_I(String s) {
        if (!s.trim().isEmpty()) {
            PNCONT_I = Byte.parseByte(s);
        } else {
            PNCONT_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPNCONT_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PNCONT_IFLAG = false;
            } else {
                PNCONT_IFLAG = true;
            }
        }
    }

    protected final void initPOADD_F1(String s) {
        if (!s.trim().isEmpty()) {
            POADD_F1 = Byte.parseByte(s);
        } else {
            POADD_F1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOADD_F1_I(String s) {
        if (!s.trim().isEmpty()) {
            POADD_F1_I = Byte.parseByte(s);
        } else {
            POADD_F1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPOADD_F1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                POADD_F1_IFLAG = false;
            } else {
                POADD_F1_IFLAG = true;
            }
        }
    }

    protected final void initPOADD_F2(String s) {
        if (!s.trim().isEmpty()) {
            POADD_F2 = Byte.parseByte(s);
        } else {
            POADD_F2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOADD_F2_I(String s) {
        if (!s.trim().isEmpty()) {
            POADD_F2_I = Byte.parseByte(s);
        } else {
            POADD_F2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPOADD_F2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                POADD_F2_IFLAG = false;
            } else {
                POADD_F2_IFLAG = true;
            }
        }
    }

    protected final void initPOADD_S1(String s) {
        if (!s.trim().isEmpty()) {
            POADD_S1 = Byte.parseByte(s);
        } else {
            POADD_S1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOADD_S1_I(String s) {
        if (!s.trim().isEmpty()) {
            POADD_S1_I = Byte.parseByte(s);
        } else {
            POADD_S1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPOADD_S1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                POADD_S1_IFLAG = false;
            } else {
                POADD_S1_IFLAG = true;
            }
        }
    }

    protected final void initPOADD_S2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POADD_S2 = false;
            } else {
                POADD_S2 = true;
            }
        }
    }

    protected final void initPOADD_S2_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POADD_S2_I = false;
            } else {
                POADD_S2_I = true;
            }
        }
    }

    protected final void initPOADD_S2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                POADD_S2_IFLAG = false;
            } else {
                POADD_S2_IFLAG = true;
            }
        }
    }

    protected final void initPOCNAM_F(String s) {
        if (!s.trim().isEmpty()) {
            POCNAM_F = Integer.parseInt(s);
        } else {
            POCNAM_F = Integer.MIN_VALUE;
        }
    }

    protected final void initPOCNAM_S(String s) {
        if (!s.trim().isEmpty()) {
            POCNAM_S = Short.parseShort(s);
        } else {
            POCNAM_S = Short.MIN_VALUE;
        }
    }

    protected final void initPOCNFG_F(String s) {
        if (!s.trim().isEmpty()) {
            POCNFG_F = Byte.parseByte(s);
        } else {
            POCNFG_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNFG_S(String s) {
        if (!s.trim().isEmpty()) {
            POCNFG_S = Byte.parseByte(s);
        } else {
            POCNFG_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNFR_F(String s) {
        if (!s.trim().isEmpty()) {
            POCNFR_F = Double.parseDouble(s);
        } else {
            POCNFR_F = Double.NaN;
        }
    }

    protected final void initPOCNFR_S(String s) {
        if (!s.trim().isEmpty()) {
            POCNFR_S = Double.parseDouble(s);
        } else {
            POCNFR_S = Double.NaN;
        }
    }

    protected final void initPOCNPR_F(String s) {
        if (!s.trim().isEmpty()) {
            POCNPR_F = Byte.parseByte(s);
        } else {
            POCNPR_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNPR_S(String s) {
        if (!s.trim().isEmpty()) {
            POCNPR_S = Byte.parseByte(s);
        } else {
            POCNPR_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCONH_F(String s) {
        if (!s.trim().isEmpty()) {
            POCONH_F = Byte.parseByte(s);
        } else {
            POCONH_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCONH_S(String s) {
        if (!s.trim().isEmpty()) {
            POCONH_S = Byte.parseByte(s);
        } else {
            POCONH_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCTYP_F(String s) {
        if (!s.trim().isEmpty()) {
            POCTYP_F = Byte.parseByte(s);
        } else {
            POCTYP_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCTYP_F_I(String s) {
        if (!s.trim().isEmpty()) {
            POCTYP_F_I = Byte.parseByte(s);
        } else {
            POCTYP_F_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCTYP_F_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                POCTYP_F_IFLAG = false;
            } else {
                POCTYP_F_IFLAG = true;
            }
        }
    }

    protected final void initPOCTYP_S(String s) {
        if (!s.trim().isEmpty()) {
            POCTYP_S = Byte.parseByte(s);
        } else {
            POCTYP_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCTYP_S_I(String s) {
        if (!s.trim().isEmpty()) {
            POCTYP_S_I = Byte.parseByte(s);
        } else {
            POCTYP_S_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCTYP_S_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                POCTYP_S_IFLAG = false;
            } else {
                POCTYP_S_IFLAG = true;
            }
        }
    }

    protected final void initPOEMAM_F(String s) {
        if (!s.trim().isEmpty()) {
            POEMAM_F = Integer.parseInt(s);
        } else {
            POEMAM_F = Integer.MIN_VALUE;
        }
    }

    protected final void initPOEMAM_S(String s) {
        if (!s.trim().isEmpty()) {
            POEMAM_S = Short.parseShort(s);
        } else {
            POEMAM_S = Short.MIN_VALUE;
        }
    }

    protected final void initPOEMFR_F(String s) {
        if (!s.trim().isEmpty()) {
            POEMFR_F = Double.parseDouble(s);
        } else {
            POEMFR_F = Double.NaN;
        }
    }

    protected final void initPOEMFR_S(String s) {
        if (!s.trim().isEmpty()) {
            POEMFR_S = Double.parseDouble(s);
        } else {
            POEMFR_S = Double.NaN;
        }
    }

    protected final void initPOEMPC_F(String s) {
        if (!s.trim().isEmpty()) {
            POEMPC_F = Byte.parseByte(s);
        } else {
            POEMPC_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPOEMPC_S(String s) {
        if (!s.trim().isEmpty()) {
            POEMPC_S = Byte.parseByte(s);
        } else {
            POEMPC_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPOEMPH_F(String s) {
        if (!s.trim().isEmpty()) {
            POEMPH_F = Byte.parseByte(s);
        } else {
            POEMPH_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPOEMPH_S(String s) {
        if (!s.trim().isEmpty()) {
            POEMPH_S = Byte.parseByte(s);
        } else {
            POEMPH_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPOEMPR_F(String s) {
        if (!s.trim().isEmpty()) {
            POEMPR_F = Byte.parseByte(s);
        } else {
            POEMPR_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPOEMPR_S(String s) {
        if (!s.trim().isEmpty()) {
            POEMPR_S = Byte.parseByte(s);
        } else {
            POEMPR_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPOJOIN_F(String s) {
        if (!s.trim().isEmpty()) {
            POJOIN_F = Short.parseShort(s);
        } else {
            POJOIN_F = Short.MIN_VALUE;
        }
    }

    protected final void initPOJOIN_S(String s) {
        if (!s.trim().isEmpty()) {
            POJOIN_S = Short.parseShort(s);
        } else {
            POJOIN_S = Short.MIN_VALUE;
        }
    }

    protected final void initPOLSYR_F(String s) {
        if (!s.trim().isEmpty()) {
            POLSYR_F = Byte.parseByte(s);
        } else {
            POLSYR_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPOLSYR_S(String s) {
        if (!s.trim().isEmpty()) {
            POLSYR_S = Byte.parseByte(s);
        } else {
            POLSYR_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPOMETH_F(String s) {
        if (!s.trim().isEmpty()) {
            POMETH_F = Byte.parseByte(s);
        } else {
            POMETH_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPOMETH_S(String s) {
        if (!s.trim().isEmpty()) {
            POMETH_S = Byte.parseByte(s);
        } else {
            POMETH_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPOPYCH_F(String s) {
        if (!s.trim().isEmpty()) {
            POPYCH_F = Byte.parseByte(s);
        } else {
            POPYCH_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPOPYCH_S(String s) {
        if (!s.trim().isEmpty()) {
            POPYCH_S = Byte.parseByte(s);
        } else {
            POPYCH_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPORAGET_F(String s) {
        if (!s.trim().isEmpty()) {
            PORAGET_F = Byte.parseByte(s);
        } else {
            PORAGET_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPORAGET_S(String s) {
        if (!s.trim().isEmpty()) {
            PORAGET_S = Byte.parseByte(s);
        } else {
            PORAGET_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPORAGE_F(String s) {
        if (!s.trim().isEmpty()) {
            PORAGE_F = Byte.parseByte(s);
        } else {
            PORAGE_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPORAGE_S(String s) {
        if (!s.trim().isEmpty()) {
            PORAGE_S = Byte.parseByte(s);
        } else {
            PORAGE_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPORATE_F(String s) {
        if (!s.trim().isEmpty()) {
            PORATE_F = Byte.parseByte(s);
        } else {
            PORATE_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPORATE_S(String s) {
        if (!s.trim().isEmpty()) {
            PORATE_S = Byte.parseByte(s);
        } else {
            PORATE_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPOYRAM_F(String s) {
        if (!s.trim().isEmpty()) {
            POYRAM_F = Short.parseShort(s);
        } else {
            POYRAM_F = Short.MIN_VALUE;
        }
    }

    protected final void initPOYRAM_S(String s) {
        if (!s.trim().isEmpty()) {
            POYRAM_S = Short.parseShort(s);
        } else {
            POYRAM_S = Short.MIN_VALUE;
        }
    }

    protected final void initPPACCU_F(String s) {
        if (!s.trim().isEmpty()) {
            PPACCU_F = Byte.parseByte(s);
        } else {
            PPACCU_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPPACCU_S(String s) {
        if (!s.trim().isEmpty()) {
            PPACCU_S = Byte.parseByte(s);
        } else {
            PPACCU_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPPDOCS_F(String s) {
        if (!s.trim().isEmpty()) {
            PPDOCS_F = Byte.parseByte(s);
        } else {
            PPDOCS_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPPDOCS_S(String s) {
        if (!s.trim().isEmpty()) {
            PPDOCS_S = Byte.parseByte(s);
        } else {
            PPDOCS_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEIRA_F(String s) {
        if (!s.trim().isEmpty()) {
            PPEIRA_F = Short.parseShort(s);
        } else {
            PPEIRA_F = Short.MIN_VALUE;
        }
    }

    protected final void initPPEIRA_S(String s) {
        if (!s.trim().isEmpty()) {
            PPEIRA_S = Short.parseShort(s);
        } else {
            PPEIRA_S = Short.MIN_VALUE;
        }
    }

    protected final void initPPEIRF_F(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPEIRF_F = false;
            } else {
                PPEIRF_F = true;
            }
        }
    }

    protected final void initPPEIRF_S(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -9) {
                PPEIRF_S = false;
            } else {
                PPEIRF_S = true;
            }
        }
    }

    protected final void initPPEIRH_F(String s) {
        if (!s.trim().isEmpty()) {
            PPEIRH_F = Byte.parseByte(s);
        } else {
            PPEIRH_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEIRH_S(String s) {
        if (!s.trim().isEmpty()) {
            PPEIRH_S = Byte.parseByte(s);
        } else {
            PPEIRH_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEMAM_F(String s) {
        if (!s.trim().isEmpty()) {
            PPEMAM_F = Short.parseShort(s);
        } else {
            PPEMAM_F = Short.MIN_VALUE;
        }
    }

    protected final void initPPEMAM_S(String s) {
        if (!s.trim().isEmpty()) {
            PPEMAM_S = Short.parseShort(s);
        } else {
            PPEMAM_S = Short.MIN_VALUE;
        }
    }

    protected final void initPPEMFR_F(String s) {
        if (!s.trim().isEmpty()) {
            PPEMFR_F = Double.parseDouble(s);
        } else {
            PPEMFR_F = Double.NaN;
        }
    }

    protected final void initPPEMFR_S(String s) {
        if (!s.trim().isEmpty()) {
            PPEMFR_S = Double.parseDouble(s);
        } else {
            PPEMFR_S = Double.NaN;
        }
    }

    protected final void initPPEMPH_F(String s) {
        if (!s.trim().isEmpty()) {
            PPEMPH_F = Byte.parseByte(s);
        } else {
            PPEMPH_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEMPH_S(String s) {
        if (!s.trim().isEmpty()) {
            PPEMPH_S = Byte.parseByte(s);
        } else {
            PPEMPH_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEMPR_F(String s) {
        if (!s.trim().isEmpty()) {
            PPEMPR_F = Byte.parseByte(s);
        } else {
            PPEMPR_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEMPR_S(String s) {
        if (!s.trim().isEmpty()) {
            PPEMPR_S = Byte.parseByte(s);
        } else {
            PPEMPR_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEMP_F(String s) {
        if (!s.trim().isEmpty()) {
            PPEMP_F = Byte.parseByte(s);
        } else {
            PPEMP_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEMP_S(String s) {
        if (!s.trim().isEmpty()) {
            PPEMP_S = Byte.parseByte(s);
        } else {
            PPEMP_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEVRG_F(String s) {
        if (!s.trim().isEmpty()) {
            PPEVRG_F = Byte.parseByte(s);
        } else {
            PPEVRG_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPPEVRG_S(String s) {
        if (!s.trim().isEmpty()) {
            PPEVRG_S = Byte.parseByte(s);
        } else {
            PPEVRG_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPPIRRA_F(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRA_F = Integer.parseInt(s);
        } else {
            PPIRRA_F = Integer.MIN_VALUE;
        }
    }

    protected final void initPPIRRA_S(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRA_S = Integer.parseInt(s);
        } else {
            PPIRRA_S = Integer.MIN_VALUE;
        }
    }

    protected final void initPPIRRH_F(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRH_F = Byte.parseByte(s);
        } else {
            PPIRRH_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPPIRRH_S(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRH_S = Byte.parseByte(s);
        } else {
            PPIRRH_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPPIRRN_F(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRN_F = Byte.parseByte(s);
        } else {
            PPIRRN_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPPIRRN_S(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRN_S = Byte.parseByte(s);
        } else {
            PPIRRN_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPPIRRY_F(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRY_F = Short.parseShort(s);
        } else {
            PPIRRY_F = Short.MIN_VALUE;
        }
    }

    protected final void initPPIRRY_S(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRY_S = Short.parseShort(s);
        } else {
            PPIRRY_S = Short.MIN_VALUE;
        }
    }

    protected final void initPPLASY_F(String s) {
        if (!s.trim().isEmpty()) {
            PPLASY_F = Short.parseShort(s);
        } else {
            PPLASY_F = Short.MIN_VALUE;
        }
    }

    protected final void initPPLASY_S(String s) {
        if (!s.trim().isEmpty()) {
            PPLASY_S = Short.parseShort(s);
        } else {
            PPLASY_S = Short.MIN_VALUE;
        }
    }

    protected final void initPPLSTA_F(String s) {
        if (!s.trim().isEmpty()) {
            PPLSTA_F = Integer.parseInt(s);
        } else {
            PPLSTA_F = Integer.MIN_VALUE;
        }
    }

    protected final void initPPLSTA_S(String s) {
        if (!s.trim().isEmpty()) {
            PPLSTA_S = Integer.parseInt(s);
        } else {
            PPLSTA_S = Integer.MIN_VALUE;
        }
    }

    protected final void initPPLSTP_F(String s) {
        if (!s.trim().isEmpty()) {
            PPLSTP_F = Byte.parseByte(s);
        } else {
            PPLSTP_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPPLSTP_S(String s) {
        if (!s.trim().isEmpty()) {
            PPLSTP_S = Byte.parseByte(s);
        } else {
            PPLSTP_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPPNINS_F(String s) {
        if (!s.trim().isEmpty()) {
            PPNINS_F = Byte.parseByte(s);
        } else {
            PPNINS_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPPNINS_S(String s) {
        if (!s.trim().isEmpty()) {
            PPNINS_S = Byte.parseByte(s);
        } else {
            PPNINS_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPPORG_F(String s) {
        if (!s.trim().isEmpty()) {
            PPORG_F = Byte.parseByte(s);
        } else {
            PPORG_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPPORG_S(String s) {
        if (!s.trim().isEmpty()) {
            PPORG_S = Byte.parseByte(s);
        } else {
            PPORG_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPPPAY_F(String s) {
        if (!s.trim().isEmpty()) {
            PPPAY_F = Byte.parseByte(s);
        } else {
            PPPAY_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPPPAY_S(String s) {
        if (!s.trim().isEmpty()) {
            PPPAY_S = Byte.parseByte(s);
        } else {
            PPPAY_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPPRGAM_F(String s) {
        if (!s.trim().isEmpty()) {
            PPRGAM_F = Integer.parseInt(s);
        } else {
            PPRGAM_F = Integer.MIN_VALUE;
        }
    }

    protected final void initPPRGAM_S(String s) {
        if (!s.trim().isEmpty()) {
            PPRGAM_S = Short.parseShort(s);
        } else {
            PPRGAM_S = Short.MIN_VALUE;
        }
    }

    protected final void initPPRGFG_F(String s) {
        if (!s.trim().isEmpty()) {
            PPRGFG_F = Byte.parseByte(s);
        } else {
            PPRGFG_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPPRGFG_S(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPRGFG_S = false;
            } else {
                PPRGFG_S = true;
            }
        }
    }

    protected final void initPPRGFR_F(String s) {
        if (!s.trim().isEmpty()) {
            PPRGFR_F = Double.parseDouble(s);
        } else {
            PPRGFR_F = Double.NaN;
        }
    }

    protected final void initPPRGFR_S(String s) {
        if (!s.trim().isEmpty()) {
            PPRGFR_S = Double.parseDouble(s);
        } else {
            PPRGFR_S = Double.NaN;
        }
    }

    protected final void initPPRGH_F(String s) {
        if (!s.trim().isEmpty()) {
            PPRGH_F = Byte.parseByte(s);
        } else {
            PPRGH_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPPRGH_S(String s) {
        if (!s.trim().isEmpty()) {
            PPRGH_S = Byte.parseByte(s);
        } else {
            PPRGH_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPPRGPE_F(String s) {
        if (!s.trim().isEmpty()) {
            PPRGPE_F = Byte.parseByte(s);
        } else {
            PPRGPE_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPPRGPE_S(String s) {
        if (!s.trim().isEmpty()) {
            PPRGPE_S = Byte.parseByte(s);
        } else {
            PPRGPE_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPPSTMM_F(String s) {
        if (!s.trim().isEmpty()) {
            PPSTMM_F = Byte.parseByte(s);
        } else {
            PPSTMM_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPPSTMM_S(String s) {
        if (!s.trim().isEmpty()) {
            PPSTMM_S = Byte.parseByte(s);
        } else {
            PPSTMM_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPPSTMY_F(String s) {
        if (!s.trim().isEmpty()) {
            PPSTMY_F = Short.parseShort(s);
        } else {
            PPSTMY_F = Short.MIN_VALUE;
        }
    }

    protected final void initPPSTMY_S(String s) {
        if (!s.trim().isEmpty()) {
            PPSTMY_S = Short.parseShort(s);
        } else {
            PPSTMY_S = Short.MIN_VALUE;
        }
    }

    protected final void initPPTYP_F(String s) {
        if (!s.trim().isEmpty()) {
            PPTYP_F = Byte.parseByte(s);
        } else {
            PPTYP_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPPTYP_S(String s) {
        if (!s.trim().isEmpty()) {
            PPTYP_S = Byte.parseByte(s);
        } else {
            PPTYP_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPPVALB_F(String s) {
        if (!s.trim().isEmpty()) {
            PPVALB_F = Byte.parseByte(s);
        } else {
            PPVALB_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPPVALB_F_I(String s) {
        if (!s.trim().isEmpty()) {
            PPVALB_F_I = Byte.parseByte(s);
        } else {
            PPVALB_F_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPPVALB_S(String s) {
        if (!s.trim().isEmpty()) {
            PPVALB_S = Byte.parseByte(s);
        } else {
            PPVALB_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPPVALB_S_I(String s) {
        if (!s.trim().isEmpty()) {
            PPVALB_S_I = Byte.parseByte(s);
        } else {
            PPVALB_S_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPPVAL_F(String s) {
        if (!s.trim().isEmpty()) {
            PPVAL_F = Integer.parseInt(s);
        } else {
            PPVAL_F = Integer.MIN_VALUE;
        }
    }

    protected final void initPPVAL_F_I(String s) {
        if (!s.trim().isEmpty()) {
            PPVAL_F_I = Double.parseDouble(s);
        } else {
            PPVAL_F_I = Double.NaN;
        }
    }

    protected final void initPPVAL_F_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PPVAL_F_IFLAG = false;
            } else {
                PPVAL_F_IFLAG = true;
            }
        }
    }

    protected final void initPPVAL_S(String s) {
        if (!s.trim().isEmpty()) {
            PPVAL_S = Integer.parseInt(s);
        } else {
            PPVAL_S = Integer.MIN_VALUE;
        }
    }

    protected final void initPPVAL_S_I(String s) {
        if (!s.trim().isEmpty()) {
            PPVAL_S_I = Double.parseDouble(s);
        } else {
            PPVAL_S_I = Double.NaN;
        }
    }

    protected final void initPPVAL_S_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PPVAL_S_IFLAG = false;
            } else {
                PPVAL_S_IFLAG = true;
            }
        }
    }

    protected final void initPPYRST_F(String s) {
        if (!s.trim().isEmpty()) {
            PPYRST_F = Short.parseShort(s);
        } else {
            PPYRST_F = Short.MIN_VALUE;
        }
    }

    protected final void initPPYRST_S(String s) {
        if (!s.trim().isEmpty()) {
            PPYRST_S = Short.parseShort(s);
        } else {
            PPYRST_S = Short.MIN_VALUE;
        }
    }

    protected final void initPPYSTP_1(String s) {
        if (!s.trim().isEmpty()) {
            PPYSTP_1 = Byte.parseByte(s);
        } else {
            PPYSTP_1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPYSTP_2(String s) {
        if (!s.trim().isEmpty()) {
            PPYSTP_2 = Byte.parseByte(s);
        } else {
            PPYSTP_2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPYSTP_3(String s) {
        if (!s.trim().isEmpty()) {
            PPYSTP_3 = Byte.parseByte(s);
        } else {
            PPYSTP_3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPYSTP_8(String s) {
        if (!s.trim().isEmpty()) {
            PPYSTP_8 = Byte.parseByte(s);
        } else {
            PPYSTP_8 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPYSTP_9(String s) {
        if (!s.trim().isEmpty()) {
            PPYSTP_9 = Byte.parseByte(s);
        } else {
            PPYSTP_9 = Byte.MIN_VALUE;
        }
    }

    protected final void initREGLRPY3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                REGLRPY3 = false;
            } else {
                REGLRPY3 = true;
            }
        }
    }

    protected final void initSEAML_I(String s) {
        if (!s.trim().isEmpty()) {
            SEAML_I = Short.parseShort(s);
        } else {
            SEAML_I = Short.MIN_VALUE;
        }
    }

    protected final void initSEAML_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                SEAML_IFLAG = false;
            } else {
                SEAML_IFLAG = true;
            }
        }
    }

    protected final void initSEINT(String s) {
        if (!s.trim().isEmpty()) {
            SEINT = Byte.parseByte(s);
        } else {
            SEINT = Byte.MIN_VALUE;
        }
    }

    protected final void initSEPEL_I(String s) {
        if (!s.trim().isEmpty()) {
            SEPEL_I = Byte.parseByte(s);
        } else {
            SEPEL_I = Byte.MIN_VALUE;
        }
    }

    protected final void initSEPEL_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                SEPEL_IFLAG = false;
            } else {
                SEPEL_IFLAG = true;
            }
        }
    }

    protected final void initSEPER_I(String s) {
        if (!s.trim().isEmpty()) {
            SEPER_I = Byte.parseByte(s);
        } else {
            SEPER_I = Byte.MIN_VALUE;
        }
    }

    protected final void initSEPER_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                SEPER_IFLAG = false;
            } else {
                SEPER_IFLAG = true;
            }
        }
    }

    protected final void initSJEMP1_I(String s) {
        if (!s.trim().isEmpty()) {
            SJEMP1_I = Byte.parseByte(s);
        } else {
            SJEMP1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initSJEMP1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            SJEMP1_IFLAG = Byte.parseByte(s);
        } else {
            SJEMP1_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initSJEMP2_I(String s) {
        if (!s.trim().isEmpty()) {
            SJEMP2_I = Byte.parseByte(s);
        } else {
            SJEMP2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initSJEMP2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            SJEMP2_IFLAG = Byte.parseByte(s);
        } else {
            SJEMP2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initSJOB2_I(String s) {
        if (!s.trim().isEmpty()) {
            SJOB2_I = Byte.parseByte(s);
        } else {
            SJOB2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initSJOB2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            SJOB2_IFLAG = Byte.parseByte(s);
        } else {
            SJOB2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initSLNOS4(String s) {
        if (!s.trim().isEmpty()) {
            SLNOS4 = Short.parseShort(s);
        } else {
            SLNOS4 = Short.MIN_VALUE;
        }
    }

    protected final void initSLNOS5(String s) {
        if (!s.trim().isEmpty()) {
            SLNOS5 = Short.parseShort(s);
        } else {
            SLNOS5 = Short.MIN_VALUE;
        }
    }

    protected final void initXS_WGT(String s) {
        if (!s.trim().isEmpty()) {
            XS_WGT = Double.parseDouble(s);
        } else {
            XS_WGT = Double.NaN;
        }
    }

    public double getACCFRAC_F() {
        return ACCFRAC_F;
    }

    public double getACCFRAC_S() {
        return ACCFRAC_S;
    }

    public double getASAFT_F() {
        return ASAFT_F;
    }

    public double getASAFT_S() {
        return ASAFT_S;
    }

    public byte getBPRFLOS2() {
        return BPRFLOS2;
    }

    public byte getBPRFLOS3() {
        return BPRFLOS3;
    }

    public byte getBSELLYB() {
        return BSELLYB;
    }

    public boolean getBVAL2FLAG() {
        return BVAL2FLAG;
    }

    public int getBVAL2_I() {
        return BVAL2_I;
    }

    public boolean getBVALFLAG() {
        return BVALFLAG;
    }

    public int getBVAL_I() {
        return BVAL_I;
    }

    public byte getDBURDW2() {
        return DBURDW2;
    }

    public byte getDBURD___W1() {
        return DBURD___W1;
    }

    public byte getDC12M() {
        return DC12M;
    }

    public short getDCOINV3_I() {
        return DCOINV3_I;
    }

    public byte getDCOINV3_IFLAG() {
        return DCOINV3_IFLAG;
    }

    public byte getDS12M() {
        return DS12M;
    }

    public byte getDS12M_I() {
        return DS12M_I;
    }

    public boolean getDS12M_IFLAG() {
        return DS12M_IFLAG;
    }

    public byte getDVAGEW1BAND() {
        return DVAGEW1BAND;
    }

    public int getDVBDEBT() {
        return DVBDEBT;
    }

    public int getDVBVAL() {
        return DVBVAL;
    }

    public double getDVDBOPENT_F() {
        return DVDBOPENT_F;
    }

    public double getDVDBOPENT_S() {
        return DVDBOPENT_S;
    }

    public int getDVGRSJOB2() {
        return DVGRSJOB2;
    }

    public int getDVGRSSEJOB() {
        return DVGRSSEJOB;
    }

    public int getDVHDEBT() {
        return DVHDEBT;
    }

    public int getDVHVAL() {
        return DVHVAL;
    }

    public int getDVLOSDEBT() {
        return DVLOSDEBT;
    }

    public int getDVLOSV() {
        return DVLOSV;
    }

    public int getDVLUKDEBT() {
        return DVLUKDEBT;
    }

    public int getDVLUKV() {
        return DVLUKV;
    }

    public int getDVNETJOB2() {
        return DVNETJOB2;
    }

    public int getDVOPDEBT() {
        return DVOPDEBT;
    }

    public int getDVOPVAL() {
        return DVOPVAL;
    }

    public double getDVPENINC_F() {
        return DVPENINC_F;
    }

    public double getDVPENINC_S() {
        return DVPENINC_S;
    }

    public int getDVPEPV() {
        return DVPEPV;
    }

    public int getDVSEAMT() {
        return DVSEAMT;
    }

    public byte getFCOSHAV() {
        return FCOSHAV;
    }

    public byte getFCOSVLB() {
        return FCOSVLB;
    }

    public byte getFCOSVLB_I() {
        return FCOSVLB_I;
    }

    public byte getFCOSVLB_IFLAG() {
        return FCOSVLB_IFLAG;
    }

    public byte getFINVTY11_I() {
        return FINVTY11_I;
    }

    public boolean getFINVTY11_IFLAG() {
        return FINVTY11_IFLAG;
    }

    public int getFPEPV() {
        return FPEPV;
    }

    public byte getFPEPVB() {
        return FPEPVB;
    }

    public int getFPEPV_I() {
        return FPEPV_I;
    }

    public byte getFPEPV_IFLAG() {
        return FPEPV_IFLAG;
    }

    public byte getFSHMUT() {
        return FSHMUT;
    }

    public byte getFSHPRI() {
        return FSHPRI;
    }

    public byte getFSOSVLB_I() {
        return FSOSVLB_I;
    }

    public byte getFSOSVLB_IFLAG() {
        return FSOSVLB_IFLAG;
    }

    public double getHPYLFT2_I() {
        return HPYLFT2_I;
    }

    public double getHPYLFT3_I() {
        return HPYLFT3_I;
    }

    public double getHPYLFT4_I() {
        return HPYLFT4_I;
    }

    public double getHPYLFT5_I() {
        return HPYLFT5_I;
    }

    public double getHPYLFT_I() {
        return HPYLFT_I;
    }

    public int getIEVAL() {
        return IEVAL;
    }

    public int getIEVAL2() {
        return IEVAL2;
    }

    public int getIEVAL3() {
        return IEVAL3;
    }

    public byte getIEVALB() {
        return IEVALB;
    }

    public byte getIEVALB2() {
        return IEVALB2;
    }

    public byte getIEVALB3() {
        return IEVALB3;
    }

    public short getIEYR() {
        return IEYR;
    }

    public short getIEYR2() {
        return IEYR2;
    }

    public short getIEYR3() {
        return IEYR3;
    }

    public byte getIFUTVIB() {
        return IFUTVIB;
    }

    public byte getIGFUSE1() {
        return IGFUSE1;
    }

    public byte getIGFUSE2() {
        return IGFUSE2;
    }

    public byte getIGFUSE3() {
        return IGFUSE3;
    }

    public boolean getIGFUSE4() {
        return IGFUSE4;
    }

    public boolean getIGFUSE5() {
        return IGFUSE5;
    }

    public byte getIHATTI() {
        return IHATTI;
    }

    public byte getIHEV() {
        return IHEV;
    }

    public byte getIHEVNO() {
        return IHEVNO;
    }

    public byte getIHFUT() {
        return IHFUT;
    }

    public byte getIHINTRO() {
        return IHINTRO;
    }

    public boolean getISPART() {
        return ISPART;
    }

    public byte getISWITCH() {
        return ISWITCH;
    }

    public byte getIWILL() {
        return IWILL;
    }

    public boolean getLMATNUM() {
        return LMATNUM;
    }

    public short getOBSPV() {
        return OBSPV;
    }

    public byte getOBUY1() {
        return OBUY1;
    }

    public byte getOCREDI1() {
        return OCREDI1;
    }

    public byte getOEXPIN01() {
        return OEXPIN01;
    }

    public byte getOEXPIN02() {
        return OEXPIN02;
    }

    public byte getOEXPIN03() {
        return OEXPIN03;
    }

    public byte getOEXPIN04() {
        return OEXPIN04;
    }

    public byte getOEXPIN05() {
        return OEXPIN05;
    }

    public byte getOEXPIN06() {
        return OEXPIN06;
    }

    public byte getOEXPIN07() {
        return OEXPIN07;
    }

    public byte getOEXPIN08() {
        return OEXPIN08;
    }

    public byte getOEXPIN09() {
        return OEXPIN09;
    }

    public byte getOEXPIN10() {
        return OEXPIN10;
    }

    public byte getOEXPIN11() {
        return OEXPIN11;
    }

    public boolean getOEXPIN12() {
        return OEXPIN12;
    }

    public byte getOINCA() {
        return OINCA;
    }

    public byte getOLSAVE() {
        return OLSAVE;
    }

    public byte getOMATH() {
        return OMATH;
    }

    public byte getONOSAV01() {
        return ONOSAV01;
    }

    public byte getONOSAV02() {
        return ONOSAV02;
    }

    public byte getONOSAV03() {
        return ONOSAV03;
    }

    public byte getONOSAV04() {
        return ONOSAV04;
    }

    public byte getONOSAV05() {
        return ONOSAV05;
    }

    public boolean getONOSAV06() {
        return ONOSAV06;
    }

    public byte getOPROFF() {
        return OPROFF;
    }

    public byte getOPROFF0() {
        return OPROFF0;
    }

    public boolean getOPROFF1() {
        return OPROFF1;
    }

    public boolean getOPROFF2() {
        return OPROFF2;
    }

    public boolean getOPROFF3() {
        return OPROFF3;
    }

    public byte getOPROFFW01() {
        return OPROFFW01;
    }

    public byte getOPROFFW02() {
        return OPROFFW02;
    }

    public byte getOPROFFW03() {
        return OPROFFW03;
    }

    public byte getOPROFFW04() {
        return OPROFFW04;
    }

    public byte getOPROFFW05() {
        return OPROFFW05;
    }

    public byte getOPROFFW06() {
        return OPROFFW06;
    }

    public byte getOPROFFW07() {
        return OPROFFW07;
    }

    public byte getOPROFFW08() {
        return OPROFFW08;
    }

    public byte getOPROFFW09() {
        return OPROFFW09;
    }

    public byte getOPROPE() {
        return OPROPE;
    }

    public byte getOSAVED() {
        return OSAVED;
    }

    public byte getOSAVER1() {
        return OSAVER1;
    }

    public byte getOSAVG() {
        return OSAVG;
    }

    public byte getOSECUR() {
        return OSECUR;
    }

    public byte getOSHOP() {
        return OSHOP;
    }

    public byte getOSOURCE1() {
        return OSOURCE1;
    }

    public byte getOSOURCE2() {
        return OSOURCE2;
    }

    public byte getOSOURCE3() {
        return OSOURCE3;
    }

    public byte getOSOURCE4() {
        return OSOURCE4;
    }

    public byte getOSOURCE5() {
        return OSOURCE5;
    }

    public byte getOSOURCE6() {
        return OSOURCE6;
    }

    public byte getOSTAND() {
        return OSTAND;
    }

    public byte getOSTATE() {
        return OSTATE;
    }

    public byte getOWHYSA01() {
        return OWHYSA01;
    }

    public byte getOWHYSA02() {
        return OWHYSA02;
    }

    public byte getOWHYSA03() {
        return OWHYSA03;
    }

    public byte getOWHYSA04() {
        return OWHYSA04;
    }

    public byte getOWHYSA05() {
        return OWHYSA05;
    }

    public byte getOWHYSA06() {
        return OWHYSA06;
    }

    public byte getOWHYSA07() {
        return OWHYSA07;
    }

    public byte getOWHYSA08() {
        return OWHYSA08;
    }

    public byte getOWHYSA09() {
        return OWHYSA09;
    }

    public boolean getOWHYSA10() {
        return OWHYSA10;
    }

    public byte getPADDYR_F() {
        return PADDYR_F;
    }

    public byte getPASTMM_F() {
        return PASTMM_F;
    }

    public short getPASTMY_F() {
        return PASTMY_F;
    }

    public int getPAVCAM_F() {
        return PAVCAM_F;
    }

    public short getPAVCAM_S() {
        return PAVCAM_S;
    }

    public double getPAVCFR_F() {
        return PAVCFR_F;
    }

    public byte getPAVCFR_S() {
        return PAVCFR_S;
    }

    public byte getPAVCH_F() {
        return PAVCH_F;
    }

    public byte getPAVCH_S() {
        return PAVCH_S;
    }

    public byte getPAVCIN_F() {
        return PAVCIN_F;
    }

    public boolean getPAVCIN_S() {
        return PAVCIN_S;
    }

    public byte getPAVCPR_F() {
        return PAVCPR_F;
    }

    public byte getPAVCPR_S() {
        return PAVCPR_S;
    }

    public int getPAVCUV_F() {
        return PAVCUV_F;
    }

    public double getPAVCUV_F_I() {
        return PAVCUV_F_I;
    }

    public boolean getPAVCUV_F_IFLAG() {
        return PAVCUV_F_IFLAG;
    }

    public short getPAVCUV_S() {
        return PAVCUV_S;
    }

    public short getPAVCUV_S_I() {
        return PAVCUV_S_I;
    }

    public boolean getPAVCUV_S_IFLAG() {
        return PAVCUV_S_IFLAG;
    }

    public byte getPAVCVB_F() {
        return PAVCVB_F;
    }

    public byte getPAVCVB_S() {
        return PAVCVB_S;
    }

    public byte getPAVDOC_F() {
        return PAVDOC_F;
    }

    public boolean getPAVDOC_S() {
        return PAVDOC_S;
    }

    public byte getPAYPER_I() {
        return PAYPER_I;
    }

    public byte getPAYPER_IFLAG() {
        return PAYPER_IFLAG;
    }

    public byte getPBDOCS_F() {
        return PBDOCS_F;
    }

    public byte getPBDOCS_S() {
        return PBDOCS_S;
    }

    public byte getPBFRAC_F() {
        return PBFRAC_F;
    }

    public byte getPBFRAC_F_I() {
        return PBFRAC_F_I;
    }

    public boolean getPBFRAC_F_IFLAG() {
        return PBFRAC_F_IFLAG;
    }

    public byte getPBFRAC_S() {
        return PBFRAC_S;
    }

    public byte getPBFRAC_S_I() {
        return PBFRAC_S_I;
    }

    public boolean getPBFRAC_S_IFLAG() {
        return PBFRAC_S_IFLAG;
    }

    public int getPBINCA_F() {
        return PBINCA_F;
    }

    public int getPBINCA_S() {
        return PBINCA_S;
    }

    public double getPBINCF_F() {
        return PBINCF_F;
    }

    public byte getPBINCF_S() {
        return PBINCF_S;
    }

    public byte getPBINCH_F() {
        return PBINCH_F;
    }

    public byte getPBINCH_S() {
        return PBINCH_S;
    }

    public byte getPBLMVB_F() {
        return PBLMVB_F;
    }

    public byte getPBLMVB_S() {
        return PBLMVB_S;
    }

    public int getPBLUMV_F() {
        return PBLUMV_F;
    }

    public double getPBLUMV_F_I() {
        return PBLUMV_F_I;
    }

    public boolean getPBLUMV_F_IFLAG() {
        return PBLUMV_F_IFLAG;
    }

    public int getPBLUMV_S() {
        return PBLUMV_S;
    }

    public double getPBLUMV_S_I() {
        return PBLUMV_S_I;
    }

    public boolean getPBLUMV_S_IFLAG() {
        return PBLUMV_S_IFLAG;
    }

    public byte getPBQUAL_F() {
        return PBQUAL_F;
    }

    public byte getPBQUAL_F_I() {
        return PBQUAL_F_I;
    }

    public boolean getPBQUAL_F_IFLAG() {
        return PBQUAL_F_IFLAG;
    }

    public byte getPBQUAL_S() {
        return PBQUAL_S;
    }

    public byte getPBQUAL_S_I() {
        return PBQUAL_S_I;
    }

    public boolean getPBQUAL_S_IFLAG() {
        return PBQUAL_S_IFLAG;
    }

    public byte getPBSTMM_F() {
        return PBSTMM_F;
    }

    public byte getPBSTMM_S() {
        return PBSTMM_S;
    }

    public short getPBSTMY_F() {
        return PBSTMY_F;
    }

    public short getPBSTMY_S() {
        return PBSTMY_S;
    }

    public byte getPCDOCS_F() {
        return PCDOCS_F;
    }

    public byte getPCDOCS_S() {
        return PCDOCS_S;
    }

    public byte getPCSTMM_F() {
        return PCSTMM_F;
    }

    public byte getPCSTMM_S() {
        return PCSTMM_S;
    }

    public short getPCSTMY_F() {
        return PCSTMY_F;
    }

    public short getPCSTMY_S() {
        return PCSTMY_S;
    }

    public byte getPDBCAL_F() {
        return PDBCAL_F;
    }

    public byte getPDBCAL_S() {
        return PDBCAL_S;
    }

    public int getPDCVAL_F() {
        return PDCVAL_F;
    }

    public double getPDCVAL_F_I() {
        return PDCVAL_F_I;
    }

    public boolean getPDCVAL_F_IFLAG() {
        return PDCVAL_F_IFLAG;
    }

    public int getPDCVAL_S() {
        return PDCVAL_S;
    }

    public double getPDCVAL_S_I() {
        return PDCVAL_S_I;
    }

    public boolean getPDCVAL_S_IFLAG() {
        return PDCVAL_S_IFLAG;
    }

    public byte getPDCVB_F() {
        return PDCVB_F;
    }

    public byte getPDCVB_S() {
        return PDCVB_S;
    }

    public byte getPEANYO_I() {
        return PEANYO_I;
    }

    public boolean getPEANYO_IFLAG() {
        return PEANYO_IFLAG;
    }

    public byte getPECONT_I() {
        return PECONT_I;
    }

    public boolean getPECONT_IFLAG() {
        return PECONT_IFLAG;
    }

    public boolean getPEP() {
        return PEP;
    }

    public short getPFBEG_F() {
        return PFBEG_F;
    }

    public short getPFBEG_S() {
        return PFBEG_S;
    }

    public short getPFBEG_T() {
        return PFBEG_T;
    }

    public int getPFCURV_F() {
        return PFCURV_F;
    }

    public double getPFCURV_F_I() {
        return PFCURV_F_I;
    }

    public boolean getPFCURV_F_IFLAG() {
        return PFCURV_F_IFLAG;
    }

    public int getPFCURV_S() {
        return PFCURV_S;
    }

    public double getPFCURV_S_I() {
        return PFCURV_S_I;
    }

    public boolean getPFCURV_S_IFLAG() {
        return PFCURV_S_IFLAG;
    }

    public int getPFCURV_T() {
        return PFCURV_T;
    }

    public double getPFCURV_T_I() {
        return PFCURV_T_I;
    }

    public boolean getPFCURV_T_IFLAG() {
        return PFCURV_T_IFLAG;
    }

    public byte getPFCUVB_F() {
        return PFCUVB_F;
    }

    public byte getPFCUVB_S() {
        return PFCUVB_S;
    }

    public byte getPFCUVB_T() {
        return PFCUVB_T;
    }

    public byte getPFDDVB_F() {
        return PFDDVB_F;
    }

    public byte getPFDDVB_S() {
        return PFDDVB_S;
    }

    public byte getPFDDVB_T() {
        return PFDDVB_T;
    }

    public int getPFDDV_F() {
        return PFDDV_F;
    }

    public int getPFDDV_F_I() {
        return PFDDV_F_I;
    }

    public boolean getPFDDV_F_IFLAG() {
        return PFDDV_F_IFLAG;
    }

    public int getPFDDV_S() {
        return PFDDV_S;
    }

    public int getPFDDV_S_I() {
        return PFDDV_S_I;
    }

    public boolean getPFDDV_S_IFLAG() {
        return PFDDV_S_IFLAG;
    }

    public int getPFDDV_T() {
        return PFDDV_T;
    }

    public int getPFDDV_T_I() {
        return PFDDV_T_I;
    }

    public boolean getPFDDV_T_IFLAG() {
        return PFDDV_T_IFLAG;
    }

    public byte getPFDOCS_F() {
        return PFDOCS_F;
    }

    public byte getPFDOCS_S() {
        return PFDOCS_S;
    }

    public byte getPFDOCS_T() {
        return PFDOCS_T;
    }

    public byte getPFDRAW_F() {
        return PFDRAW_F;
    }

    public byte getPFDRAW_F_I() {
        return PFDRAW_F_I;
    }

    public boolean getPFDRAW_F_IFLAG() {
        return PFDRAW_F_IFLAG;
    }

    public byte getPFDRAW_S() {
        return PFDRAW_S;
    }

    public byte getPFDRAW_S_I() {
        return PFDRAW_S_I;
    }

    public boolean getPFDRAW_S_IFLAG() {
        return PFDRAW_S_IFLAG;
    }

    public byte getPFDRAW_T() {
        return PFDRAW_T;
    }

    public byte getPFDRAW_T_I() {
        return PFDRAW_T_I;
    }

    public boolean getPFDRAW_T_IFLAG() {
        return PFDRAW_T_IFLAG;
    }

    public short getPFEND_F() {
        return PFEND_F;
    }

    public short getPFEND_S() {
        return PFEND_S;
    }

    public short getPFEND_T() {
        return PFEND_T;
    }

    public int getPFINCA_F() {
        return PFINCA_F;
    }

    public double getPFINCA_F_I() {
        return PFINCA_F_I;
    }

    public boolean getPFINCA_F_IFLAG() {
        return PFINCA_F_IFLAG;
    }

    public int getPFINCA_S() {
        return PFINCA_S;
    }

    public double getPFINCA_S_I() {
        return PFINCA_S_I;
    }

    public boolean getPFINCA_S_IFLAG() {
        return PFINCA_S_IFLAG;
    }

    public short getPFINCA_T() {
        return PFINCA_T;
    }

    public double getPFINCA_T_I() {
        return PFINCA_T_I;
    }

    public boolean getPFINCA_T_IFLAG() {
        return PFINCA_T_IFLAG;
    }

    public byte getPFINCP_F() {
        return PFINCP_F;
    }

    public byte getPFINCP_F_I() {
        return PFINCP_F_I;
    }

    public boolean getPFINCP_F_IFLAG() {
        return PFINCP_F_IFLAG;
    }

    public byte getPFINCP_S() {
        return PFINCP_S;
    }

    public byte getPFINCP_S_I() {
        return PFINCP_S_I;
    }

    public boolean getPFINCP_S_IFLAG() {
        return PFINCP_S_IFLAG;
    }

    public byte getPFINCP_T() {
        return PFINCP_T;
    }

    public byte getPFINCP_T_I() {
        return PFINCP_T_I;
    }

    public boolean getPFINCP_T_IFLAG() {
        return PFINCP_T_IFLAG;
    }

    public int getPFLUMV_F() {
        return PFLUMV_F;
    }

    public double getPFLUMV_F_I() {
        return PFLUMV_F_I;
    }

    public boolean getPFLUMV_F_IFLAG() {
        return PFLUMV_F_IFLAG;
    }

    public int getPFLUMV_S() {
        return PFLUMV_S;
    }

    public double getPFLUMV_S_I() {
        return PFLUMV_S_I;
    }

    public boolean getPFLUMV_S_IFLAG() {
        return PFLUMV_S_IFLAG;
    }

    public int getPFLUMV_T() {
        return PFLUMV_T;
    }

    public int getPFLUMV_T_I() {
        return PFLUMV_T_I;
    }

    public boolean getPFLUMV_T_IFLAG() {
        return PFLUMV_T_IFLAG;
    }

    public byte getPFLUVB_F() {
        return PFLUVB_F;
    }

    public byte getPFLUVB_S() {
        return PFLUVB_S;
    }

    public byte getPFLUVB_T() {
        return PFLUVB_T;
    }

    public byte getPFOCTY_F() {
        return PFOCTY_F;
    }

    public byte getPFOCTY_F_I() {
        return PFOCTY_F_I;
    }

    public boolean getPFOCTY_F_IFLAG() {
        return PFOCTY_F_IFLAG;
    }

    public byte getPFOCTY_S() {
        return PFOCTY_S;
    }

    public byte getPFOCTY_S_I() {
        return PFOCTY_S_I;
    }

    public boolean getPFOCTY_S_IFLAG() {
        return PFOCTY_S_IFLAG;
    }

    public byte getPFOCTY_T() {
        return PFOCTY_T;
    }

    public byte getPFOCTY_T_I() {
        return PFOCTY_T_I;
    }

    public boolean getPFOCTY_T_IFLAG() {
        return PFOCTY_T_IFLAG;
    }

    public byte getPFREC_F() {
        return PFREC_F;
    }

    public byte getPFREC_F_I() {
        return PFREC_F_I;
    }

    public boolean getPFREC_F_IFLAG() {
        return PFREC_F_IFLAG;
    }

    public byte getPFREC_S() {
        return PFREC_S;
    }

    public byte getPFREC_S_I() {
        return PFREC_S_I;
    }

    public boolean getPFREC_S_IFLAG() {
        return PFREC_S_IFLAG;
    }

    public byte getPFREC_T() {
        return PFREC_T;
    }

    public byte getPFREC_T_I() {
        return PFREC_T_I;
    }

    public boolean getPFREC_T_IFLAG() {
        return PFREC_T_IFLAG;
    }

    public byte getPFSTMM_F() {
        return PFSTMM_F;
    }

    public byte getPFSTMM_S() {
        return PFSTMM_S;
    }

    public byte getPFSTMM_T() {
        return PFSTMM_T;
    }

    public short getPFSTMY_F() {
        return PFSTMY_F;
    }

    public short getPFSTMY_S() {
        return PFSTMY_S;
    }

    public short getPFSTMY_T() {
        return PFSTMY_T;
    }

    public byte getPFTYP_F() {
        return PFTYP_F;
    }

    public byte getPFTYP_F_I() {
        return PFTYP_F_I;
    }

    public boolean getPFTYP_F_IFLAG() {
        return PFTYP_F_IFLAG;
    }

    public byte getPFTYP_S() {
        return PFTYP_S;
    }

    public byte getPFTYP_S_I() {
        return PFTYP_S_I;
    }

    public boolean getPFTYP_S_IFLAG() {
        return PFTYP_S_IFLAG;
    }

    public byte getPFTYP_T() {
        return PFTYP_T;
    }

    public byte getPFTYP_T_I() {
        return PFTYP_T_I;
    }

    public boolean getPFTYP_T_IFLAG() {
        return PFTYP_T_IFLAG;
    }

    public boolean getPINTRE_I() {
        return PINTRE_I;
    }

    public boolean getPINTRE_IFLAG() {
        return PINTRE_IFLAG;
    }

    public boolean getPINTRN_I() {
        return PINTRN_I;
    }

    public boolean getPINTRN_IFLAG() {
        return PINTRN_IFLAG;
    }

    public short getPIRREG_F() {
        return PIRREG_F;
    }

    public byte getPMORTC_F() {
        return PMORTC_F;
    }

    public byte getPMORTC_S() {
        return PMORTC_S;
    }

    public byte getPNANYO_I() {
        return PNANYO_I;
    }

    public boolean getPNANYO_IFLAG() {
        return PNANYO_IFLAG;
    }

    public byte getPNCONT_I() {
        return PNCONT_I;
    }

    public boolean getPNCONT_IFLAG() {
        return PNCONT_IFLAG;
    }

    public byte getPOADD_F1() {
        return POADD_F1;
    }

    public byte getPOADD_F1_I() {
        return POADD_F1_I;
    }

    public boolean getPOADD_F1_IFLAG() {
        return POADD_F1_IFLAG;
    }

    public byte getPOADD_F2() {
        return POADD_F2;
    }

    public byte getPOADD_F2_I() {
        return POADD_F2_I;
    }

    public boolean getPOADD_F2_IFLAG() {
        return POADD_F2_IFLAG;
    }

    public byte getPOADD_S1() {
        return POADD_S1;
    }

    public byte getPOADD_S1_I() {
        return POADD_S1_I;
    }

    public boolean getPOADD_S1_IFLAG() {
        return POADD_S1_IFLAG;
    }

    public boolean getPOADD_S2() {
        return POADD_S2;
    }

    public boolean getPOADD_S2_I() {
        return POADD_S2_I;
    }

    public boolean getPOADD_S2_IFLAG() {
        return POADD_S2_IFLAG;
    }

    public int getPOCNAM_F() {
        return POCNAM_F;
    }

    public short getPOCNAM_S() {
        return POCNAM_S;
    }

    public byte getPOCNFG_F() {
        return POCNFG_F;
    }

    public byte getPOCNFG_S() {
        return POCNFG_S;
    }

    public double getPOCNFR_F() {
        return POCNFR_F;
    }

    public double getPOCNFR_S() {
        return POCNFR_S;
    }

    public byte getPOCNPR_F() {
        return POCNPR_F;
    }

    public byte getPOCNPR_S() {
        return POCNPR_S;
    }

    public byte getPOCONH_F() {
        return POCONH_F;
    }

    public byte getPOCONH_S() {
        return POCONH_S;
    }

    public byte getPOCTYP_F() {
        return POCTYP_F;
    }

    public byte getPOCTYP_F_I() {
        return POCTYP_F_I;
    }

    public boolean getPOCTYP_F_IFLAG() {
        return POCTYP_F_IFLAG;
    }

    public byte getPOCTYP_S() {
        return POCTYP_S;
    }

    public byte getPOCTYP_S_I() {
        return POCTYP_S_I;
    }

    public boolean getPOCTYP_S_IFLAG() {
        return POCTYP_S_IFLAG;
    }

    public int getPOEMAM_F() {
        return POEMAM_F;
    }

    public short getPOEMAM_S() {
        return POEMAM_S;
    }

    public double getPOEMFR_F() {
        return POEMFR_F;
    }

    public double getPOEMFR_S() {
        return POEMFR_S;
    }

    public byte getPOEMPC_F() {
        return POEMPC_F;
    }

    public byte getPOEMPC_S() {
        return POEMPC_S;
    }

    public byte getPOEMPH_F() {
        return POEMPH_F;
    }

    public byte getPOEMPH_S() {
        return POEMPH_S;
    }

    public byte getPOEMPR_F() {
        return POEMPR_F;
    }

    public byte getPOEMPR_S() {
        return POEMPR_S;
    }

    public short getPOJOIN_F() {
        return POJOIN_F;
    }

    public short getPOJOIN_S() {
        return POJOIN_S;
    }

    public byte getPOLSYR_F() {
        return POLSYR_F;
    }

    public byte getPOLSYR_S() {
        return POLSYR_S;
    }

    public byte getPOMETH_F() {
        return POMETH_F;
    }

    public byte getPOMETH_S() {
        return POMETH_S;
    }

    public byte getPOPYCH_F() {
        return POPYCH_F;
    }

    public byte getPOPYCH_S() {
        return POPYCH_S;
    }

    public byte getPORAGET_F() {
        return PORAGET_F;
    }

    public byte getPORAGET_S() {
        return PORAGET_S;
    }

    public byte getPORAGE_F() {
        return PORAGE_F;
    }

    public byte getPORAGE_S() {
        return PORAGE_S;
    }

    public byte getPORATE_F() {
        return PORATE_F;
    }

    public byte getPORATE_S() {
        return PORATE_S;
    }

    public short getPOYRAM_F() {
        return POYRAM_F;
    }

    public short getPOYRAM_S() {
        return POYRAM_S;
    }

    public byte getPPACCU_F() {
        return PPACCU_F;
    }

    public byte getPPACCU_S() {
        return PPACCU_S;
    }

    public byte getPPDOCS_F() {
        return PPDOCS_F;
    }

    public byte getPPDOCS_S() {
        return PPDOCS_S;
    }

    public short getPPEIRA_F() {
        return PPEIRA_F;
    }

    public short getPPEIRA_S() {
        return PPEIRA_S;
    }

    public boolean getPPEIRF_F() {
        return PPEIRF_F;
    }

    public boolean getPPEIRF_S() {
        return PPEIRF_S;
    }

    public byte getPPEIRH_F() {
        return PPEIRH_F;
    }

    public byte getPPEIRH_S() {
        return PPEIRH_S;
    }

    public short getPPEMAM_F() {
        return PPEMAM_F;
    }

    public short getPPEMAM_S() {
        return PPEMAM_S;
    }

    public double getPPEMFR_F() {
        return PPEMFR_F;
    }

    public double getPPEMFR_S() {
        return PPEMFR_S;
    }

    public byte getPPEMPH_F() {
        return PPEMPH_F;
    }

    public byte getPPEMPH_S() {
        return PPEMPH_S;
    }

    public byte getPPEMPR_F() {
        return PPEMPR_F;
    }

    public byte getPPEMPR_S() {
        return PPEMPR_S;
    }

    public byte getPPEMP_F() {
        return PPEMP_F;
    }

    public byte getPPEMP_S() {
        return PPEMP_S;
    }

    public byte getPPEVRG_F() {
        return PPEVRG_F;
    }

    public byte getPPEVRG_S() {
        return PPEVRG_S;
    }

    public int getPPIRRA_F() {
        return PPIRRA_F;
    }

    public int getPPIRRA_S() {
        return PPIRRA_S;
    }

    public byte getPPIRRH_F() {
        return PPIRRH_F;
    }

    public byte getPPIRRH_S() {
        return PPIRRH_S;
    }

    public byte getPPIRRN_F() {
        return PPIRRN_F;
    }

    public byte getPPIRRN_S() {
        return PPIRRN_S;
    }

    public short getPPIRRY_F() {
        return PPIRRY_F;
    }

    public short getPPIRRY_S() {
        return PPIRRY_S;
    }

    public short getPPLASY_F() {
        return PPLASY_F;
    }

    public short getPPLASY_S() {
        return PPLASY_S;
    }

    public int getPPLSTA_F() {
        return PPLSTA_F;
    }

    public int getPPLSTA_S() {
        return PPLSTA_S;
    }

    public byte getPPLSTP_F() {
        return PPLSTP_F;
    }

    public byte getPPLSTP_S() {
        return PPLSTP_S;
    }

    public byte getPPNINS_F() {
        return PPNINS_F;
    }

    public byte getPPNINS_S() {
        return PPNINS_S;
    }

    public byte getPPORG_F() {
        return PPORG_F;
    }

    public byte getPPORG_S() {
        return PPORG_S;
    }

    public byte getPPPAY_F() {
        return PPPAY_F;
    }

    public byte getPPPAY_S() {
        return PPPAY_S;
    }

    public int getPPRGAM_F() {
        return PPRGAM_F;
    }

    public short getPPRGAM_S() {
        return PPRGAM_S;
    }

    public byte getPPRGFG_F() {
        return PPRGFG_F;
    }

    public boolean getPPRGFG_S() {
        return PPRGFG_S;
    }

    public double getPPRGFR_F() {
        return PPRGFR_F;
    }

    public double getPPRGFR_S() {
        return PPRGFR_S;
    }

    public byte getPPRGH_F() {
        return PPRGH_F;
    }

    public byte getPPRGH_S() {
        return PPRGH_S;
    }

    public byte getPPRGPE_F() {
        return PPRGPE_F;
    }

    public byte getPPRGPE_S() {
        return PPRGPE_S;
    }

    public byte getPPSTMM_F() {
        return PPSTMM_F;
    }

    public byte getPPSTMM_S() {
        return PPSTMM_S;
    }

    public short getPPSTMY_F() {
        return PPSTMY_F;
    }

    public short getPPSTMY_S() {
        return PPSTMY_S;
    }

    public byte getPPTYP_F() {
        return PPTYP_F;
    }

    public byte getPPTYP_S() {
        return PPTYP_S;
    }

    public byte getPPVALB_F() {
        return PPVALB_F;
    }

    public byte getPPVALB_F_I() {
        return PPVALB_F_I;
    }

    public byte getPPVALB_S() {
        return PPVALB_S;
    }

    public byte getPPVALB_S_I() {
        return PPVALB_S_I;
    }

    public int getPPVAL_F() {
        return PPVAL_F;
    }

    public double getPPVAL_F_I() {
        return PPVAL_F_I;
    }

    public boolean getPPVAL_F_IFLAG() {
        return PPVAL_F_IFLAG;
    }

    public int getPPVAL_S() {
        return PPVAL_S;
    }

    public double getPPVAL_S_I() {
        return PPVAL_S_I;
    }

    public boolean getPPVAL_S_IFLAG() {
        return PPVAL_S_IFLAG;
    }

    public short getPPYRST_F() {
        return PPYRST_F;
    }

    public short getPPYRST_S() {
        return PPYRST_S;
    }

    public byte getPPYSTP_1() {
        return PPYSTP_1;
    }

    public byte getPPYSTP_2() {
        return PPYSTP_2;
    }

    public byte getPPYSTP_3() {
        return PPYSTP_3;
    }

    public byte getPPYSTP_8() {
        return PPYSTP_8;
    }

    public byte getPPYSTP_9() {
        return PPYSTP_9;
    }

    public boolean getREGLRPY3() {
        return REGLRPY3;
    }

    public short getSEAML_I() {
        return SEAML_I;
    }

    public boolean getSEAML_IFLAG() {
        return SEAML_IFLAG;
    }

    public byte getSEINT() {
        return SEINT;
    }

    public byte getSEPEL_I() {
        return SEPEL_I;
    }

    public boolean getSEPEL_IFLAG() {
        return SEPEL_IFLAG;
    }

    public byte getSEPER_I() {
        return SEPER_I;
    }

    public boolean getSEPER_IFLAG() {
        return SEPER_IFLAG;
    }

    public byte getSJEMP1_I() {
        return SJEMP1_I;
    }

    public byte getSJEMP1_IFLAG() {
        return SJEMP1_IFLAG;
    }

    public byte getSJEMP2_I() {
        return SJEMP2_I;
    }

    public byte getSJEMP2_IFLAG() {
        return SJEMP2_IFLAG;
    }

    public byte getSJOB2_I() {
        return SJOB2_I;
    }

    public byte getSJOB2_IFLAG() {
        return SJOB2_IFLAG;
    }

    public short getSLNOS4() {
        return SLNOS4;
    }

    public short getSLNOS5() {
        return SLNOS5;
    }

    public double getXS_WGT() {
        return XS_WGT;
    }


    public WaAS_W1PRecord(WaAS_RecordID i, String line) throws Exception {
        super(i);
        s = line.split("\t");
        initCASEW1(s[0]);
        initPERSONW1(s[1]);
        initYEAR(s[2]);
        initMONTH(s[3]);
        initTYPE(s[4]);
        initP_FLAG1(s[5]);
        initP_FLAG3(s[6]);
        initP_FLAG4(s[7]);
        initIOUT1(s[8]);
        initXS_WGT(s[9]);
        initBUILDDB1(s[10]);
        initBUILDDB2(s[11]);
        initBUILDDB3(s[12]);
        initBUILDDEBT1(s[13]);
        initBUILDDEBT1_I(s[14]);
        initBUILDDEBT1_IFLAG(s[15]);
        initBUILDDEBT2(s[16]);
        initBUILDDEBT2_I(s[17]);
        initBUILDDEBT2_IFLAG(s[18]);
        initBUILDDEBT3(s[19]);
        initBUILDDEBT3_I(s[20]);
        initBUILDDEBT3_IFLAG(s[21]);
        initBUILDVAL1(s[22]);
        initBUILDVAL1_I(s[23]);
        initBUILDVAL1_IFLAG(s[24]);
        initBUILDVAL2(s[25]);
        initBUILDVAL2_I(s[26]);
        initBUILDVAL2_IFLAG(s[27]);
        initBUILDVAL3(s[28]);
        initBUILDVAL3_I(s[29]);
        initBUILDVAL3_IFLAG(s[30]);
        initBUILDVB1(s[31]);
        initBUILDVB2(s[32]);
        initBUILDVB3(s[33]);
        initDVBDEBT(s[34]);
        initDVBVAL(s[35]);
        initDVHDEBT(s[36]);
        initDVHVAL(s[37]);
        initDVLOSDEBT(s[38]);
        initDVLOSV(s[39]);
        initDVLUKDEBT(s[40]);
        initDVLUKV(s[41]);
        initDVOPDEBT(s[42]);
        initDVOPVAL(s[43]);
        initHOUSEGDVAL1(s[44]);
        initHOUSEGDVAL2(s[45]);
        initHOUSEGDVAL3(s[46]);
        initHOUSEGDVB1(s[47]);
        initHOUSEGDVB1_I(s[48]);
        initHOUSEGDVB1_IFLAG(s[49]);
        initHOUSEGDVB2(s[50]);
        initHOUSEGDVB2_I(s[51]);
        initHOUSEGDVB2_IFLAG(s[52]);
        initHOUSEGDVB3(s[53]);
        initHOUSEGDVB3_I(s[54]);
        initHOUSEGDVB3_IFLAG(s[55]);
        initHOUSGDST(s[56]);
        initHSEDB1(s[57]);
        initHSEDB2(s[58]);
        initHSEDB3(s[59]);
        initHSEDEBT1(s[60]);
        initHSEDEBT1_I(s[61]);
        initHSEDEBT1_IFLAG(s[62]);
        initHSEDEBT2(s[63]);
        initHSEDEBT2_I(s[64]);
        initHSEDEBT2_IFLAG(s[65]);
        initHSEDEBT3(s[66]);
        initHSEDEBT3_I(s[67]);
        initHSEDEBT3_IFLAG(s[68]);
        initHSEVAL1(s[69]);
        initHSEVAL1_I(s[70]);
        initHSEVAL1_IFLAG(s[71]);
        initHSEVAL2(s[72]);
        initHSEVAL2_I(s[73]);
        initHSEVAL2_IFLAG(s[74]);
        initHSEVAL3(s[75]);
        initHSEVAL3_I(s[76]);
        initHSEVAL3_IFLAG(s[77]);
        initHSEVB1(s[78]);
        initHSEVB2(s[79]);
        initHSEVB3(s[80]);
        initLANDOSDB1(s[81]);
        initLANDOSDB2(s[82]);
        initLANDOSDB3(s[83]);
        initLANDOSDEBT1(s[84]);
        initLANDOSDEBT1_I(s[85]);
        initLANDOSDEBT1_IFLAG(s[86]);
        initLANDOSDEBT2(s[87]);
        initLANDOSDEBT2_I(s[88]);
        initLANDOSDEBT2_IFLAG(s[89]);
        initLANDOSDEBT3(s[90]);
        initLANDOSDEBT3_I(s[91]);
        initLANDOSDEBT3_IFLAG(s[92]);
        initLANDOSVAL1(s[93]);
        initLANDOSVAL1_I(s[94]);
        initLANDOSVAL1_IFLAG(s[95]);
        initLANDOSVAL2(s[96]);
        initLANDOSVAL2_I(s[97]);
        initLANDOSVAL2_IFLAG(s[98]);
        initLANDOSVAL3(s[99]);
        initLANDOSVAL3_I(s[100]);
        initLANDOSVAL3_IFLAG(s[101]);
        initLANDOSVB1(s[102]);
        initLANDOSVB2(s[103]);
        initLANDOSVB3(s[104]);
        initLANDUKDB1(s[105]);
        initLANDUKDB2(s[106]);
        initLANDUKDB3(s[107]);
        initLANDUKDEBT1(s[108]);
        initLANDUKDEBT1_I(s[109]);
        initLANDUKDEBT1_IFLAG(s[110]);
        initLANDUKDEBT2(s[111]);
        initLANDUKDEBT2_I(s[112]);
        initLANDUKDEBT2_IFLAG(s[113]);
        initLANDUKDEBT3(s[114]);
        initLANDUKDEBT3_I(s[115]);
        initLANDUKDEBT3_IFLAG(s[116]);
        initLANDUKVAL1(s[117]);
        initLANDUKVAL1_I(s[118]);
        initLANDUKVAL1_IFLAG(s[119]);
        initLANDUKVAL2(s[120]);
        initLANDUKVAL2_I(s[121]);
        initLANDUKVAL2_IFLAG(s[122]);
        initLANDUKVAL3(s[123]);
        initLANDUKVAL3_I(s[124]);
        initLANDUKVAL3_IFLAG(s[125]);
        initLANDUKVB1(s[126]);
        initLANDUKVB2(s[127]);
        initLANDUKVB3(s[128]);
        initOPROPDB1(s[129]);
        initOPROPDB2(s[130]);
        initOPROPDB3(s[131]);
        initOPROPDEBT1(s[132]);
        initOPROPDEBT1_I(s[133]);
        initOPROPDEBT1_IFLAG(s[134]);
        initOPROPDEBT2(s[135]);
        initOPROPDEBT2_I(s[136]);
        initOPROPDEBT2_IFLAG(s[137]);
        initOPROPDEBT3(s[138]);
        initOPROPDEBT3_I(s[139]);
        initOPROPDEBT3_IFLAG(s[140]);
        initOPROPVAL1(s[141]);
        initOPROPVAL1_I(s[142]);
        initOPROPVAL1_IFLAG(s[143]);
        initOPROPVAL2(s[144]);
        initOPROPVAL2_I(s[145]);
        initOPROPVAL2_IFLAG(s[146]);
        initOPROPVAL3(s[147]);
        initOPROPVAL3_I(s[148]);
        initOPROPVAL3_IFLAG(s[149]);
        initOPROPVB1(s[150]);
        initOPROPVB2(s[151]);
        initOPROPVB3(s[152]);
        initUDEBT(s[153]);
        initUDEBT2(s[154]);
        initUDEBT3(s[155]);
        initUDEBT4(s[156]);
        initUDEBT5(s[157]);
        initUDEBTB(s[158]);
        initUDEBTB2(s[159]);
        initUDEBTB3(s[160]);
        initUDEBTB4(s[161]);
        initUDEBTB5(s[162]);
        initUGDVB2(s[163]);
        initUGDVB3(s[164]);
        initUGDVB4(s[165]);
        initUGDVB5(s[166]);
        initUGDVB(s[167]);
        initULAND(s[168]);
        initULAND2(s[169]);
        initULAND3(s[170]);
        initULAND4(s[171]);
        initULAND5(s[172]);
        initUNMTYP(s[173]);
        initUNUMBD(s[174]);
        initUNUMBD_I(s[175]);
        initUNUMBD_IFLAG(s[176]);
        initUNUMHS(s[177]);
        initUNUMHS_I(s[178]);
        initUNUMHS_IFLAG(s[179]);
        initUNUMLA(s[180]);
        initUNUMLA_I(s[181]);
        initUNUMLA_IFLAG(s[182]);
        initUNUMOV(s[183]);
        initUNUMOV_I(s[184]);
        initUNUMOV_IFLAG(s[185]);
        initUNUMRE(s[186]);
        initUNUMRE_I(s[187]);
        initUNUMRE_IFLAG(s[188]);
        initUPROP1(s[189]);
        initUPROP1_I(s[190]);
        initUPROP1_IFLAG(s[191]);
        initUPROP2(s[192]);
        initUPROP2_I(s[193]);
        initUPROP2_IFLAG(s[194]);
        initUPROP3(s[195]);
        initUPROP3_I(s[196]);
        initUPROP3_IFLAG(s[197]);
        initUPROP4(s[198]);
        initUPROP4_I(s[199]);
        initUPROP4_IFLAG(s[200]);
        initUPRSH1(s[201]);
        initUPRSH2(s[202]);
        initUPRSH3(s[203]);
        initUPRSH4(s[204]);
        initUPRSH5(s[205]);
        initUPRSH6(s[206]);
        initUPRSH7(s[207]);
        initUPRSH8(s[208]);
        initUPRSH9(s[209]);
        initUPRSH10(s[210]);
        initUVAL(s[211]);
        initUVAL2(s[212]);
        initUVAL3(s[213]);
        initUVAL4(s[214]);
        initUVAL5(s[215]);
        initUVALB(s[216]);
        initUVALB2(s[217]);
        initUVALB3(s[218]);
        initUVALB4(s[219]);
        initUVALB5(s[220]);
        initCACTF(s[221]);
        initCACTF_I(s[222]);
        initCACTF_IFLAG(s[223]);
        initCACTV(s[224]);
        initCACTV_I(s[225]);
        initCACTV_IFLAG(s[226]);
        initCASAV(s[227]);
        initCASAV_I(s[228]);
        initCASAV_IFLAG(s[229]);
        initCASVB(s[230]);
        initCASVV(s[231]);
        initCASVV_I(s[232]);
        initCASVV_IFLAG(s[233]);
        initCHECKCC(s[234]);
        initCHECKDL(s[235]);
        initCHECKHB(s[236]);
        initCHECKHP(s[237]);
        initCHECKMO(s[238]);
        initCHECKST(s[239]);
        initCOMMIT1(s[240]);
        initCOMMIT2(s[241]);
        initCOMMIT3(s[242]);
        initCOMMIT4(s[243]);
        initCOMMIT5(s[244]);
        initCURRAC(s[245]);
        initDBURD(s[246]);
        initDBURD___W1(s[247]);
        initDBURDW2(s[248]);
        initDBURDW3(s[249]);
        initDBURDW4(s[250]);
        initDBURDW5(s[251]);
        initDBURDW6(s[252]);
        initDC12M(s[253]);
        initDCAMC2(s[254]);
        initDCAMC2_I(s[255]);
        initDCAMC2_IFLAG(s[256]);
        initDCAMC3(s[257]);
        initDCAMC3_I(s[258]);
        initDCAMC3_IFLAG(s[259]);
        initDCAMC4(s[260]);
        initDCAMC4_I(s[261]);
        initDCAMC4_IFLAG(s[262]);
        initDCAMC5(s[263]);
        initDCAMC5_I(s[264]);
        initDCAMC5_IFLAG(s[265]);
        initDCAMC(s[266]);
        initDCAMC_I(s[267]);
        initDCAMC_IFLAG(s[268]);
        initDCAMD2(s[269]);
        initDCAMD2_I(s[270]);
        initDCAMD2_IFLAG(s[271]);
        initDCAMD3(s[272]);
        initDCAMD3_I(s[273]);
        initDCAMD3_IFLAG(s[274]);
        initDCAMD4(s[275]);
        initDCAMD4_I(s[276]);
        initDCAMD4_IFLAG(s[277]);
        initDCAMD5(s[278]);
        initDCAMD5_I(s[279]);
        initDCAMD5_IFLAG(s[280]);
        initDCAMD(s[281]);
        initDCAMD_I(s[282]);
        initDCAMD_IFLAG(s[283]);
        initDCAMOS2(s[284]);
        initDCAMOS3(s[285]);
        initDCAMOS4(s[286]);
        initDCAMOS5(s[287]);
        initDCAMOS(s[288]);
        initDCAMP2(s[289]);
        initDCAMP2_I(s[290]);
        initDCAMP2_IFLAG(s[291]);
        initDCAMP3(s[292]);
        initDCAMP3_I(s[293]);
        initDCAMP3_IFLAG(s[294]);
        initDCAMP4(s[295]);
        initDCAMP4_I(s[296]);
        initDCAMP4_IFLAG(s[297]);
        initDCAMP5(s[298]);
        initDCAMP5_I(s[299]);
        initDCAMP5_IFLAG(s[300]);
        initDCAMP(s[301]);
        initDCAMP_I(s[302]);
        initDCAMP_IFLAG(s[303]);
        initDCANU(s[304]);
        initDCANU_I(s[305]);
        initDCANU_IFLAG(s[306]);
        initDCANY(s[307]);
        initDCANY_I(s[308]);
        initDCANY_IFLAG(s[309]);
        initDCCINTR(s[310]);
        initDCCOS2(s[311]);
        initDCCOS2_I(s[312]);
        initDCCOS2_IFLAG(s[313]);
        initDCCOS3(s[314]);
        initDCCOS3_I(s[315]);
        initDCCOS3_IFLAG(s[316]);
        initDCCOS4(s[317]);
        initDCCOS4_I(s[318]);
        initDCCOS4_IFLAG(s[319]);
        initDCCOS5(s[320]);
        initDCCOS5_I(s[321]);
        initDCCOS5_IFLAG(s[322]);
        initDCCOS(s[323]);
        initDCCOS_I(s[324]);
        initDCCOS_IFLAG(s[325]);
        initDCCSP2(s[326]);
        initDCCSP2_I(s[327]);
        initDCCSP2_IFLAG(s[328]);
        initDCCSP3(s[329]);
        initDCCSP3_I(s[330]);
        initDCCSP3_IFLAG(s[331]);
        initDCCSP4(s[332]);
        initDCCSP4_I(s[333]);
        initDCCSP4_IFLAG(s[334]);
        initDCCSP5(s[335]);
        initDCCSP5_I(s[336]);
        initDCCSP5_IFLAG(s[337]);
        initDCCSP(s[338]);
        initDCCSP_I(s[339]);
        initDCCSP_IFLAG(s[340]);
        initDCESB2(s[341]);
        initDCESB3(s[342]);
        initDCESB4(s[343]);
        initDCESB5(s[344]);
        initDCESB(s[345]);
        initDCINZ2(s[346]);
        initDCINZ3(s[347]);
        initDCINZ4(s[348]);
        initDCINZ5(s[349]);
        initDCINZ(s[350]);
        initDCNAM2(s[351]);
        initDCNAM2_I(s[352]);
        initDCNAM2_IFLAG(s[353]);
        initDCNAM3(s[354]);
        initDCNAM3_I(s[355]);
        initDCNAM3_IFLAG(s[356]);
        initDCNAM4(s[357]);
        initDCNAM4_I(s[358]);
        initDCNAM4_IFLAG(s[359]);
        initDCNAM5(s[360]);
        initDCNAM5_I(s[361]);
        initDCNAM5_IFLAG(s[362]);
        initDCNAM(s[363]);
        initDCNAM_I(s[364]);
        initDCNAM_IFLAG(s[365]);
        initDCNUM(s[366]);
        initDCNUM_I(s[367]);
        initDCNUM_IFLAG(s[368]);
        initDCOINV2(s[369]);
        initDCOINV2_I(s[370]);
        initDCOINV2_IFLAG(s[371]);
        initDCOINV3(s[372]);
        initDCOINV3_I(s[373]);
        initDCOINV3_IFLAG(s[374]);
        initDCOINVB2(s[375]);
        initDCOINVB3(s[376]);
        initDCOINVB(s[377]);
        initDCOINV(s[378]);
        initDCOINV_I(s[379]);
        initDCOINV_IFLAG(s[380]);
        initDCONM10(s[381]);
        initDCONM10_I(s[382]);
        initDCONM10_IFLAG(s[383]);
        initDCONM1(s[384]);
        initDCONM1_I(s[385]);
        initDCONM1_IFLAG(s[386]);
        initDCONM2(s[387]);
        initDCONM2_I(s[388]);
        initDCONM2_IFLAG(s[389]);
        initDCONM3(s[390]);
        initDCONM3_I(s[391]);
        initDCONM3_IFLAG(s[392]);
        initDCONM4(s[393]);
        initDCONM4_I(s[394]);
        initDCONM4_IFLAG(s[395]);
        initDCONM5(s[396]);
        initDCONM5_I(s[397]);
        initDCONM5_IFLAG(s[398]);
        initDCONM6(s[399]);
        initDCONM6_I(s[400]);
        initDCONM6_IFLAG(s[401]);
        initDCONM7(s[402]);
        initDCONM7_I(s[403]);
        initDCONM7_IFLAG(s[404]);
        initDCONM8(s[405]);
        initDCONM8_I(s[406]);
        initDCONM8_IFLAG(s[407]);
        initDCONM9(s[408]);
        initDCONM9_I(s[409]);
        initDCONM9_IFLAG(s[410]);
        initDCOSHV2(s[411]);
        initDCOSHV2_I(s[412]);
        initDCOSHV2_IFLAG(s[413]);
        initDCOSHV3(s[414]);
        initDCOSHVB2(s[415]);
        initDCOSHVB(s[416]);
        initDCOSHV(s[417]);
        initDCOSHV_I(s[418]);
        initDCOSHV_IFLAG(s[419]);
        initDCPER2(s[420]);
        initDCPER3(s[421]);
        initDCPER4(s[422]);
        initDCPER5(s[423]);
        initDCPER(s[424]);
        initDCREC2(s[425]);
        initDCREC2_I(s[426]);
        initDCREC2_IFLAG(s[427]);
        initDCREC3(s[428]);
        initDCREC3_I(s[429]);
        initDCREC3_IFLAG(s[430]);
        initDCREC4(s[431]);
        initDCREC4_I(s[432]);
        initDCREC4_IFLAG(s[433]);
        initDCREC5(s[434]);
        initDCREC5_I(s[435]);
        initDCREC5_IFLAG(s[436]);
        initDCREC(s[437]);
        initDCREC_I(s[438]);
        initDCREC_IFLAG(s[439]);
        initDCRSP2(s[440]);
        initDCRSP2_I(s[441]);
        initDCRSP2_IFLAG(s[442]);
        initDCRSP3(s[443]);
        initDCRSP3_I(s[444]);
        initDCRSP3_IFLAG(s[445]);
        initDCRSP4(s[446]);
        initDCRSP4_I(s[447]);
        initDCRSP4_IFLAG(s[448]);
        initDCRSP5(s[449]);
        initDCRSP5_I(s[450]);
        initDCRSP5_IFLAG(s[451]);
        initDCRSP(s[452]);
        initDCRSP_I(s[453]);
        initDCRSP_IFLAG(s[454]);
        initDHBAMT01(s[455]);
        initDHBAMT01_I(s[456]);
        initDHBAMT01_IFLAG(s[457]);
        initDHBAMT02(s[458]);
        initDHBAMT02_I(s[459]);
        initDHBAMT02_IFLAG(s[460]);
        initDHBAMT03(s[461]);
        initDHBAMT03_I(s[462]);
        initDHBAMT03_IFLAG(s[463]);
        initDHBAMT04(s[464]);
        initDHBAMT04_I(s[465]);
        initDHBAMT04_IFLAG(s[466]);
        initDHBAMT05(s[467]);
        initDHBAMT05_I(s[468]);
        initDHBAMT05_IFLAG(s[469]);
        initDHBAMT06(s[470]);
        initDHBAMT06_I(s[471]);
        initDHBAMT06_IFLAG(s[472]);
        initDHBAMT07(s[473]);
        initDHBAMT07_I(s[474]);
        initDHBAMT07_IFLAG(s[475]);
        initDHBAMT08(s[476]);
        initDHBAMT08_I(s[477]);
        initDHBAMT08_IFLAG(s[478]);
        initDHBAMT09(s[479]);
        initDHBAMT09_I(s[480]);
        initDHBAMT09_IFLAG(s[481]);
        initDHBAMT10(s[482]);
        initDHBAMT10_I(s[483]);
        initDHBAMT10_IFLAG(s[484]);
        initDHBAMT11(s[485]);
        initDHBAMT11_I(s[486]);
        initDHBAMT11_IFLAG(s[487]);
        initDHBANY01(s[488]);
        initDHBANY01_I(s[489]);
        initDHBANY01_IFLAG(s[490]);
        initDHBANY02(s[491]);
        initDHBANY02_I(s[492]);
        initDHBANY02_IFLAG(s[493]);
        initDHBANY03(s[494]);
        initDHBANY03_I(s[495]);
        initDHBANY03_IFLAG(s[496]);
        initDHBANY04(s[497]);
        initDHBANY04_I(s[498]);
        initDHBANY04_IFLAG(s[499]);
        initDHBANY05(s[500]);
        initDHBANY05_I(s[501]);
        initDHBANY05_IFLAG(s[502]);
        initDHBANY06(s[503]);
        initDHBANY06_I(s[504]);
        initDHBANY06_IFLAG(s[505]);
        initDHBANY07(s[506]);
        initDHBANY07_I(s[507]);
        initDHBANY07_IFLAG(s[508]);
        initDHBEST01(s[509]);
        initDHBEST02(s[510]);
        initDHBEST03(s[511]);
        initDHBEST04(s[512]);
        initDHBEST05(s[513]);
        initDHBEST06(s[514]);
        initDHBEST07(s[515]);
        initDHBEST08(s[516]);
        initDHBEST09(s[517]);
        initDHBEST10(s[518]);
        initDHBEST11(s[519]);
        initDHBFIX(s[520]);
        initDHPANY1(s[521]);
        initDHPANY1_I(s[522]);
        initDHPANY1_IFLAG(s[523]);
        initDHPANY2(s[524]);
        initDHPANY2_I(s[525]);
        initDHPANY2_IFLAG(s[526]);
        initDHPANY3(s[527]);
        initDHPANY3_I(s[528]);
        initDHPANY3_IFLAG(s[529]);
        initDHPBEH2(s[530]);
        initDHPBEH2_I(s[531]);
        initDHPBEH2_IFLAG(s[532]);
        initDHPBEH3(s[533]);
        initDHPBEH3_I(s[534]);
        initDHPBEH3_IFLAG(s[535]);
        initDHPBEH4(s[536]);
        initDHPBEH4_I(s[537]);
        initDHPBEH4_IFLAG(s[538]);
        initDHPBEH5(s[539]);
        initDHPBEH5_I(s[540]);
        initDHPBEH5_IFLAG(s[541]);
        initDHPBEH(s[542]);
        initDHPBEH_I(s[543]);
        initDHPBEH_IFLAG(s[544]);
        initDHPEST2(s[545]);
        initDHPEST3(s[546]);
        initDHPEST4(s[547]);
        initDHPEST5(s[548]);
        initDHPEST(s[549]);
        initDHPINS2(s[550]);
        initDHPINS2_I(s[551]);
        initDHPINS2_IFLAG(s[552]);
        initDHPINS3(s[553]);
        initDHPINS3_I(s[554]);
        initDHPINS3_IFLAG(s[555]);
        initDHPINS4(s[556]);
        initDHPINS4_I(s[557]);
        initDHPINS4_IFLAG(s[558]);
        initDHPINS5(s[559]);
        initDHPINS5_I(s[560]);
        initDHPINS5_IFLAG(s[561]);
        initDHPINS(s[562]);
        initDHPINS_I(s[563]);
        initDHPINS_IFLAG(s[564]);
        initDHPINT2(s[565]);
        initDHPINT3(s[566]);
        initDHPINT4(s[567]);
        initDHPINT5(s[568]);
        initDHPINT(s[569]);
        initDHPNUM(s[570]);
        initDHPNUM_I(s[571]);
        initDHPNUM_IFLAG(s[572]);
        initDHPOFT2(s[573]);
        initDHPOFT2_I(s[574]);
        initDHPOFT2_IFLAG(s[575]);
        initDHPOFT3(s[576]);
        initDHPOFT3_I(s[577]);
        initDHPOFT3_IFLAG(s[578]);
        initDHPOFT4(s[579]);
        initDHPOFT4_I(s[580]);
        initDHPOFT4_IFLAG(s[581]);
        initDHPOFT5(s[582]);
        initDHPOFT5_I(s[583]);
        initDHPOFT5_IFLAG(s[584]);
        initDHPOFT(s[585]);
        initDHPOFT_I(s[586]);
        initDHPOFT_IFLAG(s[587]);
        initDHPOWE2(s[588]);
        initDHPOWE2_I(s[589]);
        initDHPOWE2_IFLAG(s[590]);
        initDHPOWE3(s[591]);
        initDHPOWE3_I(s[592]);
        initDHPOWE3_IFLAG(s[593]);
        initDHPOWE4(s[594]);
        initDHPOWE4_I(s[595]);
        initDHPOWE4_IFLAG(s[596]);
        initDHPOWE5(s[597]);
        initDHPOWE5_I(s[598]);
        initDHPOWE5_IFLAG(s[599]);
        initDHPOWE(s[600]);
        initDHPOWE_I(s[601]);
        initDHPOWE_IFLAG(s[602]);
        initDHPWEST(s[603]);
        initDHPWEST2(s[604]);
        initDHPWEST3(s[605]);
        initDHPWEST4(s[606]);
        initDHPWEST5(s[607]);
        initDHPWHNM(s[608]);
        initDHPWHNM_I(s[609]);
        initDHPWHNM_IFLAG(s[610]);
        initDHPWHNM2(s[611]);
        initDHPWHNM2_I(s[612]);
        initDHPWHNM2_IFLAG(s[613]);
        initDHPWHNM3(s[614]);
        initDHPWHNM3_I(s[615]);
        initDHPWHNM3_IFLAG(s[616]);
        initDHPWHNM4(s[617]);
        initDHPWHNM4_I(s[618]);
        initDHPWHNM4_IFLAG(s[619]);
        initDHPWHNM5(s[620]);
        initDHPWHNM5_I(s[621]);
        initDHPWHNM5_IFLAG(s[622]);
        initDHPWHNY(s[623]);
        initDHPWHNY_I(s[624]);
        initDHPWHNY_IFLAG(s[625]);
        initDHPWHNY2(s[626]);
        initDHPWHNY2_I(s[627]);
        initDHPWHNY2_IFLAG(s[628]);
        initDHPWHNY3(s[629]);
        initDHPWHNY3_I(s[630]);
        initDHPWHNY3_IFLAG(s[631]);
        initDHPWHNY4(s[632]);
        initDHPWHNY4_I(s[633]);
        initDHPWHNY4_IFLAG(s[634]);
        initDHPWHNY5(s[635]);
        initDHPWHNY5_I(s[636]);
        initDHPWHNY5_IFLAG(s[637]);
        initDLANY(s[638]);
        initDLANY_I(s[639]);
        initDLANY_IFLAG(s[640]);
        initDLBEH(s[641]);
        initDLBEH_I(s[642]);
        initDLBEH_IFLAG(s[643]);
        initDLBEH2(s[644]);
        initDLBEH2_I(s[645]);
        initDLBEH2_IFLAG(s[646]);
        initDLBEH3(s[647]);
        initDLBEH3_I(s[648]);
        initDLBEH3_IFLAG(s[649]);
        initDLBEH4(s[650]);
        initDLBEH4_I(s[651]);
        initDLBEH4_IFLAG(s[652]);
        initDLBEH5(s[653]);
        initDLBEH5_I(s[654]);
        initDLBEH5_IFLAG(s[655]);
        initDLEST(s[656]);
        initDLEST2(s[657]);
        initDLEST3(s[658]);
        initDLEST4(s[659]);
        initDLINS2(s[660]);
        initDLINS(s[661]);
        initDLINS_I(s[662]);
        initDLINS_IFLAG(s[663]);
        initDLINS2_I(s[664]);
        initDLINS2_IFLAG(s[665]);
        initDLINS3(s[666]);
        initDLINS3_I(s[667]);
        initDLINS3_IFLAG(s[668]);
        initDLINS4(s[669]);
        initDLINS4_I(s[670]);
        initDLINS4_IFLAG(s[671]);
        initDLINS5(s[672]);
        initDLINS5_I(s[673]);
        initDLINS5_IFLAG(s[674]);
        initDLINT(s[675]);
        initDLINT2(s[676]);
        initDLINT3(s[677]);
        initDLINT4(s[678]);
        initDLINT5(s[679]);
        initDLNUM(s[680]);
        initDLNUM_I(s[681]);
        initDLNUM_IFLAG(s[682]);
        initDLOFT(s[683]);
        initDLOFT_I(s[684]);
        initDLOFT_IFLAG(s[685]);
        initDLOFT2(s[686]);
        initDLOFT2_I(s[687]);
        initDLOFT2_IFLAG(s[688]);
        initDLOFT3(s[689]);
        initDLOFT3_I(s[690]);
        initDLOFT3_IFLAG(s[691]);
        initDLOFT4(s[692]);
        initDLOFT4_I(s[693]);
        initDLOFT4_IFLAG(s[694]);
        initDLOFT5(s[695]);
        initDLOFT5_I(s[696]);
        initDLOFT5_IFLAG(s[697]);
        initDLOWE(s[698]);
        initDLOWE_I(s[699]);
        initDLOWE_IFLAG(s[700]);
        initDLOWE2(s[701]);
        initDLOWE2_I(s[702]);
        initDLOWE2_IFLAG(s[703]);
        initDLOWE3(s[704]);
        initDLOWE3_I(s[705]);
        initDLOWE3_IFLAG(s[706]);
        initDLOWE4(s[707]);
        initDLOWE4_I(s[708]);
        initDLOWE4_IFLAG(s[709]);
        initDLOWE5(s[710]);
        initDLOWE5_I(s[711]);
        initDLOWE5_IFLAG(s[712]);
        initDLSEC(s[713]);
        initDLSEC2(s[714]);
        initDLSEC3(s[715]);
        initDLSEC4(s[716]);
        initDLSEC5(s[717]);
        initDLTYPE(s[718]);
        initDLTYPE_I(s[719]);
        initDLTYPE_IFLAG(s[720]);
        initDLTYPE2(s[721]);
        initDLTYPE2_I(s[722]);
        initDLTYPE2_IFLAG(s[723]);
        initDLTYPE3(s[724]);
        initDLTYPE3_I(s[725]);
        initDLTYPE3_IFLAG(s[726]);
        initDLTYPE4(s[727]);
        initDLTYPE4_I(s[728]);
        initDLTYPE4_IFLAG(s[729]);
        initDLTYPE5(s[730]);
        initDLTYPE5_I(s[731]);
        initDLTYPE5_IFLAG(s[732]);
        initDLWEST(s[733]);
        initDLWEST2(s[734]);
        initDLWEST3(s[735]);
        initDLWEST4(s[736]);
        initDLWEST5(s[737]);
        initDLWHNM(s[738]);
        initDLWHNM_I(s[739]);
        initDLWHNM_IFLAG(s[740]);
        initDLWHNM2(s[741]);
        initDLWHNM2_I(s[742]);
        initDLWHNM2_IFLAG(s[743]);
        initDLWHNM3(s[744]);
        initDLWHNM3_I(s[745]);
        initDLWHNM3_IFLAG(s[746]);
        initDLWHNM4(s[747]);
        initDLWHNM4_I(s[748]);
        initDLWHNM4_IFLAG(s[749]);
        initDLWHNM5(s[750]);
        initDLWHNM5_I(s[751]);
        initDLWHNM5_IFLAG(s[752]);
        initDLWHNY(s[753]);
        initDLWHNY_I(s[754]);
        initDLWHNY_IFLAG(s[755]);
        initDLWHNY2(s[756]);
        initDLWHNY2_I(s[757]);
        initDLWHNY2_IFLAG(s[758]);
        initDLWHNY3(s[759]);
        initDLWHNY3_I(s[760]);
        initDLWHNY3_IFLAG(s[761]);
        initDLWHNY4(s[762]);
        initDLWHNY4_I(s[763]);
        initDLWHNY4_IFLAG(s[764]);
        initDLWHNY5(s[765]);
        initDLWHNY5_I(s[766]);
        initDLWHNY5_IFLAG(s[767]);
        initDLWHY1(s[768]);
        initDLWHY2(s[769]);
        initDLWHY3(s[770]);
        initDLWHY4(s[771]);
        initDLWHY5(s[772]);
        initDLWHY8(s[773]);
        initDLWHY9(s[774]);
        initDLWHY10(s[775]);
        initDLWHY11(s[776]);
        initDLWHY12(s[777]);
        initDLWHY15(s[778]);
        initDLWHY16(s[779]);
        initDLWHY17(s[780]);
        initDLWHY18(s[781]);
        initDLWHY22(s[782]);
        initDLWHY23(s[783]);
        initDLWHY29(s[784]);
        initDMOANY(s[785]);
        initDMOANY_I(s[786]);
        initDMOANY_IFLAG(s[787]);
        initDMOBEH(s[788]);
        initDMOBEH_I(s[789]);
        initDMOBEH_IFLAG(s[790]);
        initDMOBEH2(s[791]);
        initDMOBEH2_I(s[792]);
        initDMOBEH2_IFLAG(s[793]);
        initDMOBEH3(s[794]);
        initDMOBEH3_I(s[795]);
        initDMOBEH3_IFLAG(s[796]);
        initDMOBEH4(s[797]);
        initDMOBEH4_I(s[798]);
        initDMOBEH4_IFLAG(s[799]);
        initDMOBEH5(s[800]);
        initDMOBEH5_I(s[801]);
        initDMOBEH5_IFLAG(s[802]);
        initDMOEST(s[803]);
        initDMOEST2(s[804]);
        initDMOEST3(s[805]);
        initDMOEST4(s[806]);
        initDMOEST5(s[807]);
        initDMOINS(s[808]);
        initDMOINS_I(s[809]);
        initDMOINS_IFLAG(s[810]);
        initDMOINS2(s[811]);
        initDMOINS2_I(s[812]);
        initDMOINS2_IFLAG(s[813]);
        initDMOINS3(s[814]);
        initDMOINS3_I(s[815]);
        initDMOINS3_IFLAG(s[816]);
        initDMOINS4(s[817]);
        initDMOINS4_I(s[818]);
        initDMOINS4_IFLAG(s[819]);
        initDMOINS5(s[820]);
        initDMOINS5_I(s[821]);
        initDMOINS5_IFLAG(s[822]);
        initDMOINT(s[823]);
        initDMOINT2(s[824]);
        initDMOINT3(s[825]);
        initDMOINT4(s[826]);
        initDMOINT5(s[827]);
        initDMONUM(s[828]);
        initDMONUM_I(s[829]);
        initDMONUM_IFLAG(s[830]);
        initDMOOFT(s[831]);
        initDMOOFT_I(s[832]);
        initDMOOFT_IFLAG(s[833]);
        initDMOOFT2(s[834]);
        initDMOOFT2_I(s[835]);
        initDMOOFT2_IFLAG(s[836]);
        initDMOOFT3(s[837]);
        initDMOOFT3_I(s[838]);
        initDMOOFT3_IFLAG(s[839]);
        initDMOOFT4(s[840]);
        initDMOOFT4_I(s[841]);
        initDMOOFT4_IFLAG(s[842]);
        initDMOOFT5(s[843]);
        initDMOOFT5_I(s[844]);
        initDMOOFT5_IFLAG(s[845]);
        initDMOOWE(s[846]);
        initDMOOWE_I(s[847]);
        initDMOOWE_IFLAG(s[848]);
        initDMOOWE2(s[849]);
        initDMOOWE2_I(s[850]);
        initDMOOWE2_IFLAG(s[851]);
        initDMOOWE3(s[852]);
        initDMOOWE3_I(s[853]);
        initDMOOWE3_IFLAG(s[854]);
        initDMOOWE4(s[855]);
        initDMOOWE4_I(s[856]);
        initDMOOWE4_IFLAG(s[857]);
        initDMOOWE5(s[858]);
        initDMOOWE5_I(s[859]);
        initDMOOWE5_IFLAG(s[860]);
        initDMOWEST(s[861]);
        initDMOWEST2(s[862]);
        initDMOWEST3(s[863]);
        initDMOWEST4(s[864]);
        initDMOWEST5(s[865]);
        initDMOWHNM(s[866]);
        initDMOWHNM_I(s[867]);
        initDMOWHNM_IFLAG(s[868]);
        initDMOWHNM2(s[869]);
        initDMOWHNM2_I(s[870]);
        initDMOWHNM2_IFLAG(s[871]);
        initDMOWHNM3(s[872]);
        initDMOWHNM3_I(s[873]);
        initDMOWHNM3_IFLAG(s[874]);
        initDMOWHNM4(s[875]);
        initDMOWHNM4_I(s[876]);
        initDMOWHNM4_IFLAG(s[877]);
        initDMOWHNM5(s[878]);
        initDMOWHNM5_I(s[879]);
        initDMOWHNM5_IFLAG(s[880]);
        initDMOWHNY(s[881]);
        initDMOWHNY_I(s[882]);
        initDMOWHNY_IFLAG(s[883]);
        initDMOWHNY2(s[884]);
        initDMOWHNY2_I(s[885]);
        initDMOWHNY2_IFLAG(s[886]);
        initDMOWHNY3(s[887]);
        initDMOWHNY3_I(s[888]);
        initDMOWHNY3_IFLAG(s[889]);
        initDMOWHNY4(s[890]);
        initDMOWHNY4_I(s[891]);
        initDMOWHNY4_IFLAG(s[892]);
        initDMOWHNY5(s[893]);
        initDMOWHNY5_I(s[894]);
        initDMOWHNY5_IFLAG(s[895]);
        initDS12M(s[896]);
        initDS12M_I(s[897]);
        initDS12M_IFLAG(s[898]);
        initDSAMC(s[899]);
        initDSAMC_I(s[900]);
        initDSAMC_IFLAG(s[901]);
        initDSAMC2(s[902]);
        initDSAMC2_I(s[903]);
        initDSAMC2_IFLAG(s[904]);
        initDSAMC3(s[905]);
        initDSAMC3_I(s[906]);
        initDSAMC3_IFLAG(s[907]);
        initDSAMC4(s[908]);
        initDSAMC4_I(s[909]);
        initDSAMC4_IFLAG(s[910]);
        initDSAMC5(s[911]);
        initDSAMC5_I(s[912]);
        initDSAMC5_IFLAG(s[913]);
        initDSAMD(s[914]);
        initDSAMD_I(s[915]);
        initDSAMD_IFLAG(s[916]);
        initDSAMD2(s[917]);
        initDSAMD2_I(s[918]);
        initDSAMD2_IFLAG(s[919]);
        initDSAMD3(s[920]);
        initDSAMD3_I(s[921]);
        initDSAMD3_IFLAG(s[922]);
        initDSAMD4(s[923]);
        initDSAMD4_I(s[924]);
        initDSAMD4_IFLAG(s[925]);
        initDSAMD5(s[926]);
        initDSAMD5_I(s[927]);
        initDSAMD5_IFLAG(s[928]);
        initDSAMOS(s[929]);
        initDSAMOS2(s[930]);
        initDSAMOS3(s[931]);
        initDSAMOS4(s[932]);
        initDSAMOS5(s[933]);
        initDSAMP(s[934]);
        initDSAMP_I(s[935]);
        initDSAMP_IFLAG(s[936]);
        initDSAMP2(s[937]);
        initDSAMP2_I(s[938]);
        initDSAMP2_IFLAG(s[939]);
        initDSAMP3(s[940]);
        initDSAMP3_I(s[941]);
        initDSAMP3_IFLAG(s[942]);
        initDSAMP4(s[943]);
        initDSAMP4_I(s[944]);
        initDSAMP4_IFLAG(s[945]);
        initDSAMP5(s[946]);
        initDSAMP5_I(s[947]);
        initDSAMP5_IFLAG(s[948]);
        initDSANU1(s[949]);
        initDSANU1_I(s[950]);
        initDSANU1_IFLAG(s[951]);
        initDSANU2(s[952]);
        initDSANU2_I(s[953]);
        initDSANU2_IFLAG(s[954]);
        initDSANY1(s[955]);
        initDSANY1_I(s[956]);
        initDSANY1_IFLAG(s[957]);
        initDSANY2(s[958]);
        initDSANY2_I(s[959]);
        initDSANY2_IFLAG(s[960]);
        initDSCOS(s[961]);
        initDSCOS_I(s[962]);
        initDSCOS_IFLAG(s[963]);
        initDSCOS2(s[964]);
        initDSCOS2_I(s[965]);
        initDSCOS2_IFLAG(s[966]);
        initDSCOS3(s[967]);
        initDSCOS3_I(s[968]);
        initDSCOS3_IFLAG(s[969]);
        initDSCOS4(s[970]);
        initDSCOS4_I(s[971]);
        initDSCOS4_IFLAG(s[972]);
        initDSCOS5(s[973]);
        initDSCOS5_I(s[974]);
        initDSCOS5_IFLAG(s[975]);
        initDSCSP(s[976]);
        initDSCSP_I(s[977]);
        initDSCSP_IFLAG(s[978]);
        initDSCSP2(s[979]);
        initDSCSP2_I(s[980]);
        initDSCSP2_IFLAG(s[981]);
        initDSCSP3(s[982]);
        initDSCSP3_I(s[983]);
        initDSCSP3_IFLAG(s[984]);
        initDSCSP4(s[985]);
        initDSCSP4_I(s[986]);
        initDSCSP4_IFLAG(s[987]);
        initDSCSP5(s[988]);
        initDSCSP5_I(s[989]);
        initDSCSP5_IFLAG(s[990]);
        initDSESB(s[991]);
        initDSESB2(s[992]);
        initDSESB3(s[993]);
        initDSESB4(s[994]);
        initDSESB5(s[995]);
        initDSLAMT(s[996]);
        initDSLAMT_I(s[997]);
        initDSLAMT_IFLAG(s[998]);
        initDSLAMT2(s[999]);
        initDSLAMT2_I(s[1000]);
        initDSLAMT2_IFLAG(s[1001]);
        initDSLAMT3(s[1002]);
        initDSLAMT3_I(s[1003]);
        initDSLAMT3_IFLAG(s[1004]);
        initDSLAMT4(s[1005]);
        initDSLAMT4_I(s[1006]);
        initDSLAMT4_IFLAG(s[1007]);
        initDSLAMT5(s[1008]);
        initDSLAMT5_I(s[1009]);
        initDSLAMT5_IFLAG(s[1010]);
        initDSLEST(s[1011]);
        initDSLEST2(s[1012]);
        initDSLEST3(s[1013]);
        initDSLEST4(s[1014]);
        initDSLEST5(s[1015]);
        initDSLPAY2(s[1016]);
        initDSLPAY2_I(s[1017]);
        initDSLPAY2_IFLAG(s[1018]);
        initDSLPAY(s[1019]);
        initDSLPAY_I(s[1020]);
        initDSLPAY_IFLAG(s[1021]);
        initDSLPAY3(s[1022]);
        initDSLPAY3_I(s[1023]);
        initDSLPAY3_IFLAG(s[1024]);
        initDSLPAY4(s[1025]);
        initDSLPAY4_I(s[1026]);
        initDSLPAY4_IFLAG(s[1027]);
        initDSLPAY5(s[1028]);
        initDSLPAY5_I(s[1029]);
        initDSLPAY5_IFLAG(s[1030]);
        initDSNAM(s[1031]);
        initDSNAM_I(s[1032]);
        initDSNAM_IFLAG(s[1033]);
        initDSNAM2(s[1034]);
        initDSNAM2_I(s[1035]);
        initDSNAM2_IFLAG(s[1036]);
        initDSNAM3(s[1037]);
        initDSNAM3_I(s[1038]);
        initDSNAM3_IFLAG(s[1039]);
        initDSNAM4(s[1040]);
        initDSNAM4_I(s[1041]);
        initDSNAM4_IFLAG(s[1042]);
        initDSNAM5(s[1043]);
        initDSNAM5_I(s[1044]);
        initDSNAM5_IFLAG(s[1045]);
        initDSNUM(s[1046]);
        initDSNUM_I(s[1047]);
        initDSNUM_IFLAG(s[1048]);
        initDSONM10(s[1049]);
        initDSONM10_I(s[1050]);
        initDSONM10_IFLAG(s[1051]);
        initDSONM1(s[1052]);
        initDSONM1_I(s[1053]);
        initDSONM1_IFLAG(s[1054]);
        initDSONM2(s[1055]);
        initDSONM2_I(s[1056]);
        initDSONM2_IFLAG(s[1057]);
        initDSONM3(s[1058]);
        initDSONM3_I(s[1059]);
        initDSONM3_IFLAG(s[1060]);
        initDSONM4(s[1061]);
        initDSONM4_I(s[1062]);
        initDSONM4_IFLAG(s[1063]);
        initDSONM5(s[1064]);
        initDSONM5_I(s[1065]);
        initDSONM5_IFLAG(s[1066]);
        initDSONM6(s[1067]);
        initDSONM6_I(s[1068]);
        initDSONM6_IFLAG(s[1069]);
        initDSONM7(s[1070]);
        initDSONM7_I(s[1071]);
        initDSONM7_IFLAG(s[1072]);
        initDSONM8(s[1073]);
        initDSONM8_I(s[1074]);
        initDSONM8_IFLAG(s[1075]);
        initDSONM9(s[1076]);
        initDSONM9_I(s[1077]);
        initDSONM9_IFLAG(s[1078]);
        initDSPER(s[1079]);
        initDSPER2(s[1080]);
        initDSREC(s[1081]);
        initDSREC_I(s[1082]);
        initDSREC_IFLAG(s[1083]);
        initDSREC2(s[1084]);
        initDSREC2_I(s[1085]);
        initDSREC2_IFLAG(s[1086]);
        initDSREC3(s[1087]);
        initDSREC3_I(s[1088]);
        initDSREC3_IFLAG(s[1089]);
        initDSREC4(s[1090]);
        initDSREC4_I(s[1091]);
        initDSREC4_IFLAG(s[1092]);
        initDSREC5(s[1093]);
        initDSREC5_I(s[1094]);
        initDSREC5_IFLAG(s[1095]);
        initDSRSP(s[1096]);
        initDSRSP_I(s[1097]);
        initDSRSP_IFLAG(s[1098]);
        initDSRSP2(s[1099]);
        initDSRSP2_I(s[1100]);
        initDSRSP2_IFLAG(s[1101]);
        initDSRSP3(s[1102]);
        initDSRSP3_I(s[1103]);
        initDSRSP3_IFLAG(s[1104]);
        initDSRSP4(s[1105]);
        initDSRSP4_I(s[1106]);
        initDSRSP4_IFLAG(s[1107]);
        initDSRSP5(s[1108]);
        initDSRSP5_I(s[1109]);
        initDSRSP5_IFLAG(s[1110]);
        initFBONDTY1(s[1111]);
        initFBONDTY2(s[1112]);
        initFBONDTY3(s[1113]);
        initFBONDVB(s[1114]);
        initFBONDV(s[1115]);
        initFBONDV_I(s[1116]);
        initFBONDV_IFLAG(s[1117]);
        initFCACSH(s[1118]);
        initFCACSH_I(s[1119]);
        initFCACSH_IFLAG(s[1120]);
        initFCINVAL(s[1121]);
        initFCINVAL_I(s[1122]);
        initFCINVAL_IFLAG(s[1123]);
        initFCINVLB(s[1124]);
        initFCISAB(s[1125]);
        initFCISAV(s[1126]);
        initFCISAV_I(s[1127]);
        initFCISAV_IFLAG(s[1128]);
        initFCNUMIN(s[1129]);
        initFCNUMIN_I(s[1130]);
        initFCNUMIN_IFLAG(s[1131]);
        initFCNUMSH(s[1132]);
        initFCNUMSH_I(s[1133]);
        initFCNUMSH_IFLAG(s[1134]);
        initFCOLLVB(s[1135]);
        initFCOLLV(s[1136]);
        initFCOLLV_I(s[1137]);
        initFCOLLV_IFLAG(s[1138]);
        initFCOSHAV(s[1139]);
        initFCOSVLB(s[1140]);
        initFCOSVLB_I(s[1141]);
        initFCOSVLB_IFLAG(s[1142]);
        initFCOVDIF(s[1143]);
        initFCOVDIN(s[1144]);
        initFCOVDIN_I(s[1145]);
        initFCOVDIN_IFLAG(s[1146]);
        initFCOVDSH(s[1147]);
        initFCOVDSH_I(s[1148]);
        initFCOVDSH_IFLAG(s[1149]);
        initFCOVNIN(s[1150]);
        initFCOVNIN_I(s[1151]);
        initFCOVNIN_IFLAG(s[1152]);
        initFCOVNSH(s[1153]);
        initFCOVNSH_I(s[1154]);
        initFCOVNSH_IFLAG(s[1155]);
        initFCSHVAL(s[1156]);
        initFCSHVAL_I(s[1157]);
        initFCSHVAL_IFLAG(s[1158]);
        initFCSHVLB(s[1159]);
        initFCSUPPR(s[1160]);
        initFEOPTV(s[1161]);
        initFEOPTV_I(s[1162]);
        initFEOPTV_IFLAG(s[1163]);
        initFEOPVB(s[1164]);
        initFESHAV(s[1165]);
        initFESHAV_I(s[1166]);
        initFESHAV_IFLAG(s[1167]);
        initFESHA(s[1168]);
        initFESHA_I(s[1169]);
        initFESHA_IFLAG(s[1170]);
        initFESHVB(s[1171]);
        initFGFOVB(s[1172]);
        initFGILTS1(s[1173]);
        initFGILTS1_I(s[1174]);
        initFGILTS1_IFLAG(s[1175]);
        initFGILTS2(s[1176]);
        initFGILTS2_I(s[1177]);
        initFGILTS2_IFLAG(s[1178]);
        initFGILTS3(s[1179]);
        initFGILTS3_I(s[1180]);
        initFGILTS3_IFLAG(s[1181]);
        initFGILTS4(s[1182]);
        initFGILTS4_I(s[1183]);
        initFGILTS4_IFLAG(s[1184]);
        initFGLTFOV(s[1185]);
        initFGLTFOV_I(s[1186]);
        initFGLTFOV_IFLAG(s[1187]);
        initFGLTUKV(s[1188]);
        initFGLTUKV_I(s[1189]);
        initFGLTUKV_IFLAG(s[1190]);
        initFGUKVB(s[1191]);
        initFIISAB(s[1192]);
        initFIISAV(s[1193]);
        initFIISAV_I(s[1194]);
        initFIISAV_IFLAG(s[1195]);
        initFINCVB(s[1196]);
        initFINCV(s[1197]);
        initFINFLV(s[1198]);
        initFINFLV_I(s[1199]);
        initFINFLV_IFLAG(s[1200]);
        initFINFSAV1(s[1201]);
        initFINFSAV1_I(s[1202]);
        initFINFSAV1_IFLAG(s[1203]);
        initFINFSAV2(s[1204]);
        initFINFSAV2_I(s[1205]);
        initFINFSAV2_IFLAG(s[1206]);
        initFINFSAV3(s[1207]);
        initFINFSAV3_I(s[1208]);
        initFINFSAV3_IFLAG(s[1209]);
        initFINFSAV4(s[1210]);
        initFINFSAV4_I(s[1211]);
        initFINFSAV4_IFLAG(s[1212]);
        initFINFVB(s[1213]);
        initFINFV(s[1214]);
        initFINFV_I(s[1215]);
        initFINFV_IFLAG(s[1216]);
        initFINSV(s[1217]);
        initFINSV_I(s[1218]);
        initFINSV_IFLAG(s[1219]);
        initFINS(s[1220]);
        initFINS_I(s[1221]);
        initFINS_IFLAG(s[1222]);
        initFINVOTV(s[1223]);
        initFINVOTV_I(s[1224]);
        initFINVOTV_IFLAG(s[1225]);
        initFINVOVB(s[1226]);
        initFINVTY01(s[1227]);
        initFINVTY01_I(s[1228]);
        initFINVTY01_IFLAG(s[1229]);
        initFINVTY02(s[1230]);
        initFINVTY02_I(s[1231]);
        initFINVTY02_IFLAG(s[1232]);
        initFINVTY03(s[1233]);
        initFINVTY03_I(s[1234]);
        initFINVTY03_IFLAG(s[1235]);
        initFINVTY04(s[1236]);
        initFINVTY04_I(s[1237]);
        initFINVTY04_IFLAG(s[1238]);
        initFINVTY05(s[1239]);
        initFINVTY05_I(s[1240]);
        initFINVTY05_IFLAG(s[1241]);
        initFINVTY06(s[1242]);
        initFINVTY06_I(s[1243]);
        initFINVTY06_IFLAG(s[1244]);
        initFINVTY07(s[1245]);
        initFINVTY07_I(s[1246]);
        initFINVTY07_IFLAG(s[1247]);
        initFINVTY08(s[1248]);
        initFINVTY08_I(s[1249]);
        initFINVTY08_IFLAG(s[1250]);
        initFINVTY09(s[1251]);
        initFINVTY09_I(s[1252]);
        initFINVTY09_IFLAG(s[1253]);
        initFINVTY10(s[1254]);
        initFINVTY10_I(s[1255]);
        initFINVTY10_IFLAG(s[1256]);
        initFINVTY11(s[1257]);
        initFINVTY11_I(s[1258]);
        initFINVTY11_IFLAG(s[1259]);
        initFISA1(s[1260]);
        initFISA1_I(s[1261]);
        initFISA1_IFLAG(s[1262]);
        initFISA2(s[1263]);
        initFISA2_I(s[1264]);
        initFISA2_IFLAG(s[1265]);
        initFKISAB(s[1266]);
        initFKISAV(s[1267]);
        initFKISAV_I(s[1268]);
        initFKISAV_IFLAG(s[1269]);
        initFLFENVB(s[1270]);
        initFLFENV(s[1271]);
        initFLFENV_I(s[1272]);
        initFLFENV_IFLAG(s[1273]);
        initFLFFSVB(s[1274]);
        initFLFFSV(s[1275]);
        initFLFFSV_I(s[1276]);
        initFLFFSV_IFLAG(s[1277]);
        initFLFSIVB(s[1278]);
        initFLFSIV(s[1279]);
        initFLFSIV_I(s[1280]);
        initFLFSIV_IFLAG(s[1281]);
        initFLFTEVB(s[1282]);
        initFLFTEV(s[1283]);
        initFLFTEV_I(s[1284]);
        initFLFTEV_IFLAG(s[1285]);
        initFLOANVB(s[1286]);
        initFLPROD1(s[1287]);
        initFLPROD1_I(s[1288]);
        initFLPROD1_IFLAG(s[1289]);
        initFLPROD2(s[1290]);
        initFLPROD2_I(s[1291]);
        initFLPROD2_IFLAG(s[1292]);
        initFLPROD3(s[1293]);
        initFLPROD3_I(s[1294]);
        initFLPROD3_IFLAG(s[1295]);
        initFLPROD4(s[1296]);
        initFLPROD4_I(s[1297]);
        initFLPROD4_IFLAG(s[1298]);
        initFNSVAL(s[1299]);
        initFNSVAL_I(s[1300]);
        initFNSVAL_IFLAG(s[1301]);
        initFNSVB(s[1302]);
        initFPEPVB(s[1303]);
        initFPEPV(s[1304]);
        initFPEPV_I(s[1305]);
        initFPEPV_IFLAG(s[1306]);
        initFSACSH(s[1307]);
        initFSACSH_I(s[1308]);
        initFSACSH_IFLAG(s[1309]);
        initFSHARE1(s[1310]);
        initFSHARE1_I(s[1311]);
        initFSHARE1_IFLAG(s[1312]);
        initFSHARE2(s[1313]);
        initFSHARE2_I(s[1314]);
        initFSHARE2_IFLAG(s[1315]);
        initFSHARE3(s[1316]);
        initFSHARE3_I(s[1317]);
        initFSHARE3_IFLAG(s[1318]);
        initFSHMUT(s[1319]);
        initFSHOSVB(s[1320]);
        initFSHOSV(s[1321]);
        initFSHOSV_I(s[1322]);
        initFSHOSV_IFLAG(s[1323]);
        initFSHPRI(s[1324]);
        initFSHUKVB(s[1325]);
        initFSHUKV(s[1326]);
        initFSHUKV_I(s[1327]);
        initFSHUKV_IFLAG(s[1328]);
        initFSINVAL(s[1329]);
        initFSINVAL_I(s[1330]);
        initFSINVAL_IFLAG(s[1331]);
        initFSINVLB(s[1332]);
        initFSNUMIN(s[1333]);
        initFSNUMIN_I(s[1334]);
        initFSNUMIN_IFLAG(s[1335]);
        initFSNUMSH(s[1336]);
        initFSNUMSH_I(s[1337]);
        initFSNUMSH_IFLAG(s[1338]);
        initFSOSHAV(s[1339]);
        initFSOSVLB(s[1340]);
        initFSOSVLB_I(s[1341]);
        initFSOSVLB_IFLAG(s[1342]);
        initFSSHVAL(s[1343]);
        initFSSHVAL_I(s[1344]);
        initFSSHVAL_IFLAG(s[1345]);
        initFSSHVLB(s[1346]);
        initFSSUPPR(s[1347]);
        initFSTYPIN1(s[1348]);
        initFSTYPIN2(s[1349]);
        initFSTYPIN3(s[1350]);
        initFSTYPSH1(s[1351]);
        initFSTYPSH2(s[1352]);
        initFSTYPSH3(s[1353]);
        initFSTYPSH4(s[1354]);
        initIEVAL2(s[1355]);
        initIEVAL3(s[1356]);
        initIEVALB2(s[1357]);
        initIEVALB3(s[1358]);
        initIEVALB(s[1359]);
        initIEVAL(s[1360]);
        initIEYR2(s[1361]);
        initIEYR3(s[1362]);
        initIEYR(s[1363]);
        initIFUTVIB(s[1364]);
        initIGDS10(s[1365]);
        initIGDS11(s[1366]);
        initIGDS12(s[1367]);
        initIGDS15(s[1368]);
        initIGDS16(s[1369]);
        initIGDS1(s[1370]);
        initIGDS2(s[1371]);
        initIGDS3(s[1372]);
        initIGDS4(s[1373]);
        initIGDS5(s[1374]);
        initIGDS6(s[1375]);
        initIGDS8(s[1376]);
        initIGDS9(s[1377]);
        initIGFUSE1(s[1378]);
        initIGFUSE2(s[1379]);
        initIGFUSE3(s[1380]);
        initIGFUSE4(s[1381]);
        initIGFUSE5(s[1382]);
        initIGFVALB(s[1383]);
        initIGIFVAL(s[1384]);
        initIHRCNUM(s[1385]);
        initIHRECNT(s[1386]);
        initIHSE1(s[1387]);
        initIHSE2(s[1388]);
        initIHSE7(s[1389]);
        initILACB(s[1390]);
        initILACC(s[1391]);
        initILGIFT(s[1392]);
        initILIFB(s[1393]);
        initILIFE(s[1394]);
        initILINB(s[1395]);
        initILINS(s[1396]);
        initILOTB(s[1397]);
        initILOTH(s[1398]);
        initILRDB(s[1399]);
        initILRED(s[1400]);
        initILUMP(s[1401]);
        initILUMTY1(s[1402]);
        initILUMTY2(s[1403]);
        initILUMTY3(s[1404]);
        initILUMTY4(s[1405]);
        initILUPB(s[1406]);
        initILUPP(s[1407]);
        initILWIN(s[1408]);
        initILWNB(s[1409]);
        initINSPOL(s[1410]);
        initINS(s[1411]);
        initISA(s[1412]);
        initIVAL2(s[1413]);
        initIVAL3(s[1414]);
        initIVALB2(s[1415]);
        initIVALB3(s[1416]);
        initIVALB(s[1417]);
        initIVAL(s[1418]);
        initIWAT10(s[1419]);
        initIWAT13(s[1420]);
        initIWAT14(s[1421]);
        initIWAT1(s[1422]);
        initIWAT2(s[1423]);
        initIWAT3(s[1424]);
        initIWAT4(s[1425]);
        initIWAT5(s[1426]);
        initIWAT7(s[1427]);
        initIWAT8(s[1428]);
        initIWAT9(s[1429]);
        initIWHO2(s[1430]);
        initIWHO3(s[1431]);
        initIWHO(s[1432]);
        initIWILL(s[1433]);
        initSELECTAD(s[1434]);
        initSELECTAD_I(s[1435]);
        initSELECTAD_IFLAG(s[1436]);
        initUITRUST(s[1437]);
        initDVANYARR(s[1438]);
        initDVCACRVAL(s[1439]);
        initDVCACTV(s[1440]);
        initDVCAODVAL(s[1441]);
        initDVCASVV(s[1442]);
        initDVCAVAL(s[1443]);
        initDVCHMARR(s[1444]);
        initDVCISAV(s[1445]);
        initDVCOINV2(s[1446]);
        initDVCOINV3(s[1447]);
        initDVCOINV(s[1448]);
        initDVCRTARR(s[1449]);
        initDVCTARR(s[1450]);
        initDVDHPOWE2(s[1451]);
        initDVDHPOWE3(s[1452]);
        initDVDHPOWE4(s[1453]);
        initDVDHPOWE5(s[1454]);
        initDVDHPOWE(s[1455]);
        initDVDLOWE2(s[1456]);
        initDVDLOWE3(s[1457]);
        initDVDLOWE4(s[1458]);
        initDVDLOWE5(s[1459]);
        initDVDLOWE(s[1460]);
        initDVDMOOWE2(s[1461]);
        initDVDMOOWE3(s[1462]);
        initDVDMOOWE4(s[1463]);
        initDVDMOOWE5(s[1464]);
        initDVDMOOWE(s[1465]);
        initDVELARR(s[1466]);
        initDVFBONDV(s[1467]);
        initDVFCINVAL(s[1468]);
        initDVFCOLLV(s[1469]);
        initDVFEOPTV(s[1470]);
        initDVFESHARES(s[1471]);
        initDVFESHAV(s[1472]);
        initDVFFASSETS(s[1473]);
        initDVFGLTFOV(s[1474]);
        initDVFGLTUKV(s[1475]);
        initDVFINFLV(s[1476]);
        initDVFINFVAL(s[1477]);
        initDVFINFV(s[1478]);
        initDVFINVOTV(s[1479]);
        initDVFLFENV(s[1480]);
        initDVFLFFSV(s[1481]);
        initDVFLFSIV(s[1482]);
        initDVFLFTEV(s[1483]);
        initDVFNSVAL(s[1484]);
        initDVFSHOSV(s[1485]);
        initDVFSHUKV(s[1486]);
        initDVFSINVAL(s[1487]);
        initDVGASARR(s[1488]);
        initDVHPAR(s[1489]);
        initDVIISAV(s[1490]);
        initDVINSV(s[1491]);
        initDVISAVAL(s[1492]);
        initDVKISAV(s[1493]);
        initDVLNAR(s[1494]);
        initDVMOAR(s[1495]);
        initDVOTHARR(s[1496]);
        initDVPEPV(s[1497]);
        initDVRNTARR(s[1498]);
        initDVSAVAL(s[1499]);
        initDVSHCVAL(s[1500]);
        initDVSHODVAL2(s[1501]);
        initDVSHODVAL3(s[1502]);
        initDVSHODVAL(s[1503]);
        initDVSHSVAL(s[1504]);
        initDVTAXARR(s[1505]);
        initDVTELARR(s[1506]);
        initDVVATARR(s[1507]);
        initDVWATARR(s[1508]);
        initEMPSHARE(s[1509]);
        initFLNOS1(s[1510]);
        initFLNOS2(s[1511]);
        initFLNOS3(s[1512]);
        initFLNOS4(s[1513]);
        initFLNOS5(s[1514]);
        initFNSAV1(s[1515]);
        initFNSAV2(s[1516]);
        initFNSAV3(s[1517]);
        initFNSAV4(s[1518]);
        initFTIBOND(s[1519]);
        initGCBGILT(s[1520]);
        initHASCC(s[1521]);
        initHASHP(s[1522]);
        initHASLF(s[1523]);
        initHASMO(s[1524]);
        initHASPLINF(s[1525]);
        initHASSC(s[1526]);
        initHASSL(s[1527]);
        initHFINL(s[1528]);
        initHFINW_EXCENDW(s[1529]);
        initHPARR(s[1530]);
        initHPLFT2(s[1531]);
        initHPLFT3(s[1532]);
        initHPLFT4(s[1533]);
        initHPLFT5(s[1534]);
        initHPLFT(s[1535]);
        initHPOS1(s[1536]);
        initHPOS2(s[1537]);
        initHPOS3(s[1538]);
        initHPOS4(s[1539]);
        initHPOS5(s[1540]);
        initHPYLFT2_I(s[1541]);
        initHPYLFT3_I(s[1542]);
        initHPYLFT4_I(s[1543]);
        initHPYLFT5_I(s[1544]);
        initHPYLFT_I(s[1545]);
        initLNARR(s[1546]);
        initLNLFT2(s[1547]);
        initLNLFT3(s[1548]);
        initLNLFT4(s[1549]);
        initLNLFT5(s[1550]);
        initLNLFT(s[1551]);
        initLNOS1(s[1552]);
        initLNOS2(s[1553]);
        initLNOS3(s[1554]);
        initLNOS4(s[1555]);
        initLNOS5(s[1556]);
        initMOARR(s[1557]);
        initMOLFT2(s[1558]);
        initMOLFT3(s[1559]);
        initMOLFT4(s[1560]);
        initMOLFT5(s[1561]);
        initMOLFT(s[1562]);
        initMOOS1(s[1563]);
        initMOOS2(s[1564]);
        initMOOS3(s[1565]);
        initMOOS4(s[1566]);
        initMOOS5(s[1567]);
        initOTHERFA(s[1568]);
        initOTHSHARE(s[1569]);
        initPEP(s[1570]);
        initPNSBOND(s[1571]);
        initSAVDEP(s[1572]);
        initSLNOS1(s[1573]);
        initSLNOS2(s[1574]);
        initSLNOS3(s[1575]);
        initSLNOS4(s[1576]);
        initSLNOS5(s[1577]);
        initT_FLNS(s[1578]);
        initT_LNS(s[1579]);
        initT_SLNS(s[1580]);
        initTOTBILLARR(s[1581]);
        initTOTCC(s[1582]);
        initTOTHP(s[1583]);
        initTOTLOS(s[1584]);
        initTOTMO(s[1585]);
        initTOTSC(s[1586]);
        initOIGGT(s[1587]);
        initOIGOE(s[1588]);
        initOIGOE_I(s[1589]);
        initOIGOE_IFLAG(s[1590]);
        initOIGOS(s[1591]);
        initOIGOS_I(s[1592]);
        initOIGOS_IFLAG(s[1593]);
        initOIGPP(s[1594]);
        initOIGPP_I(s[1595]);
        initOIGPP_IFLAG(s[1596]);
        initOIGRR(s[1597]);
        initOINEG(s[1598]);
        initOINFR(s[1599]);
        initOINGT(s[1600]);
        initOINMA(s[1601]);
        initOINOE(s[1602]);
        initOINOP(s[1603]);
        initOINOS(s[1604]);
        initOINPP(s[1605]);
        initOINRO(s[1606]);
        initOINRR(s[1607]);
        initOLARGE(s[1608]);
        initOPENS01(s[1609]);
        initOPENS02(s[1610]);
        initOPENS03(s[1611]);
        initOPENS04(s[1612]);
        initOPENS05(s[1613]);
        initOPENS06(s[1614]);
        initOPENS07(s[1615]);
        initOPENS08(s[1616]);
        initOSTANDL(s[1617]);
        initOTHSRC1(s[1618]);
        initOTHSRC1_I(s[1619]);
        initOTHSRC1_IFLAG(s[1620]);
        initOTHSRC2(s[1621]);
        initOTHSRC2_I(s[1622]);
        initOTHSRC2_IFLAG(s[1623]);
        initOTHSRC3(s[1624]);
        initOTHSRC3_I(s[1625]);
        initOTHSRC3_IFLAG(s[1626]);
        initOTRUST01(s[1627]);
        initOTRUST02(s[1628]);
        initOTRUST03(s[1629]);
        initOTRUST04(s[1630]);
        initOTRUST05(s[1631]);
        initOTRUST06(s[1632]);
        initOTRUST07(s[1633]);
        initOTRUST08(s[1634]);
        initOTRUST09(s[1635]);
        initOTRUST10(s[1636]);
        initOTRUST11(s[1637]);
        initOTRUST12(s[1638]);
        initOTRUST13(s[1639]);
        initOTRUST14(s[1640]);
        initPADDYR_F(s[1641]);
        initPAGERET(s[1642]);
        initPASTMM_F(s[1643]);
        initPASTMY_F(s[1644]);
        initPAVCAM_F(s[1645]);
        initPAVCAM_S(s[1646]);
        initPAVCFR_F(s[1647]);
        initPAVCFR_S(s[1648]);
        initPAVCH_F(s[1649]);
        initPAVCH_S(s[1650]);
        initPAVCIN_F(s[1651]);
        initPAVCIN_S(s[1652]);
        initPAVCPR_F(s[1653]);
        initPAVCPR_S(s[1654]);
        initPAVCUV_F(s[1655]);
        initPAVCUV_F_I(s[1656]);
        initPAVCUV_F_IFLAG(s[1657]);
        initPAVCUV_S(s[1658]);
        initPAVCUV_S_I(s[1659]);
        initPAVCUV_S_IFLAG(s[1660]);
        initPAVCVB_F(s[1661]);
        initPAVCVB_S(s[1662]);
        initPAVDOC_F(s[1663]);
        initPAVDOC_S(s[1664]);
        initPBDOCS_F(s[1665]);
        initPBDOCS_S(s[1666]);
        initPBFRAC_F(s[1667]);
        initPBFRAC_F_I(s[1668]);
        initPBFRAC_F_IFLAG(s[1669]);
        initPBFRAC_S(s[1670]);
        initPBFRAC_S_I(s[1671]);
        initPBFRAC_S_IFLAG(s[1672]);
        initPBINCA_F(s[1673]);
        initPBINCA_S(s[1674]);
        initPBINCF_F(s[1675]);
        initPBINCF_S(s[1676]);
        initPBINCH_F(s[1677]);
        initPBINCH_S(s[1678]);
        initPBLMVB_F(s[1679]);
        initPBLMVB_S(s[1680]);
        initPBLUMV_F(s[1681]);
        initPBLUMV_F_I(s[1682]);
        initPBLUMV_F_IFLAG(s[1683]);
        initPBLUMV_S(s[1684]);
        initPBLUMV_S_I(s[1685]);
        initPBLUMV_S_IFLAG(s[1686]);
        initPBQUAL_F(s[1687]);
        initPBQUAL_F_I(s[1688]);
        initPBQUAL_F_IFLAG(s[1689]);
        initPBQUAL_S(s[1690]);
        initPBQUAL_S_I(s[1691]);
        initPBQUAL_S_IFLAG(s[1692]);
        initPBSTMM_F(s[1693]);
        initPBSTMM_S(s[1694]);
        initPBSTMY_F(s[1695]);
        initPBSTMY_S(s[1696]);
        initPCDOCS_F(s[1697]);
        initPCDOCS_S(s[1698]);
        initPCSTMM_F(s[1699]);
        initPCSTMM_S(s[1700]);
        initPCSTMY_F(s[1701]);
        initPCSTMY_S(s[1702]);
        initPDBCAL_F(s[1703]);
        initPDBCAL_S(s[1704]);
        initPDCVAL_F(s[1705]);
        initPDCVAL_F_I(s[1706]);
        initPDCVAL_F_IFLAG(s[1707]);
        initPDCVAL_S(s[1708]);
        initPDCVAL_S_I(s[1709]);
        initPDCVAL_S_IFLAG(s[1710]);
        initPDCVB_F(s[1711]);
        initPDCVB_S(s[1712]);
        initPEANYO(s[1713]);
        initPEANYO_I(s[1714]);
        initPEANYO_IFLAG(s[1715]);
        initPEARLRS(s[1716]);
        initPECONT(s[1717]);
        initPECONT_I(s[1718]);
        initPECONT_IFLAG(s[1719]);
        initPEMELG(s[1720]);
        initPEMELG_I(s[1721]);
        initPEMELG_IFLAG(s[1722]);
        initPEMFIN(s[1723]);
        initPEMMEM(s[1724]);
        initPEMMEM_I(s[1725]);
        initPEMMEM_IFLAG(s[1726]);
        initPEMOFF(s[1727]);
        initPEMOFF_I(s[1728]);
        initPEMOFF_IFLAG(s[1729]);
        initPEVERC(s[1730]);
        initPEVERC_I(s[1731]);
        initPEVERC_IFLAG(s[1732]);
        initPEVERNC(s[1733]);
        initPEVERNC_I(s[1734]);
        initPEVERNC_IFLAG(s[1735]);
        initPEWYNO01(s[1736]);
        initPEWYNO02(s[1737]);
        initPEWYNO03(s[1738]);
        initPEWYNO04(s[1739]);
        initPEXPRET(s[1740]);
        initPFBEG_F(s[1741]);
        initPFBEG_S(s[1742]);
        initPFBEG_T(s[1743]);
        initPFCURV_F(s[1744]);
        initPFCURV_F_I(s[1745]);
        initPFCURV_F_IFLAG(s[1746]);
        initPFCURV_S(s[1747]);
        initPFCURV_S_I(s[1748]);
        initPFCURV_S_IFLAG(s[1749]);
        initPFCURV_T(s[1750]);
        initPFCURV_T_I(s[1751]);
        initPFCURV_T_IFLAG(s[1752]);
        initPFCUVB_F(s[1753]);
        initPFCUVB_S(s[1754]);
        initPFCUVB_T(s[1755]);
        initPFDDV_F(s[1756]);
        initPFDDV_F_I(s[1757]);
        initPFDDV_F_IFLAG(s[1758]);
        initPFDDV_S(s[1759]);
        initPFDDV_S_I(s[1760]);
        initPFDDV_S_IFLAG(s[1761]);
        initPFDDV_T(s[1762]);
        initPFDDV_T_I(s[1763]);
        initPFDDV_T_IFLAG(s[1764]);
        initPFDDVB_F(s[1765]);
        initPFDDVB_S(s[1766]);
        initPFDDVB_T(s[1767]);
        initPFDOCS_F(s[1768]);
        initPFDOCS_S(s[1769]);
        initPFDOCS_T(s[1770]);
        initPFDRAW_F(s[1771]);
        initPFDRAW_F_I(s[1772]);
        initPFDRAW_F_IFLAG(s[1773]);
        initPFDRAW_S(s[1774]);
        initPFDRAW_S_I(s[1775]);
        initPFDRAW_S_IFLAG(s[1776]);
        initPFDRAW_T(s[1777]);
        initPFDRAW_T_I(s[1778]);
        initPFDRAW_T_IFLAG(s[1779]);
        initPFEND_F(s[1780]);
        initPFEND_S(s[1781]);
        initPFEND_T(s[1782]);
        initPFINCA_F(s[1783]);
        initPFINCA_F_I(s[1784]);
        initPFINCA_F_IFLAG(s[1785]);
        initPFINCA_S(s[1786]);
        initPFINCA_S_I(s[1787]);
        initPFINCA_S_IFLAG(s[1788]);
        initPFINCA_T(s[1789]);
        initPFINCA_T_I(s[1790]);
        initPFINCA_T_IFLAG(s[1791]);
        initPFINCP_F(s[1792]);
        initPFINCP_F_I(s[1793]);
        initPFINCP_F_IFLAG(s[1794]);
        initPFINCP_S(s[1795]);
        initPFINCP_S_I(s[1796]);
        initPFINCP_S_IFLAG(s[1797]);
        initPFINCP_T(s[1798]);
        initPFINCP_T_I(s[1799]);
        initPFINCP_T_IFLAG(s[1800]);
        initPFLUMV_F(s[1801]);
        initPFLUMV_F_I(s[1802]);
        initPFLUMV_F_IFLAG(s[1803]);
        initPFLUMV_S(s[1804]);
        initPFLUMV_S_I(s[1805]);
        initPFLUMV_S_IFLAG(s[1806]);
        initPFLUMV_T(s[1807]);
        initPFLUMV_T_I(s[1808]);
        initPFLUMV_T_IFLAG(s[1809]);
        initPFLUVB_F(s[1810]);
        initPFLUVB_S(s[1811]);
        initPFLUVB_T(s[1812]);
        initPFNUM(s[1813]);
        initPFNUM_I(s[1814]);
        initPFNUM_IFLAG(s[1815]);
        initPFOCTY_F(s[1816]);
        initPFOCTY_F_I(s[1817]);
        initPFOCTY_F_IFLAG(s[1818]);
        initPFOCTY_S(s[1819]);
        initPFOCTY_S_I(s[1820]);
        initPFOCTY_S_IFLAG(s[1821]);
        initPFOCTY_T(s[1822]);
        initPFOCTY_T_I(s[1823]);
        initPFOCTY_T_IFLAG(s[1824]);
        initPFREC_F(s[1825]);
        initPFREC_F_I(s[1826]);
        initPFREC_F_IFLAG(s[1827]);
        initPFREC_S(s[1828]);
        initPFREC_S_I(s[1829]);
        initPFREC_S_IFLAG(s[1830]);
        initPFREC_T(s[1831]);
        initPFREC_T_I(s[1832]);
        initPFREC_T_IFLAG(s[1833]);
        initPFSTMM_F(s[1834]);
        initPFSTMM_S(s[1835]);
        initPFSTMM_T(s[1836]);
        initPFSTMY_F(s[1837]);
        initPFSTMY_S(s[1838]);
        initPFSTMY_T(s[1839]);
        initPFTYP_F(s[1840]);
        initPFTYP_F_I(s[1841]);
        initPFTYP_F_IFLAG(s[1842]);
        initPFTYP_S(s[1843]);
        initPFTYP_S_I(s[1844]);
        initPFTYP_S_IFLAG(s[1845]);
        initPFTYP_T(s[1846]);
        initPFTYP_T_I(s[1847]);
        initPFTYP_T_IFLAG(s[1848]);
        initPFULRET(s[1849]);
        initPINCINP(s[1850]);
        initPINCT(s[1851]);
        initPINTRE(s[1852]);
        initPINTRE_I(s[1853]);
        initPINTRE_IFLAG(s[1854]);
        initPINTRN(s[1855]);
        initPINTRN_I(s[1856]);
        initPINTRN_IFLAG(s[1857]);
        initPIRREG_F(s[1858]);
        initPMORTC_F(s[1859]);
        initPMORTC_S(s[1860]);
        initPNANYO(s[1861]);
        initPNANYO_I(s[1862]);
        initPNANYO_IFLAG(s[1863]);
        initPNCONT(s[1864]);
        initPNCONT_I(s[1865]);
        initPNCONT_IFLAG(s[1866]);
        initPNUMSC(s[1867]);
        initPNUMSC_I(s[1868]);
        initPNUMSC_IFLAG(s[1869]);
        initPOADD_F1(s[1870]);
        initPOADD_F1_I(s[1871]);
        initPOADD_F1_IFLAG(s[1872]);
        initPOADD_F2(s[1873]);
        initPOADD_F2_I(s[1874]);
        initPOADD_F2_IFLAG(s[1875]);
        initPOADD_S1(s[1876]);
        initPOADD_S1_I(s[1877]);
        initPOADD_S1_IFLAG(s[1878]);
        initPOADD_S2(s[1879]);
        initPOADD_S2_I(s[1880]);
        initPOADD_S2_IFLAG(s[1881]);
        initPOCNAM_F(s[1882]);
        initPOCNAM_S(s[1883]);
        initPOCNFG_F(s[1884]);
        initPOCNFG_S(s[1885]);
        initPOCNFR_F(s[1886]);
        initPOCNFR_S(s[1887]);
        initPOCNMSC(s[1888]);
        initPOCNMSC_I(s[1889]);
        initPOCNMSC_IFLAG(s[1890]);
        initPOCNPR_F(s[1891]);
        initPOCNPR_S(s[1892]);
        initPOCONH_F(s[1893]);
        initPOCONH_S(s[1894]);
        initPOCTYP_F(s[1895]);
        initPOCTYP_F_I(s[1896]);
        initPOCTYP_F_IFLAG(s[1897]);
        initPOCTYP_S(s[1898]);
        initPOCTYP_S_I(s[1899]);
        initPOCTYP_S_IFLAG(s[1900]);
        initPOEMAM_F(s[1901]);
        initPOEMAM_S(s[1902]);
        initPOEMFR_F(s[1903]);
        initPOEMFR_S(s[1904]);
        initPOEMPC_F(s[1905]);
        initPOEMPC_S(s[1906]);
        initPOEMPH_F(s[1907]);
        initPOEMPH_S(s[1908]);
        initPOEMPR_F(s[1909]);
        initPOEMPR_S(s[1910]);
        initPOJOIN_F(s[1911]);
        initPOJOIN_S(s[1912]);
        initPOLSYR_F(s[1913]);
        initPOLSYR_S(s[1914]);
        initPOMETH_F(s[1915]);
        initPOMETH_S(s[1916]);
        initPOPYCH_F(s[1917]);
        initPOPYCH_S(s[1918]);
        initPORAGE_F(s[1919]);
        initPORAGE_S(s[1920]);
        initPORAGET_F(s[1921]);
        initPORAGET_S(s[1922]);
        initPORATE_F(s[1923]);
        initPORATE_S(s[1924]);
        initPOYRAM_F(s[1925]);
        initPOYRAM_S(s[1926]);
        initPPACCU_F(s[1927]);
        initPPACCU_S(s[1928]);
        initPPDOCS_F(s[1929]);
        initPPDOCS_S(s[1930]);
        initPPEIRA_F(s[1931]);
        initPPEIRA_S(s[1932]);
        initPPEIRF_F(s[1933]);
        initPPEIRF_S(s[1934]);
        initPPEIRH_F(s[1935]);
        initPPEIRH_S(s[1936]);
        initPPEMAM_F(s[1937]);
        initPPEMAM_S(s[1938]);
        initPPEMFR_F(s[1939]);
        initPPEMFR_S(s[1940]);
        initPPEMP_F(s[1941]);
        initPPEMP_S(s[1942]);
        initPPEMPH_F(s[1943]);
        initPPEMPH_S(s[1944]);
        initPPEMPR_F(s[1945]);
        initPPEMPR_S(s[1946]);
        initPPEVRG_F(s[1947]);
        initPPEVRG_S(s[1948]);
        initPPIRRA_F(s[1949]);
        initPPIRRA_S(s[1950]);
        initPPIRRH_F(s[1951]);
        initPPIRRH_S(s[1952]);
        initPPIRRN_F(s[1953]);
        initPPIRRN_S(s[1954]);
        initPPIRRY_F(s[1955]);
        initPPIRRY_S(s[1956]);
        initPPLASY_F(s[1957]);
        initPPLASY_S(s[1958]);
        initPPLSTA_F(s[1959]);
        initPPLSTA_S(s[1960]);
        initPPLSTP_F(s[1961]);
        initPPLSTP_S(s[1962]);
        initPPNINS_F(s[1963]);
        initPPNINS_S(s[1964]);
        initPPORG_F(s[1965]);
        initPPORG_S(s[1966]);
        initPPPAY_F(s[1967]);
        initPPPAY_S(s[1968]);
        initPPRGAM_F(s[1969]);
        initPPRGAM_S(s[1970]);
        initPPRGFG_F(s[1971]);
        initPPRGFG_S(s[1972]);
        initPPRGFR_F(s[1973]);
        initPPRGFR_S(s[1974]);
        initPPRGH_F(s[1975]);
        initPPRGH_S(s[1976]);
        initPPRGPE_F(s[1977]);
        initPPRGPE_S(s[1978]);
        initPPRNMSC(s[1979]);
        initPPRNMSC_I(s[1980]);
        initPPRNMSC_IFLAG(s[1981]);
        initPPSTMM_F(s[1982]);
        initPPSTMM_S(s[1983]);
        initPPSTMY_F(s[1984]);
        initPPSTMY_S(s[1985]);
        initPPTYP_F(s[1986]);
        initPPTYP_S(s[1987]);
        initPPVAL_F(s[1988]);
        initPPVAL_F_I(s[1989]);
        initPPVAL_F_IFLAG(s[1990]);
        initPPVAL_S(s[1991]);
        initPPVAL_S_I(s[1992]);
        initPPVAL_S_IFLAG(s[1993]);
        initPPVALB_F(s[1994]);
        initPPVALB_F_I(s[1995]);
        initPPVALB_S(s[1996]);
        initPPVALB_S_I(s[1997]);
        initPPYRST_F(s[1998]);
        initPPYRST_S(s[1999]);
        initPPYSTP_1(s[2000]);
        initPPYSTP_2(s[2001]);
        initPPYSTP_3(s[2002]);
        initPPYSTP_8(s[2003]);
        initPPYSTP_9(s[2004]);
        initPPYSTP10(s[2005]);
        initPRACCU(s[2006]);
        initPRETAIN(s[2007]);
        initPRETAIN_I(s[2008]);
        initPRETAIN_IFLAG(s[2009]);
        initPSCHM_F(s[2010]);
        initPSCHM_F_I(s[2011]);
        initPSCHM_F_IFLAG(s[2012]);
        initPSCHM_S(s[2013]);
        initPSCHM_S_I(s[2014]);
        initPSCHM_S_IFLAG(s[2015]);
        initPSCHM_T(s[2016]);
        initPSCHM_T_I(s[2017]);
        initPSCHM_T_IFLAG(s[2018]);
        initPSCHY_F(s[2019]);
        initPSCHY_S(s[2020]);
        initPSCHY_T(s[2021]);
        initPWEXPA(s[2022]);
        initPWEXPA_I(s[2023]);
        initPWEXPA_IFLAG(s[2024]);
        initPWEXPH(s[2025]);
        initPWEXPH_I(s[2026]);
        initPWEXPH_IFLAG(s[2027]);
        initPWIDFUT(s[2028]);
        initPWIDFUT_I(s[2029]);
        initPWIDFUT_IFLAG(s[2030]);
        initREGLRPY1(s[2031]);
        initREGLRPY2(s[2032]);
        initREGLRPY3(s[2033]);
        initACCFRAC_F(s[2034]);
        initACCFRAC_S(s[2035]);
        initASAFT_F(s[2036]);
        initASAFT_S(s[2037]);
        initDVDBINC1(s[2038]);
        initDVDBINC2(s[2039]);
        initDVDBINC3(s[2040]);
        initDVDBINCALL(s[2041]);
        initDVDBLUMP1(s[2042]);
        initDVDBLUMP2(s[2043]);
        initDVDBLUMP3(s[2044]);
        initDVDBOPENT_F(s[2045]);
        initDVDBOPENT_S(s[2046]);
        initDVDBRWEALTHVAL(s[2047]);
        initDVHASAVC(s[2048]);
        initDVHASDB(s[2049]);
        initDVHASDC(s[2050]);
        initDVHASPFCUR(s[2051]);
        initDVHASPFD(s[2052]);
        initDVHASPP(s[2053]);
        initDVPAVCUV(s[2054]);
        initDVPENINC_F(s[2055]);
        initDVPENINC_S(s[2056]);
        initDVPFCURVAL(s[2057]);
        initDVPFDDV(s[2058]);
        initDVPINPVAL(s[2059]);
        initDVPPVAL(s[2060]);
        initDVSPEN(s[2061]);
        initDVVALDBLUM(s[2062]);
        initDVVALDBT(s[2063]);
        initDVVALDCOS(s[2064]);
        initDVVALPBLUM(s[2065]);
        initPWID(s[2066]);
        initSPASAF(s[2067]);
        initTOTPEN(s[2068]);
        initIHATTI(s[2069]);
        initOBSPV(s[2070]);
        initOBUY1(s[2071]);
        initOCREDI1(s[2072]);
        initOCSVR1(s[2073]);
        initOCSVR2(s[2074]);
        initOCSVR3(s[2075]);
        initOCSVR4(s[2076]);
        initOCSVR5(s[2077]);
        initOCSVR6(s[2078]);
        initOCSVR7(s[2079]);
        initOCSVR8(s[2080]);
        initOEXPIN01(s[2081]);
        initOEXPIN02(s[2082]);
        initOEXPIN03(s[2083]);
        initOEXPIN04(s[2084]);
        initOEXPIN05(s[2085]);
        initOEXPIN06(s[2086]);
        initOEXPIN07(s[2087]);
        initOEXPIN08(s[2088]);
        initOEXPIN09(s[2089]);
        initOEXPIN10(s[2090]);
        initOEXPIN11(s[2091]);
        initOEXPIN12(s[2092]);
        initOINCA(s[2093]);
        initOINTEND(s[2094]);
        initOLEFTDO(s[2095]);
        initOLEFT(s[2096]);
        initOLONG(s[2097]);
        initOLONGYR(s[2098]);
        initOLSAVE(s[2099]);
        initOMATH(s[2100]);
        initONOSAV01(s[2101]);
        initONOSAV02(s[2102]);
        initONOSAV03(s[2103]);
        initONOSAV04(s[2104]);
        initONOSAV05(s[2105]);
        initONOSAV06(s[2106]);
        initOPROFF0(s[2107]);
        initOPROFF(s[2108]);
        initOPROFF1(s[2109]);
        initOPROFF2(s[2110]);
        initOPROFF3(s[2111]);
        initOPROFFW01(s[2112]);
        initOPROFFW02(s[2113]);
        initOPROFFW03(s[2114]);
        initOPROFFW04(s[2115]);
        initOPROFFW05(s[2116]);
        initOPROFFW06(s[2117]);
        initOPROFFW07(s[2118]);
        initOPROFFW08(s[2119]);
        initOPROFFW09(s[2120]);
        initOPROPE(s[2121]);
        initORETINC(s[2122]);
        initORISKA(s[2123]);
        initORISKC(s[2124]);
        initORUNDO01(s[2125]);
        initORUNDO02(s[2126]);
        initORUNDO03(s[2127]);
        initORUNDO04(s[2128]);
        initORUNDO05(s[2129]);
        initORUNDO06(s[2130]);
        initORUNDO07(s[2131]);
        initORUNDO08(s[2132]);
        initORUNOUT(s[2133]);
        initOSAVED(s[2134]);
        initOSAVER1(s[2135]);
        initOSAVG(s[2136]);
        initOSECUR(s[2137]);
        initOSHOP(s[2138]);
        initOSITUAT(s[2139]);
        initOSOURCE1(s[2140]);
        initOSOURCE2(s[2141]);
        initOSOURCE3(s[2142]);
        initOSOURCE4(s[2143]);
        initOSOURCE5(s[2144]);
        initOSOURCE6(s[2145]);
        initOSTAND(s[2146]);
        initOSTATE(s[2147]);
        initOUNDER(s[2148]);
        initOWHYSA01(s[2149]);
        initOWHYSA02(s[2150]);
        initOWHYSA03(s[2151]);
        initOWHYSA04(s[2152]);
        initOWHYSA05(s[2153]);
        initOWHYSA06(s[2154]);
        initOWHYSA07(s[2155]);
        initOWHYSA08(s[2156]);
        initOWHYSA09(s[2157]);
        initOWHYSA10(s[2158]);
        initATTALL(s[2159]);
        initATTEND(s[2160]);
        initBACCBEG2(s[2161]);
        initBACCBEG3(s[2162]);
        initBACCBEG(s[2163]);
        initBACCEND2(s[2164]);
        initBACCEND3(s[2165]);
        initBACCEND(s[2166]);
        initBACCSA2(s[2167]);
        initBACCSA3(s[2168]);
        initBACCSA(s[2169]);
        initBACCSB2(s[2170]);
        initBACCSB3(s[2171]);
        initBACCSB(s[2172]);
        initBAMT10(s[2173]);
        initBAMT11(s[2174]);
        initBAMT12(s[2175]);
        initBAMT13(s[2176]);
        initBAMT14(s[2177]);
        initBAMT15(s[2178]);
        initBAMT16(s[2179]);
        initBAMT17(s[2180]);
        initBAMT18(s[2181]);
        initBAMT2(s[2182]);
        initBAMT3(s[2183]);
        initBAMT4(s[2184]);
        initBAMT5(s[2185]);
        initBAMT6(s[2186]);
        initBAMT7(s[2187]);
        initBAMT8(s[2188]);
        initBAMT9(s[2189]);
        initBAMTDK10(s[2190]);
        initBAMTDK11(s[2191]);
        initBAMTDK12(s[2192]);
        initBAMTDK13(s[2193]);
        initBAMTDK14(s[2194]);
        initBAMTDK15(s[2195]);
        initBAMTDK16(s[2196]);
        initBAMTDK17(s[2197]);
        initBAMTDK18(s[2198]);
        initBAMTDK2(s[2199]);
        initBAMTDK3(s[2200]);
        initBAMTDK4(s[2201]);
        initBAMTDK5(s[2202]);
        initBAMTDK6(s[2203]);
        initBAMTDK7(s[2204]);
        initBAMTDK8(s[2205]);
        initBAMTDK9(s[2206]);
        initBAMTDK(s[2207]);
        initBAMT(s[2208]);
        initBBEFORE2(s[2209]);
        initBBEFORE3(s[2210]);
        initBBEFORE(s[2211]);
        initBDEBTS2(s[2212]);
        initBDEBTS3(s[2213]);
        initBDEBTS(s[2214]);
        initBDIRNI2(s[2215]);
        initBDIRNI3(s[2216]);
        initBDIRNI(s[2217]);
        initBDOCS2(s[2218]);
        initBDOCS3(s[2219]);
        initBDOCS(s[2220]);
        initBEMPN2(s[2221]);
        initBEMPN3(s[2222]);
        initBEMPN(s[2223]);
        initBEN1Q1(s[2224]);
        initBEN1Q2(s[2225]);
        initBEN1Q3(s[2226]);
        initBEN2Q1(s[2227]);
        initBEN2Q2(s[2228]);
        initBEN2Q3(s[2229]);
        initBFUND10(s[2230]);
        initBFUND17(s[2231]);
        initBFUND18(s[2232]);
        initBFUND1(s[2233]);
        initBFUND2(s[2234]);
        initBFUND3(s[2235]);
        initBFUND4(s[2236]);
        initBFUND9(s[2237]);
        initBMOREBUS(s[2238]);
        initBNATINS2(s[2239]);
        initBNATINS3(s[2240]);
        initBNATINS(s[2241]);
        initBONAMT(s[2242]);
        initBONTAX(s[2243]);
        initBOWED2(s[2244]);
        initBOWED3(s[2245]);
        initBOWED(s[2246]);
        initBOWN2(s[2247]);
        initBOWN3(s[2248]);
        initBOWN(s[2249]);
        initBPART2(s[2250]);
        initBPART3(s[2251]);
        initBPART(s[2252]);
        initBPAST(s[2253]);
        initBPD10(s[2254]);
        initBPD11(s[2255]);
        initBPD12(s[2256]);
        initBPD13(s[2257]);
        initBPD14(s[2258]);
        initBPD15(s[2259]);
        initBPD16(s[2260]);
        initBPD17(s[2261]);
        initBPD18(s[2262]);
        initBPD2(s[2263]);
        initBPD3(s[2264]);
        initBPD4(s[2265]);
        initBPD5(s[2266]);
        initBPD6(s[2267]);
        initBPD7(s[2268]);
        initBPD8(s[2269]);
        initBPD9(s[2270]);
        initBPD(s[2271]);
        initBPRFLOS2(s[2272]);
        initBPRFLOS3(s[2273]);
        initBPRFLOSS(s[2274]);
        initBPROFIT2(s[2275]);
        initBPROFIT3(s[2276]);
        initBPROFIT(s[2277]);
        initBPROPN2(s[2278]);
        initBPROPN3(s[2279]);
        initBPROPN(s[2280]);
        initBRETIRE2(s[2281]);
        initBRETIRE3(s[2282]);
        initBRETIRE(s[2283]);
        initBSELLAB(s[2284]);
        initBSELLAM(s[2285]);
        initBSELLTX(s[2286]);
        initBSELLYB(s[2287]);
        initBSELLYR(s[2288]);
        initBSIZE2(s[2289]);
        initBSIZE3(s[2290]);
        initBSIZE(s[2291]);
        initBSTART2(s[2292]);
        initBSTART3(s[2293]);
        initBSTART(s[2294]);
        initBTAX2(s[2295]);
        initBTAX3(s[2296]);
        initBTAX(s[2297]);
        initBTYPE2(s[2298]);
        initBTYPE3(s[2299]);
        initBTYPE(s[2300]);
        initBVAL2FLAG(s[2301]);
        initBVAL2(s[2302]);
        initBVAL2_I(s[2303]);
        initBVAL3(s[2304]);
        initBVALB2(s[2305]);
        initBVALB(s[2306]);
        initBVALFLAG(s[2307]);
        initBVALQ2(s[2308]);
        initBVALQ3(s[2309]);
        initBVALQ(s[2310]);
        initBVAL(s[2311]);
        initBVAL_I(s[2312]);
        initBVALWH10(s[2313]);
        initBVALWH13(s[2314]);
        initBVALWH14(s[2315]);
        initBVALWH1(s[2316]);
        initBVALWH2(s[2317]);
        initBVALWH3(s[2318]);
        initBVALWH7(s[2319]);
        initBVALWH8(s[2320]);
        initBVALWH9(s[2321]);
        initBWORTHB(s[2322]);
        initBWORTH(s[2323]);
        initBYEAR2(s[2324]);
        initBYEAR3(s[2325]);
        initBYEAR(s[2326]);
        initCARER1Q(s[2327]);
        initCOURSE(s[2328]);
        initDBURDA(s[2329]);
        initDBURDH(s[2330]);
        initDISBEN1(s[2331]);
        initDISBEN2(s[2332]);
        initDISBEN3(s[2333]);
        initDISEVER(s[2334]);
        initDISTYPE1(s[2335]);
        initDISTYPE2(s[2336]);
        initDISTYPE3(s[2337]);
        initDISTYPE4(s[2338]);
        initDISTYPE5(s[2339]);
        initDISTYPE6(s[2340]);
        initDISTYPE7(s[2341]);
        initDISTYPE8(s[2342]);
        initDISTYPE9(s[2343]);
        initDTJBL(s[2344]);
        initDVGRSJOB2(s[2345]);
        initDVGRSPAY(s[2346]);
        initDVGRSSEJOB(s[2347]);
        initDVILO3A(s[2348]);
        initDVILO4A(s[2349]);
        initDVJB12ML(s[2350]);
        initDVMRDF(s[2351]);
        initDVNETJOB2(s[2352]);
        initDVNETPAY(s[2353]);
        initDVSEAMT(s[2354]);
        initEDATTN1(s[2355]);
        initEDATTN2(s[2356]);
        initEDATTN3(s[2357]);
        initEDLEVEL(s[2358]);
        initEMPN(s[2359]);
        initEMPSTY(s[2360]);
        initEMSHAR1(s[2361]);
        initEMSHAR2(s[2362]);
        initEMSHAR3(s[2363]);
        initENROLL(s[2364]);
        initEVERWK(s[2365]);
        initFTED19(s[2366]);
        initFTED(s[2367]);
        initFTPTWK(s[2368]);
        initGRSESM(s[2369]);
        initGRSESP(s[2370]);
        initHASCHD(s[2371]);
        initHASDEP(s[2372]);
        initHASNDEP(s[2373]);
        initIHEVNO(s[2374]);
        initIHEV(s[2375]);
        initIHFUT(s[2376]);
        initIHINTRO(s[2377]);
        initILLLIM(s[2378]);
        initINTRO(s[2379]);
        initISCH1618(s[2380]);
        initISCHILD(s[2381]);
        initISDEP(s[2382]);
        initISHRPPART(s[2383]);
        initISHRP(s[2384]);
        initISNDEP(s[2385]);
        initISPART(s[2386]);
        initISWITCH(s[2387]);
        initJBAWAY(s[2388]);
        initJOBNO(s[2389]);
        initLIVWTH(s[2390]);
        initLKTIME(s[2391]);
        initLMATNUM(s[2392]);
        initLOOKED(s[2393]);
        initLSILL(s[2394]);
        initMARBEF(s[2395]);
        initNSSEC3(s[2396]);
        initNSSEC5(s[2397]);
        initNSSEC8(s[2398]);
        initNSSECB(s[2399]);
        initONETEN(s[2400]);
        initOVERSPA(s[2401]);
        initOWNBUS(s[2402]);
        initPARTNER(s[2403]);
        initPARTNO(s[2404]);
        initPAYBON(s[2405]);
        initPAYESM(s[2406]);
        initPAYESP(s[2407]);
        initPAYINC1(s[2408]);
        initPAYINC2(s[2409]);
        initPAYINC3(s[2410]);
        initPAYINC4(s[2411]);
        initPAYINC5(s[2412]);
        initPAYINC6(s[2413]);
        initPAYPER_IFLAG(s[2414]);
        initPAYPER(s[2415]);
        initPAYPER_I(s[2416]);
        initPAYSLP(s[2417]);
        initPERSPROX(s[2418]);
        initPRCRELIG(s[2419]);
        initPSITF(s[2420]);
        initPSIT(s[2421]);
        initQHEALTH1(s[2422]);
        initQUALCHK(s[2423]);
        initRELBUS(s[2424]);
        initRENTAMT(s[2425]);
        initRENTPAY(s[2426]);
        initSCHEMEET(s[2427]);
        initSEAMK(s[2428]);
        initSEAML_IFLAG(s[2429]);
        initSEAML(s[2430]);
        initSEAML_I(s[2431]);
        initSEESM(s[2432]);
        initSEESW(s[2433]);
        initSEINT(s[2434]);
        initSEMN(s[2435]);
        initSEMPSTY(s[2436]);
        initSEPEL_IFLAG(s[2437]);
        initSEPEL(s[2438]);
        initSEPEL_I(s[2439]);
        initSEPER_IFLAG(s[2440]);
        initSEPER(s[2441]);
        initSEPER_I(s[2442]);
        initSEX(s[2443]);
        initSIC2007D(s[2444]);
        initSINGPAR(s[2445]);
        initSJEMP1_IFLAG(s[2446]);
        initSJEMP1(s[2447]);
        initSJEMP1_I(s[2448]);
        initSJEMP2_IFLAG(s[2449]);
        initSJEMP2(s[2450]);
        initSJEMP2_I(s[2451]);
        initSJOB2_IFLAG(s[2452]);
        initSJOB2(s[2453]);
        initSJOB2_I(s[2454]);
        initSOC2010_1DIGIT(s[2455]);
        initSOC2010_2DIGIT(s[2456]);
        initSOLO(s[2457]);
        initSSPART(s[2458]);
        initSSPNO(s[2459]);
        initSTARTJ(s[2460]);
        initSTAT(s[2461]);
        initSVISE(s[2462]);
        initTBENEF(s[2463]);
        initTBENNUM(s[2464]);
        initTEA(s[2465]);
        initTINTRO(s[2466]);
        initTRAINEE(s[2467]);
        initTSETT(s[2468]);
        initTSNUM(s[2469]);
        initTXCRED1(s[2470]);
        initTXCRED2(s[2471]);
        initWHOREATT(s[2472]);
        initWHORECAR(s[2473]);
        initWHOREMOB(s[2474]);
        initWORKAGE(s[2475]);
        initWRKING(s[2476]);
        initXINSOL(s[2477]);
        initXINTYP(s[2478]);
        initYINACT(s[2479]);
        initSTAT_I(s[2480]);
        initEMPSTAT2(s[2481]);
        initDVAGE17(s[2482]);
        initDVAGEW1BAND(s[2483]);
        initGOR(s[2484]);
    }

    @Override
    public WaAS_RecordID getID() {
        return (WaAS_RecordID) id;
    }
}
