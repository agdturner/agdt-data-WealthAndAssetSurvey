/**
 * Source code generated by uk.ac.leeds.ccg.data.waascg.process.WaASCG_Main
 */

package uk.ac.leeds.ccg.data.waas.data.person;
import uk.ac.leeds.ccg.data.waas.data.id.WaAS_RecordID;

public class WaAS_W3PRecord extends WaAS_W3W4W5PRecord {

    protected double ACCFRAC;

    protected double AGEASAF1;

    protected double AGMSAF2T;

    protected double AGMSAFT1;

    protected String BACCEND1;

    protected String BACCEND2;

    protected String BACCEND3;

    protected boolean BCARRY2;

    protected byte BENTYPE01;

    protected byte BENTYPE02;

    protected byte BENTYPE03;

    protected byte BENTYPE04;

    protected byte BENTYPE05;

    protected byte BENTYPE06;

    protected boolean BENTYPE07;

    protected boolean BENTYPE08;

    protected boolean BENTYPE09;

    protected boolean BENTYPE10;

    protected boolean BENTYPE11;

    protected boolean BENTYPE12;

    protected byte BFUND11;

    protected boolean BFUND12;

    protected boolean BFUND13;

    protected boolean BFUND14;

    protected boolean BFUND15;

    protected boolean BFUND16;

    protected byte BFUND18;

    protected boolean BFUND19;

    protected boolean BFUND20;

    protected boolean BFUND21;

    protected boolean BFUND22;

    protected boolean BFUND23;

    protected boolean BFUND24;

    protected byte BFUND3;

    protected boolean BFUND4;

    protected boolean BFUND5;

    protected boolean BFUND6;

    protected boolean BFUND7;

    protected boolean BFUND8;

    protected boolean BSEPPD09;

    protected boolean BSEPPD10;

    protected boolean BSEPPD11;

    protected boolean BSEPPD12;

    protected boolean BSEPPD13;

    protected boolean BSEPPD14;

    protected boolean BSEPPD15;

    protected boolean BSEPPD16;

    protected boolean BSEPPD17;

    protected boolean BSEPPD18;

    protected boolean BSEPPD19;

    protected boolean BSEPPD20;

    protected byte CAEXTRA;

    protected byte CAOLDER;

    protected byte CAOTHER1;

    protected boolean CAOTHER2;

    protected boolean CAOTHER3;

    protected boolean CAOTHER4;

    protected boolean CAOTHER5;

    protected byte CATYPE;

    protected byte CCAC4_I;

    protected byte CCAC5_I;

    protected byte COMBPD;

    protected byte COMMIT1;

    protected byte COMMIT2;

    protected byte COMMIT3;

    protected byte COMMIT4;

    protected boolean COMMIT5;

    protected boolean COURSE20;

    protected byte CREDTYPE1;

    protected byte CREDTYPE2;

    protected byte CTCPD;

    protected byte CTOGSEP;

    protected boolean CTPAY;

    protected boolean CTPAYS;

    protected boolean CTPAYW;

    protected byte DBURDH;

    protected byte DBURDW4;

    protected byte DBURDW5;

    protected byte DBURDW6;

    protected boolean DBURDW7;

    protected byte DBURD___W3;

    protected byte DC12BEH4;

    protected byte DC12BEH5;

    protected short DC12OWE4;

    protected short DC12OWE5;

    protected int DCAMC4;

    protected short DCAMC5;

    protected short DCAMD4;

    protected short DCAMD5;

    protected short DCAMOS4_I;

    protected short DCAMOS5_I;

    protected short DCAMP4;

    protected short DCAMP5;

    protected byte DCCOS4;

    protected byte DCCOS5;

    protected byte DCCSP4;

    protected byte DCCSP5;

    protected byte DCESB4;

    protected byte DCESB5;

    protected byte DCINZ4;

    protected byte DCINZ5;

    protected byte DCNAM4;

    protected byte DCNAM5;

    protected boolean DCONM10;

    protected byte DCONM7;

    protected boolean DCONM8;

    protected byte DCONM9;

    protected boolean DCPER4;

    protected boolean DCPER5;

    protected byte DCREC4;

    protected byte DCREC5;

    protected boolean DCRSP4;

    protected boolean DCRSP5;

    protected boolean DHBANY08_I;

    protected boolean DHBANY08_IFLAG;

    protected boolean DHBANY09_I;

    protected boolean DHBANY09_IFLAG;

    protected boolean DHBANY10_I;

    protected boolean DHBANY10_IFLAG;

    protected boolean DHBANY11_I;

    protected boolean DHBANY11_IFLAG;

    protected boolean DHPANY4;

    protected boolean DHPANY5;

    protected boolean DHPANY6;

    protected boolean DHPANY7;

    protected byte DHPBEH3;

    protected byte DHPBEH3_I;

    protected byte DHPBEH3_IFLAG;

    protected byte DHPBEH4;

    protected byte DHPBEH4_I;

    protected byte DHPBEH4_IFLAG;

    protected byte DHPBEH5;

    protected byte DHPBEH5_I;

    protected boolean DHPBEH5_IFLAG;

    protected byte DHPEST3;

    protected byte DHPEST4;

    protected boolean DHPEST5;

    protected short DHPINS3;

    protected short DHPINS3_I;

    protected byte DHPINS3_IFLAG;

    protected short DHPINS4;

    protected double DHPINS4_I;

    protected byte DHPINS4_IFLAG;

    protected short DHPINS5;

    protected short DHPINS5_I;

    protected byte DHPINS5_IFLAG;

    protected byte DHPINT3;

    protected byte DHPINT4;

    protected byte DHPINT5;

    protected byte DHPOFT3;

    protected byte DHPOFT3_I;

    protected byte DHPOFT3_IFLAG;

    protected byte DHPOFT4;

    protected byte DHPOFT4_I;

    protected byte DHPOFT4_IFLAG;

    protected byte DHPOFT5;

    protected byte DHPOFT5_I;

    protected boolean DHPOFT5_IFLAG;

    protected short DHPOWE3;

    protected short DHPOWE3_I;

    protected byte DHPOWE3_IFLAG;

    protected short DHPOWE4;

    protected short DHPOWE4_I;

    protected byte DHPOWE4_IFLAG;

    protected short DHPOWE5;

    protected short DHPOWE5_I;

    protected boolean DHPOWE5_IFLAG;

    protected byte DHPWEST3;

    protected byte DHPWEST4;

    protected byte DHPWEST5;

    protected byte DHPWHNM3;

    protected byte DHPWHNM3_I;

    protected byte DHPWHNM3_IFLAG;

    protected byte DHPWHNM4;

    protected byte DHPWHNM4_I;

    protected byte DHPWHNM4_IFLAG;

    protected byte DHPWHNM5;

    protected byte DHPWHNM5_I;

    protected byte DHPWHNM5_IFLAG;

    protected short DHPWHNY3;

    protected short DHPWHNY3_I;

    protected byte DHPWHNY3_IFLAG;

    protected short DHPWHNY4;

    protected short DHPWHNY4_I;

    protected byte DHPWHNY4_IFLAG;

    protected short DHPWHNY5;

    protected short DHPWHNY5_I;

    protected byte DHPWHNY5_IFLAG;

    protected byte DLWHY11;

    protected boolean DLWHY12;

    protected boolean DLWHY13;

    protected boolean DLWHY14;

    protected byte DLWHY17;

    protected boolean DLWHY18;

    protected boolean DLWHY19;

    protected boolean DLWHY20;

    protected boolean DLWHY21;

    protected boolean DLWHY24;

    protected boolean DLWHY25;

    protected boolean DLWHY26;

    protected boolean DLWHY27;

    protected boolean DLWHY28;

    protected boolean DLWHY31;

    protected boolean DLWHY32;

    protected boolean DLWHY33;

    protected boolean DLWHY34;

    protected boolean DLWHY35;

    protected byte DMOBEH3;

    protected byte DMOBEH3_I;

    protected byte DMOBEH3_IFLAG;

    protected byte DMOBEH4;

    protected byte DMOBEH4_I;

    protected byte DMOBEH4_IFLAG;

    protected byte DMOBEH5;

    protected byte DMOBEH5_I;

    protected byte DMOBEH5_IFLAG;

    protected byte DMOEST3;

    protected byte DMOEST4;

    protected byte DMOEST5;

    protected short DMOINS3;

    protected short DMOINS3_I;

    protected byte DMOINS3_IFLAG;

    protected short DMOINS4;

    protected byte DMOINS4_I;

    protected byte DMOINS4_IFLAG;

    protected byte DMOINS5;

    protected byte DMOINS5_I;

    protected byte DMOINS5_IFLAG;

    protected byte DMOINT3;

    protected byte DMOINT4;

    protected byte DMOINT5;

    protected byte DMOOFT3;

    protected byte DMOOFT3_I;

    protected byte DMOOFT3_IFLAG;

    protected byte DMOOFT4;

    protected byte DMOOFT4_I;

    protected byte DMOOFT4_IFLAG;

    protected byte DMOOFT5;

    protected boolean DMOOFT5_I;

    protected byte DMOOFT5_IFLAG;

    protected short DMOOWE3;

    protected short DMOOWE3_I;

    protected byte DMOOWE3_IFLAG;

    protected short DMOOWE4;

    protected short DMOOWE4_I;

    protected byte DMOOWE4_IFLAG;

    protected short DMOOWE5;

    protected short DMOOWE5_I;

    protected boolean DMOOWE5_IFLAG;

    protected byte DMOWEST3;

    protected byte DMOWEST4;

    protected byte DMOWEST5;

    protected byte DMOWHNM3;

    protected byte DMOWHNM3_I;

    protected byte DMOWHNM3_IFLAG;

    protected byte DMOWHNM4;

    protected byte DMOWHNM4_I;

    protected byte DMOWHNM4_IFLAG;

    protected byte DMOWHNM5;

    protected byte DMOWHNM5_I;

    protected byte DMOWHNM5_IFLAG;

    protected short DMOWHNY3;

    protected short DMOWHNY3_I;

    protected byte DMOWHNY3_IFLAG;

    protected short DMOWHNY4;

    protected short DMOWHNY4_I;

    protected byte DMOWHNY4_IFLAG;

    protected short DMOWHNY5;

    protected short DMOWHNY5_I;

    protected byte DMOWHNY5_IFLAG;

    protected byte DS12BEH4;

    protected byte DS12BEH5;

    protected boolean DS12OWE4;

    protected boolean DS12OWE5;

    protected short DSAMC4;

    protected short DSAMC5;

    protected short DSAMD4;

    protected byte DSAMD5;

    protected short DSAMOS4_I;

    protected short DSAMOS5_I;

    protected short DSAMP4;

    protected short DSAMP5;

    protected byte DSCOS4;

    protected byte DSCOS5;

    protected byte DSCSP4;

    protected byte DSCSP5;

    protected byte DSESB4;

    protected boolean DSESB5;

    protected boolean DSLEST5_IFLAG;

    protected byte DSNAM4;

    protected byte DSNAM5;

    protected byte DSNUM;

    protected boolean DSONM10;

    protected boolean DSONM7;

    protected boolean DSONM8;

    protected boolean DSONM9;

    protected boolean DSPER4;

    protected boolean DSPER5;

    protected boolean DSREC4;

    protected boolean DSREC5;

    protected boolean DSRSP1;

    protected byte DSRSP2;

    protected boolean DSRSP3;

    protected boolean DSRSP4;

    protected boolean DSRSP5;

    protected int DTLOWE1;

    protected int DTLOWE1_I;

    protected boolean DTLOWE1_IFLAG;

    protected short DTLOWE2;

    protected short DTLOWE2_I;

    protected byte DTLOWE2_IFLAG;

    protected short DTLOWE3;

    protected short DTLOWE3_I;

    protected byte DTLOWE3_IFLAG;

    protected boolean DTLOWE4_I;

    protected boolean DTLOWE4_IFLAG;

    protected boolean DTLOWE5_I;

    protected boolean DTLOWE5_IFLAG;

    protected byte DTLOWEB1;

    protected byte DTLOWEB2;

    protected boolean DTLOWEB3;

    protected byte DTLTYPE1;

    protected byte DTLTYPE1_I;

    protected boolean DTLTYPE1_IFLAG;

    protected byte DTLTYPE2;

    protected byte DTLTYPE2_I;

    protected byte DTLTYPE2_IFLAG;

    protected byte DTLTYPE3;

    protected byte DTLTYPE3_I;

    protected byte DTLTYPE3_IFLAG;

    protected boolean DTLTYPE4_I;

    protected boolean DTLTYPE4_IFLAG;

    protected boolean DTLTYPE5_I;

    protected boolean DTLTYPE5_IFLAG;

    protected short DTTOWE1;

    protected short DTTOWE2;

    protected boolean DTTOWE3;

    protected byte DTTOWEB1;

    protected boolean DTTOWEB10;

    protected boolean DTTOWEB11;

    protected boolean DTTOWEB12;

    protected boolean DTTOWEB13;

    protected boolean DTTOWEB14;

    protected boolean DTTOWEB15;

    protected boolean DTTOWEB2;

    protected boolean DTTOWEB3;

    protected boolean DTTOWEB4;

    protected boolean DTTOWEB5;

    protected boolean DTTOWEB6;

    protected boolean DTTOWEB7;

    protected boolean DTTOWEB8;

    protected boolean DTTOWEB9;

    protected byte DVAGE18;

    protected byte DVAGEW3BAND;

    protected byte DVBENU1;

    protected int DVCOINV;

    protected short DVCTCANNUAL;

    protected short DVDHPOWE3;

    protected short DVDHPOWE4;

    protected short DVDHPOWE5;

    protected short DVDLOWE5;

    protected short DVDMOOWE3;

    protected short DVDMOOWE4;

    protected short DVDMOOWE5;

    protected int DVGRSPAY_I;

    protected boolean DVGRSPAY_IFLAG;

    protected boolean DVHASBOND;

    protected byte DVHASCC;

    protected boolean DVHASDBR_ORIG;

    protected boolean DVHASEMPSH;

    protected boolean DVHASGILT;

    protected boolean DVHASISA;

    protected boolean DVHASLINS;

    protected boolean DVHASNHP;

    protected boolean DVHASNOFA;

    protected boolean DVHASNSP;

    protected boolean DVHASOINV;

    protected boolean DVHASOTHSH;

    protected boolean DVHASSAVDEP;

    protected byte DVHASSC;

    protected byte DVHASSHSAC;

    protected boolean DVHASSL;

    protected boolean DVHASUTRUST;

    protected int DVNETPAY_I;

    protected boolean DVNETPAY_IFLAG;

    protected short DVNWHP_SUM;

    protected short DVOIGGTANNUAL;

    protected int DVOIGOEANNUAL_I;

    protected int DVOIGOSANNUAL_I;

    protected int DVOIGPPANNUAL_I;

    protected short DVOIGRRANNUAL;

    protected byte DVPUBLPRIV;

    protected int DVRENTAMTANNUAL;

    protected byte DVSAME_I;

    protected boolean DVSAME_IFLAG;

    protected boolean DVSEPANNUAL09;

    protected boolean DVSEPANNUAL10;

    protected boolean DVSEPANNUAL11;

    protected boolean DVSEPANNUAL12;

    protected boolean DVSEPANNUAL13;

    protected boolean DVSEPANNUAL14;

    protected boolean DVSEPANNUAL15;

    protected boolean DVSEPANNUAL16;

    protected boolean DVSEPANNUAL17;

    protected boolean DVSEPANNUAL18;

    protected boolean DVSEPANNUAL19;

    protected boolean DVSEPANNUAL20;

    protected double DVSHODVAL;

    protected double DVSPECANNUAL01;

    protected double DVSPECANNUAL02;

    protected double DVSPECANNUAL03;

    protected double DVSPECANNUAL04;

    protected short DVSPECANNUAL05;

    protected short DVSPECANNUAL06;

    protected short DVSPECANNUAL07;

    protected short DVSPECANNUAL08;

    protected short DVSPECANNUAL09;

    protected short DVSPECANNUAL10;

    protected boolean DVSTAT;

    protected short DVTOGTCANNUAL;

    protected double DVTOTALLBENANNUAL;

    protected double DVTOTBENANNUAL;

    protected double DVTOTTAXANNUAL;

    protected byte DVWAVE;

    protected double DVWTCANNUAL;

    protected byte ECACT;

    protected boolean EDAGE;

    protected boolean EMPSTAT1;

    protected byte EMPSTAT2;

    protected boolean ETYPE;

    protected byte FINVTY01_IFLAG;

    protected byte FINVTY02_IFLAG;

    protected byte FINVTY03_IFLAG;

    protected byte FINVTY04_IFLAG;

    protected byte FINVTY05_IFLAG;

    protected byte FINVTY06_IFLAG;

    protected byte FINVTY07_IFLAG;

    protected byte FINVTY08_IFLAG;

    protected byte FINVTY09_IFLAG;

    protected byte FINVTY10_IFLAG;

    protected boolean FINVTY11_IFLAG;

    protected short FLNOS5;

    protected byte FLOORN;

    protected int FNSVAL1;

    protected int FNSVAL1_I;

    protected int FSHADA;

    protected byte FSHADAB;

    protected byte FSHADD;

    protected boolean FSTYPIN5;

    protected boolean FSTYPSH5;

    protected double HPLFT3;

    protected double HPLFT4;

    protected double HPLFT5;

    protected byte HPNMN3;

    protected byte HPNMN4;

    protected byte HPNMN5;

    protected byte HPNYR3;

    protected byte HPNYR4;

    protected boolean HPNYR5;

    protected double HPOS3;

    protected double HPOS4;

    protected double HPOS5;

    protected byte HRPDVAGE;

    protected byte HRPDVAGE9;

    protected byte HRPDVILO3A;

    protected byte HRPDVMRDF;

    protected byte HRPEDATTN1;

    protected byte HRPEDATTN2;

    protected byte HRPEDATTN3;

    protected byte HRPEDLEVEL;

    protected byte HRPEMPSTAT2;

    protected byte HRPETHNIC;

    protected byte HRPIOUT1;

    protected byte HRPNSSEC3;

    protected byte HRPPARTIOUT1;

    protected byte HRPSEX;

    protected byte HRP_RESP;

    protected byte H_FLAG1;

    protected boolean IGDS12;

    protected boolean IGDS13;

    protected boolean IGDS14;

    protected boolean IGDS16;

    protected boolean IGDS17;

    protected boolean IGDS18;

    protected boolean IGDS19;

    protected boolean IGDS20;

    protected boolean IGDS21;

    protected boolean IGDS6;

    protected boolean IGDS7;

    protected boolean IHSE13;

    protected boolean IHSE14;

    protected boolean IHSE15;

    protected boolean IHSE16;

    protected boolean IHSE17;

    protected boolean IHSE18;

    protected boolean IHSE4;

    protected boolean IHSE5;

    protected boolean IHSE6;

    protected boolean ILNUSE06;

    protected boolean ILNUSE07;

    protected boolean ILNUSE08;

    protected boolean ILNUSE09;

    protected boolean ILNUSE10;

    protected byte ILUMTY2_I;

    protected boolean ILUMTY2_IFLAG;

    protected byte ILUMTY3_I;

    protected boolean ILUMTY3_IFLAG;

    protected boolean ILUMTY4;

    protected boolean ILUMTY4_I;

    protected boolean ILUMTY4_IFLAG;

    protected boolean ILUMTY5;

    protected boolean ILUMTY5_I;

    protected boolean ILUMTY5_IFLAG;

    protected boolean ILUMTY6;

    protected boolean ILUMTY6_I;

    protected boolean ILUMTY6_IFLAG;

    protected boolean ILUMTY7;

    protected boolean ILUMTY7_I;

    protected boolean ILUMTY7_IFLAG;

    protected byte INSPOL;

    protected byte INTRO;

    protected boolean ISHRP;

    protected boolean ISHRPPART;

    protected int IVAL1;

    protected int IVAL2_I;

    protected int IVAL3_I;

    protected boolean IWAT10;

    protected boolean IWAT11;

    protected boolean IWAT12;

    protected boolean IWAT14;

    protected boolean IWAT15;

    protected boolean IWAT16;

    protected boolean IWAT17;

    protected boolean IWAT18;

    protected byte IWAT8;

    protected byte IWAT9;

    protected byte IWHO;

    protected byte LIVWTH;

    protected byte LNMN1;

    protected byte LNMN2;

    protected byte LNMN3;

    protected byte LNMN4;

    protected byte LNMN5;

    protected byte LNYR1;

    protected byte LNYR2;

    protected byte LNYR3;

    protected byte LNYR4;

    protected byte LNYR5;

    protected byte LVTDAY;

    protected double MOLFT3;

    protected double MOLFT4;

    protected double MOLFT5;

    protected double MOOS3;

    protected double MOOS4;

    protected double MOOS5;

    protected byte NMN1;

    protected byte NMN2;

    protected byte NMN3;

    protected byte NMN4;

    protected byte NMN5;

    protected double NSSEC;

    protected byte NWHP;

    protected byte NWHPNO;

    protected short NWHPVAL1;

    protected short NWHPVAL2;

    protected short NWHPVAL3;

    protected byte NYR1;

    protected byte NYR2;

    protected byte NYR3;

    protected byte NYR4;

    protected byte NYR5;

    protected short OIGGT;

    protected short OIGRR;

    protected boolean OIMPRS7;

    protected boolean OIMPRS8;

    protected boolean OIMPRS9;

    protected boolean ONOSAVE7;

    protected boolean ONOSAVE8;

    protected boolean ONOSAVE9;

    protected byte OPENSAV;

    protected boolean ORUNDO09;

    protected boolean ORUNDO10;

    protected boolean ORUNDO11;

    protected byte OSAFERE2;

    protected byte OSAFERET;

    protected byte OSAVA;

    protected byte OSAVB;

    protected byte OSAVC;

    protected short OSLC4;

    protected boolean OTHSRC5_I;

    protected boolean OTHSRC5_IFLAG;

    protected byte OWHYSAV01;

    protected byte OWHYSAV02;

    protected byte OWHYSAV03;

    protected byte OWHYSAV04;

    protected byte OWHYSAV05;

    protected byte OWHYSAV06;

    protected byte OWHYSAV07;

    protected byte OWHYSAV08;

    protected byte OWHYSAV09;

    protected byte OWHYSAV10;

    protected boolean OWHYSAV11;

    protected boolean OWRSRS08;

    protected boolean OWRSRS09;

    protected boolean OWRSRS10;

    protected byte PADDFUT;

    protected boolean PADDFUT2;

    protected short PAVCAM1;

    protected short PAVCAM2;

    protected byte PAVCFG1;

    protected boolean PAVCFG2;

    protected double PAVCFR1;

    protected byte PAVCFR2;

    protected byte PAVCH1;

    protected byte PAVCH2;

    protected byte PAVCIN1;

    protected byte PAVCIN2;

    protected byte PAVCPR1;

    protected boolean PAVCPR2;

    protected boolean PDCVAL3;

    protected byte PEMFIN;

    protected byte PESAME_I;

    protected byte PESAME_IFLAG;

    protected byte PEWYNO01;

    protected byte PEWYNO02;

    protected byte PEWYNO03;

    protected byte PEWYNO04;

    protected byte PEWYNO05;

    protected boolean PEWYNO06;

    protected boolean PEWYNO07;

    protected boolean PEWYNO08;

    protected boolean PEWYNO09;

    protected boolean PEWYNO10;

    protected boolean PEWYNO11;

    protected boolean PFANEH3;

    protected boolean PFANEH5;

    protected boolean PFANEH6;

    protected boolean PFANEXM1;

    protected boolean PFANEXM2;

    protected boolean PFANEXM3;

    protected boolean PFANEXM4;

    protected boolean PFANEXM5;

    protected boolean PFANEXM6;

    protected boolean PFANEXY1;

    protected boolean PFANEXY2;

    protected boolean PFANEXY3;

    protected boolean PFANEXY4;

    protected boolean PFANEXY5;

    protected boolean PFANEXY6;

    protected byte PFANGA3;

    protected boolean PFANGA5;

    protected boolean PFANGA6;

    protected boolean PFANIF3;

    protected boolean PFANIF5;

    protected boolean PFANIF6;

    protected byte PFANJT3;

    protected boolean PFANJT5;

    protected boolean PFANJT6;

    protected boolean PFANLM1;

    protected boolean PFANLM2;

    protected boolean PFANLM3;

    protected boolean PFANLM4;

    protected boolean PFANLM5;

    protected boolean PFANLM6;

    protected boolean PFANN10;

    protected byte PFANN11;

    protected boolean PFANN12;

    protected boolean PFANN13;

    protected boolean PFANN14;

    protected boolean PFANN15;

    protected boolean PFANN17;

    protected boolean PFANN18;

    protected boolean PFANN19;

    protected boolean PFANN2;

    protected boolean PFANN20;

    protected boolean PFANN21;

    protected boolean PFANN22;

    protected boolean PFANN23;

    protected boolean PFANN24;

    protected boolean PFANN25;

    protected boolean PFANN26;

    protected boolean PFANN27;

    protected boolean PFANN28;

    protected boolean PFANN29;

    protected boolean PFANN3;

    protected boolean PFANN30;

    protected boolean PFANN4;

    protected boolean PFANN5;

    protected boolean PFANN7;

    protected boolean PFANN8;

    protected boolean PFANN9;

    protected boolean PFANVB1;

    protected boolean PFANVB2;

    protected boolean PFANVB3;

    protected boolean PFANVB4;

    protected boolean PFANVB5;

    protected boolean PFANVB6;

    protected short PFANVI1;

    protected short PFANVI2;

    protected short PFANVI3;

    protected boolean PFANVI4;

    protected boolean PFANVI5;

    protected boolean PFANVI6;

    protected short PFBEG1;

    protected short PFBEG2;

    protected short PFBEG3;

    protected short PFBEG4;

    protected boolean PFBEG5;

    protected boolean PFBEG6;

    protected boolean PFCASH5;

    protected boolean PFCASH5_I;

    protected boolean PFCASH5_IFLAG;

    protected boolean PFCASH6;

    protected boolean PFCASH6_I;

    protected boolean PFCASH6_IFLAG;

    protected int PFDDV4;

    protected boolean PFDDV5;

    protected boolean PFDDV5_I;

    protected boolean PFDDV5_IFLAG;

    protected boolean PFDDV6;

    protected boolean PFDDV6_I;

    protected boolean PFDDV6_IFLAG;

    protected boolean PFDDVB4;

    protected boolean PFDDVB5;

    protected boolean PFDDVB6;

    protected boolean PFDRAW4;

    protected boolean PFDRAW4_I;

    protected byte PFDRAW4_IFLAG;

    protected boolean PFDRAW5;

    protected boolean PFDRAW5_I;

    protected boolean PFDRAW5_IFLAG;

    protected boolean PFDRAW6;

    protected boolean PFDRAW6_I;

    protected boolean PFDRAW6_IFLAG;

    protected boolean PFDRA___W3;

    protected short PFDRINC2;

    protected boolean PFDRINC3;

    protected boolean PFDRINC4;

    protected boolean PFDRINC5;

    protected boolean PFDRINC6;

    protected boolean PFDRINCB1;

    protected boolean PFDRINCB2;

    protected boolean PFDRINCB3;

    protected boolean PFDRINCB4;

    protected boolean PFDRINCB5;

    protected boolean PFDRINCB6;

    protected boolean PFDRVB2;

    protected boolean PFDRVB3;

    protected boolean PFDRVB4;

    protected boolean PFDRVB5;

    protected boolean PFDRVB6;

    protected int PFDRVI2;

    protected boolean PFDRVI3;

    protected boolean PFDRVI4;

    protected boolean PFDRVI5;

    protected boolean PFDRVI6;

    protected short PFEND1;

    protected short PFEND2;

    protected short PFEND3;

    protected short PFEND4;

    protected boolean PFEND5;

    protected boolean PFEND6;

    protected boolean PFFAAG3;

    protected boolean PFFAAG4;

    protected boolean PFFAAG5;

    protected boolean PFFAAG6;

    protected boolean PFFAN10;

    protected boolean PFFAN12;

    protected boolean PFFAN13;

    protected boolean PFFAN14;

    protected boolean PFFAN15;

    protected boolean PFFAN17;

    protected boolean PFFAN18;

    protected boolean PFFAN19;

    protected boolean PFFAN20;

    protected boolean PFFAN21;

    protected boolean PFFAN22;

    protected boolean PFFAN23;

    protected boolean PFFAN24;

    protected boolean PFFAN25;

    protected boolean PFFAN26;

    protected boolean PFFAN27;

    protected boolean PFFAN28;

    protected boolean PFFAN29;

    protected boolean PFFAN3;

    protected boolean PFFAN30;

    protected boolean PFFAN4;

    protected boolean PFFAN5;

    protected boolean PFFAN7;

    protected boolean PFFAN8;

    protected boolean PFFAN9;

    protected boolean PFFAWH10;

    protected boolean PFFAWH11;

    protected boolean PFFAWH12;

    protected byte PFFAWH13;

    protected boolean PFFAWH14;

    protected boolean PFFAWH15;

    protected boolean PFFAWH17;

    protected boolean PFFAWH18;

    protected boolean PFFAWH19;

    protected boolean PFFAWH2;

    protected boolean PFFAWH20;

    protected boolean PFFAWH21;

    protected boolean PFFAWH22;

    protected boolean PFFAWH23;

    protected boolean PFFAWH24;

    protected boolean PFFAWH25;

    protected boolean PFFAWH26;

    protected boolean PFFAWH27;

    protected boolean PFFAWH28;

    protected boolean PFFAWH29;

    protected boolean PFFAWH3;

    protected boolean PFFAWH30;

    protected boolean PFFAWH31;

    protected boolean PFFAWH32;

    protected boolean PFFAWH33;

    protected boolean PFFAWH34;

    protected boolean PFFAWH35;

    protected boolean PFFAWH36;

    protected boolean PFFAWH4;

    protected boolean PFFAWH5;

    protected byte PFFAWH7;

    protected boolean PFFAWH8;

    protected boolean PFFAWH9;

    protected boolean PFINCA6_IFLAG;

    protected boolean PFLMUS5;

    protected boolean PFLMUS6;

    protected boolean PFLMV5;

    protected boolean PFLMV5_I;

    protected boolean PFLMV5_IFLAG;

    protected boolean PFLMV6_I;

    protected boolean PFLMV6_IFLAG;

    protected boolean PFLMVB4;

    protected boolean PFLMVB5;

    protected boolean PFLMVB6;

    protected boolean PFLUMALL5;

    protected boolean PFLUMALL5_I;

    protected boolean PFLUMALL5_IFLAG;

    protected boolean PFLUMALL6;

    protected boolean PFLUMALL6_I;

    protected boolean PFLUMALL6_IFLAG;

    protected byte PFPENVB1;

    protected boolean PFPENVB2;

    protected boolean PFPENVB3;

    protected boolean PFPENVB4;

    protected boolean PFPENVB5;

    protected boolean PFPENVB6;

    protected int PFPENVI1;

    protected short PFPENVI2;

    protected short PFPENVI3;

    protected short PFPENVI4;

    protected boolean PFPENVI5;

    protected boolean PFPENVI6;

    protected boolean PFREM5;

    protected boolean PFREM5_I;

    protected boolean PFREM5_IFLAG;

    protected boolean PFREM6;

    protected boolean PFREM6_I;

    protected boolean PFREM6_IFLAG;

    protected byte PFSIPTY1;

    protected byte PFSIPTY10;

    protected boolean PFSIPTY11;

    protected boolean PFSIPTY12;

    protected boolean PFSIPTY13;

    protected boolean PFSIPTY14;

    protected byte PFSIPTY15;

    protected boolean PFSIPTY16;

    protected boolean PFSIPTY17;

    protected boolean PFSIPTY18;

    protected boolean PFSIPTY19;

    protected byte PFSIPTY2;

    protected boolean PFSIPTY20;

    protected boolean PFSIPTY21;

    protected byte PFSIPTY22;

    protected boolean PFSIPTY23;

    protected boolean PFSIPTY24;

    protected boolean PFSIPTY25;

    protected boolean PFSIPTY26;

    protected boolean PFSIPTY27;

    protected boolean PFSIPTY28;

    protected boolean PFSIPTY29;

    protected byte PFSIPTY3;

    protected boolean PFSIPTY30;

    protected boolean PFSIPTY31;

    protected boolean PFSIPTY32;

    protected boolean PFSIPTY33;

    protected boolean PFSIPTY34;

    protected boolean PFSIPTY35;

    protected boolean PFSIPTY36;

    protected boolean PFSIPTY37;

    protected boolean PFSIPTY38;

    protected boolean PFSIPTY39;

    protected byte PFSIPTY4;

    protected boolean PFSIPTY40;

    protected boolean PFSIPTY41;

    protected boolean PFSIPTY42;

    protected byte PFSIPTY5;

    protected byte PFSIPTY6;

    protected boolean PFSIPTY7;

    protected byte PFSIPTY8;

    protected byte PFSIPTY9;

    protected short PIRREG;

    protected short PIRREG2;

    protected byte PMORTC;

    protected byte PNEWMEM;

    protected boolean POADD5;

    protected boolean POADD6;

    protected boolean POANEH2;

    protected boolean POANEXM1;

    protected boolean POANEXM2;

    protected boolean POANEXY1;

    protected boolean POANEXY2;

    protected boolean POANGA2;

    protected boolean POANIF2;

    protected boolean POANJT2;

    protected boolean POANLM1;

    protected boolean POANLM2;

    protected boolean POANN2;

    protected boolean POANN3;

    protected boolean POANN4;

    protected boolean POANN6;

    protected boolean POANN7;

    protected boolean POANN8;

    protected boolean POANVB;

    protected boolean POANVB2;

    protected short POANVI1;

    protected short POANVI2;

    protected byte POCNDRS1;

    protected boolean POCNDRS10;

    protected boolean POCNDRS11;

    protected boolean POCNDRS12;

    protected byte POCNDRS2;

    protected byte POCNDRS3;

    protected boolean POCNDRS4;

    protected boolean POCNDRS5;

    protected boolean POCNDRS6;

    protected byte POCNDRS7;

    protected boolean POCNDRS8;

    protected boolean POCNDRS9;

    protected byte POCNHOW1;

    protected byte POCNHOW2;

    protected byte POCNLRS1;

    protected byte POCNLRS2;

    protected boolean POCNLRS3;

    protected boolean POCNLRS4;

    protected boolean POCNLRS5;

    protected boolean POCNLRS6;

    protected boolean POCNLRS7;

    protected boolean POCNLRS8;

    protected byte POCNPLN1;

    protected byte POCNPLN2;

    protected byte POCNVOL1;

    protected byte POCNVOL2;

    protected byte POCONCH1;

    protected byte POCONCH2;

    protected boolean POFAN10;

    protected boolean POFAN11;

    protected boolean POFAN12;

    protected boolean POFAN9;

    protected boolean POFAWH10;

    protected boolean POFAWH11;

    protected boolean POFAWH12;

    protected boolean POFAWH3;

    protected boolean POFAWH4;

    protected boolean POFAWH5;

    protected byte POFAWH7;

    protected boolean POFAWH8;

    protected boolean POFAWH9;

    protected boolean POLMUS10;

    protected boolean POLMUS11;

    protected boolean POLMUS12;

    protected boolean POLMUS9;

    protected boolean POLMVB2;

    protected byte POPENVB;

    protected boolean POPENVB2;

    protected int POPENVI;

    protected int POPENVI2;

    protected byte POPYCH;

    protected boolean PPANEXM1;

    protected boolean PPANEXM2;

    protected boolean PPANEXM3;

    protected boolean PPANEXY1;

    protected boolean PPANEXY2;

    protected boolean PPANEXY3;

    protected boolean PPANLM1;

    protected byte PPANLM2;

    protected boolean PPANLM3;

    protected boolean PPANN3;

    protected boolean PPANN4;

    protected boolean PPANN6;

    protected boolean PPANN7;

    protected boolean PPANN8;

    protected byte PPANVB1;

    protected boolean PPANVB2;

    protected boolean PPANVB3;

    protected int PPANVI1;

    protected short PPANVI2;

    protected short PPANVI3;

    protected boolean PPCNDRS12;

    protected boolean PPCNDRS13;

    protected boolean PPCNDRS14;

    protected boolean PPCNDRS15;

    protected boolean PPCNDRS16;

    protected byte PPCNDRS17;

    protected boolean PPCNDRS18;

    protected boolean PPCNDRS20;

    protected boolean PPCNDRS21;

    protected boolean PPCNDRS22;

    protected boolean PPCNDRS23;

    protected boolean PPCNDRS24;

    protected boolean PPCNDRS3;

    protected boolean PPCNDRS4;

    protected boolean PPCNDRS5;

    protected boolean PPCNDRS6;

    protected boolean PPCNDRS7;

    protected boolean PPCNDRS8;

    protected byte PPCNDRS9;

    protected byte PPCNHO___W3;

    protected boolean PPCNLRS10;

    protected boolean PPCNLRS11;

    protected boolean PPCNLRS12;

    protected boolean PPCNLRS4;

    protected boolean PPCNLRS6;

    protected boolean PPCNLRS7;

    protected boolean PPCNLRS8;

    protected byte PPCNLRS9;

    protected byte PPCNPLN1;

    protected byte PPCNPLN2;

    protected byte PPCNPLN3;

    protected byte PPCONCH;

    protected boolean PPDRINC3;

    protected byte PPDRINCB;

    protected boolean PPDRINCB3;

    protected boolean PPDRVB3;

    protected boolean PPDRVI3;

    protected boolean PPFAAG2;

    protected boolean PPFAAG3;

    protected boolean PPFAN10;

    protected boolean PPFAN12;

    protected boolean PPFAN13;

    protected boolean PPFAN14;

    protected boolean PPFAN15;

    protected boolean PPFAN3;

    protected boolean PPFAN4;

    protected boolean PPFAN5;

    protected boolean PPFAN7;

    protected boolean PPFAN8;

    protected boolean PPFAN9;

    protected boolean PPFAWH10;

    protected boolean PPFAWH11;

    protected boolean PPFAWH12;

    protected boolean PPFAWH13;

    protected boolean PPFAWH14;

    protected boolean PPFAWH16;

    protected boolean PPFAWH17;

    protected boolean PPFAWH18;

    protected boolean PPFAWH19;

    protected boolean PPFAWH20;

    protected boolean PPFAWH21;

    protected boolean PPFAWH4;

    protected boolean PPFAWH5;

    protected boolean PPFAWH7;

    protected byte PPFAWH8;

    protected boolean PPFAWH9;

    protected byte PPIRNO1;

    protected byte PPIRNO2;

    protected boolean PPIRNO3;

    protected int PPIRRA1;

    protected int PPIRRA2;

    protected short PPIRRA3;

    protected boolean PPIRRF1;

    protected boolean PPIRRF2;

    protected boolean PPIRRF3;

    protected byte PPIRRH1;

    protected byte PPIRRH2;

    protected boolean PPIRRH3;

    protected short PPIRRY1;

    protected short PPIRRY2;

    protected short PPIRRY3;

    protected short PPLASY1;

    protected short PPLASY2;

    protected short PPLASY3;

    protected byte PPNINS1;

    protected byte PPNINS2;

    protected byte PPNINS3;

    protected int PPRGAM;

    protected boolean PPRGFG3;

    protected boolean PPRGFR3;

    protected byte PPYSTP15;

    protected boolean PPYSTP16;

    protected boolean PPYSTP17;

    protected boolean PPYSTP18;

    protected boolean PPYSTP20;

    protected boolean PPYSTP21;

    protected byte PPYSTP3;

    protected boolean PPYSTP4;

    protected boolean PPYSTP5;

    protected boolean PPYSTP6;

    protected boolean PPYSTP7;

    protected byte PRCRELIG;

    protected boolean PROXPERS;

    protected byte PSCHY_F;

    protected byte PSCHY_S;

    protected byte PSCHY_T;

    protected byte PSTYPE1;

    protected byte PSTYPE10;

    protected byte PSTYPE11;

    protected boolean PSTYPE12;

    protected boolean PSTYPE13;

    protected boolean PSTYPE14;

    protected byte PSTYPE15;

    protected byte PSTYPE16;

    protected boolean PSTYPE17;

    protected boolean PSTYPE18;

    protected boolean PSTYPE19;

    protected byte PSTYPE2;

    protected boolean PSTYPE20;

    protected boolean PSTYPE21;

    protected byte PSTYPE3;

    protected byte PSTYPE4;

    protected byte PSTYPE5;

    protected byte PSTYPE6;

    protected boolean PSTYPE7;

    protected byte PSTYPE8;

    protected byte PSTYPE9;

    protected boolean REGLRPY3;

    protected boolean REGLRPY3_I;

    protected boolean REGLRPY3_IFLAG;

    protected boolean REGLRPY4;

    protected boolean REGLRPY4_I;

    protected boolean REGLRPY4_IFLAG;

    protected boolean REGLRPY5;

    protected boolean REGLRPY5_I;

    protected boolean REGLRPY5_IFLAG;

    protected byte RELIGE;

    protected byte RELIGS;

    protected byte RELIGW;

    protected byte RF;

    protected boolean RPCRET1;

    protected boolean RPCRET2;

    protected boolean RPCRET3;

    protected byte RPDBCAL_F;

    protected byte RS;

    protected byte SCAC4_I;

    protected byte SCAC5_I;

    protected byte SENO;

    protected boolean SOA1;

    protected boolean SOA2;

    protected byte SOC2000;

    protected double SPASAF_IORIG;

    protected double SPECAMT10;

    protected byte SPECIAL01;

    protected byte SPECIAL02;

    protected byte SPECIAL03;

    protected byte SPECIAL04;

    protected byte SPECIAL05;

    protected boolean SPECIAL06;

    protected boolean SPECIAL07;

    protected boolean SPECIAL08;

    protected boolean SPECIAL09;

    protected boolean SPECIAL10;

    protected byte SPECINCL1;

    protected byte SPECINCL10;

    protected byte SPECINCL2;

    protected byte SPECINCL3;

    protected byte SPECINCL4;

    protected byte SPECINCL5;

    protected byte SPECINCL6;

    protected byte SPECINCL7;

    protected byte SPECINCL8;

    protected byte SPECINCL9;

    protected byte SPECPD1;

    protected byte SPECPD10;

    protected short SPECPD2;

    protected byte SPECPD3;

    protected byte SPECPD4;

    protected byte SPECPD5;

    protected byte SPECPD6;

    protected byte SPECPD7;

    protected byte SPECPD8;

    protected byte SPECPD9;

    protected byte SPECWHEN1;

    protected byte SPECWHEN10;

    protected byte SPECWHEN2;

    protected byte SPECWHEN3;

    protected byte SPECWHEN4;

    protected byte SPECWHEN5;

    protected byte SPECWHEN6;

    protected byte SPECWHEN7;

    protected byte SPECWHEN8;

    protected byte SPECWHEN9;

    protected byte SPENDM;

    protected boolean STATSWARD;

    protected boolean STATUS;

    protected byte TACC3;

    protected boolean TADDVB3;

    protected int TADDVL;

    protected boolean TADDVL3;

    protected byte TBCAP3;

    protected boolean TBCAPY3;

    protected boolean TBCKNO3;

    protected boolean TBEN13;

    protected boolean TBEN14;

    protected boolean TBEN15;

    protected boolean TBEN16;

    protected byte TBEN17;

    protected byte TBEN18;

    protected boolean TBEN19;

    protected boolean TBEN20;

    protected boolean TBEN21;

    protected boolean TBEN22;

    protected boolean TBEN23;

    protected boolean TBEN24;

    protected boolean TBEN6;

    protected boolean TBEN7;

    protected boolean TBEN8;

    protected byte TBINC3;

    protected short TBREC3;

    protected boolean TBRECB3;

    protected byte TBVALB3;

    protected byte TDUP3;

    protected boolean TDUPA3;

    protected byte TJNT5;

    protected boolean TJNT6;

    protected byte TRAINEE;

    protected byte TSNO3;

    protected int TVAL3;

    protected byte TVALB3;

    protected boolean TWHO10;

    protected boolean TWHO11;

    protected boolean TWHO12;

    protected byte TWHO13;

    protected boolean TWHO14;

    protected boolean TWHO15;

    protected boolean TWHO16;

    protected boolean TWHO17;

    protected boolean TWHO18;

    protected boolean TWHO3;

    protected boolean TWHO4;

    protected boolean TWHO5;

    protected boolean TWHO6;

    protected boolean TWHO9;

    protected byte ULAND10;

    protected byte ULAND11;

    protected byte ULAND12;

    protected byte ULAND16;

    protected byte ULAND17;

    protected byte ULAND18;

    protected boolean UPROP1_IFLAG;

    protected boolean UPROP2_IFLAG;

    protected boolean UPROP3_IFLAG;

    protected boolean UPROP4_IFLAG;

    protected boolean UPROP5_IFLAG;

    protected boolean UPROP6_IFLAG;

    protected byte UPRSH13;

    protected byte UPRSH14;

    protected byte UPRSH15;

    protected byte UPRSH16;

    protected byte UPRSH17;

    protected boolean UPRSH18;

    protected byte UPRSH19;

    protected boolean UPRSH20;

    protected byte UPRSH21;

    protected boolean UPRSH22;

    protected byte UPRSH23;

    protected boolean UPRSH24;

    protected byte UPRSH25;

    protected byte UPRSH26;

    protected byte UPRSH27;

    protected boolean UPRSH28;

    protected byte UPRSH29;

    protected boolean UPRSH30;

    protected byte UPRSH31;

    protected boolean UPRSH32;

    protected byte UPRSH33;

    protected boolean UPRSH34;

    protected byte UPRSH35;

    protected boolean UPRSH36;

    protected byte UPRSH6;

    protected boolean UPRTYP;

    protected double W1W3WGT;

    protected double W2W3WGT;

    protected double W3XSWGT;

    protected boolean WARD98;

    protected boolean WARDC91;

    protected boolean WARDO91;

    protected byte WHOREATT;

    protected byte WHORECAR;

    protected byte WHOREMOB;

    protected byte WTCPD;

    protected byte XBCON;

    protected boolean XBCONREM;

    protected boolean XBCONSC;

    protected byte XBCRT;

    protected boolean XBOK;

    protected byte XDCON;

    protected boolean XDCONREM;

    protected boolean XDCONSC;

    protected boolean XDOK;

    protected byte XDREF;

    protected byte XICON;

    protected boolean XICONREM;

    protected boolean XICONSC;

    protected final void initACCFRAC(String s) {
        if (!s.trim().isEmpty()) {
            ACCFRAC = Double.parseDouble(s);
        } else {
            ACCFRAC = Double.NaN;
        }
    }

    protected final void initAGEASAF1(String s) {
        if (!s.trim().isEmpty()) {
            AGEASAF1 = Double.parseDouble(s);
        } else {
            AGEASAF1 = Double.NaN;
        }
    }

    protected final void initAGMSAF2T(String s) {
        if (!s.trim().isEmpty()) {
            AGMSAF2T = Double.parseDouble(s);
        } else {
            AGMSAF2T = Double.NaN;
        }
    }

    protected final void initAGMSAFT1(String s) {
        if (!s.trim().isEmpty()) {
            AGMSAFT1 = Double.parseDouble(s);
        } else {
            AGMSAFT1 = Double.NaN;
        }
    }

    protected final void initBACCEND1(String s) {
        if (!s.trim().isEmpty()) {
            BACCEND1 = s;
        }
    }

    protected final void initBACCEND2(String s) {
        if (!s.trim().isEmpty()) {
            BACCEND2 = s;
        }
    }

    protected final void initBACCEND3(String s) {
        if (!s.trim().isEmpty()) {
            BACCEND3 = s;
        }
    }

    protected final void initBCARRY2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BCARRY2 = false;
            } else {
                BCARRY2 = true;
            }
        }
    }

    protected final void initBENTYPE01(String s) {
        if (!s.trim().isEmpty()) {
            BENTYPE01 = Byte.parseByte(s);
        } else {
            BENTYPE01 = Byte.MIN_VALUE;
        }
    }

    protected final void initBENTYPE02(String s) {
        if (!s.trim().isEmpty()) {
            BENTYPE02 = Byte.parseByte(s);
        } else {
            BENTYPE02 = Byte.MIN_VALUE;
        }
    }

    protected final void initBENTYPE03(String s) {
        if (!s.trim().isEmpty()) {
            BENTYPE03 = Byte.parseByte(s);
        } else {
            BENTYPE03 = Byte.MIN_VALUE;
        }
    }

    protected final void initBENTYPE04(String s) {
        if (!s.trim().isEmpty()) {
            BENTYPE04 = Byte.parseByte(s);
        } else {
            BENTYPE04 = Byte.MIN_VALUE;
        }
    }

    protected final void initBENTYPE05(String s) {
        if (!s.trim().isEmpty()) {
            BENTYPE05 = Byte.parseByte(s);
        } else {
            BENTYPE05 = Byte.MIN_VALUE;
        }
    }

    protected final void initBENTYPE06(String s) {
        if (!s.trim().isEmpty()) {
            BENTYPE06 = Byte.parseByte(s);
        } else {
            BENTYPE06 = Byte.MIN_VALUE;
        }
    }

    protected final void initBENTYPE07(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BENTYPE07 = false;
            } else {
                BENTYPE07 = true;
            }
        }
    }

    protected final void initBENTYPE08(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BENTYPE08 = false;
            } else {
                BENTYPE08 = true;
            }
        }
    }

    protected final void initBENTYPE09(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BENTYPE09 = false;
            } else {
                BENTYPE09 = true;
            }
        }
    }

    protected final void initBENTYPE10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BENTYPE10 = false;
            } else {
                BENTYPE10 = true;
            }
        }
    }

    protected final void initBENTYPE11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BENTYPE11 = false;
            } else {
                BENTYPE11 = true;
            }
        }
    }

    protected final void initBENTYPE12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BENTYPE12 = false;
            } else {
                BENTYPE12 = true;
            }
        }
    }

    protected final void initBFUND11(String s) {
        if (!s.trim().isEmpty()) {
            BFUND11 = Byte.parseByte(s);
        } else {
            BFUND11 = Byte.MIN_VALUE;
        }
    }

    protected final void initBFUND12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND12 = false;
            } else {
                BFUND12 = true;
            }
        }
    }

    protected final void initBFUND13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND13 = false;
            } else {
                BFUND13 = true;
            }
        }
    }

    protected final void initBFUND14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND14 = false;
            } else {
                BFUND14 = true;
            }
        }
    }

    protected final void initBFUND15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND15 = false;
            } else {
                BFUND15 = true;
            }
        }
    }

    protected final void initBFUND16(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND16 = false;
            } else {
                BFUND16 = true;
            }
        }
    }

    protected final void initBFUND18(String s) {
        if (!s.trim().isEmpty()) {
            BFUND18 = Byte.parseByte(s);
        } else {
            BFUND18 = Byte.MIN_VALUE;
        }
    }

    protected final void initBFUND19(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND19 = false;
            } else {
                BFUND19 = true;
            }
        }
    }

    protected final void initBFUND20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND20 = false;
            } else {
                BFUND20 = true;
            }
        }
    }

    protected final void initBFUND21(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND21 = false;
            } else {
                BFUND21 = true;
            }
        }
    }

    protected final void initBFUND22(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND22 = false;
            } else {
                BFUND22 = true;
            }
        }
    }

    protected final void initBFUND23(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND23 = false;
            } else {
                BFUND23 = true;
            }
        }
    }

    protected final void initBFUND24(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND24 = false;
            } else {
                BFUND24 = true;
            }
        }
    }

    protected final void initBFUND3(String s) {
        if (!s.trim().isEmpty()) {
            BFUND3 = Byte.parseByte(s);
        } else {
            BFUND3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBFUND4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND4 = false;
            } else {
                BFUND4 = true;
            }
        }
    }

    protected final void initBFUND5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND5 = false;
            } else {
                BFUND5 = true;
            }
        }
    }

    protected final void initBFUND6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND6 = false;
            } else {
                BFUND6 = true;
            }
        }
    }

    protected final void initBFUND7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND7 = false;
            } else {
                BFUND7 = true;
            }
        }
    }

    protected final void initBFUND8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BFUND8 = false;
            } else {
                BFUND8 = true;
            }
        }
    }

    protected final void initBSEPPD09(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BSEPPD09 = false;
            } else {
                BSEPPD09 = true;
            }
        }
    }

    protected final void initBSEPPD10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BSEPPD10 = false;
            } else {
                BSEPPD10 = true;
            }
        }
    }

    protected final void initBSEPPD11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BSEPPD11 = false;
            } else {
                BSEPPD11 = true;
            }
        }
    }

    protected final void initBSEPPD12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BSEPPD12 = false;
            } else {
                BSEPPD12 = true;
            }
        }
    }

    protected final void initBSEPPD13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BSEPPD13 = false;
            } else {
                BSEPPD13 = true;
            }
        }
    }

    protected final void initBSEPPD14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BSEPPD14 = false;
            } else {
                BSEPPD14 = true;
            }
        }
    }

    protected final void initBSEPPD15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BSEPPD15 = false;
            } else {
                BSEPPD15 = true;
            }
        }
    }

    protected final void initBSEPPD16(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BSEPPD16 = false;
            } else {
                BSEPPD16 = true;
            }
        }
    }

    protected final void initBSEPPD17(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BSEPPD17 = false;
            } else {
                BSEPPD17 = true;
            }
        }
    }

    protected final void initBSEPPD18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BSEPPD18 = false;
            } else {
                BSEPPD18 = true;
            }
        }
    }

    protected final void initBSEPPD19(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BSEPPD19 = false;
            } else {
                BSEPPD19 = true;
            }
        }
    }

    protected final void initBSEPPD20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                BSEPPD20 = false;
            } else {
                BSEPPD20 = true;
            }
        }
    }

    protected final void initCAEXTRA(String s) {
        if (!s.trim().isEmpty()) {
            CAEXTRA = Byte.parseByte(s);
        } else {
            CAEXTRA = Byte.MIN_VALUE;
        }
    }

    protected final void initCAOLDER(String s) {
        if (!s.trim().isEmpty()) {
            CAOLDER = Byte.parseByte(s);
        } else {
            CAOLDER = Byte.MIN_VALUE;
        }
    }

    protected final void initCAOTHER1(String s) {
        if (!s.trim().isEmpty()) {
            CAOTHER1 = Byte.parseByte(s);
        } else {
            CAOTHER1 = Byte.MIN_VALUE;
        }
    }

    protected final void initCAOTHER2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                CAOTHER2 = false;
            } else {
                CAOTHER2 = true;
            }
        }
    }

    protected final void initCAOTHER3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                CAOTHER3 = false;
            } else {
                CAOTHER3 = true;
            }
        }
    }

    protected final void initCAOTHER4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                CAOTHER4 = false;
            } else {
                CAOTHER4 = true;
            }
        }
    }

    protected final void initCAOTHER5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                CAOTHER5 = false;
            } else {
                CAOTHER5 = true;
            }
        }
    }

    protected final void initCATYPE(String s) {
        if (!s.trim().isEmpty()) {
            CATYPE = Byte.parseByte(s);
        } else {
            CATYPE = Byte.MIN_VALUE;
        }
    }

    protected final void initCCAC4_I(String s) {
        if (!s.trim().isEmpty()) {
            CCAC4_I = Byte.parseByte(s);
        } else {
            CCAC4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initCCAC5_I(String s) {
        if (!s.trim().isEmpty()) {
            CCAC5_I = Byte.parseByte(s);
        } else {
            CCAC5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initCOMBPD(String s) {
        if (!s.trim().isEmpty()) {
            COMBPD = Byte.parseByte(s);
        } else {
            COMBPD = Byte.MIN_VALUE;
        }
    }

    protected final void initCOMMIT1(String s) {
        if (!s.trim().isEmpty()) {
            COMMIT1 = Byte.parseByte(s);
        } else {
            COMMIT1 = Byte.MIN_VALUE;
        }
    }

    protected final void initCOMMIT2(String s) {
        if (!s.trim().isEmpty()) {
            COMMIT2 = Byte.parseByte(s);
        } else {
            COMMIT2 = Byte.MIN_VALUE;
        }
    }

    protected final void initCOMMIT3(String s) {
        if (!s.trim().isEmpty()) {
            COMMIT3 = Byte.parseByte(s);
        } else {
            COMMIT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initCOMMIT4(String s) {
        if (!s.trim().isEmpty()) {
            COMMIT4 = Byte.parseByte(s);
        } else {
            COMMIT4 = Byte.MIN_VALUE;
        }
    }

    protected final void initCOMMIT5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                COMMIT5 = false;
            } else {
                COMMIT5 = true;
            }
        }
    }

    protected final void initCOURSE20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                COURSE20 = false;
            } else {
                COURSE20 = true;
            }
        }
    }

    protected final void initCREDTYPE1(String s) {
        if (!s.trim().isEmpty()) {
            CREDTYPE1 = Byte.parseByte(s);
        } else {
            CREDTYPE1 = Byte.MIN_VALUE;
        }
    }

    protected final void initCREDTYPE2(String s) {
        if (!s.trim().isEmpty()) {
            CREDTYPE2 = Byte.parseByte(s);
        } else {
            CREDTYPE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initCTCPD(String s) {
        if (!s.trim().isEmpty()) {
            CTCPD = Byte.parseByte(s);
        } else {
            CTCPD = Byte.MIN_VALUE;
        }
    }

    protected final void initCTOGSEP(String s) {
        if (!s.trim().isEmpty()) {
            CTOGSEP = Byte.parseByte(s);
        } else {
            CTOGSEP = Byte.MIN_VALUE;
        }
    }

    protected final void initCTPAY(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            CTPAY = false;
        }
    }

    protected final void initCTPAYS(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            CTPAYS = false;
        }
    }

    protected final void initCTPAYW(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            CTPAYW = false;
        }
    }

    protected final void initDBURDH(String s) {
        if (!s.trim().isEmpty()) {
            DBURDH = Byte.parseByte(s);
        } else {
            DBURDH = Byte.MIN_VALUE;
        }
    }

    protected final void initDBURDW4(String s) {
        if (!s.trim().isEmpty()) {
            DBURDW4 = Byte.parseByte(s);
        } else {
            DBURDW4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDBURDW5(String s) {
        if (!s.trim().isEmpty()) {
            DBURDW5 = Byte.parseByte(s);
        } else {
            DBURDW5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDBURDW6(String s) {
        if (!s.trim().isEmpty()) {
            DBURDW6 = Byte.parseByte(s);
        } else {
            DBURDW6 = Byte.MIN_VALUE;
        }
    }

    protected final void initDBURDW7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DBURDW7 = false;
            } else {
                DBURDW7 = true;
            }
        }
    }

    protected final void initDBURD___W3(String s) {
        if (!s.trim().isEmpty()) {
            DBURD___W3 = Byte.parseByte(s);
        } else {
            DBURD___W3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDC12BEH4(String s) {
        if (!s.trim().isEmpty()) {
            DC12BEH4 = Byte.parseByte(s);
        } else {
            DC12BEH4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDC12BEH5(String s) {
        if (!s.trim().isEmpty()) {
            DC12BEH5 = Byte.parseByte(s);
        } else {
            DC12BEH5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDC12OWE4(String s) {
        if (!s.trim().isEmpty()) {
            DC12OWE4 = Short.parseShort(s);
        } else {
            DC12OWE4 = Short.MIN_VALUE;
        }
    }

    protected final void initDC12OWE5(String s) {
        if (!s.trim().isEmpty()) {
            DC12OWE5 = Short.parseShort(s);
        } else {
            DC12OWE5 = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMC4(String s) {
        if (!s.trim().isEmpty()) {
            DCAMC4 = Integer.parseInt(s);
        } else {
            DCAMC4 = Integer.MIN_VALUE;
        }
    }

    protected final void initDCAMC5(String s) {
        if (!s.trim().isEmpty()) {
            DCAMC5 = Short.parseShort(s);
        } else {
            DCAMC5 = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMD4(String s) {
        if (!s.trim().isEmpty()) {
            DCAMD4 = Short.parseShort(s);
        } else {
            DCAMD4 = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMD5(String s) {
        if (!s.trim().isEmpty()) {
            DCAMD5 = Short.parseShort(s);
        } else {
            DCAMD5 = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMOS4_I(String s) {
        if (!s.trim().isEmpty()) {
            DCAMOS4_I = Short.parseShort(s);
        } else {
            DCAMOS4_I = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMOS5_I(String s) {
        if (!s.trim().isEmpty()) {
            DCAMOS5_I = Short.parseShort(s);
        } else {
            DCAMOS5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMP4(String s) {
        if (!s.trim().isEmpty()) {
            DCAMP4 = Short.parseShort(s);
        } else {
            DCAMP4 = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMP5(String s) {
        if (!s.trim().isEmpty()) {
            DCAMP5 = Short.parseShort(s);
        } else {
            DCAMP5 = Short.MIN_VALUE;
        }
    }

    protected final void initDCCOS4(String s) {
        if (!s.trim().isEmpty()) {
            DCCOS4 = Byte.parseByte(s);
        } else {
            DCCOS4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCOS5(String s) {
        if (!s.trim().isEmpty()) {
            DCCOS5 = Byte.parseByte(s);
        } else {
            DCCOS5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCSP4(String s) {
        if (!s.trim().isEmpty()) {
            DCCSP4 = Byte.parseByte(s);
        } else {
            DCCSP4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCSP5(String s) {
        if (!s.trim().isEmpty()) {
            DCCSP5 = Byte.parseByte(s);
        } else {
            DCCSP5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCESB4(String s) {
        if (!s.trim().isEmpty()) {
            DCESB4 = Byte.parseByte(s);
        } else {
            DCESB4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCESB5(String s) {
        if (!s.trim().isEmpty()) {
            DCESB5 = Byte.parseByte(s);
        } else {
            DCESB5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCINZ4(String s) {
        if (!s.trim().isEmpty()) {
            DCINZ4 = Byte.parseByte(s);
        } else {
            DCINZ4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCINZ5(String s) {
        if (!s.trim().isEmpty()) {
            DCINZ5 = Byte.parseByte(s);
        } else {
            DCINZ5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNAM4(String s) {
        if (!s.trim().isEmpty()) {
            DCNAM4 = Byte.parseByte(s);
        } else {
            DCNAM4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNAM5(String s) {
        if (!s.trim().isEmpty()) {
            DCNAM5 = Byte.parseByte(s);
        } else {
            DCNAM5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DCONM10 = false;
            } else {
                DCONM10 = true;
            }
        }
    }

    protected final void initDCONM7(String s) {
        if (!s.trim().isEmpty()) {
            DCONM7 = Byte.parseByte(s);
        } else {
            DCONM7 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DCONM8 = false;
            } else {
                DCONM8 = true;
            }
        }
    }

    protected final void initDCONM9(String s) {
        if (!s.trim().isEmpty()) {
            DCONM9 = Byte.parseByte(s);
        } else {
            DCONM9 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCPER4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DCPER4 = false;
            } else {
                DCPER4 = true;
            }
        }
    }

    protected final void initDCPER5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DCPER5 = false;
            } else {
                DCPER5 = true;
            }
        }
    }

    protected final void initDCREC4(String s) {
        if (!s.trim().isEmpty()) {
            DCREC4 = Byte.parseByte(s);
        } else {
            DCREC4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCREC5(String s) {
        if (!s.trim().isEmpty()) {
            DCREC5 = Byte.parseByte(s);
        } else {
            DCREC5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCRSP4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DCRSP4 = false;
            } else {
                DCRSP4 = true;
            }
        }
    }

    protected final void initDCRSP5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DCRSP5 = false;
            } else {
                DCRSP5 = true;
            }
        }
    }

    protected final void initDHBANY08_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DHBANY08_I = false;
            } else {
                DHBANY08_I = true;
            }
        }
    }

    protected final void initDHBANY08_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DHBANY08_IFLAG = false;
            } else {
                DHBANY08_IFLAG = true;
            }
        }
    }

    protected final void initDHBANY09_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DHBANY09_I = false;
            } else {
                DHBANY09_I = true;
            }
        }
    }

    protected final void initDHBANY09_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DHBANY09_IFLAG = false;
            } else {
                DHBANY09_IFLAG = true;
            }
        }
    }

    protected final void initDHBANY10_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DHBANY10_I = false;
            } else {
                DHBANY10_I = true;
            }
        }
    }

    protected final void initDHBANY10_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DHBANY10_IFLAG = false;
            } else {
                DHBANY10_IFLAG = true;
            }
        }
    }

    protected final void initDHBANY11_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DHBANY11_I = false;
            } else {
                DHBANY11_I = true;
            }
        }
    }

    protected final void initDHBANY11_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DHBANY11_IFLAG = false;
            } else {
                DHBANY11_IFLAG = true;
            }
        }
    }

    protected final void initDHPANY4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DHPANY4 = false;
            } else {
                DHPANY4 = true;
            }
        }
    }

    protected final void initDHPANY5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DHPANY5 = false;
            } else {
                DHPANY5 = true;
            }
        }
    }

    protected final void initDHPANY6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DHPANY6 = false;
            } else {
                DHPANY6 = true;
            }
        }
    }

    protected final void initDHPANY7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DHPANY7 = false;
            } else {
                DHPANY7 = true;
            }
        }
    }

    protected final void initDHPBEH3(String s) {
        if (!s.trim().isEmpty()) {
            DHPBEH3 = Byte.parseByte(s);
        } else {
            DHPBEH3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPBEH3_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPBEH3_I = Byte.parseByte(s);
        } else {
            DHPBEH3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPBEH3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPBEH3_IFLAG = Byte.parseByte(s);
        } else {
            DHPBEH3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPBEH4(String s) {
        if (!s.trim().isEmpty()) {
            DHPBEH4 = Byte.parseByte(s);
        } else {
            DHPBEH4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPBEH4_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPBEH4_I = Byte.parseByte(s);
        } else {
            DHPBEH4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPBEH4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPBEH4_IFLAG = Byte.parseByte(s);
        } else {
            DHPBEH4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPBEH5(String s) {
        if (!s.trim().isEmpty()) {
            DHPBEH5 = Byte.parseByte(s);
        } else {
            DHPBEH5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPBEH5_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPBEH5_I = Byte.parseByte(s);
        } else {
            DHPBEH5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPBEH5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DHPBEH5_IFLAG = false;
            } else {
                DHPBEH5_IFLAG = true;
            }
        }
    }

    protected final void initDHPEST3(String s) {
        if (!s.trim().isEmpty()) {
            DHPEST3 = Byte.parseByte(s);
        } else {
            DHPEST3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPEST4(String s) {
        if (!s.trim().isEmpty()) {
            DHPEST4 = Byte.parseByte(s);
        } else {
            DHPEST4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPEST5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DHPEST5 = false;
            } else {
                DHPEST5 = true;
            }
        }
    }

    protected final void initDHPINS3(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS3 = Short.parseShort(s);
        } else {
            DHPINS3 = Short.MIN_VALUE;
        }
    }

    protected final void initDHPINS3_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS3_I = Short.parseShort(s);
        } else {
            DHPINS3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPINS3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS3_IFLAG = Byte.parseByte(s);
        } else {
            DHPINS3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPINS4(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS4 = Short.parseShort(s);
        } else {
            DHPINS4 = Short.MIN_VALUE;
        }
    }

    protected final void initDHPINS4_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS4_I = Double.parseDouble(s);
        } else {
            DHPINS4_I = Double.NaN;
        }
    }

    protected final void initDHPINS4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS4_IFLAG = Byte.parseByte(s);
        } else {
            DHPINS4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPINS5(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS5 = Short.parseShort(s);
        } else {
            DHPINS5 = Short.MIN_VALUE;
        }
    }

    protected final void initDHPINS5_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS5_I = Short.parseShort(s);
        } else {
            DHPINS5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPINS5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS5_IFLAG = Byte.parseByte(s);
        } else {
            DHPINS5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPINT3(String s) {
        if (!s.trim().isEmpty()) {
            DHPINT3 = Byte.parseByte(s);
        } else {
            DHPINT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPINT4(String s) {
        if (!s.trim().isEmpty()) {
            DHPINT4 = Byte.parseByte(s);
        } else {
            DHPINT4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPINT5(String s) {
        if (!s.trim().isEmpty()) {
            DHPINT5 = Byte.parseByte(s);
        } else {
            DHPINT5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT3(String s) {
        if (!s.trim().isEmpty()) {
            DHPOFT3 = Byte.parseByte(s);
        } else {
            DHPOFT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT3_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPOFT3_I = Byte.parseByte(s);
        } else {
            DHPOFT3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPOFT3_IFLAG = Byte.parseByte(s);
        } else {
            DHPOFT3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT4(String s) {
        if (!s.trim().isEmpty()) {
            DHPOFT4 = Byte.parseByte(s);
        } else {
            DHPOFT4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT4_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPOFT4_I = Byte.parseByte(s);
        } else {
            DHPOFT4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPOFT4_IFLAG = Byte.parseByte(s);
        } else {
            DHPOFT4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT5(String s) {
        if (!s.trim().isEmpty()) {
            DHPOFT5 = Byte.parseByte(s);
        } else {
            DHPOFT5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT5_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPOFT5_I = Byte.parseByte(s);
        } else {
            DHPOFT5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DHPOFT5_IFLAG = false;
            } else {
                DHPOFT5_IFLAG = true;
            }
        }
    }

    protected final void initDHPOWE3(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE3 = Short.parseShort(s);
        } else {
            DHPOWE3 = Short.MIN_VALUE;
        }
    }

    protected final void initDHPOWE3_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE3_I = Short.parseShort(s);
        } else {
            DHPOWE3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPOWE3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE3_IFLAG = Byte.parseByte(s);
        } else {
            DHPOWE3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOWE4(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE4 = Short.parseShort(s);
        } else {
            DHPOWE4 = Short.MIN_VALUE;
        }
    }

    protected final void initDHPOWE4_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE4_I = Short.parseShort(s);
        } else {
            DHPOWE4_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPOWE4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE4_IFLAG = Byte.parseByte(s);
        } else {
            DHPOWE4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOWE5(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE5 = Short.parseShort(s);
        } else {
            DHPOWE5 = Short.MIN_VALUE;
        }
    }

    protected final void initDHPOWE5_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE5_I = Short.parseShort(s);
        } else {
            DHPOWE5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPOWE5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DHPOWE5_IFLAG = false;
            } else {
                DHPOWE5_IFLAG = true;
            }
        }
    }

    protected final void initDHPWEST3(String s) {
        if (!s.trim().isEmpty()) {
            DHPWEST3 = Byte.parseByte(s);
        } else {
            DHPWEST3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWEST4(String s) {
        if (!s.trim().isEmpty()) {
            DHPWEST4 = Byte.parseByte(s);
        } else {
            DHPWEST4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWEST5(String s) {
        if (!s.trim().isEmpty()) {
            DHPWEST5 = Byte.parseByte(s);
        } else {
            DHPWEST5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM3(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM3 = Byte.parseByte(s);
        } else {
            DHPWHNM3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM3_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM3_I = Byte.parseByte(s);
        } else {
            DHPWHNM3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM3_IFLAG = Byte.parseByte(s);
        } else {
            DHPWHNM3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM4(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM4 = Byte.parseByte(s);
        } else {
            DHPWHNM4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM4_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM4_I = Byte.parseByte(s);
        } else {
            DHPWHNM4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM4_IFLAG = Byte.parseByte(s);
        } else {
            DHPWHNM4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM5(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM5 = Byte.parseByte(s);
        } else {
            DHPWHNM5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM5_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM5_I = Byte.parseByte(s);
        } else {
            DHPWHNM5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM5_IFLAG = Byte.parseByte(s);
        } else {
            DHPWHNM5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY3(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY3 = Short.parseShort(s);
        } else {
            DHPWHNY3 = Short.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY3_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY3_I = Short.parseShort(s);
        } else {
            DHPWHNY3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY3_IFLAG = Byte.parseByte(s);
        } else {
            DHPWHNY3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY4(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY4 = Short.parseShort(s);
        } else {
            DHPWHNY4 = Short.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY4_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY4_I = Short.parseShort(s);
        } else {
            DHPWHNY4_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY4_IFLAG = Byte.parseByte(s);
        } else {
            DHPWHNY4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY5(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY5 = Short.parseShort(s);
        } else {
            DHPWHNY5 = Short.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY5_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY5_I = Short.parseShort(s);
        } else {
            DHPWHNY5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY5_IFLAG = Byte.parseByte(s);
        } else {
            DHPWHNY5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHY11(String s) {
        if (!s.trim().isEmpty()) {
            DLWHY11 = Byte.parseByte(s);
        } else {
            DLWHY11 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHY12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY12 = false;
            } else {
                DLWHY12 = true;
            }
        }
    }

    protected final void initDLWHY13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY13 = false;
            } else {
                DLWHY13 = true;
            }
        }
    }

    protected final void initDLWHY14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY14 = false;
            } else {
                DLWHY14 = true;
            }
        }
    }

    protected final void initDLWHY17(String s) {
        if (!s.trim().isEmpty()) {
            DLWHY17 = Byte.parseByte(s);
        } else {
            DLWHY17 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHY18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY18 = false;
            } else {
                DLWHY18 = true;
            }
        }
    }

    protected final void initDLWHY19(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY19 = false;
            } else {
                DLWHY19 = true;
            }
        }
    }

    protected final void initDLWHY20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY20 = false;
            } else {
                DLWHY20 = true;
            }
        }
    }

    protected final void initDLWHY21(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY21 = false;
            } else {
                DLWHY21 = true;
            }
        }
    }

    protected final void initDLWHY24(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY24 = false;
            } else {
                DLWHY24 = true;
            }
        }
    }

    protected final void initDLWHY25(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY25 = false;
            } else {
                DLWHY25 = true;
            }
        }
    }

    protected final void initDLWHY26(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY26 = false;
            } else {
                DLWHY26 = true;
            }
        }
    }

    protected final void initDLWHY27(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY27 = false;
            } else {
                DLWHY27 = true;
            }
        }
    }

    protected final void initDLWHY28(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY28 = false;
            } else {
                DLWHY28 = true;
            }
        }
    }

    protected final void initDLWHY31(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY31 = false;
            } else {
                DLWHY31 = true;
            }
        }
    }

    protected final void initDLWHY32(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY32 = false;
            } else {
                DLWHY32 = true;
            }
        }
    }

    protected final void initDLWHY33(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY33 = false;
            } else {
                DLWHY33 = true;
            }
        }
    }

    protected final void initDLWHY34(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY34 = false;
            } else {
                DLWHY34 = true;
            }
        }
    }

    protected final void initDLWHY35(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DLWHY35 = false;
            } else {
                DLWHY35 = true;
            }
        }
    }

    protected final void initDMOBEH3(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH3 = Byte.parseByte(s);
        } else {
            DMOBEH3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOBEH3_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH3_I = Byte.parseByte(s);
        } else {
            DMOBEH3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOBEH3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH3_IFLAG = Byte.parseByte(s);
        } else {
            DMOBEH3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOBEH4(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH4 = Byte.parseByte(s);
        } else {
            DMOBEH4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOBEH4_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH4_I = Byte.parseByte(s);
        } else {
            DMOBEH4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOBEH4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH4_IFLAG = Byte.parseByte(s);
        } else {
            DMOBEH4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOBEH5(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH5 = Byte.parseByte(s);
        } else {
            DMOBEH5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOBEH5_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH5_I = Byte.parseByte(s);
        } else {
            DMOBEH5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOBEH5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH5_IFLAG = Byte.parseByte(s);
        } else {
            DMOBEH5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOEST3(String s) {
        if (!s.trim().isEmpty()) {
            DMOEST3 = Byte.parseByte(s);
        } else {
            DMOEST3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOEST4(String s) {
        if (!s.trim().isEmpty()) {
            DMOEST4 = Byte.parseByte(s);
        } else {
            DMOEST4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOEST5(String s) {
        if (!s.trim().isEmpty()) {
            DMOEST5 = Byte.parseByte(s);
        } else {
            DMOEST5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOINS3(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS3 = Short.parseShort(s);
        } else {
            DMOINS3 = Short.MIN_VALUE;
        }
    }

    protected final void initDMOINS3_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS3_I = Short.parseShort(s);
        } else {
            DMOINS3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDMOINS3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS3_IFLAG = Byte.parseByte(s);
        } else {
            DMOINS3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOINS4(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS4 = Short.parseShort(s);
        } else {
            DMOINS4 = Short.MIN_VALUE;
        }
    }

    protected final void initDMOINS4_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS4_I = Byte.parseByte(s);
        } else {
            DMOINS4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOINS4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS4_IFLAG = Byte.parseByte(s);
        } else {
            DMOINS4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOINS5(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS5 = Byte.parseByte(s);
        } else {
            DMOINS5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOINS5_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS5_I = Byte.parseByte(s);
        } else {
            DMOINS5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOINS5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS5_IFLAG = Byte.parseByte(s);
        } else {
            DMOINS5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOINT3(String s) {
        if (!s.trim().isEmpty()) {
            DMOINT3 = Byte.parseByte(s);
        } else {
            DMOINT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOINT4(String s) {
        if (!s.trim().isEmpty()) {
            DMOINT4 = Byte.parseByte(s);
        } else {
            DMOINT4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOINT5(String s) {
        if (!s.trim().isEmpty()) {
            DMOINT5 = Byte.parseByte(s);
        } else {
            DMOINT5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOFT3(String s) {
        if (!s.trim().isEmpty()) {
            DMOOFT3 = Byte.parseByte(s);
        } else {
            DMOOFT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOFT3_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOOFT3_I = Byte.parseByte(s);
        } else {
            DMOOFT3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOFT3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOOFT3_IFLAG = Byte.parseByte(s);
        } else {
            DMOOFT3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOFT4(String s) {
        if (!s.trim().isEmpty()) {
            DMOOFT4 = Byte.parseByte(s);
        } else {
            DMOOFT4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOFT4_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOOFT4_I = Byte.parseByte(s);
        } else {
            DMOOFT4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOFT4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOOFT4_IFLAG = Byte.parseByte(s);
        } else {
            DMOOFT4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOFT5(String s) {
        if (!s.trim().isEmpty()) {
            DMOOFT5 = Byte.parseByte(s);
        } else {
            DMOOFT5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOFT5_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DMOOFT5_I = false;
            } else {
                DMOOFT5_I = true;
            }
        }
    }

    protected final void initDMOOFT5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOOFT5_IFLAG = Byte.parseByte(s);
        } else {
            DMOOFT5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOWE3(String s) {
        if (!s.trim().isEmpty()) {
            DMOOWE3 = Short.parseShort(s);
        } else {
            DMOOWE3 = Short.MIN_VALUE;
        }
    }

    protected final void initDMOOWE3_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOOWE3_I = Short.parseShort(s);
        } else {
            DMOOWE3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDMOOWE3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOOWE3_IFLAG = Byte.parseByte(s);
        } else {
            DMOOWE3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOWE4(String s) {
        if (!s.trim().isEmpty()) {
            DMOOWE4 = Short.parseShort(s);
        } else {
            DMOOWE4 = Short.MIN_VALUE;
        }
    }

    protected final void initDMOOWE4_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOOWE4_I = Short.parseShort(s);
        } else {
            DMOOWE4_I = Short.MIN_VALUE;
        }
    }

    protected final void initDMOOWE4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOOWE4_IFLAG = Byte.parseByte(s);
        } else {
            DMOOWE4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOWE5(String s) {
        if (!s.trim().isEmpty()) {
            DMOOWE5 = Short.parseShort(s);
        } else {
            DMOOWE5 = Short.MIN_VALUE;
        }
    }

    protected final void initDMOOWE5_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOOWE5_I = Short.parseShort(s);
        } else {
            DMOOWE5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDMOOWE5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DMOOWE5_IFLAG = false;
            } else {
                DMOOWE5_IFLAG = true;
            }
        }
    }

    protected final void initDMOWEST3(String s) {
        if (!s.trim().isEmpty()) {
            DMOWEST3 = Byte.parseByte(s);
        } else {
            DMOWEST3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWEST4(String s) {
        if (!s.trim().isEmpty()) {
            DMOWEST4 = Byte.parseByte(s);
        } else {
            DMOWEST4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWEST5(String s) {
        if (!s.trim().isEmpty()) {
            DMOWEST5 = Byte.parseByte(s);
        } else {
            DMOWEST5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM3(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM3 = Byte.parseByte(s);
        } else {
            DMOWHNM3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM3_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM3_I = Byte.parseByte(s);
        } else {
            DMOWHNM3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM3_IFLAG = Byte.parseByte(s);
        } else {
            DMOWHNM3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM4(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM4 = Byte.parseByte(s);
        } else {
            DMOWHNM4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM4_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM4_I = Byte.parseByte(s);
        } else {
            DMOWHNM4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM4_IFLAG = Byte.parseByte(s);
        } else {
            DMOWHNM4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM5(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM5 = Byte.parseByte(s);
        } else {
            DMOWHNM5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM5_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM5_I = Byte.parseByte(s);
        } else {
            DMOWHNM5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM5_IFLAG = Byte.parseByte(s);
        } else {
            DMOWHNM5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY3(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY3 = Short.parseShort(s);
        } else {
            DMOWHNY3 = Short.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY3_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY3_I = Short.parseShort(s);
        } else {
            DMOWHNY3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY3_IFLAG = Byte.parseByte(s);
        } else {
            DMOWHNY3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY4(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY4 = Short.parseShort(s);
        } else {
            DMOWHNY4 = Short.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY4_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY4_I = Short.parseShort(s);
        } else {
            DMOWHNY4_I = Short.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY4_IFLAG = Byte.parseByte(s);
        } else {
            DMOWHNY4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY5(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY5 = Short.parseShort(s);
        } else {
            DMOWHNY5 = Short.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY5_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY5_I = Short.parseShort(s);
        } else {
            DMOWHNY5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY5_IFLAG = Byte.parseByte(s);
        } else {
            DMOWHNY5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDS12BEH4(String s) {
        if (!s.trim().isEmpty()) {
            DS12BEH4 = Byte.parseByte(s);
        } else {
            DS12BEH4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDS12BEH5(String s) {
        if (!s.trim().isEmpty()) {
            DS12BEH5 = Byte.parseByte(s);
        } else {
            DS12BEH5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDS12OWE4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DS12OWE4 = false;
            } else {
                DS12OWE4 = true;
            }
        }
    }

    protected final void initDS12OWE5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DS12OWE5 = false;
            } else {
                DS12OWE5 = true;
            }
        }
    }

    protected final void initDSAMC4(String s) {
        if (!s.trim().isEmpty()) {
            DSAMC4 = Short.parseShort(s);
        } else {
            DSAMC4 = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMC5(String s) {
        if (!s.trim().isEmpty()) {
            DSAMC5 = Short.parseShort(s);
        } else {
            DSAMC5 = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMD4(String s) {
        if (!s.trim().isEmpty()) {
            DSAMD4 = Short.parseShort(s);
        } else {
            DSAMD4 = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMD5(String s) {
        if (!s.trim().isEmpty()) {
            DSAMD5 = Byte.parseByte(s);
        } else {
            DSAMD5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSAMOS4_I(String s) {
        if (!s.trim().isEmpty()) {
            DSAMOS4_I = Short.parseShort(s);
        } else {
            DSAMOS4_I = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMOS5_I(String s) {
        if (!s.trim().isEmpty()) {
            DSAMOS5_I = Short.parseShort(s);
        } else {
            DSAMOS5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMP4(String s) {
        if (!s.trim().isEmpty()) {
            DSAMP4 = Short.parseShort(s);
        } else {
            DSAMP4 = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMP5(String s) {
        if (!s.trim().isEmpty()) {
            DSAMP5 = Short.parseShort(s);
        } else {
            DSAMP5 = Short.MIN_VALUE;
        }
    }

    protected final void initDSCOS4(String s) {
        if (!s.trim().isEmpty()) {
            DSCOS4 = Byte.parseByte(s);
        } else {
            DSCOS4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCOS5(String s) {
        if (!s.trim().isEmpty()) {
            DSCOS5 = Byte.parseByte(s);
        } else {
            DSCOS5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCSP4(String s) {
        if (!s.trim().isEmpty()) {
            DSCSP4 = Byte.parseByte(s);
        } else {
            DSCSP4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCSP5(String s) {
        if (!s.trim().isEmpty()) {
            DSCSP5 = Byte.parseByte(s);
        } else {
            DSCSP5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSESB4(String s) {
        if (!s.trim().isEmpty()) {
            DSESB4 = Byte.parseByte(s);
        } else {
            DSESB4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSESB5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DSESB5 = false;
            } else {
                DSESB5 = true;
            }
        }
    }

    protected final void initDSLEST5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DSLEST5_IFLAG = false;
            } else {
                DSLEST5_IFLAG = true;
            }
        }
    }

    protected final void initDSNAM4(String s) {
        if (!s.trim().isEmpty()) {
            DSNAM4 = Byte.parseByte(s);
        } else {
            DSNAM4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSNAM5(String s) {
        if (!s.trim().isEmpty()) {
            DSNAM5 = Byte.parseByte(s);
        } else {
            DSNAM5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSNUM(String s) {
        if (!s.trim().isEmpty()) {
            DSNUM = Byte.parseByte(s);
        } else {
            DSNUM = Byte.MIN_VALUE;
        }
    }

    protected final void initDSONM10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DSONM10 = false;
            } else {
                DSONM10 = true;
            }
        }
    }

    protected final void initDSONM7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DSONM7 = false;
            } else {
                DSONM7 = true;
            }
        }
    }

    protected final void initDSONM8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DSONM8 = false;
            } else {
                DSONM8 = true;
            }
        }
    }

    protected final void initDSONM9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DSONM9 = false;
            } else {
                DSONM9 = true;
            }
        }
    }

    protected final void initDSPER4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DSPER4 = false;
            } else {
                DSPER4 = true;
            }
        }
    }

    protected final void initDSPER5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DSPER5 = false;
            } else {
                DSPER5 = true;
            }
        }
    }

    protected final void initDSREC4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DSREC4 = false;
            } else {
                DSREC4 = true;
            }
        }
    }

    protected final void initDSREC5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DSREC5 = false;
            } else {
                DSREC5 = true;
            }
        }
    }

    protected final void initDSRSP1(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -9) {
                DSRSP1 = false;
            } else {
                DSRSP1 = true;
            }
        }
    }

    protected final void initDSRSP2(String s) {
        if (!s.trim().isEmpty()) {
            DSRSP2 = Byte.parseByte(s);
        } else {
            DSRSP2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSRSP3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -9) {
                DSRSP3 = false;
            } else {
                DSRSP3 = true;
            }
        }
    }

    protected final void initDSRSP4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -9) {
                DSRSP4 = false;
            } else {
                DSRSP4 = true;
            }
        }
    }

    protected final void initDSRSP5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -9) {
                DSRSP5 = false;
            } else {
                DSRSP5 = true;
            }
        }
    }

    protected final void initDTLOWE1(String s) {
        if (!s.trim().isEmpty()) {
            DTLOWE1 = Integer.parseInt(s);
        } else {
            DTLOWE1 = Integer.MIN_VALUE;
        }
    }

    protected final void initDTLOWE1_I(String s) {
        if (!s.trim().isEmpty()) {
            DTLOWE1_I = Integer.parseInt(s);
        } else {
            DTLOWE1_I = Integer.MIN_VALUE;
        }
    }

    protected final void initDTLOWE1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DTLOWE1_IFLAG = false;
            } else {
                DTLOWE1_IFLAG = true;
            }
        }
    }

    protected final void initDTLOWE2(String s) {
        if (!s.trim().isEmpty()) {
            DTLOWE2 = Short.parseShort(s);
        } else {
            DTLOWE2 = Short.MIN_VALUE;
        }
    }

    protected final void initDTLOWE2_I(String s) {
        if (!s.trim().isEmpty()) {
            DTLOWE2_I = Short.parseShort(s);
        } else {
            DTLOWE2_I = Short.MIN_VALUE;
        }
    }

    protected final void initDTLOWE2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DTLOWE2_IFLAG = Byte.parseByte(s);
        } else {
            DTLOWE2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLOWE3(String s) {
        if (!s.trim().isEmpty()) {
            DTLOWE3 = Short.parseShort(s);
        } else {
            DTLOWE3 = Short.MIN_VALUE;
        }
    }

    protected final void initDTLOWE3_I(String s) {
        if (!s.trim().isEmpty()) {
            DTLOWE3_I = Short.parseShort(s);
        } else {
            DTLOWE3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDTLOWE3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DTLOWE3_IFLAG = Byte.parseByte(s);
        } else {
            DTLOWE3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLOWE4_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTLOWE4_I = false;
            } else {
                DTLOWE4_I = true;
            }
        }
    }

    protected final void initDTLOWE4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DTLOWE4_IFLAG = false;
            } else {
                DTLOWE4_IFLAG = true;
            }
        }
    }

    protected final void initDTLOWE5_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTLOWE5_I = false;
            } else {
                DTLOWE5_I = true;
            }
        }
    }

    protected final void initDTLOWE5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DTLOWE5_IFLAG = false;
            } else {
                DTLOWE5_IFLAG = true;
            }
        }
    }

    protected final void initDTLOWEB1(String s) {
        if (!s.trim().isEmpty()) {
            DTLOWEB1 = Byte.parseByte(s);
        } else {
            DTLOWEB1 = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLOWEB2(String s) {
        if (!s.trim().isEmpty()) {
            DTLOWEB2 = Byte.parseByte(s);
        } else {
            DTLOWEB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLOWEB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTLOWEB3 = false;
            } else {
                DTLOWEB3 = true;
            }
        }
    }

    protected final void initDTLTYPE1(String s) {
        if (!s.trim().isEmpty()) {
            DTLTYPE1 = Byte.parseByte(s);
        } else {
            DTLTYPE1 = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLTYPE1_I(String s) {
        if (!s.trim().isEmpty()) {
            DTLTYPE1_I = Byte.parseByte(s);
        } else {
            DTLTYPE1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLTYPE1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DTLTYPE1_IFLAG = false;
            } else {
                DTLTYPE1_IFLAG = true;
            }
        }
    }

    protected final void initDTLTYPE2(String s) {
        if (!s.trim().isEmpty()) {
            DTLTYPE2 = Byte.parseByte(s);
        } else {
            DTLTYPE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLTYPE2_I(String s) {
        if (!s.trim().isEmpty()) {
            DTLTYPE2_I = Byte.parseByte(s);
        } else {
            DTLTYPE2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLTYPE2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DTLTYPE2_IFLAG = Byte.parseByte(s);
        } else {
            DTLTYPE2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLTYPE3(String s) {
        if (!s.trim().isEmpty()) {
            DTLTYPE3 = Byte.parseByte(s);
        } else {
            DTLTYPE3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLTYPE3_I(String s) {
        if (!s.trim().isEmpty()) {
            DTLTYPE3_I = Byte.parseByte(s);
        } else {
            DTLTYPE3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLTYPE3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DTLTYPE3_IFLAG = Byte.parseByte(s);
        } else {
            DTLTYPE3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDTLTYPE4_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTLTYPE4_I = false;
            } else {
                DTLTYPE4_I = true;
            }
        }
    }

    protected final void initDTLTYPE4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DTLTYPE4_IFLAG = false;
            } else {
                DTLTYPE4_IFLAG = true;
            }
        }
    }

    protected final void initDTLTYPE5_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTLTYPE5_I = false;
            } else {
                DTLTYPE5_I = true;
            }
        }
    }

    protected final void initDTLTYPE5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DTLTYPE5_IFLAG = false;
            } else {
                DTLTYPE5_IFLAG = true;
            }
        }
    }

    protected final void initDTTOWE1(String s) {
        if (!s.trim().isEmpty()) {
            DTTOWE1 = Short.parseShort(s);
        } else {
            DTTOWE1 = Short.MIN_VALUE;
        }
    }

    protected final void initDTTOWE2(String s) {
        if (!s.trim().isEmpty()) {
            DTTOWE2 = Short.parseShort(s);
        } else {
            DTTOWE2 = Short.MIN_VALUE;
        }
    }

    protected final void initDTTOWE3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWE3 = false;
            } else {
                DTTOWE3 = true;
            }
        }
    }

    protected final void initDTTOWEB1(String s) {
        if (!s.trim().isEmpty()) {
            DTTOWEB1 = Byte.parseByte(s);
        } else {
            DTTOWEB1 = Byte.MIN_VALUE;
        }
    }

    protected final void initDTTOWEB10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB10 = false;
            } else {
                DTTOWEB10 = true;
            }
        }
    }

    protected final void initDTTOWEB11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB11 = false;
            } else {
                DTTOWEB11 = true;
            }
        }
    }

    protected final void initDTTOWEB12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB12 = false;
            } else {
                DTTOWEB12 = true;
            }
        }
    }

    protected final void initDTTOWEB13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB13 = false;
            } else {
                DTTOWEB13 = true;
            }
        }
    }

    protected final void initDTTOWEB14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB14 = false;
            } else {
                DTTOWEB14 = true;
            }
        }
    }

    protected final void initDTTOWEB15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB15 = false;
            } else {
                DTTOWEB15 = true;
            }
        }
    }

    protected final void initDTTOWEB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB2 = false;
            } else {
                DTTOWEB2 = true;
            }
        }
    }

    protected final void initDTTOWEB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB3 = false;
            } else {
                DTTOWEB3 = true;
            }
        }
    }

    protected final void initDTTOWEB4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB4 = false;
            } else {
                DTTOWEB4 = true;
            }
        }
    }

    protected final void initDTTOWEB5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB5 = false;
            } else {
                DTTOWEB5 = true;
            }
        }
    }

    protected final void initDTTOWEB6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB6 = false;
            } else {
                DTTOWEB6 = true;
            }
        }
    }

    protected final void initDTTOWEB7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB7 = false;
            } else {
                DTTOWEB7 = true;
            }
        }
    }

    protected final void initDTTOWEB8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB8 = false;
            } else {
                DTTOWEB8 = true;
            }
        }
    }

    protected final void initDTTOWEB9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DTTOWEB9 = false;
            } else {
                DTTOWEB9 = true;
            }
        }
    }

    protected final void initDVAGE18(String s) {
        if (!s.trim().isEmpty()) {
            DVAGE18 = Byte.parseByte(s);
        } else {
            DVAGE18 = Byte.MIN_VALUE;
        }
    }

    protected final void initDVAGEW3BAND(String s) {
        if (!s.trim().isEmpty()) {
            DVAGEW3BAND = Byte.parseByte(s);
        } else {
            DVAGEW3BAND = Byte.MIN_VALUE;
        }
    }

    protected final void initDVBENU1(String s) {
        if (!s.trim().isEmpty()) {
            DVBENU1 = Byte.parseByte(s);
        } else {
            DVBENU1 = Byte.MIN_VALUE;
        }
    }

    protected final void initDVCOINV(String s) {
        if (!s.trim().isEmpty()) {
            DVCOINV = Integer.parseInt(s);
        } else {
            DVCOINV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVCTCANNUAL(String s) {
        if (!s.trim().isEmpty()) {
            DVCTCANNUAL = Short.parseShort(s);
        } else {
            DVCTCANNUAL = Short.MIN_VALUE;
        }
    }

    protected final void initDVDHPOWE3(String s) {
        if (!s.trim().isEmpty()) {
            DVDHPOWE3 = Short.parseShort(s);
        } else {
            DVDHPOWE3 = Short.MIN_VALUE;
        }
    }

    protected final void initDVDHPOWE4(String s) {
        if (!s.trim().isEmpty()) {
            DVDHPOWE4 = Short.parseShort(s);
        } else {
            DVDHPOWE4 = Short.MIN_VALUE;
        }
    }

    protected final void initDVDHPOWE5(String s) {
        if (!s.trim().isEmpty()) {
            DVDHPOWE5 = Short.parseShort(s);
        } else {
            DVDHPOWE5 = Short.MIN_VALUE;
        }
    }

    protected final void initDVDLOWE5(String s) {
        if (!s.trim().isEmpty()) {
            DVDLOWE5 = Short.parseShort(s);
        } else {
            DVDLOWE5 = Short.MIN_VALUE;
        }
    }

    protected final void initDVDMOOWE3(String s) {
        if (!s.trim().isEmpty()) {
            DVDMOOWE3 = Short.parseShort(s);
        } else {
            DVDMOOWE3 = Short.MIN_VALUE;
        }
    }

    protected final void initDVDMOOWE4(String s) {
        if (!s.trim().isEmpty()) {
            DVDMOOWE4 = Short.parseShort(s);
        } else {
            DVDMOOWE4 = Short.MIN_VALUE;
        }
    }

    protected final void initDVDMOOWE5(String s) {
        if (!s.trim().isEmpty()) {
            DVDMOOWE5 = Short.parseShort(s);
        } else {
            DVDMOOWE5 = Short.MIN_VALUE;
        }
    }

    protected final void initDVGRSPAY_I(String s) {
        if (!s.trim().isEmpty()) {
            DVGRSPAY_I = Integer.parseInt(s);
        } else {
            DVGRSPAY_I = Integer.MIN_VALUE;
        }
    }

    protected final void initDVGRSPAY_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVGRSPAY_IFLAG = false;
            } else {
                DVGRSPAY_IFLAG = true;
            }
        }
    }

    protected final void initDVHASBOND(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVHASBOND = false;
            } else {
                DVHASBOND = true;
            }
        }
    }

    protected final void initDVHASCC(String s) {
        if (!s.trim().isEmpty()) {
            DVHASCC = Byte.parseByte(s);
        } else {
            DVHASCC = Byte.MIN_VALUE;
        }
    }

    protected final void initDVHASDBR_ORIG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                DVHASDBR_ORIG = false;
            } else {
                DVHASDBR_ORIG = true;
            }
        }
    }

    protected final void initDVHASEMPSH(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVHASEMPSH = false;
            } else {
                DVHASEMPSH = true;
            }
        }
    }

    protected final void initDVHASGILT(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVHASGILT = false;
            } else {
                DVHASGILT = true;
            }
        }
    }

    protected final void initDVHASISA(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVHASISA = false;
            } else {
                DVHASISA = true;
            }
        }
    }

    protected final void initDVHASLINS(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVHASLINS = false;
            } else {
                DVHASLINS = true;
            }
        }
    }

    protected final void initDVHASNHP(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVHASNHP = false;
            } else {
                DVHASNHP = true;
            }
        }
    }

    protected final void initDVHASNOFA(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVHASNOFA = false;
            } else {
                DVHASNOFA = true;
            }
        }
    }

    protected final void initDVHASNSP(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVHASNSP = false;
            } else {
                DVHASNSP = true;
            }
        }
    }

    protected final void initDVHASOINV(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVHASOINV = false;
            } else {
                DVHASOINV = true;
            }
        }
    }

    protected final void initDVHASOTHSH(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVHASOTHSH = false;
            } else {
                DVHASOTHSH = true;
            }
        }
    }

    protected final void initDVHASSAVDEP(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVHASSAVDEP = false;
            } else {
                DVHASSAVDEP = true;
            }
        }
    }

    protected final void initDVHASSC(String s) {
        if (!s.trim().isEmpty()) {
            DVHASSC = Byte.parseByte(s);
        } else {
            DVHASSC = Byte.MIN_VALUE;
        }
    }

    protected final void initDVHASSHSAC(String s) {
        if (!s.trim().isEmpty()) {
            DVHASSHSAC = Byte.parseByte(s);
        } else {
            DVHASSHSAC = Byte.MIN_VALUE;
        }
    }

    protected final void initDVHASSL(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVHASSL = false;
            } else {
                DVHASSL = true;
            }
        }
    }

    protected final void initDVHASUTRUST(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVHASUTRUST = false;
            } else {
                DVHASUTRUST = true;
            }
        }
    }

    protected final void initDVNETPAY_I(String s) {
        if (!s.trim().isEmpty()) {
            DVNETPAY_I = Integer.parseInt(s);
        } else {
            DVNETPAY_I = Integer.MIN_VALUE;
        }
    }

    protected final void initDVNETPAY_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVNETPAY_IFLAG = false;
            } else {
                DVNETPAY_IFLAG = true;
            }
        }
    }

    protected final void initDVNWHP_SUM(String s) {
        if (!s.trim().isEmpty()) {
            DVNWHP_SUM = Short.parseShort(s);
        } else {
            DVNWHP_SUM = Short.MIN_VALUE;
        }
    }

    protected final void initDVOIGGTANNUAL(String s) {
        if (!s.trim().isEmpty()) {
            DVOIGGTANNUAL = Short.parseShort(s);
        } else {
            DVOIGGTANNUAL = Short.MIN_VALUE;
        }
    }

    protected final void initDVOIGOEANNUAL_I(String s) {
        if (!s.trim().isEmpty()) {
            DVOIGOEANNUAL_I = Integer.parseInt(s);
        } else {
            DVOIGOEANNUAL_I = Integer.MIN_VALUE;
        }
    }

    protected final void initDVOIGOSANNUAL_I(String s) {
        if (!s.trim().isEmpty()) {
            DVOIGOSANNUAL_I = Integer.parseInt(s);
        } else {
            DVOIGOSANNUAL_I = Integer.MIN_VALUE;
        }
    }

    protected final void initDVOIGPPANNUAL_I(String s) {
        if (!s.trim().isEmpty()) {
            DVOIGPPANNUAL_I = Integer.parseInt(s);
        } else {
            DVOIGPPANNUAL_I = Integer.MIN_VALUE;
        }
    }

    protected final void initDVOIGRRANNUAL(String s) {
        if (!s.trim().isEmpty()) {
            DVOIGRRANNUAL = Short.parseShort(s);
        } else {
            DVOIGRRANNUAL = Short.MIN_VALUE;
        }
    }

    protected final void initDVPUBLPRIV(String s) {
        if (!s.trim().isEmpty()) {
            DVPUBLPRIV = Byte.parseByte(s);
        } else {
            DVPUBLPRIV = Byte.MIN_VALUE;
        }
    }

    protected final void initDVRENTAMTANNUAL(String s) {
        if (!s.trim().isEmpty()) {
            DVRENTAMTANNUAL = Integer.parseInt(s);
        } else {
            DVRENTAMTANNUAL = Integer.MIN_VALUE;
        }
    }

    protected final void initDVSAME_I(String s) {
        if (!s.trim().isEmpty()) {
            DVSAME_I = Byte.parseByte(s);
        } else {
            DVSAME_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDVSAME_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVSAME_IFLAG = false;
            } else {
                DVSAME_IFLAG = true;
            }
        }
    }

    protected final void initDVSEPANNUAL09(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVSEPANNUAL09 = false;
            } else {
                DVSEPANNUAL09 = true;
            }
        }
    }

    protected final void initDVSEPANNUAL10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVSEPANNUAL10 = false;
            } else {
                DVSEPANNUAL10 = true;
            }
        }
    }

    protected final void initDVSEPANNUAL11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVSEPANNUAL11 = false;
            } else {
                DVSEPANNUAL11 = true;
            }
        }
    }

    protected final void initDVSEPANNUAL12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVSEPANNUAL12 = false;
            } else {
                DVSEPANNUAL12 = true;
            }
        }
    }

    protected final void initDVSEPANNUAL13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVSEPANNUAL13 = false;
            } else {
                DVSEPANNUAL13 = true;
            }
        }
    }

    protected final void initDVSEPANNUAL14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVSEPANNUAL14 = false;
            } else {
                DVSEPANNUAL14 = true;
            }
        }
    }

    protected final void initDVSEPANNUAL15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVSEPANNUAL15 = false;
            } else {
                DVSEPANNUAL15 = true;
            }
        }
    }

    protected final void initDVSEPANNUAL16(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVSEPANNUAL16 = false;
            } else {
                DVSEPANNUAL16 = true;
            }
        }
    }

    protected final void initDVSEPANNUAL17(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVSEPANNUAL17 = false;
            } else {
                DVSEPANNUAL17 = true;
            }
        }
    }

    protected final void initDVSEPANNUAL18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVSEPANNUAL18 = false;
            } else {
                DVSEPANNUAL18 = true;
            }
        }
    }

    protected final void initDVSEPANNUAL19(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVSEPANNUAL19 = false;
            } else {
                DVSEPANNUAL19 = true;
            }
        }
    }

    protected final void initDVSEPANNUAL20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVSEPANNUAL20 = false;
            } else {
                DVSEPANNUAL20 = true;
            }
        }
    }

    protected final void initDVSHODVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVSHODVAL = Double.parseDouble(s);
        } else {
            DVSHODVAL = Double.NaN;
        }
    }

    protected final void initDVSPECANNUAL01(String s) {
        if (!s.trim().isEmpty()) {
            DVSPECANNUAL01 = Double.parseDouble(s);
        } else {
            DVSPECANNUAL01 = Double.NaN;
        }
    }

    protected final void initDVSPECANNUAL02(String s) {
        if (!s.trim().isEmpty()) {
            DVSPECANNUAL02 = Double.parseDouble(s);
        } else {
            DVSPECANNUAL02 = Double.NaN;
        }
    }

    protected final void initDVSPECANNUAL03(String s) {
        if (!s.trim().isEmpty()) {
            DVSPECANNUAL03 = Double.parseDouble(s);
        } else {
            DVSPECANNUAL03 = Double.NaN;
        }
    }

    protected final void initDVSPECANNUAL04(String s) {
        if (!s.trim().isEmpty()) {
            DVSPECANNUAL04 = Double.parseDouble(s);
        } else {
            DVSPECANNUAL04 = Double.NaN;
        }
    }

    protected final void initDVSPECANNUAL05(String s) {
        if (!s.trim().isEmpty()) {
            DVSPECANNUAL05 = Short.parseShort(s);
        } else {
            DVSPECANNUAL05 = Short.MIN_VALUE;
        }
    }

    protected final void initDVSPECANNUAL06(String s) {
        if (!s.trim().isEmpty()) {
            DVSPECANNUAL06 = Short.parseShort(s);
        } else {
            DVSPECANNUAL06 = Short.MIN_VALUE;
        }
    }

    protected final void initDVSPECANNUAL07(String s) {
        if (!s.trim().isEmpty()) {
            DVSPECANNUAL07 = Short.parseShort(s);
        } else {
            DVSPECANNUAL07 = Short.MIN_VALUE;
        }
    }

    protected final void initDVSPECANNUAL08(String s) {
        if (!s.trim().isEmpty()) {
            DVSPECANNUAL08 = Short.parseShort(s);
        } else {
            DVSPECANNUAL08 = Short.MIN_VALUE;
        }
    }

    protected final void initDVSPECANNUAL09(String s) {
        if (!s.trim().isEmpty()) {
            DVSPECANNUAL09 = Short.parseShort(s);
        } else {
            DVSPECANNUAL09 = Short.MIN_VALUE;
        }
    }

    protected final void initDVSPECANNUAL10(String s) {
        if (!s.trim().isEmpty()) {
            DVSPECANNUAL10 = Short.parseShort(s);
        } else {
            DVSPECANNUAL10 = Short.MIN_VALUE;
        }
    }

    protected final void initDVSTAT(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DVSTAT = false;
            } else {
                DVSTAT = true;
            }
        }
    }

    protected final void initDVTOGTCANNUAL(String s) {
        if (!s.trim().isEmpty()) {
            DVTOGTCANNUAL = Short.parseShort(s);
        } else {
            DVTOGTCANNUAL = Short.MIN_VALUE;
        }
    }

    protected final void initDVTOTALLBENANNUAL(String s) {
        if (!s.trim().isEmpty()) {
            DVTOTALLBENANNUAL = Double.parseDouble(s);
        } else {
            DVTOTALLBENANNUAL = Double.NaN;
        }
    }

    protected final void initDVTOTBENANNUAL(String s) {
        if (!s.trim().isEmpty()) {
            DVTOTBENANNUAL = Double.parseDouble(s);
        } else {
            DVTOTBENANNUAL = Double.NaN;
        }
    }

    protected final void initDVTOTTAXANNUAL(String s) {
        if (!s.trim().isEmpty()) {
            DVTOTTAXANNUAL = Double.parseDouble(s);
        } else {
            DVTOTTAXANNUAL = Double.NaN;
        }
    }

    protected final void initDVWAVE(String s) {
        if (!s.trim().isEmpty()) {
            DVWAVE = Byte.parseByte(s);
        } else {
            DVWAVE = Byte.MIN_VALUE;
        }
    }

    protected final void initDVWTCANNUAL(String s) {
        if (!s.trim().isEmpty()) {
            DVWTCANNUAL = Double.parseDouble(s);
        } else {
            DVWTCANNUAL = Double.NaN;
        }
    }

    protected final void initECACT(String s) {
        if (!s.trim().isEmpty()) {
            ECACT = Byte.parseByte(s);
        } else {
            ECACT = Byte.MIN_VALUE;
        }
    }

    protected final void initEDAGE(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                EDAGE = false;
            } else {
                EDAGE = true;
            }
        }
    }

    protected final void initEMPSTAT1(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                EMPSTAT1 = false;
            } else {
                EMPSTAT1 = true;
            }
        }
    }

    protected final void initEMPSTAT2(String s) {
        if (!s.trim().isEmpty()) {
            EMPSTAT2 = Byte.parseByte(s);
        } else {
            EMPSTAT2 = Byte.MIN_VALUE;
        }
    }

    protected final void initETYPE(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ETYPE = false;
            } else {
                ETYPE = true;
            }
        }
    }

    protected final void initFINVTY01_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY01_IFLAG = Byte.parseByte(s);
        } else {
            FINVTY01_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY02_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY02_IFLAG = Byte.parseByte(s);
        } else {
            FINVTY02_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY03_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY03_IFLAG = Byte.parseByte(s);
        } else {
            FINVTY03_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY04_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY04_IFLAG = Byte.parseByte(s);
        } else {
            FINVTY04_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY05_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY05_IFLAG = Byte.parseByte(s);
        } else {
            FINVTY05_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY06_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY06_IFLAG = Byte.parseByte(s);
        } else {
            FINVTY06_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY07_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY07_IFLAG = Byte.parseByte(s);
        } else {
            FINVTY07_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY08_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY08_IFLAG = Byte.parseByte(s);
        } else {
            FINVTY08_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY09_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY09_IFLAG = Byte.parseByte(s);
        } else {
            FINVTY09_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY10_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY10_IFLAG = Byte.parseByte(s);
        } else {
            FINVTY10_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY11_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                FINVTY11_IFLAG = false;
            } else {
                FINVTY11_IFLAG = true;
            }
        }
    }

    protected final void initFLNOS5(String s) {
        if (!s.trim().isEmpty()) {
            FLNOS5 = Short.parseShort(s);
        } else {
            FLNOS5 = Short.MIN_VALUE;
        }
    }

    protected final void initFLOORN(String s) {
        if (!s.trim().isEmpty()) {
            FLOORN = Byte.parseByte(s);
        } else {
            FLOORN = Byte.MIN_VALUE;
        }
    }

    protected final void initFNSVAL1(String s) {
        if (!s.trim().isEmpty()) {
            FNSVAL1 = Integer.parseInt(s);
        } else {
            FNSVAL1 = Integer.MIN_VALUE;
        }
    }

    protected final void initFNSVAL1_I(String s) {
        if (!s.trim().isEmpty()) {
            FNSVAL1_I = Integer.parseInt(s);
        } else {
            FNSVAL1_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFSHADA(String s) {
        if (!s.trim().isEmpty()) {
            FSHADA = Integer.parseInt(s);
        } else {
            FSHADA = Integer.MIN_VALUE;
        }
    }

    protected final void initFSHADAB(String s) {
        if (!s.trim().isEmpty()) {
            FSHADAB = Byte.parseByte(s);
        } else {
            FSHADAB = Byte.MIN_VALUE;
        }
    }

    protected final void initFSHADD(String s) {
        if (!s.trim().isEmpty()) {
            FSHADD = Byte.parseByte(s);
        } else {
            FSHADD = Byte.MIN_VALUE;
        }
    }

    protected final void initFSTYPIN5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                FSTYPIN5 = false;
            } else {
                FSTYPIN5 = true;
            }
        }
    }

    protected final void initFSTYPSH5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                FSTYPSH5 = false;
            } else {
                FSTYPSH5 = true;
            }
        }
    }

    protected final void initHPLFT3(String s) {
        if (!s.trim().isEmpty()) {
            HPLFT3 = Double.parseDouble(s);
        } else {
            HPLFT3 = Double.NaN;
        }
    }

    protected final void initHPLFT4(String s) {
        if (!s.trim().isEmpty()) {
            HPLFT4 = Double.parseDouble(s);
        } else {
            HPLFT4 = Double.NaN;
        }
    }

    protected final void initHPLFT5(String s) {
        if (!s.trim().isEmpty()) {
            HPLFT5 = Double.parseDouble(s);
        } else {
            HPLFT5 = Double.NaN;
        }
    }

    protected final void initHPNMN3(String s) {
        if (!s.trim().isEmpty()) {
            HPNMN3 = Byte.parseByte(s);
        } else {
            HPNMN3 = Byte.MIN_VALUE;
        }
    }

    protected final void initHPNMN4(String s) {
        if (!s.trim().isEmpty()) {
            HPNMN4 = Byte.parseByte(s);
        } else {
            HPNMN4 = Byte.MIN_VALUE;
        }
    }

    protected final void initHPNMN5(String s) {
        if (!s.trim().isEmpty()) {
            HPNMN5 = Byte.parseByte(s);
        } else {
            HPNMN5 = Byte.MIN_VALUE;
        }
    }

    protected final void initHPNYR3(String s) {
        if (!s.trim().isEmpty()) {
            HPNYR3 = Byte.parseByte(s);
        } else {
            HPNYR3 = Byte.MIN_VALUE;
        }
    }

    protected final void initHPNYR4(String s) {
        if (!s.trim().isEmpty()) {
            HPNYR4 = Byte.parseByte(s);
        } else {
            HPNYR4 = Byte.MIN_VALUE;
        }
    }

    protected final void initHPNYR5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                HPNYR5 = false;
            } else {
                HPNYR5 = true;
            }
        }
    }

    protected final void initHPOS3(String s) {
        if (!s.trim().isEmpty()) {
            HPOS3 = Double.parseDouble(s);
        } else {
            HPOS3 = Double.NaN;
        }
    }

    protected final void initHPOS4(String s) {
        if (!s.trim().isEmpty()) {
            HPOS4 = Double.parseDouble(s);
        } else {
            HPOS4 = Double.NaN;
        }
    }

    protected final void initHPOS5(String s) {
        if (!s.trim().isEmpty()) {
            HPOS5 = Double.parseDouble(s);
        } else {
            HPOS5 = Double.NaN;
        }
    }

    protected final void initHRPDVAGE(String s) {
        if (!s.trim().isEmpty()) {
            HRPDVAGE = Byte.parseByte(s);
        } else {
            HRPDVAGE = Byte.MIN_VALUE;
        }
    }

    protected final void initHRPDVAGE9(String s) {
        if (!s.trim().isEmpty()) {
            HRPDVAGE9 = Byte.parseByte(s);
        } else {
            HRPDVAGE9 = Byte.MIN_VALUE;
        }
    }

    protected final void initHRPDVILO3A(String s) {
        if (!s.trim().isEmpty()) {
            HRPDVILO3A = Byte.parseByte(s);
        } else {
            HRPDVILO3A = Byte.MIN_VALUE;
        }
    }

    protected final void initHRPDVMRDF(String s) {
        if (!s.trim().isEmpty()) {
            HRPDVMRDF = Byte.parseByte(s);
        } else {
            HRPDVMRDF = Byte.MIN_VALUE;
        }
    }

    protected final void initHRPEDATTN1(String s) {
        if (!s.trim().isEmpty()) {
            HRPEDATTN1 = Byte.parseByte(s);
        } else {
            HRPEDATTN1 = Byte.MIN_VALUE;
        }
    }

    protected final void initHRPEDATTN2(String s) {
        if (!s.trim().isEmpty()) {
            HRPEDATTN2 = Byte.parseByte(s);
        } else {
            HRPEDATTN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initHRPEDATTN3(String s) {
        if (!s.trim().isEmpty()) {
            HRPEDATTN3 = Byte.parseByte(s);
        } else {
            HRPEDATTN3 = Byte.MIN_VALUE;
        }
    }

    protected final void initHRPEDLEVEL(String s) {
        if (!s.trim().isEmpty()) {
            HRPEDLEVEL = Byte.parseByte(s);
        } else {
            HRPEDLEVEL = Byte.MIN_VALUE;
        }
    }

    protected final void initHRPEMPSTAT2(String s) {
        if (!s.trim().isEmpty()) {
            HRPEMPSTAT2 = Byte.parseByte(s);
        } else {
            HRPEMPSTAT2 = Byte.MIN_VALUE;
        }
    }

    protected final void initHRPETHNIC(String s) {
        if (!s.trim().isEmpty()) {
            HRPETHNIC = Byte.parseByte(s);
        } else {
            HRPETHNIC = Byte.MIN_VALUE;
        }
    }

    protected final void initHRPIOUT1(String s) {
        if (!s.trim().isEmpty()) {
            HRPIOUT1 = Byte.parseByte(s);
        } else {
            HRPIOUT1 = Byte.MIN_VALUE;
        }
    }

    protected final void initHRPNSSEC3(String s) {
        if (!s.trim().isEmpty()) {
            HRPNSSEC3 = Byte.parseByte(s);
        } else {
            HRPNSSEC3 = Byte.MIN_VALUE;
        }
    }

    protected final void initHRPPARTIOUT1(String s) {
        if (!s.trim().isEmpty()) {
            HRPPARTIOUT1 = Byte.parseByte(s);
        } else {
            HRPPARTIOUT1 = Byte.MIN_VALUE;
        }
    }

    protected final void initHRPSEX(String s) {
        if (!s.trim().isEmpty()) {
            HRPSEX = Byte.parseByte(s);
        } else {
            HRPSEX = Byte.MIN_VALUE;
        }
    }

    protected final void initHRP_RESP(String s) {
        if (!s.trim().isEmpty()) {
            HRP_RESP = Byte.parseByte(s);
        } else {
            HRP_RESP = Byte.MIN_VALUE;
        }
    }

    protected final void initH_FLAG1(String s) {
        if (!s.trim().isEmpty()) {
            H_FLAG1 = Byte.parseByte(s);
        } else {
            H_FLAG1 = Byte.MIN_VALUE;
        }
    }

    protected final void initIGDS12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IGDS12 = false;
            } else {
                IGDS12 = true;
            }
        }
    }

    protected final void initIGDS13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IGDS13 = false;
            } else {
                IGDS13 = true;
            }
        }
    }

    protected final void initIGDS14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IGDS14 = false;
            } else {
                IGDS14 = true;
            }
        }
    }

    protected final void initIGDS16(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IGDS16 = false;
            } else {
                IGDS16 = true;
            }
        }
    }

    protected final void initIGDS17(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IGDS17 = false;
            } else {
                IGDS17 = true;
            }
        }
    }

    protected final void initIGDS18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IGDS18 = false;
            } else {
                IGDS18 = true;
            }
        }
    }

    protected final void initIGDS19(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IGDS19 = false;
            } else {
                IGDS19 = true;
            }
        }
    }

    protected final void initIGDS20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IGDS20 = false;
            } else {
                IGDS20 = true;
            }
        }
    }

    protected final void initIGDS21(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IGDS21 = false;
            } else {
                IGDS21 = true;
            }
        }
    }

    protected final void initIGDS6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IGDS6 = false;
            } else {
                IGDS6 = true;
            }
        }
    }

    protected final void initIGDS7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IGDS7 = false;
            } else {
                IGDS7 = true;
            }
        }
    }

    protected final void initIHSE13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IHSE13 = false;
            } else {
                IHSE13 = true;
            }
        }
    }

    protected final void initIHSE14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IHSE14 = false;
            } else {
                IHSE14 = true;
            }
        }
    }

    protected final void initIHSE15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IHSE15 = false;
            } else {
                IHSE15 = true;
            }
        }
    }

    protected final void initIHSE16(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IHSE16 = false;
            } else {
                IHSE16 = true;
            }
        }
    }

    protected final void initIHSE17(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IHSE17 = false;
            } else {
                IHSE17 = true;
            }
        }
    }

    protected final void initIHSE18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IHSE18 = false;
            } else {
                IHSE18 = true;
            }
        }
    }

    protected final void initIHSE4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IHSE4 = false;
            } else {
                IHSE4 = true;
            }
        }
    }

    protected final void initIHSE5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IHSE5 = false;
            } else {
                IHSE5 = true;
            }
        }
    }

    protected final void initIHSE6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IHSE6 = false;
            } else {
                IHSE6 = true;
            }
        }
    }

    protected final void initILNUSE06(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ILNUSE06 = false;
            } else {
                ILNUSE06 = true;
            }
        }
    }

    protected final void initILNUSE07(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ILNUSE07 = false;
            } else {
                ILNUSE07 = true;
            }
        }
    }

    protected final void initILNUSE08(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ILNUSE08 = false;
            } else {
                ILNUSE08 = true;
            }
        }
    }

    protected final void initILNUSE09(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ILNUSE09 = false;
            } else {
                ILNUSE09 = true;
            }
        }
    }

    protected final void initILNUSE10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ILNUSE10 = false;
            } else {
                ILNUSE10 = true;
            }
        }
    }

    protected final void initILUMTY2_I(String s) {
        if (!s.trim().isEmpty()) {
            ILUMTY2_I = Byte.parseByte(s);
        } else {
            ILUMTY2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initILUMTY2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                ILUMTY2_IFLAG = false;
            } else {
                ILUMTY2_IFLAG = true;
            }
        }
    }

    protected final void initILUMTY3_I(String s) {
        if (!s.trim().isEmpty()) {
            ILUMTY3_I = Byte.parseByte(s);
        } else {
            ILUMTY3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initILUMTY3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                ILUMTY3_IFLAG = false;
            } else {
                ILUMTY3_IFLAG = true;
            }
        }
    }

    protected final void initILUMTY4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ILUMTY4 = false;
            } else {
                ILUMTY4 = true;
            }
        }
    }

    protected final void initILUMTY4_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ILUMTY4_I = false;
            } else {
                ILUMTY4_I = true;
            }
        }
    }

    protected final void initILUMTY4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                ILUMTY4_IFLAG = false;
            } else {
                ILUMTY4_IFLAG = true;
            }
        }
    }

    protected final void initILUMTY5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ILUMTY5 = false;
            } else {
                ILUMTY5 = true;
            }
        }
    }

    protected final void initILUMTY5_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ILUMTY5_I = false;
            } else {
                ILUMTY5_I = true;
            }
        }
    }

    protected final void initILUMTY5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                ILUMTY5_IFLAG = false;
            } else {
                ILUMTY5_IFLAG = true;
            }
        }
    }

    protected final void initILUMTY6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ILUMTY6 = false;
            } else {
                ILUMTY6 = true;
            }
        }
    }

    protected final void initILUMTY6_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ILUMTY6_I = false;
            } else {
                ILUMTY6_I = true;
            }
        }
    }

    protected final void initILUMTY6_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                ILUMTY6_IFLAG = false;
            } else {
                ILUMTY6_IFLAG = true;
            }
        }
    }

    protected final void initILUMTY7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ILUMTY7 = false;
            } else {
                ILUMTY7 = true;
            }
        }
    }

    protected final void initILUMTY7_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ILUMTY7_I = false;
            } else {
                ILUMTY7_I = true;
            }
        }
    }

    protected final void initILUMTY7_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                ILUMTY7_IFLAG = false;
            } else {
                ILUMTY7_IFLAG = true;
            }
        }
    }

    protected final void initINSPOL(String s) {
        if (!s.trim().isEmpty()) {
            INSPOL = Byte.parseByte(s);
        } else {
            INSPOL = Byte.MIN_VALUE;
        }
    }

    protected final void initINTRO(String s) {
        if (!s.trim().isEmpty()) {
            INTRO = Byte.parseByte(s);
        } else {
            INTRO = Byte.MIN_VALUE;
        }
    }

    protected final void initISHRP(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                ISHRP = false;
            } else {
                ISHRP = true;
            }
        }
    }

    protected final void initISHRPPART(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                ISHRPPART = false;
            } else {
                ISHRPPART = true;
            }
        }
    }

    protected final void initIVAL1(String s) {
        if (!s.trim().isEmpty()) {
            IVAL1 = Integer.parseInt(s);
        } else {
            IVAL1 = Integer.MIN_VALUE;
        }
    }

    protected final void initIVAL2_I(String s) {
        if (!s.trim().isEmpty()) {
            IVAL2_I = Integer.parseInt(s);
        } else {
            IVAL2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initIVAL3_I(String s) {
        if (!s.trim().isEmpty()) {
            IVAL3_I = Integer.parseInt(s);
        } else {
            IVAL3_I = Integer.MIN_VALUE;
        }
    }

    protected final void initIWAT10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IWAT10 = false;
            } else {
                IWAT10 = true;
            }
        }
    }

    protected final void initIWAT11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IWAT11 = false;
            } else {
                IWAT11 = true;
            }
        }
    }

    protected final void initIWAT12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IWAT12 = false;
            } else {
                IWAT12 = true;
            }
        }
    }

    protected final void initIWAT14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IWAT14 = false;
            } else {
                IWAT14 = true;
            }
        }
    }

    protected final void initIWAT15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IWAT15 = false;
            } else {
                IWAT15 = true;
            }
        }
    }

    protected final void initIWAT16(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IWAT16 = false;
            } else {
                IWAT16 = true;
            }
        }
    }

    protected final void initIWAT17(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IWAT17 = false;
            } else {
                IWAT17 = true;
            }
        }
    }

    protected final void initIWAT18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                IWAT18 = false;
            } else {
                IWAT18 = true;
            }
        }
    }

    protected final void initIWAT8(String s) {
        if (!s.trim().isEmpty()) {
            IWAT8 = Byte.parseByte(s);
        } else {
            IWAT8 = Byte.MIN_VALUE;
        }
    }

    protected final void initIWAT9(String s) {
        if (!s.trim().isEmpty()) {
            IWAT9 = Byte.parseByte(s);
        } else {
            IWAT9 = Byte.MIN_VALUE;
        }
    }

    protected final void initIWHO(String s) {
        if (!s.trim().isEmpty()) {
            IWHO = Byte.parseByte(s);
        } else {
            IWHO = Byte.MIN_VALUE;
        }
    }

    protected final void initLIVWTH(String s) {
        if (!s.trim().isEmpty()) {
            LIVWTH = Byte.parseByte(s);
        } else {
            LIVWTH = Byte.MIN_VALUE;
        }
    }

    protected final void initLNMN1(String s) {
        if (!s.trim().isEmpty()) {
            LNMN1 = Byte.parseByte(s);
        } else {
            LNMN1 = Byte.MIN_VALUE;
        }
    }

    protected final void initLNMN2(String s) {
        if (!s.trim().isEmpty()) {
            LNMN2 = Byte.parseByte(s);
        } else {
            LNMN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initLNMN3(String s) {
        if (!s.trim().isEmpty()) {
            LNMN3 = Byte.parseByte(s);
        } else {
            LNMN3 = Byte.MIN_VALUE;
        }
    }

    protected final void initLNMN4(String s) {
        if (!s.trim().isEmpty()) {
            LNMN4 = Byte.parseByte(s);
        } else {
            LNMN4 = Byte.MIN_VALUE;
        }
    }

    protected final void initLNMN5(String s) {
        if (!s.trim().isEmpty()) {
            LNMN5 = Byte.parseByte(s);
        } else {
            LNMN5 = Byte.MIN_VALUE;
        }
    }

    protected final void initLNYR1(String s) {
        if (!s.trim().isEmpty()) {
            LNYR1 = Byte.parseByte(s);
        } else {
            LNYR1 = Byte.MIN_VALUE;
        }
    }

    protected final void initLNYR2(String s) {
        if (!s.trim().isEmpty()) {
            LNYR2 = Byte.parseByte(s);
        } else {
            LNYR2 = Byte.MIN_VALUE;
        }
    }

    protected final void initLNYR3(String s) {
        if (!s.trim().isEmpty()) {
            LNYR3 = Byte.parseByte(s);
        } else {
            LNYR3 = Byte.MIN_VALUE;
        }
    }

    protected final void initLNYR4(String s) {
        if (!s.trim().isEmpty()) {
            LNYR4 = Byte.parseByte(s);
        } else {
            LNYR4 = Byte.MIN_VALUE;
        }
    }

    protected final void initLNYR5(String s) {
        if (!s.trim().isEmpty()) {
            LNYR5 = Byte.parseByte(s);
        } else {
            LNYR5 = Byte.MIN_VALUE;
        }
    }

    protected final void initLVTDAY(String s) {
        if (!s.trim().isEmpty()) {
            LVTDAY = Byte.parseByte(s);
        } else {
            LVTDAY = Byte.MIN_VALUE;
        }
    }

    protected final void initMOLFT3(String s) {
        if (!s.trim().isEmpty()) {
            MOLFT3 = Double.parseDouble(s);
        } else {
            MOLFT3 = Double.NaN;
        }
    }

    protected final void initMOLFT4(String s) {
        if (!s.trim().isEmpty()) {
            MOLFT4 = Double.parseDouble(s);
        } else {
            MOLFT4 = Double.NaN;
        }
    }

    protected final void initMOLFT5(String s) {
        if (!s.trim().isEmpty()) {
            MOLFT5 = Double.parseDouble(s);
        } else {
            MOLFT5 = Double.NaN;
        }
    }

    protected final void initMOOS3(String s) {
        if (!s.trim().isEmpty()) {
            MOOS3 = Double.parseDouble(s);
        } else {
            MOOS3 = Double.NaN;
        }
    }

    protected final void initMOOS4(String s) {
        if (!s.trim().isEmpty()) {
            MOOS4 = Double.parseDouble(s);
        } else {
            MOOS4 = Double.NaN;
        }
    }

    protected final void initMOOS5(String s) {
        if (!s.trim().isEmpty()) {
            MOOS5 = Double.parseDouble(s);
        } else {
            MOOS5 = Double.NaN;
        }
    }

    protected final void initNMN1(String s) {
        if (!s.trim().isEmpty()) {
            NMN1 = Byte.parseByte(s);
        } else {
            NMN1 = Byte.MIN_VALUE;
        }
    }

    protected final void initNMN2(String s) {
        if (!s.trim().isEmpty()) {
            NMN2 = Byte.parseByte(s);
        } else {
            NMN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initNMN3(String s) {
        if (!s.trim().isEmpty()) {
            NMN3 = Byte.parseByte(s);
        } else {
            NMN3 = Byte.MIN_VALUE;
        }
    }

    protected final void initNMN4(String s) {
        if (!s.trim().isEmpty()) {
            NMN4 = Byte.parseByte(s);
        } else {
            NMN4 = Byte.MIN_VALUE;
        }
    }

    protected final void initNMN5(String s) {
        if (!s.trim().isEmpty()) {
            NMN5 = Byte.parseByte(s);
        } else {
            NMN5 = Byte.MIN_VALUE;
        }
    }

    protected final void initNSSEC(String s) {
        if (!s.trim().isEmpty()) {
            NSSEC = Double.parseDouble(s);
        } else {
            NSSEC = Double.NaN;
        }
    }

    protected final void initNWHP(String s) {
        if (!s.trim().isEmpty()) {
            NWHP = Byte.parseByte(s);
        } else {
            NWHP = Byte.MIN_VALUE;
        }
    }

    protected final void initNWHPNO(String s) {
        if (!s.trim().isEmpty()) {
            NWHPNO = Byte.parseByte(s);
        } else {
            NWHPNO = Byte.MIN_VALUE;
        }
    }

    protected final void initNWHPVAL1(String s) {
        if (!s.trim().isEmpty()) {
            NWHPVAL1 = Short.parseShort(s);
        } else {
            NWHPVAL1 = Short.MIN_VALUE;
        }
    }

    protected final void initNWHPVAL2(String s) {
        if (!s.trim().isEmpty()) {
            NWHPVAL2 = Short.parseShort(s);
        } else {
            NWHPVAL2 = Short.MIN_VALUE;
        }
    }

    protected final void initNWHPVAL3(String s) {
        if (!s.trim().isEmpty()) {
            NWHPVAL3 = Short.parseShort(s);
        } else {
            NWHPVAL3 = Short.MIN_VALUE;
        }
    }

    protected final void initNYR1(String s) {
        if (!s.trim().isEmpty()) {
            NYR1 = Byte.parseByte(s);
        } else {
            NYR1 = Byte.MIN_VALUE;
        }
    }

    protected final void initNYR2(String s) {
        if (!s.trim().isEmpty()) {
            NYR2 = Byte.parseByte(s);
        } else {
            NYR2 = Byte.MIN_VALUE;
        }
    }

    protected final void initNYR3(String s) {
        if (!s.trim().isEmpty()) {
            NYR3 = Byte.parseByte(s);
        } else {
            NYR3 = Byte.MIN_VALUE;
        }
    }

    protected final void initNYR4(String s) {
        if (!s.trim().isEmpty()) {
            NYR4 = Byte.parseByte(s);
        } else {
            NYR4 = Byte.MIN_VALUE;
        }
    }

    protected final void initNYR5(String s) {
        if (!s.trim().isEmpty()) {
            NYR5 = Byte.parseByte(s);
        } else {
            NYR5 = Byte.MIN_VALUE;
        }
    }

    protected final void initOIGGT(String s) {
        if (!s.trim().isEmpty()) {
            OIGGT = Short.parseShort(s);
        } else {
            OIGGT = Short.MIN_VALUE;
        }
    }

    protected final void initOIGRR(String s) {
        if (!s.trim().isEmpty()) {
            OIGRR = Short.parseShort(s);
        } else {
            OIGRR = Short.MIN_VALUE;
        }
    }

    protected final void initOIMPRS7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OIMPRS7 = false;
            } else {
                OIMPRS7 = true;
            }
        }
    }

    protected final void initOIMPRS8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OIMPRS8 = false;
            } else {
                OIMPRS8 = true;
            }
        }
    }

    protected final void initOIMPRS9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OIMPRS9 = false;
            } else {
                OIMPRS9 = true;
            }
        }
    }

    protected final void initONOSAVE7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ONOSAVE7 = false;
            } else {
                ONOSAVE7 = true;
            }
        }
    }

    protected final void initONOSAVE8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ONOSAVE8 = false;
            } else {
                ONOSAVE8 = true;
            }
        }
    }

    protected final void initONOSAVE9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ONOSAVE9 = false;
            } else {
                ONOSAVE9 = true;
            }
        }
    }

    protected final void initOPENSAV(String s) {
        if (!s.trim().isEmpty()) {
            OPENSAV = Byte.parseByte(s);
        } else {
            OPENSAV = Byte.MIN_VALUE;
        }
    }

    protected final void initORUNDO09(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ORUNDO09 = false;
            } else {
                ORUNDO09 = true;
            }
        }
    }

    protected final void initORUNDO10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ORUNDO10 = false;
            } else {
                ORUNDO10 = true;
            }
        }
    }

    protected final void initORUNDO11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                ORUNDO11 = false;
            } else {
                ORUNDO11 = true;
            }
        }
    }

    protected final void initOSAFERE2(String s) {
        if (!s.trim().isEmpty()) {
            OSAFERE2 = Byte.parseByte(s);
        } else {
            OSAFERE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initOSAFERET(String s) {
        if (!s.trim().isEmpty()) {
            OSAFERET = Byte.parseByte(s);
        } else {
            OSAFERET = Byte.MIN_VALUE;
        }
    }

    protected final void initOSAVA(String s) {
        if (!s.trim().isEmpty()) {
            OSAVA = Byte.parseByte(s);
        } else {
            OSAVA = Byte.MIN_VALUE;
        }
    }

    protected final void initOSAVB(String s) {
        if (!s.trim().isEmpty()) {
            OSAVB = Byte.parseByte(s);
        } else {
            OSAVB = Byte.MIN_VALUE;
        }
    }

    protected final void initOSAVC(String s) {
        if (!s.trim().isEmpty()) {
            OSAVC = Byte.parseByte(s);
        } else {
            OSAVC = Byte.MIN_VALUE;
        }
    }

    protected final void initOSLC4(String s) {
        if (!s.trim().isEmpty()) {
            OSLC4 = Short.parseShort(s);
        } else {
            OSLC4 = Short.MIN_VALUE;
        }
    }

    protected final void initOTHSRC5_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OTHSRC5_I = false;
            } else {
                OTHSRC5_I = true;
            }
        }
    }

    protected final void initOTHSRC5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                OTHSRC5_IFLAG = false;
            } else {
                OTHSRC5_IFLAG = true;
            }
        }
    }

    protected final void initOWHYSAV01(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSAV01 = Byte.parseByte(s);
        } else {
            OWHYSAV01 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSAV02(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSAV02 = Byte.parseByte(s);
        } else {
            OWHYSAV02 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSAV03(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSAV03 = Byte.parseByte(s);
        } else {
            OWHYSAV03 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSAV04(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSAV04 = Byte.parseByte(s);
        } else {
            OWHYSAV04 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSAV05(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSAV05 = Byte.parseByte(s);
        } else {
            OWHYSAV05 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSAV06(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSAV06 = Byte.parseByte(s);
        } else {
            OWHYSAV06 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSAV07(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSAV07 = Byte.parseByte(s);
        } else {
            OWHYSAV07 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSAV08(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSAV08 = Byte.parseByte(s);
        } else {
            OWHYSAV08 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSAV09(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSAV09 = Byte.parseByte(s);
        } else {
            OWHYSAV09 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSAV10(String s) {
        if (!s.trim().isEmpty()) {
            OWHYSAV10 = Byte.parseByte(s);
        } else {
            OWHYSAV10 = Byte.MIN_VALUE;
        }
    }

    protected final void initOWHYSAV11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OWHYSAV11 = false;
            } else {
                OWHYSAV11 = true;
            }
        }
    }

    protected final void initOWRSRS08(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OWRSRS08 = false;
            } else {
                OWRSRS08 = true;
            }
        }
    }

    protected final void initOWRSRS09(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OWRSRS09 = false;
            } else {
                OWRSRS09 = true;
            }
        }
    }

    protected final void initOWRSRS10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                OWRSRS10 = false;
            } else {
                OWRSRS10 = true;
            }
        }
    }

    protected final void initPADDFUT(String s) {
        if (!s.trim().isEmpty()) {
            PADDFUT = Byte.parseByte(s);
        } else {
            PADDFUT = Byte.MIN_VALUE;
        }
    }

    protected final void initPADDFUT2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PADDFUT2 = false;
            } else {
                PADDFUT2 = true;
            }
        }
    }

    protected final void initPAVCAM1(String s) {
        if (!s.trim().isEmpty()) {
            PAVCAM1 = Short.parseShort(s);
        } else {
            PAVCAM1 = Short.MIN_VALUE;
        }
    }

    protected final void initPAVCAM2(String s) {
        if (!s.trim().isEmpty()) {
            PAVCAM2 = Short.parseShort(s);
        } else {
            PAVCAM2 = Short.MIN_VALUE;
        }
    }

    protected final void initPAVCFG1(String s) {
        if (!s.trim().isEmpty()) {
            PAVCFG1 = Byte.parseByte(s);
        } else {
            PAVCFG1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCFG2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PAVCFG2 = false;
            } else {
                PAVCFG2 = true;
            }
        }
    }

    protected final void initPAVCFR1(String s) {
        if (!s.trim().isEmpty()) {
            PAVCFR1 = Double.parseDouble(s);
        } else {
            PAVCFR1 = Double.NaN;
        }
    }

    protected final void initPAVCFR2(String s) {
        if (!s.trim().isEmpty()) {
            PAVCFR2 = Byte.parseByte(s);
        } else {
            PAVCFR2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCH1(String s) {
        if (!s.trim().isEmpty()) {
            PAVCH1 = Byte.parseByte(s);
        } else {
            PAVCH1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCH2(String s) {
        if (!s.trim().isEmpty()) {
            PAVCH2 = Byte.parseByte(s);
        } else {
            PAVCH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCIN1(String s) {
        if (!s.trim().isEmpty()) {
            PAVCIN1 = Byte.parseByte(s);
        } else {
            PAVCIN1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCIN2(String s) {
        if (!s.trim().isEmpty()) {
            PAVCIN2 = Byte.parseByte(s);
        } else {
            PAVCIN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCPR1(String s) {
        if (!s.trim().isEmpty()) {
            PAVCPR1 = Byte.parseByte(s);
        } else {
            PAVCPR1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPAVCPR2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PAVCPR2 = false;
            } else {
                PAVCPR2 = true;
            }
        }
    }

    protected final void initPDCVAL3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PDCVAL3 = false;
            } else {
                PDCVAL3 = true;
            }
        }
    }

    protected final void initPEMFIN(String s) {
        if (!s.trim().isEmpty()) {
            PEMFIN = Byte.parseByte(s);
        } else {
            PEMFIN = Byte.MIN_VALUE;
        }
    }

    protected final void initPESAME_I(String s) {
        if (!s.trim().isEmpty()) {
            PESAME_I = Byte.parseByte(s);
        } else {
            PESAME_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPESAME_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PESAME_IFLAG = Byte.parseByte(s);
        } else {
            PESAME_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPEWYNO01(String s) {
        if (!s.trim().isEmpty()) {
            PEWYNO01 = Byte.parseByte(s);
        } else {
            PEWYNO01 = Byte.MIN_VALUE;
        }
    }

    protected final void initPEWYNO02(String s) {
        if (!s.trim().isEmpty()) {
            PEWYNO02 = Byte.parseByte(s);
        } else {
            PEWYNO02 = Byte.MIN_VALUE;
        }
    }

    protected final void initPEWYNO03(String s) {
        if (!s.trim().isEmpty()) {
            PEWYNO03 = Byte.parseByte(s);
        } else {
            PEWYNO03 = Byte.MIN_VALUE;
        }
    }

    protected final void initPEWYNO04(String s) {
        if (!s.trim().isEmpty()) {
            PEWYNO04 = Byte.parseByte(s);
        } else {
            PEWYNO04 = Byte.MIN_VALUE;
        }
    }

    protected final void initPEWYNO05(String s) {
        if (!s.trim().isEmpty()) {
            PEWYNO05 = Byte.parseByte(s);
        } else {
            PEWYNO05 = Byte.MIN_VALUE;
        }
    }

    protected final void initPEWYNO06(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PEWYNO06 = false;
            } else {
                PEWYNO06 = true;
            }
        }
    }

    protected final void initPEWYNO07(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PEWYNO07 = false;
            } else {
                PEWYNO07 = true;
            }
        }
    }

    protected final void initPEWYNO08(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PEWYNO08 = false;
            } else {
                PEWYNO08 = true;
            }
        }
    }

    protected final void initPEWYNO09(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PEWYNO09 = false;
            } else {
                PEWYNO09 = true;
            }
        }
    }

    protected final void initPEWYNO10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PEWYNO10 = false;
            } else {
                PEWYNO10 = true;
            }
        }
    }

    protected final void initPEWYNO11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PEWYNO11 = false;
            } else {
                PEWYNO11 = true;
            }
        }
    }

    protected final void initPFANEH3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANEH3 = false;
            } else {
                PFANEH3 = true;
            }
        }
    }

    protected final void initPFANEH5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANEH5 = false;
            } else {
                PFANEH5 = true;
            }
        }
    }

    protected final void initPFANEH6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANEH6 = false;
            } else {
                PFANEH6 = true;
            }
        }
    }

    protected final void initPFANEXM1(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANEXM1 = false;
            } else {
                PFANEXM1 = true;
            }
        }
    }

    protected final void initPFANEXM2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANEXM2 = false;
            } else {
                PFANEXM2 = true;
            }
        }
    }

    protected final void initPFANEXM3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANEXM3 = false;
            } else {
                PFANEXM3 = true;
            }
        }
    }

    protected final void initPFANEXM4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANEXM4 = false;
            } else {
                PFANEXM4 = true;
            }
        }
    }

    protected final void initPFANEXM5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANEXM5 = false;
            } else {
                PFANEXM5 = true;
            }
        }
    }

    protected final void initPFANEXM6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANEXM6 = false;
            } else {
                PFANEXM6 = true;
            }
        }
    }

    protected final void initPFANEXY1(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANEXY1 = false;
            } else {
                PFANEXY1 = true;
            }
        }
    }

    protected final void initPFANEXY2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANEXY2 = false;
            } else {
                PFANEXY2 = true;
            }
        }
    }

    protected final void initPFANEXY3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANEXY3 = false;
            } else {
                PFANEXY3 = true;
            }
        }
    }

    protected final void initPFANEXY4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANEXY4 = false;
            } else {
                PFANEXY4 = true;
            }
        }
    }

    protected final void initPFANEXY5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANEXY5 = false;
            } else {
                PFANEXY5 = true;
            }
        }
    }

    protected final void initPFANEXY6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANEXY6 = false;
            } else {
                PFANEXY6 = true;
            }
        }
    }

    protected final void initPFANGA3(String s) {
        if (!s.trim().isEmpty()) {
            PFANGA3 = Byte.parseByte(s);
        } else {
            PFANGA3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFANGA5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANGA5 = false;
            } else {
                PFANGA5 = true;
            }
        }
    }

    protected final void initPFANGA6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANGA6 = false;
            } else {
                PFANGA6 = true;
            }
        }
    }

    protected final void initPFANIF3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANIF3 = false;
            } else {
                PFANIF3 = true;
            }
        }
    }

    protected final void initPFANIF5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANIF5 = false;
            } else {
                PFANIF5 = true;
            }
        }
    }

    protected final void initPFANIF6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANIF6 = false;
            } else {
                PFANIF6 = true;
            }
        }
    }

    protected final void initPFANJT3(String s) {
        if (!s.trim().isEmpty()) {
            PFANJT3 = Byte.parseByte(s);
        } else {
            PFANJT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFANJT5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANJT5 = false;
            } else {
                PFANJT5 = true;
            }
        }
    }

    protected final void initPFANJT6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANJT6 = false;
            } else {
                PFANJT6 = true;
            }
        }
    }

    protected final void initPFANLM1(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANLM1 = false;
            } else {
                PFANLM1 = true;
            }
        }
    }

    protected final void initPFANLM2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANLM2 = false;
            } else {
                PFANLM2 = true;
            }
        }
    }

    protected final void initPFANLM3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANLM3 = false;
            } else {
                PFANLM3 = true;
            }
        }
    }

    protected final void initPFANLM4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANLM4 = false;
            } else {
                PFANLM4 = true;
            }
        }
    }

    protected final void initPFANLM5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANLM5 = false;
            } else {
                PFANLM5 = true;
            }
        }
    }

    protected final void initPFANLM6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANLM6 = false;
            } else {
                PFANLM6 = true;
            }
        }
    }

    protected final void initPFANN10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN10 = false;
            } else {
                PFANN10 = true;
            }
        }
    }

    protected final void initPFANN11(String s) {
        if (!s.trim().isEmpty()) {
            PFANN11 = Byte.parseByte(s);
        } else {
            PFANN11 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFANN12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN12 = false;
            } else {
                PFANN12 = true;
            }
        }
    }

    protected final void initPFANN13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN13 = false;
            } else {
                PFANN13 = true;
            }
        }
    }

    protected final void initPFANN14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN14 = false;
            } else {
                PFANN14 = true;
            }
        }
    }

    protected final void initPFANN15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN15 = false;
            } else {
                PFANN15 = true;
            }
        }
    }

    protected final void initPFANN17(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN17 = false;
            } else {
                PFANN17 = true;
            }
        }
    }

    protected final void initPFANN18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN18 = false;
            } else {
                PFANN18 = true;
            }
        }
    }

    protected final void initPFANN19(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN19 = false;
            } else {
                PFANN19 = true;
            }
        }
    }

    protected final void initPFANN2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN2 = false;
            } else {
                PFANN2 = true;
            }
        }
    }

    protected final void initPFANN20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN20 = false;
            } else {
                PFANN20 = true;
            }
        }
    }

    protected final void initPFANN21(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN21 = false;
            } else {
                PFANN21 = true;
            }
        }
    }

    protected final void initPFANN22(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN22 = false;
            } else {
                PFANN22 = true;
            }
        }
    }

    protected final void initPFANN23(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN23 = false;
            } else {
                PFANN23 = true;
            }
        }
    }

    protected final void initPFANN24(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN24 = false;
            } else {
                PFANN24 = true;
            }
        }
    }

    protected final void initPFANN25(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN25 = false;
            } else {
                PFANN25 = true;
            }
        }
    }

    protected final void initPFANN26(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN26 = false;
            } else {
                PFANN26 = true;
            }
        }
    }

    protected final void initPFANN27(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN27 = false;
            } else {
                PFANN27 = true;
            }
        }
    }

    protected final void initPFANN28(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN28 = false;
            } else {
                PFANN28 = true;
            }
        }
    }

    protected final void initPFANN29(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN29 = false;
            } else {
                PFANN29 = true;
            }
        }
    }

    protected final void initPFANN3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN3 = false;
            } else {
                PFANN3 = true;
            }
        }
    }

    protected final void initPFANN30(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN30 = false;
            } else {
                PFANN30 = true;
            }
        }
    }

    protected final void initPFANN4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN4 = false;
            } else {
                PFANN4 = true;
            }
        }
    }

    protected final void initPFANN5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN5 = false;
            } else {
                PFANN5 = true;
            }
        }
    }

    protected final void initPFANN7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN7 = false;
            } else {
                PFANN7 = true;
            }
        }
    }

    protected final void initPFANN8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN8 = false;
            } else {
                PFANN8 = true;
            }
        }
    }

    protected final void initPFANN9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANN9 = false;
            } else {
                PFANN9 = true;
            }
        }
    }

    protected final void initPFANVB1(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANVB1 = false;
            } else {
                PFANVB1 = true;
            }
        }
    }

    protected final void initPFANVB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANVB2 = false;
            } else {
                PFANVB2 = true;
            }
        }
    }

    protected final void initPFANVB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANVB3 = false;
            } else {
                PFANVB3 = true;
            }
        }
    }

    protected final void initPFANVB4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANVB4 = false;
            } else {
                PFANVB4 = true;
            }
        }
    }

    protected final void initPFANVB5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANVB5 = false;
            } else {
                PFANVB5 = true;
            }
        }
    }

    protected final void initPFANVB6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANVB6 = false;
            } else {
                PFANVB6 = true;
            }
        }
    }

    protected final void initPFANVI1(String s) {
        if (!s.trim().isEmpty()) {
            PFANVI1 = Short.parseShort(s);
        } else {
            PFANVI1 = Short.MIN_VALUE;
        }
    }

    protected final void initPFANVI2(String s) {
        if (!s.trim().isEmpty()) {
            PFANVI2 = Short.parseShort(s);
        } else {
            PFANVI2 = Short.MIN_VALUE;
        }
    }

    protected final void initPFANVI3(String s) {
        if (!s.trim().isEmpty()) {
            PFANVI3 = Short.parseShort(s);
        } else {
            PFANVI3 = Short.MIN_VALUE;
        }
    }

    protected final void initPFANVI4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANVI4 = false;
            } else {
                PFANVI4 = true;
            }
        }
    }

    protected final void initPFANVI5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANVI5 = false;
            } else {
                PFANVI5 = true;
            }
        }
    }

    protected final void initPFANVI6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFANVI6 = false;
            } else {
                PFANVI6 = true;
            }
        }
    }

    protected final void initPFBEG1(String s) {
        if (!s.trim().isEmpty()) {
            PFBEG1 = Short.parseShort(s);
        } else {
            PFBEG1 = Short.MIN_VALUE;
        }
    }

    protected final void initPFBEG2(String s) {
        if (!s.trim().isEmpty()) {
            PFBEG2 = Short.parseShort(s);
        } else {
            PFBEG2 = Short.MIN_VALUE;
        }
    }

    protected final void initPFBEG3(String s) {
        if (!s.trim().isEmpty()) {
            PFBEG3 = Short.parseShort(s);
        } else {
            PFBEG3 = Short.MIN_VALUE;
        }
    }

    protected final void initPFBEG4(String s) {
        if (!s.trim().isEmpty()) {
            PFBEG4 = Short.parseShort(s);
        } else {
            PFBEG4 = Short.MIN_VALUE;
        }
    }

    protected final void initPFBEG5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFBEG5 = false;
            } else {
                PFBEG5 = true;
            }
        }
    }

    protected final void initPFBEG6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFBEG6 = false;
            } else {
                PFBEG6 = true;
            }
        }
    }

    protected final void initPFCASH5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFCASH5 = false;
            } else {
                PFCASH5 = true;
            }
        }
    }

    protected final void initPFCASH5_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFCASH5_I = false;
            } else {
                PFCASH5_I = true;
            }
        }
    }

    protected final void initPFCASH5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFCASH5_IFLAG = false;
            } else {
                PFCASH5_IFLAG = true;
            }
        }
    }

    protected final void initPFCASH6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFCASH6 = false;
            } else {
                PFCASH6 = true;
            }
        }
    }

    protected final void initPFCASH6_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFCASH6_I = false;
            } else {
                PFCASH6_I = true;
            }
        }
    }

    protected final void initPFCASH6_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFCASH6_IFLAG = false;
            } else {
                PFCASH6_IFLAG = true;
            }
        }
    }

    protected final void initPFDDV4(String s) {
        if (!s.trim().isEmpty()) {
            PFDDV4 = Integer.parseInt(s);
        } else {
            PFDDV4 = Integer.MIN_VALUE;
        }
    }

    protected final void initPFDDV5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDDV5 = false;
            } else {
                PFDDV5 = true;
            }
        }
    }

    protected final void initPFDDV5_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDDV5_I = false;
            } else {
                PFDDV5_I = true;
            }
        }
    }

    protected final void initPFDDV5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFDDV5_IFLAG = false;
            } else {
                PFDDV5_IFLAG = true;
            }
        }
    }

    protected final void initPFDDV6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDDV6 = false;
            } else {
                PFDDV6 = true;
            }
        }
    }

    protected final void initPFDDV6_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDDV6_I = false;
            } else {
                PFDDV6_I = true;
            }
        }
    }

    protected final void initPFDDV6_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFDDV6_IFLAG = false;
            } else {
                PFDDV6_IFLAG = true;
            }
        }
    }

    protected final void initPFDDVB4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDDVB4 = false;
            } else {
                PFDDVB4 = true;
            }
        }
    }

    protected final void initPFDDVB5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDDVB5 = false;
            } else {
                PFDDVB5 = true;
            }
        }
    }

    protected final void initPFDDVB6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDDVB6 = false;
            } else {
                PFDDVB6 = true;
            }
        }
    }

    protected final void initPFDRAW4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRAW4 = false;
            } else {
                PFDRAW4 = true;
            }
        }
    }

    protected final void initPFDRAW4_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRAW4_I = false;
            } else {
                PFDRAW4_I = true;
            }
        }
    }

    protected final void initPFDRAW4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PFDRAW4_IFLAG = Byte.parseByte(s);
        } else {
            PFDRAW4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPFDRAW5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRAW5 = false;
            } else {
                PFDRAW5 = true;
            }
        }
    }

    protected final void initPFDRAW5_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRAW5_I = false;
            } else {
                PFDRAW5_I = true;
            }
        }
    }

    protected final void initPFDRAW5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFDRAW5_IFLAG = false;
            } else {
                PFDRAW5_IFLAG = true;
            }
        }
    }

    protected final void initPFDRAW6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRAW6 = false;
            } else {
                PFDRAW6 = true;
            }
        }
    }

    protected final void initPFDRAW6_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRAW6_I = false;
            } else {
                PFDRAW6_I = true;
            }
        }
    }

    protected final void initPFDRAW6_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFDRAW6_IFLAG = false;
            } else {
                PFDRAW6_IFLAG = true;
            }
        }
    }

    protected final void initPFDRA___W3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRA___W3 = false;
            } else {
                PFDRA___W3 = true;
            }
        }
    }

    protected final void initPFDRINC2(String s) {
        if (!s.trim().isEmpty()) {
            PFDRINC2 = Short.parseShort(s);
        } else {
            PFDRINC2 = Short.MIN_VALUE;
        }
    }

    protected final void initPFDRINC3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRINC3 = false;
            } else {
                PFDRINC3 = true;
            }
        }
    }

    protected final void initPFDRINC4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRINC4 = false;
            } else {
                PFDRINC4 = true;
            }
        }
    }

    protected final void initPFDRINC5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRINC5 = false;
            } else {
                PFDRINC5 = true;
            }
        }
    }

    protected final void initPFDRINC6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRINC6 = false;
            } else {
                PFDRINC6 = true;
            }
        }
    }

    protected final void initPFDRINCB1(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -9) {
                PFDRINCB1 = false;
            } else {
                PFDRINCB1 = true;
            }
        }
    }

    protected final void initPFDRINCB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRINCB2 = false;
            } else {
                PFDRINCB2 = true;
            }
        }
    }

    protected final void initPFDRINCB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRINCB3 = false;
            } else {
                PFDRINCB3 = true;
            }
        }
    }

    protected final void initPFDRINCB4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRINCB4 = false;
            } else {
                PFDRINCB4 = true;
            }
        }
    }

    protected final void initPFDRINCB5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRINCB5 = false;
            } else {
                PFDRINCB5 = true;
            }
        }
    }

    protected final void initPFDRINCB6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRINCB6 = false;
            } else {
                PFDRINCB6 = true;
            }
        }
    }

    protected final void initPFDRVB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRVB2 = false;
            } else {
                PFDRVB2 = true;
            }
        }
    }

    protected final void initPFDRVB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRVB3 = false;
            } else {
                PFDRVB3 = true;
            }
        }
    }

    protected final void initPFDRVB4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRVB4 = false;
            } else {
                PFDRVB4 = true;
            }
        }
    }

    protected final void initPFDRVB5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRVB5 = false;
            } else {
                PFDRVB5 = true;
            }
        }
    }

    protected final void initPFDRVB6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRVB6 = false;
            } else {
                PFDRVB6 = true;
            }
        }
    }

    protected final void initPFDRVI2(String s) {
        if (!s.trim().isEmpty()) {
            PFDRVI2 = Integer.parseInt(s);
        } else {
            PFDRVI2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPFDRVI3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRVI3 = false;
            } else {
                PFDRVI3 = true;
            }
        }
    }

    protected final void initPFDRVI4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRVI4 = false;
            } else {
                PFDRVI4 = true;
            }
        }
    }

    protected final void initPFDRVI5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRVI5 = false;
            } else {
                PFDRVI5 = true;
            }
        }
    }

    protected final void initPFDRVI6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFDRVI6 = false;
            } else {
                PFDRVI6 = true;
            }
        }
    }

    protected final void initPFEND1(String s) {
        if (!s.trim().isEmpty()) {
            PFEND1 = Short.parseShort(s);
        } else {
            PFEND1 = Short.MIN_VALUE;
        }
    }

    protected final void initPFEND2(String s) {
        if (!s.trim().isEmpty()) {
            PFEND2 = Short.parseShort(s);
        } else {
            PFEND2 = Short.MIN_VALUE;
        }
    }

    protected final void initPFEND3(String s) {
        if (!s.trim().isEmpty()) {
            PFEND3 = Short.parseShort(s);
        } else {
            PFEND3 = Short.MIN_VALUE;
        }
    }

    protected final void initPFEND4(String s) {
        if (!s.trim().isEmpty()) {
            PFEND4 = Short.parseShort(s);
        } else {
            PFEND4 = Short.MIN_VALUE;
        }
    }

    protected final void initPFEND5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFEND5 = false;
            } else {
                PFEND5 = true;
            }
        }
    }

    protected final void initPFEND6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFEND6 = false;
            } else {
                PFEND6 = true;
            }
        }
    }

    protected final void initPFFAAG3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAAG3 = false;
            } else {
                PFFAAG3 = true;
            }
        }
    }

    protected final void initPFFAAG4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAAG4 = false;
            } else {
                PFFAAG4 = true;
            }
        }
    }

    protected final void initPFFAAG5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAAG5 = false;
            } else {
                PFFAAG5 = true;
            }
        }
    }

    protected final void initPFFAAG6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAAG6 = false;
            } else {
                PFFAAG6 = true;
            }
        }
    }

    protected final void initPFFAN10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN10 = false;
            } else {
                PFFAN10 = true;
            }
        }
    }

    protected final void initPFFAN12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN12 = false;
            } else {
                PFFAN12 = true;
            }
        }
    }

    protected final void initPFFAN13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN13 = false;
            } else {
                PFFAN13 = true;
            }
        }
    }

    protected final void initPFFAN14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN14 = false;
            } else {
                PFFAN14 = true;
            }
        }
    }

    protected final void initPFFAN15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN15 = false;
            } else {
                PFFAN15 = true;
            }
        }
    }

    protected final void initPFFAN17(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN17 = false;
            } else {
                PFFAN17 = true;
            }
        }
    }

    protected final void initPFFAN18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN18 = false;
            } else {
                PFFAN18 = true;
            }
        }
    }

    protected final void initPFFAN19(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN19 = false;
            } else {
                PFFAN19 = true;
            }
        }
    }

    protected final void initPFFAN20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN20 = false;
            } else {
                PFFAN20 = true;
            }
        }
    }

    protected final void initPFFAN21(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN21 = false;
            } else {
                PFFAN21 = true;
            }
        }
    }

    protected final void initPFFAN22(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN22 = false;
            } else {
                PFFAN22 = true;
            }
        }
    }

    protected final void initPFFAN23(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN23 = false;
            } else {
                PFFAN23 = true;
            }
        }
    }

    protected final void initPFFAN24(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN24 = false;
            } else {
                PFFAN24 = true;
            }
        }
    }

    protected final void initPFFAN25(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN25 = false;
            } else {
                PFFAN25 = true;
            }
        }
    }

    protected final void initPFFAN26(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN26 = false;
            } else {
                PFFAN26 = true;
            }
        }
    }

    protected final void initPFFAN27(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN27 = false;
            } else {
                PFFAN27 = true;
            }
        }
    }

    protected final void initPFFAN28(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN28 = false;
            } else {
                PFFAN28 = true;
            }
        }
    }

    protected final void initPFFAN29(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN29 = false;
            } else {
                PFFAN29 = true;
            }
        }
    }

    protected final void initPFFAN3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN3 = false;
            } else {
                PFFAN3 = true;
            }
        }
    }

    protected final void initPFFAN30(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN30 = false;
            } else {
                PFFAN30 = true;
            }
        }
    }

    protected final void initPFFAN4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN4 = false;
            } else {
                PFFAN4 = true;
            }
        }
    }

    protected final void initPFFAN5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN5 = false;
            } else {
                PFFAN5 = true;
            }
        }
    }

    protected final void initPFFAN7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN7 = false;
            } else {
                PFFAN7 = true;
            }
        }
    }

    protected final void initPFFAN8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN8 = false;
            } else {
                PFFAN8 = true;
            }
        }
    }

    protected final void initPFFAN9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAN9 = false;
            } else {
                PFFAN9 = true;
            }
        }
    }

    protected final void initPFFAWH10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH10 = false;
            } else {
                PFFAWH10 = true;
            }
        }
    }

    protected final void initPFFAWH11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH11 = false;
            } else {
                PFFAWH11 = true;
            }
        }
    }

    protected final void initPFFAWH12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH12 = false;
            } else {
                PFFAWH12 = true;
            }
        }
    }

    protected final void initPFFAWH13(String s) {
        if (!s.trim().isEmpty()) {
            PFFAWH13 = Byte.parseByte(s);
        } else {
            PFFAWH13 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFFAWH14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH14 = false;
            } else {
                PFFAWH14 = true;
            }
        }
    }

    protected final void initPFFAWH15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH15 = false;
            } else {
                PFFAWH15 = true;
            }
        }
    }

    protected final void initPFFAWH17(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH17 = false;
            } else {
                PFFAWH17 = true;
            }
        }
    }

    protected final void initPFFAWH18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH18 = false;
            } else {
                PFFAWH18 = true;
            }
        }
    }

    protected final void initPFFAWH19(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH19 = false;
            } else {
                PFFAWH19 = true;
            }
        }
    }

    protected final void initPFFAWH2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH2 = false;
            } else {
                PFFAWH2 = true;
            }
        }
    }

    protected final void initPFFAWH20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH20 = false;
            } else {
                PFFAWH20 = true;
            }
        }
    }

    protected final void initPFFAWH21(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH21 = false;
            } else {
                PFFAWH21 = true;
            }
        }
    }

    protected final void initPFFAWH22(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH22 = false;
            } else {
                PFFAWH22 = true;
            }
        }
    }

    protected final void initPFFAWH23(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH23 = false;
            } else {
                PFFAWH23 = true;
            }
        }
    }

    protected final void initPFFAWH24(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH24 = false;
            } else {
                PFFAWH24 = true;
            }
        }
    }

    protected final void initPFFAWH25(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH25 = false;
            } else {
                PFFAWH25 = true;
            }
        }
    }

    protected final void initPFFAWH26(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH26 = false;
            } else {
                PFFAWH26 = true;
            }
        }
    }

    protected final void initPFFAWH27(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH27 = false;
            } else {
                PFFAWH27 = true;
            }
        }
    }

    protected final void initPFFAWH28(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH28 = false;
            } else {
                PFFAWH28 = true;
            }
        }
    }

    protected final void initPFFAWH29(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH29 = false;
            } else {
                PFFAWH29 = true;
            }
        }
    }

    protected final void initPFFAWH3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH3 = false;
            } else {
                PFFAWH3 = true;
            }
        }
    }

    protected final void initPFFAWH30(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH30 = false;
            } else {
                PFFAWH30 = true;
            }
        }
    }

    protected final void initPFFAWH31(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH31 = false;
            } else {
                PFFAWH31 = true;
            }
        }
    }

    protected final void initPFFAWH32(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH32 = false;
            } else {
                PFFAWH32 = true;
            }
        }
    }

    protected final void initPFFAWH33(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH33 = false;
            } else {
                PFFAWH33 = true;
            }
        }
    }

    protected final void initPFFAWH34(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH34 = false;
            } else {
                PFFAWH34 = true;
            }
        }
    }

    protected final void initPFFAWH35(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH35 = false;
            } else {
                PFFAWH35 = true;
            }
        }
    }

    protected final void initPFFAWH36(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH36 = false;
            } else {
                PFFAWH36 = true;
            }
        }
    }

    protected final void initPFFAWH4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH4 = false;
            } else {
                PFFAWH4 = true;
            }
        }
    }

    protected final void initPFFAWH5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH5 = false;
            } else {
                PFFAWH5 = true;
            }
        }
    }

    protected final void initPFFAWH7(String s) {
        if (!s.trim().isEmpty()) {
            PFFAWH7 = Byte.parseByte(s);
        } else {
            PFFAWH7 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFFAWH8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH8 = false;
            } else {
                PFFAWH8 = true;
            }
        }
    }

    protected final void initPFFAWH9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFFAWH9 = false;
            } else {
                PFFAWH9 = true;
            }
        }
    }

    protected final void initPFINCA6_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFINCA6_IFLAG = false;
            } else {
                PFINCA6_IFLAG = true;
            }
        }
    }

    protected final void initPFLMUS5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFLMUS5 = false;
            } else {
                PFLMUS5 = true;
            }
        }
    }

    protected final void initPFLMUS6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFLMUS6 = false;
            } else {
                PFLMUS6 = true;
            }
        }
    }

    protected final void initPFLMV5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFLMV5 = false;
            } else {
                PFLMV5 = true;
            }
        }
    }

    protected final void initPFLMV5_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFLMV5_I = false;
            } else {
                PFLMV5_I = true;
            }
        }
    }

    protected final void initPFLMV5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFLMV5_IFLAG = false;
            } else {
                PFLMV5_IFLAG = true;
            }
        }
    }

    protected final void initPFLMV6_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFLMV6_I = false;
            } else {
                PFLMV6_I = true;
            }
        }
    }

    protected final void initPFLMV6_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFLMV6_IFLAG = false;
            } else {
                PFLMV6_IFLAG = true;
            }
        }
    }

    protected final void initPFLMVB4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFLMVB4 = false;
            } else {
                PFLMVB4 = true;
            }
        }
    }

    protected final void initPFLMVB5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFLMVB5 = false;
            } else {
                PFLMVB5 = true;
            }
        }
    }

    protected final void initPFLMVB6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFLMVB6 = false;
            } else {
                PFLMVB6 = true;
            }
        }
    }

    protected final void initPFLUMALL5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFLUMALL5 = false;
            } else {
                PFLUMALL5 = true;
            }
        }
    }

    protected final void initPFLUMALL5_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFLUMALL5_I = false;
            } else {
                PFLUMALL5_I = true;
            }
        }
    }

    protected final void initPFLUMALL5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFLUMALL5_IFLAG = false;
            } else {
                PFLUMALL5_IFLAG = true;
            }
        }
    }

    protected final void initPFLUMALL6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFLUMALL6 = false;
            } else {
                PFLUMALL6 = true;
            }
        }
    }

    protected final void initPFLUMALL6_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFLUMALL6_I = false;
            } else {
                PFLUMALL6_I = true;
            }
        }
    }

    protected final void initPFLUMALL6_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFLUMALL6_IFLAG = false;
            } else {
                PFLUMALL6_IFLAG = true;
            }
        }
    }

    protected final void initPFPENVB1(String s) {
        if (!s.trim().isEmpty()) {
            PFPENVB1 = Byte.parseByte(s);
        } else {
            PFPENVB1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFPENVB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFPENVB2 = false;
            } else {
                PFPENVB2 = true;
            }
        }
    }

    protected final void initPFPENVB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFPENVB3 = false;
            } else {
                PFPENVB3 = true;
            }
        }
    }

    protected final void initPFPENVB4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFPENVB4 = false;
            } else {
                PFPENVB4 = true;
            }
        }
    }

    protected final void initPFPENVB5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFPENVB5 = false;
            } else {
                PFPENVB5 = true;
            }
        }
    }

    protected final void initPFPENVB6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFPENVB6 = false;
            } else {
                PFPENVB6 = true;
            }
        }
    }

    protected final void initPFPENVI1(String s) {
        if (!s.trim().isEmpty()) {
            PFPENVI1 = Integer.parseInt(s);
        } else {
            PFPENVI1 = Integer.MIN_VALUE;
        }
    }

    protected final void initPFPENVI2(String s) {
        if (!s.trim().isEmpty()) {
            PFPENVI2 = Short.parseShort(s);
        } else {
            PFPENVI2 = Short.MIN_VALUE;
        }
    }

    protected final void initPFPENVI3(String s) {
        if (!s.trim().isEmpty()) {
            PFPENVI3 = Short.parseShort(s);
        } else {
            PFPENVI3 = Short.MIN_VALUE;
        }
    }

    protected final void initPFPENVI4(String s) {
        if (!s.trim().isEmpty()) {
            PFPENVI4 = Short.parseShort(s);
        } else {
            PFPENVI4 = Short.MIN_VALUE;
        }
    }

    protected final void initPFPENVI5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFPENVI5 = false;
            } else {
                PFPENVI5 = true;
            }
        }
    }

    protected final void initPFPENVI6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFPENVI6 = false;
            } else {
                PFPENVI6 = true;
            }
        }
    }

    protected final void initPFREM5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFREM5 = false;
            } else {
                PFREM5 = true;
            }
        }
    }

    protected final void initPFREM5_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFREM5_I = false;
            } else {
                PFREM5_I = true;
            }
        }
    }

    protected final void initPFREM5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFREM5_IFLAG = false;
            } else {
                PFREM5_IFLAG = true;
            }
        }
    }

    protected final void initPFREM6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFREM6 = false;
            } else {
                PFREM6 = true;
            }
        }
    }

    protected final void initPFREM6_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFREM6_I = false;
            } else {
                PFREM6_I = true;
            }
        }
    }

    protected final void initPFREM6_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFREM6_IFLAG = false;
            } else {
                PFREM6_IFLAG = true;
            }
        }
    }

    protected final void initPFSIPTY1(String s) {
        if (!s.trim().isEmpty()) {
            PFSIPTY1 = Byte.parseByte(s);
        } else {
            PFSIPTY1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSIPTY10(String s) {
        if (!s.trim().isEmpty()) {
            PFSIPTY10 = Byte.parseByte(s);
        } else {
            PFSIPTY10 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSIPTY11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY11 = false;
            } else {
                PFSIPTY11 = true;
            }
        }
    }

    protected final void initPFSIPTY12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY12 = false;
            } else {
                PFSIPTY12 = true;
            }
        }
    }

    protected final void initPFSIPTY13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY13 = false;
            } else {
                PFSIPTY13 = true;
            }
        }
    }

    protected final void initPFSIPTY14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY14 = false;
            } else {
                PFSIPTY14 = true;
            }
        }
    }

    protected final void initPFSIPTY15(String s) {
        if (!s.trim().isEmpty()) {
            PFSIPTY15 = Byte.parseByte(s);
        } else {
            PFSIPTY15 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSIPTY16(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY16 = false;
            } else {
                PFSIPTY16 = true;
            }
        }
    }

    protected final void initPFSIPTY17(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY17 = false;
            } else {
                PFSIPTY17 = true;
            }
        }
    }

    protected final void initPFSIPTY18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY18 = false;
            } else {
                PFSIPTY18 = true;
            }
        }
    }

    protected final void initPFSIPTY19(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY19 = false;
            } else {
                PFSIPTY19 = true;
            }
        }
    }

    protected final void initPFSIPTY2(String s) {
        if (!s.trim().isEmpty()) {
            PFSIPTY2 = Byte.parseByte(s);
        } else {
            PFSIPTY2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSIPTY20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY20 = false;
            } else {
                PFSIPTY20 = true;
            }
        }
    }

    protected final void initPFSIPTY21(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY21 = false;
            } else {
                PFSIPTY21 = true;
            }
        }
    }

    protected final void initPFSIPTY22(String s) {
        if (!s.trim().isEmpty()) {
            PFSIPTY22 = Byte.parseByte(s);
        } else {
            PFSIPTY22 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSIPTY23(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY23 = false;
            } else {
                PFSIPTY23 = true;
            }
        }
    }

    protected final void initPFSIPTY24(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY24 = false;
            } else {
                PFSIPTY24 = true;
            }
        }
    }

    protected final void initPFSIPTY25(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY25 = false;
            } else {
                PFSIPTY25 = true;
            }
        }
    }

    protected final void initPFSIPTY26(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY26 = false;
            } else {
                PFSIPTY26 = true;
            }
        }
    }

    protected final void initPFSIPTY27(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY27 = false;
            } else {
                PFSIPTY27 = true;
            }
        }
    }

    protected final void initPFSIPTY28(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY28 = false;
            } else {
                PFSIPTY28 = true;
            }
        }
    }

    protected final void initPFSIPTY29(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY29 = false;
            } else {
                PFSIPTY29 = true;
            }
        }
    }

    protected final void initPFSIPTY3(String s) {
        if (!s.trim().isEmpty()) {
            PFSIPTY3 = Byte.parseByte(s);
        } else {
            PFSIPTY3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSIPTY30(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY30 = false;
            } else {
                PFSIPTY30 = true;
            }
        }
    }

    protected final void initPFSIPTY31(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY31 = false;
            } else {
                PFSIPTY31 = true;
            }
        }
    }

    protected final void initPFSIPTY32(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY32 = false;
            } else {
                PFSIPTY32 = true;
            }
        }
    }

    protected final void initPFSIPTY33(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY33 = false;
            } else {
                PFSIPTY33 = true;
            }
        }
    }

    protected final void initPFSIPTY34(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY34 = false;
            } else {
                PFSIPTY34 = true;
            }
        }
    }

    protected final void initPFSIPTY35(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY35 = false;
            } else {
                PFSIPTY35 = true;
            }
        }
    }

    protected final void initPFSIPTY36(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY36 = false;
            } else {
                PFSIPTY36 = true;
            }
        }
    }

    protected final void initPFSIPTY37(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY37 = false;
            } else {
                PFSIPTY37 = true;
            }
        }
    }

    protected final void initPFSIPTY38(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY38 = false;
            } else {
                PFSIPTY38 = true;
            }
        }
    }

    protected final void initPFSIPTY39(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY39 = false;
            } else {
                PFSIPTY39 = true;
            }
        }
    }

    protected final void initPFSIPTY4(String s) {
        if (!s.trim().isEmpty()) {
            PFSIPTY4 = Byte.parseByte(s);
        } else {
            PFSIPTY4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSIPTY40(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY40 = false;
            } else {
                PFSIPTY40 = true;
            }
        }
    }

    protected final void initPFSIPTY41(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY41 = false;
            } else {
                PFSIPTY41 = true;
            }
        }
    }

    protected final void initPFSIPTY42(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY42 = false;
            } else {
                PFSIPTY42 = true;
            }
        }
    }

    protected final void initPFSIPTY5(String s) {
        if (!s.trim().isEmpty()) {
            PFSIPTY5 = Byte.parseByte(s);
        } else {
            PFSIPTY5 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSIPTY6(String s) {
        if (!s.trim().isEmpty()) {
            PFSIPTY6 = Byte.parseByte(s);
        } else {
            PFSIPTY6 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSIPTY7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PFSIPTY7 = false;
            } else {
                PFSIPTY7 = true;
            }
        }
    }

    protected final void initPFSIPTY8(String s) {
        if (!s.trim().isEmpty()) {
            PFSIPTY8 = Byte.parseByte(s);
        } else {
            PFSIPTY8 = Byte.MIN_VALUE;
        }
    }

    protected final void initPFSIPTY9(String s) {
        if (!s.trim().isEmpty()) {
            PFSIPTY9 = Byte.parseByte(s);
        } else {
            PFSIPTY9 = Byte.MIN_VALUE;
        }
    }

    protected final void initPIRREG(String s) {
        if (!s.trim().isEmpty()) {
            PIRREG = Short.parseShort(s);
        } else {
            PIRREG = Short.MIN_VALUE;
        }
    }

    protected final void initPIRREG2(String s) {
        if (!s.trim().isEmpty()) {
            PIRREG2 = Short.parseShort(s);
        } else {
            PIRREG2 = Short.MIN_VALUE;
        }
    }

    protected final void initPMORTC(String s) {
        if (!s.trim().isEmpty()) {
            PMORTC = Byte.parseByte(s);
        } else {
            PMORTC = Byte.MIN_VALUE;
        }
    }

    protected final void initPNEWMEM(String s) {
        if (!s.trim().isEmpty()) {
            PNEWMEM = Byte.parseByte(s);
        } else {
            PNEWMEM = Byte.MIN_VALUE;
        }
    }

    protected final void initPOADD5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POADD5 = false;
            } else {
                POADD5 = true;
            }
        }
    }

    protected final void initPOADD6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POADD6 = false;
            } else {
                POADD6 = true;
            }
        }
    }

    protected final void initPOANEH2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANEH2 = false;
            } else {
                POANEH2 = true;
            }
        }
    }

    protected final void initPOANEXM1(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANEXM1 = false;
            } else {
                POANEXM1 = true;
            }
        }
    }

    protected final void initPOANEXM2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANEXM2 = false;
            } else {
                POANEXM2 = true;
            }
        }
    }

    protected final void initPOANEXY1(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANEXY1 = false;
            } else {
                POANEXY1 = true;
            }
        }
    }

    protected final void initPOANEXY2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANEXY2 = false;
            } else {
                POANEXY2 = true;
            }
        }
    }

    protected final void initPOANGA2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANGA2 = false;
            } else {
                POANGA2 = true;
            }
        }
    }

    protected final void initPOANIF2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANIF2 = false;
            } else {
                POANIF2 = true;
            }
        }
    }

    protected final void initPOANJT2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANJT2 = false;
            } else {
                POANJT2 = true;
            }
        }
    }

    protected final void initPOANLM1(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANLM1 = false;
            } else {
                POANLM1 = true;
            }
        }
    }

    protected final void initPOANLM2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANLM2 = false;
            } else {
                POANLM2 = true;
            }
        }
    }

    protected final void initPOANN2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANN2 = false;
            } else {
                POANN2 = true;
            }
        }
    }

    protected final void initPOANN3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANN3 = false;
            } else {
                POANN3 = true;
            }
        }
    }

    protected final void initPOANN4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANN4 = false;
            } else {
                POANN4 = true;
            }
        }
    }

    protected final void initPOANN6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANN6 = false;
            } else {
                POANN6 = true;
            }
        }
    }

    protected final void initPOANN7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANN7 = false;
            } else {
                POANN7 = true;
            }
        }
    }

    protected final void initPOANN8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANN8 = false;
            } else {
                POANN8 = true;
            }
        }
    }

    protected final void initPOANVB(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANVB = false;
            } else {
                POANVB = true;
            }
        }
    }

    protected final void initPOANVB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POANVB2 = false;
            } else {
                POANVB2 = true;
            }
        }
    }

    protected final void initPOANVI1(String s) {
        if (!s.trim().isEmpty()) {
            POANVI1 = Short.parseShort(s);
        } else {
            POANVI1 = Short.MIN_VALUE;
        }
    }

    protected final void initPOANVI2(String s) {
        if (!s.trim().isEmpty()) {
            POANVI2 = Short.parseShort(s);
        } else {
            POANVI2 = Short.MIN_VALUE;
        }
    }

    protected final void initPOCNDRS1(String s) {
        if (!s.trim().isEmpty()) {
            POCNDRS1 = Byte.parseByte(s);
        } else {
            POCNDRS1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNDRS10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNDRS10 = false;
            } else {
                POCNDRS10 = true;
            }
        }
    }

    protected final void initPOCNDRS11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNDRS11 = false;
            } else {
                POCNDRS11 = true;
            }
        }
    }

    protected final void initPOCNDRS12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNDRS12 = false;
            } else {
                POCNDRS12 = true;
            }
        }
    }

    protected final void initPOCNDRS2(String s) {
        if (!s.trim().isEmpty()) {
            POCNDRS2 = Byte.parseByte(s);
        } else {
            POCNDRS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNDRS3(String s) {
        if (!s.trim().isEmpty()) {
            POCNDRS3 = Byte.parseByte(s);
        } else {
            POCNDRS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNDRS4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNDRS4 = false;
            } else {
                POCNDRS4 = true;
            }
        }
    }

    protected final void initPOCNDRS5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNDRS5 = false;
            } else {
                POCNDRS5 = true;
            }
        }
    }

    protected final void initPOCNDRS6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNDRS6 = false;
            } else {
                POCNDRS6 = true;
            }
        }
    }

    protected final void initPOCNDRS7(String s) {
        if (!s.trim().isEmpty()) {
            POCNDRS7 = Byte.parseByte(s);
        } else {
            POCNDRS7 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNDRS8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNDRS8 = false;
            } else {
                POCNDRS8 = true;
            }
        }
    }

    protected final void initPOCNDRS9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNDRS9 = false;
            } else {
                POCNDRS9 = true;
            }
        }
    }

    protected final void initPOCNHOW1(String s) {
        if (!s.trim().isEmpty()) {
            POCNHOW1 = Byte.parseByte(s);
        } else {
            POCNHOW1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNHOW2(String s) {
        if (!s.trim().isEmpty()) {
            POCNHOW2 = Byte.parseByte(s);
        } else {
            POCNHOW2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNLRS1(String s) {
        if (!s.trim().isEmpty()) {
            POCNLRS1 = Byte.parseByte(s);
        } else {
            POCNLRS1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNLRS2(String s) {
        if (!s.trim().isEmpty()) {
            POCNLRS2 = Byte.parseByte(s);
        } else {
            POCNLRS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNLRS3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNLRS3 = false;
            } else {
                POCNLRS3 = true;
            }
        }
    }

    protected final void initPOCNLRS4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNLRS4 = false;
            } else {
                POCNLRS4 = true;
            }
        }
    }

    protected final void initPOCNLRS5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNLRS5 = false;
            } else {
                POCNLRS5 = true;
            }
        }
    }

    protected final void initPOCNLRS6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNLRS6 = false;
            } else {
                POCNLRS6 = true;
            }
        }
    }

    protected final void initPOCNLRS7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNLRS7 = false;
            } else {
                POCNLRS7 = true;
            }
        }
    }

    protected final void initPOCNLRS8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POCNLRS8 = false;
            } else {
                POCNLRS8 = true;
            }
        }
    }

    protected final void initPOCNPLN1(String s) {
        if (!s.trim().isEmpty()) {
            POCNPLN1 = Byte.parseByte(s);
        } else {
            POCNPLN1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNPLN2(String s) {
        if (!s.trim().isEmpty()) {
            POCNPLN2 = Byte.parseByte(s);
        } else {
            POCNPLN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNVOL1(String s) {
        if (!s.trim().isEmpty()) {
            POCNVOL1 = Byte.parseByte(s);
        } else {
            POCNVOL1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNVOL2(String s) {
        if (!s.trim().isEmpty()) {
            POCNVOL2 = Byte.parseByte(s);
        } else {
            POCNVOL2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCONCH1(String s) {
        if (!s.trim().isEmpty()) {
            POCONCH1 = Byte.parseByte(s);
        } else {
            POCONCH1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCONCH2(String s) {
        if (!s.trim().isEmpty()) {
            POCONCH2 = Byte.parseByte(s);
        } else {
            POCONCH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOFAN10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAN10 = false;
            } else {
                POFAN10 = true;
            }
        }
    }

    protected final void initPOFAN11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAN11 = false;
            } else {
                POFAN11 = true;
            }
        }
    }

    protected final void initPOFAN12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAN12 = false;
            } else {
                POFAN12 = true;
            }
        }
    }

    protected final void initPOFAN9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAN9 = false;
            } else {
                POFAN9 = true;
            }
        }
    }

    protected final void initPOFAWH10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAWH10 = false;
            } else {
                POFAWH10 = true;
            }
        }
    }

    protected final void initPOFAWH11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAWH11 = false;
            } else {
                POFAWH11 = true;
            }
        }
    }

    protected final void initPOFAWH12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAWH12 = false;
            } else {
                POFAWH12 = true;
            }
        }
    }

    protected final void initPOFAWH3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAWH3 = false;
            } else {
                POFAWH3 = true;
            }
        }
    }

    protected final void initPOFAWH4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAWH4 = false;
            } else {
                POFAWH4 = true;
            }
        }
    }

    protected final void initPOFAWH5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAWH5 = false;
            } else {
                POFAWH5 = true;
            }
        }
    }

    protected final void initPOFAWH7(String s) {
        if (!s.trim().isEmpty()) {
            POFAWH7 = Byte.parseByte(s);
        } else {
            POFAWH7 = Byte.MIN_VALUE;
        }
    }

    protected final void initPOFAWH8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAWH8 = false;
            } else {
                POFAWH8 = true;
            }
        }
    }

    protected final void initPOFAWH9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POFAWH9 = false;
            } else {
                POFAWH9 = true;
            }
        }
    }

    protected final void initPOLMUS10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POLMUS10 = false;
            } else {
                POLMUS10 = true;
            }
        }
    }

    protected final void initPOLMUS11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POLMUS11 = false;
            } else {
                POLMUS11 = true;
            }
        }
    }

    protected final void initPOLMUS12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POLMUS12 = false;
            } else {
                POLMUS12 = true;
            }
        }
    }

    protected final void initPOLMUS9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POLMUS9 = false;
            } else {
                POLMUS9 = true;
            }
        }
    }

    protected final void initPOLMVB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POLMVB2 = false;
            } else {
                POLMVB2 = true;
            }
        }
    }

    protected final void initPOPENVB(String s) {
        if (!s.trim().isEmpty()) {
            POPENVB = Byte.parseByte(s);
        } else {
            POPENVB = Byte.MIN_VALUE;
        }
    }

    protected final void initPOPENVB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                POPENVB2 = false;
            } else {
                POPENVB2 = true;
            }
        }
    }

    protected final void initPOPENVI(String s) {
        if (!s.trim().isEmpty()) {
            POPENVI = Integer.parseInt(s);
        } else {
            POPENVI = Integer.MIN_VALUE;
        }
    }

    protected final void initPOPENVI2(String s) {
        if (!s.trim().isEmpty()) {
            POPENVI2 = Integer.parseInt(s);
        } else {
            POPENVI2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPOPYCH(String s) {
        if (!s.trim().isEmpty()) {
            POPYCH = Byte.parseByte(s);
        } else {
            POPYCH = Byte.MIN_VALUE;
        }
    }

    protected final void initPPANEXM1(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANEXM1 = false;
            } else {
                PPANEXM1 = true;
            }
        }
    }

    protected final void initPPANEXM2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANEXM2 = false;
            } else {
                PPANEXM2 = true;
            }
        }
    }

    protected final void initPPANEXM3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANEXM3 = false;
            } else {
                PPANEXM3 = true;
            }
        }
    }

    protected final void initPPANEXY1(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANEXY1 = false;
            } else {
                PPANEXY1 = true;
            }
        }
    }

    protected final void initPPANEXY2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANEXY2 = false;
            } else {
                PPANEXY2 = true;
            }
        }
    }

    protected final void initPPANEXY3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANEXY3 = false;
            } else {
                PPANEXY3 = true;
            }
        }
    }

    protected final void initPPANLM1(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANLM1 = false;
            } else {
                PPANLM1 = true;
            }
        }
    }

    protected final void initPPANLM2(String s) {
        if (!s.trim().isEmpty()) {
            PPANLM2 = Byte.parseByte(s);
        } else {
            PPANLM2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPANLM3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANLM3 = false;
            } else {
                PPANLM3 = true;
            }
        }
    }

    protected final void initPPANN3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANN3 = false;
            } else {
                PPANN3 = true;
            }
        }
    }

    protected final void initPPANN4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANN4 = false;
            } else {
                PPANN4 = true;
            }
        }
    }

    protected final void initPPANN6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANN6 = false;
            } else {
                PPANN6 = true;
            }
        }
    }

    protected final void initPPANN7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANN7 = false;
            } else {
                PPANN7 = true;
            }
        }
    }

    protected final void initPPANN8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANN8 = false;
            } else {
                PPANN8 = true;
            }
        }
    }

    protected final void initPPANVB1(String s) {
        if (!s.trim().isEmpty()) {
            PPANVB1 = Byte.parseByte(s);
        } else {
            PPANVB1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPANVB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANVB2 = false;
            } else {
                PPANVB2 = true;
            }
        }
    }

    protected final void initPPANVB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPANVB3 = false;
            } else {
                PPANVB3 = true;
            }
        }
    }

    protected final void initPPANVI1(String s) {
        if (!s.trim().isEmpty()) {
            PPANVI1 = Integer.parseInt(s);
        } else {
            PPANVI1 = Integer.MIN_VALUE;
        }
    }

    protected final void initPPANVI2(String s) {
        if (!s.trim().isEmpty()) {
            PPANVI2 = Short.parseShort(s);
        } else {
            PPANVI2 = Short.MIN_VALUE;
        }
    }

    protected final void initPPANVI3(String s) {
        if (!s.trim().isEmpty()) {
            PPANVI3 = Short.parseShort(s);
        } else {
            PPANVI3 = Short.MIN_VALUE;
        }
    }

    protected final void initPPCNDRS12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNDRS12 = false;
            } else {
                PPCNDRS12 = true;
            }
        }
    }

    protected final void initPPCNDRS13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNDRS13 = false;
            } else {
                PPCNDRS13 = true;
            }
        }
    }

    protected final void initPPCNDRS14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNDRS14 = false;
            } else {
                PPCNDRS14 = true;
            }
        }
    }

    protected final void initPPCNDRS15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNDRS15 = false;
            } else {
                PPCNDRS15 = true;
            }
        }
    }

    protected final void initPPCNDRS16(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNDRS16 = false;
            } else {
                PPCNDRS16 = true;
            }
        }
    }

    protected final void initPPCNDRS17(String s) {
        if (!s.trim().isEmpty()) {
            PPCNDRS17 = Byte.parseByte(s);
        } else {
            PPCNDRS17 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCNDRS18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNDRS18 = false;
            } else {
                PPCNDRS18 = true;
            }
        }
    }

    protected final void initPPCNDRS20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNDRS20 = false;
            } else {
                PPCNDRS20 = true;
            }
        }
    }

    protected final void initPPCNDRS21(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNDRS21 = false;
            } else {
                PPCNDRS21 = true;
            }
        }
    }

    protected final void initPPCNDRS22(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNDRS22 = false;
            } else {
                PPCNDRS22 = true;
            }
        }
    }

    protected final void initPPCNDRS23(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNDRS23 = false;
            } else {
                PPCNDRS23 = true;
            }
        }
    }

    protected final void initPPCNDRS24(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNDRS24 = false;
            } else {
                PPCNDRS24 = true;
            }
        }
    }

    protected final void initPPCNDRS3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNDRS3 = false;
            } else {
                PPCNDRS3 = true;
            }
        }
    }

    protected final void initPPCNDRS4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNDRS4 = false;
            } else {
                PPCNDRS4 = true;
            }
        }
    }

    protected final void initPPCNDRS5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNDRS5 = false;
            } else {
                PPCNDRS5 = true;
            }
        }
    }

    protected final void initPPCNDRS6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNDRS6 = false;
            } else {
                PPCNDRS6 = true;
            }
        }
    }

    protected final void initPPCNDRS7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNDRS7 = false;
            } else {
                PPCNDRS7 = true;
            }
        }
    }

    protected final void initPPCNDRS8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNDRS8 = false;
            } else {
                PPCNDRS8 = true;
            }
        }
    }

    protected final void initPPCNDRS9(String s) {
        if (!s.trim().isEmpty()) {
            PPCNDRS9 = Byte.parseByte(s);
        } else {
            PPCNDRS9 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCNHO___W3(String s) {
        if (!s.trim().isEmpty()) {
            PPCNHO___W3 = Byte.parseByte(s);
        } else {
            PPCNHO___W3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCNLRS10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNLRS10 = false;
            } else {
                PPCNLRS10 = true;
            }
        }
    }

    protected final void initPPCNLRS11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNLRS11 = false;
            } else {
                PPCNLRS11 = true;
            }
        }
    }

    protected final void initPPCNLRS12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNLRS12 = false;
            } else {
                PPCNLRS12 = true;
            }
        }
    }

    protected final void initPPCNLRS4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNLRS4 = false;
            } else {
                PPCNLRS4 = true;
            }
        }
    }

    protected final void initPPCNLRS6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNLRS6 = false;
            } else {
                PPCNLRS6 = true;
            }
        }
    }

    protected final void initPPCNLRS7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNLRS7 = false;
            } else {
                PPCNLRS7 = true;
            }
        }
    }

    protected final void initPPCNLRS8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPCNLRS8 = false;
            } else {
                PPCNLRS8 = true;
            }
        }
    }

    protected final void initPPCNLRS9(String s) {
        if (!s.trim().isEmpty()) {
            PPCNLRS9 = Byte.parseByte(s);
        } else {
            PPCNLRS9 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCNPLN1(String s) {
        if (!s.trim().isEmpty()) {
            PPCNPLN1 = Byte.parseByte(s);
        } else {
            PPCNPLN1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCNPLN2(String s) {
        if (!s.trim().isEmpty()) {
            PPCNPLN2 = Byte.parseByte(s);
        } else {
            PPCNPLN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCNPLN3(String s) {
        if (!s.trim().isEmpty()) {
            PPCNPLN3 = Byte.parseByte(s);
        } else {
            PPCNPLN3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPCONCH(String s) {
        if (!s.trim().isEmpty()) {
            PPCONCH = Byte.parseByte(s);
        } else {
            PPCONCH = Byte.MIN_VALUE;
        }
    }

    protected final void initPPDRINC3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPDRINC3 = false;
            } else {
                PPDRINC3 = true;
            }
        }
    }

    protected final void initPPDRINCB(String s) {
        if (!s.trim().isEmpty()) {
            PPDRINCB = Byte.parseByte(s);
        } else {
            PPDRINCB = Byte.MIN_VALUE;
        }
    }

    protected final void initPPDRINCB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPDRINCB3 = false;
            } else {
                PPDRINCB3 = true;
            }
        }
    }

    protected final void initPPDRVB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPDRVB3 = false;
            } else {
                PPDRVB3 = true;
            }
        }
    }

    protected final void initPPDRVI3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPDRVI3 = false;
            } else {
                PPDRVI3 = true;
            }
        }
    }

    protected final void initPPFAAG2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAAG2 = false;
            } else {
                PPFAAG2 = true;
            }
        }
    }

    protected final void initPPFAAG3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAAG3 = false;
            } else {
                PPFAAG3 = true;
            }
        }
    }

    protected final void initPPFAN10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN10 = false;
            } else {
                PPFAN10 = true;
            }
        }
    }

    protected final void initPPFAN12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN12 = false;
            } else {
                PPFAN12 = true;
            }
        }
    }

    protected final void initPPFAN13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN13 = false;
            } else {
                PPFAN13 = true;
            }
        }
    }

    protected final void initPPFAN14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN14 = false;
            } else {
                PPFAN14 = true;
            }
        }
    }

    protected final void initPPFAN15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN15 = false;
            } else {
                PPFAN15 = true;
            }
        }
    }

    protected final void initPPFAN3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN3 = false;
            } else {
                PPFAN3 = true;
            }
        }
    }

    protected final void initPPFAN4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN4 = false;
            } else {
                PPFAN4 = true;
            }
        }
    }

    protected final void initPPFAN5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN5 = false;
            } else {
                PPFAN5 = true;
            }
        }
    }

    protected final void initPPFAN7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN7 = false;
            } else {
                PPFAN7 = true;
            }
        }
    }

    protected final void initPPFAN8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN8 = false;
            } else {
                PPFAN8 = true;
            }
        }
    }

    protected final void initPPFAN9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAN9 = false;
            } else {
                PPFAN9 = true;
            }
        }
    }

    protected final void initPPFAWH10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH10 = false;
            } else {
                PPFAWH10 = true;
            }
        }
    }

    protected final void initPPFAWH11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH11 = false;
            } else {
                PPFAWH11 = true;
            }
        }
    }

    protected final void initPPFAWH12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH12 = false;
            } else {
                PPFAWH12 = true;
            }
        }
    }

    protected final void initPPFAWH13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH13 = false;
            } else {
                PPFAWH13 = true;
            }
        }
    }

    protected final void initPPFAWH14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH14 = false;
            } else {
                PPFAWH14 = true;
            }
        }
    }

    protected final void initPPFAWH16(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH16 = false;
            } else {
                PPFAWH16 = true;
            }
        }
    }

    protected final void initPPFAWH17(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH17 = false;
            } else {
                PPFAWH17 = true;
            }
        }
    }

    protected final void initPPFAWH18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH18 = false;
            } else {
                PPFAWH18 = true;
            }
        }
    }

    protected final void initPPFAWH19(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH19 = false;
            } else {
                PPFAWH19 = true;
            }
        }
    }

    protected final void initPPFAWH20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH20 = false;
            } else {
                PPFAWH20 = true;
            }
        }
    }

    protected final void initPPFAWH21(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH21 = false;
            } else {
                PPFAWH21 = true;
            }
        }
    }

    protected final void initPPFAWH4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH4 = false;
            } else {
                PPFAWH4 = true;
            }
        }
    }

    protected final void initPPFAWH5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH5 = false;
            } else {
                PPFAWH5 = true;
            }
        }
    }

    protected final void initPPFAWH7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH7 = false;
            } else {
                PPFAWH7 = true;
            }
        }
    }

    protected final void initPPFAWH8(String s) {
        if (!s.trim().isEmpty()) {
            PPFAWH8 = Byte.parseByte(s);
        } else {
            PPFAWH8 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPFAWH9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPFAWH9 = false;
            } else {
                PPFAWH9 = true;
            }
        }
    }

    protected final void initPPIRNO1(String s) {
        if (!s.trim().isEmpty()) {
            PPIRNO1 = Byte.parseByte(s);
        } else {
            PPIRNO1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPIRNO2(String s) {
        if (!s.trim().isEmpty()) {
            PPIRNO2 = Byte.parseByte(s);
        } else {
            PPIRNO2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPIRNO3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPIRNO3 = false;
            } else {
                PPIRNO3 = true;
            }
        }
    }

    protected final void initPPIRRA1(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRA1 = Integer.parseInt(s);
        } else {
            PPIRRA1 = Integer.MIN_VALUE;
        }
    }

    protected final void initPPIRRA2(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRA2 = Integer.parseInt(s);
        } else {
            PPIRRA2 = Integer.MIN_VALUE;
        }
    }

    protected final void initPPIRRA3(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRA3 = Short.parseShort(s);
        } else {
            PPIRRA3 = Short.MIN_VALUE;
        }
    }

    protected final void initPPIRRF1(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPIRRF1 = false;
            } else {
                PPIRRF1 = true;
            }
        }
    }

    protected final void initPPIRRF2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPIRRF2 = false;
            } else {
                PPIRRF2 = true;
            }
        }
    }

    protected final void initPPIRRF3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPIRRF3 = false;
            } else {
                PPIRRF3 = true;
            }
        }
    }

    protected final void initPPIRRH1(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRH1 = Byte.parseByte(s);
        } else {
            PPIRRH1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPIRRH2(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRH2 = Byte.parseByte(s);
        } else {
            PPIRRH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPIRRH3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPIRRH3 = false;
            } else {
                PPIRRH3 = true;
            }
        }
    }

    protected final void initPPIRRY1(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRY1 = Short.parseShort(s);
        } else {
            PPIRRY1 = Short.MIN_VALUE;
        }
    }

    protected final void initPPIRRY2(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRY2 = Short.parseShort(s);
        } else {
            PPIRRY2 = Short.MIN_VALUE;
        }
    }

    protected final void initPPIRRY3(String s) {
        if (!s.trim().isEmpty()) {
            PPIRRY3 = Short.parseShort(s);
        } else {
            PPIRRY3 = Short.MIN_VALUE;
        }
    }

    protected final void initPPLASY1(String s) {
        if (!s.trim().isEmpty()) {
            PPLASY1 = Short.parseShort(s);
        } else {
            PPLASY1 = Short.MIN_VALUE;
        }
    }

    protected final void initPPLASY2(String s) {
        if (!s.trim().isEmpty()) {
            PPLASY2 = Short.parseShort(s);
        } else {
            PPLASY2 = Short.MIN_VALUE;
        }
    }

    protected final void initPPLASY3(String s) {
        if (!s.trim().isEmpty()) {
            PPLASY3 = Short.parseShort(s);
        } else {
            PPLASY3 = Short.MIN_VALUE;
        }
    }

    protected final void initPPNINS1(String s) {
        if (!s.trim().isEmpty()) {
            PPNINS1 = Byte.parseByte(s);
        } else {
            PPNINS1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPNINS2(String s) {
        if (!s.trim().isEmpty()) {
            PPNINS2 = Byte.parseByte(s);
        } else {
            PPNINS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPNINS3(String s) {
        if (!s.trim().isEmpty()) {
            PPNINS3 = Byte.parseByte(s);
        } else {
            PPNINS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPRGAM(String s) {
        if (!s.trim().isEmpty()) {
            PPRGAM = Integer.parseInt(s);
        } else {
            PPRGAM = Integer.MIN_VALUE;
        }
    }

    protected final void initPPRGFG3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPRGFG3 = false;
            } else {
                PPRGFG3 = true;
            }
        }
    }

    protected final void initPPRGFR3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPRGFR3 = false;
            } else {
                PPRGFR3 = true;
            }
        }
    }

    protected final void initPPYSTP15(String s) {
        if (!s.trim().isEmpty()) {
            PPYSTP15 = Byte.parseByte(s);
        } else {
            PPYSTP15 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPYSTP16(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPYSTP16 = false;
            } else {
                PPYSTP16 = true;
            }
        }
    }

    protected final void initPPYSTP17(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPYSTP17 = false;
            } else {
                PPYSTP17 = true;
            }
        }
    }

    protected final void initPPYSTP18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPYSTP18 = false;
            } else {
                PPYSTP18 = true;
            }
        }
    }

    protected final void initPPYSTP20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPYSTP20 = false;
            } else {
                PPYSTP20 = true;
            }
        }
    }

    protected final void initPPYSTP21(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPYSTP21 = false;
            } else {
                PPYSTP21 = true;
            }
        }
    }

    protected final void initPPYSTP3(String s) {
        if (!s.trim().isEmpty()) {
            PPYSTP3 = Byte.parseByte(s);
        } else {
            PPYSTP3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPPYSTP4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPYSTP4 = false;
            } else {
                PPYSTP4 = true;
            }
        }
    }

    protected final void initPPYSTP5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPYSTP5 = false;
            } else {
                PPYSTP5 = true;
            }
        }
    }

    protected final void initPPYSTP6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPYSTP6 = false;
            } else {
                PPYSTP6 = true;
            }
        }
    }

    protected final void initPPYSTP7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PPYSTP7 = false;
            } else {
                PPYSTP7 = true;
            }
        }
    }

    protected final void initPRCRELIG(String s) {
        if (!s.trim().isEmpty()) {
            PRCRELIG = Byte.parseByte(s);
        } else {
            PRCRELIG = Byte.MIN_VALUE;
        }
    }

    protected final void initPROXPERS(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PROXPERS = false;
            } else {
                PROXPERS = true;
            }
        }
    }

    protected final void initPSCHY_F(String s) {
        if (!s.trim().isEmpty()) {
            PSCHY_F = Byte.parseByte(s);
        } else {
            PSCHY_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPSCHY_S(String s) {
        if (!s.trim().isEmpty()) {
            PSCHY_S = Byte.parseByte(s);
        } else {
            PSCHY_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPSCHY_T(String s) {
        if (!s.trim().isEmpty()) {
            PSCHY_T = Byte.parseByte(s);
        } else {
            PSCHY_T = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE1(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE1 = Byte.parseByte(s);
        } else {
            PSTYPE1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE10(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE10 = Byte.parseByte(s);
        } else {
            PSTYPE10 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE11(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE11 = Byte.parseByte(s);
        } else {
            PSTYPE11 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PSTYPE12 = false;
            } else {
                PSTYPE12 = true;
            }
        }
    }

    protected final void initPSTYPE13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PSTYPE13 = false;
            } else {
                PSTYPE13 = true;
            }
        }
    }

    protected final void initPSTYPE14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PSTYPE14 = false;
            } else {
                PSTYPE14 = true;
            }
        }
    }

    protected final void initPSTYPE15(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE15 = Byte.parseByte(s);
        } else {
            PSTYPE15 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE16(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE16 = Byte.parseByte(s);
        } else {
            PSTYPE16 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE17(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PSTYPE17 = false;
            } else {
                PSTYPE17 = true;
            }
        }
    }

    protected final void initPSTYPE18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PSTYPE18 = false;
            } else {
                PSTYPE18 = true;
            }
        }
    }

    protected final void initPSTYPE19(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PSTYPE19 = false;
            } else {
                PSTYPE19 = true;
            }
        }
    }

    protected final void initPSTYPE2(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE2 = Byte.parseByte(s);
        } else {
            PSTYPE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PSTYPE20 = false;
            } else {
                PSTYPE20 = true;
            }
        }
    }

    protected final void initPSTYPE21(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PSTYPE21 = false;
            } else {
                PSTYPE21 = true;
            }
        }
    }

    protected final void initPSTYPE3(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE3 = Byte.parseByte(s);
        } else {
            PSTYPE3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE4(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE4 = Byte.parseByte(s);
        } else {
            PSTYPE4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE5(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE5 = Byte.parseByte(s);
        } else {
            PSTYPE5 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE6(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE6 = Byte.parseByte(s);
        } else {
            PSTYPE6 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                PSTYPE7 = false;
            } else {
                PSTYPE7 = true;
            }
        }
    }

    protected final void initPSTYPE8(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE8 = Byte.parseByte(s);
        } else {
            PSTYPE8 = Byte.MIN_VALUE;
        }
    }

    protected final void initPSTYPE9(String s) {
        if (!s.trim().isEmpty()) {
            PSTYPE9 = Byte.parseByte(s);
        } else {
            PSTYPE9 = Byte.MIN_VALUE;
        }
    }

    protected final void initREGLRPY3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                REGLRPY3 = false;
            } else {
                REGLRPY3 = true;
            }
        }
    }

    protected final void initREGLRPY3_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                REGLRPY3_I = false;
            } else {
                REGLRPY3_I = true;
            }
        }
    }

    protected final void initREGLRPY3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                REGLRPY3_IFLAG = false;
            } else {
                REGLRPY3_IFLAG = true;
            }
        }
    }

    protected final void initREGLRPY4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                REGLRPY4 = false;
            } else {
                REGLRPY4 = true;
            }
        }
    }

    protected final void initREGLRPY4_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                REGLRPY4_I = false;
            } else {
                REGLRPY4_I = true;
            }
        }
    }

    protected final void initREGLRPY4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                REGLRPY4_IFLAG = false;
            } else {
                REGLRPY4_IFLAG = true;
            }
        }
    }

    protected final void initREGLRPY5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                REGLRPY5 = false;
            } else {
                REGLRPY5 = true;
            }
        }
    }

    protected final void initREGLRPY5_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                REGLRPY5_I = false;
            } else {
                REGLRPY5_I = true;
            }
        }
    }

    protected final void initREGLRPY5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                REGLRPY5_IFLAG = false;
            } else {
                REGLRPY5_IFLAG = true;
            }
        }
    }

    protected final void initRELIGE(String s) {
        if (!s.trim().isEmpty()) {
            RELIGE = Byte.parseByte(s);
        } else {
            RELIGE = Byte.MIN_VALUE;
        }
    }

    protected final void initRELIGS(String s) {
        if (!s.trim().isEmpty()) {
            RELIGS = Byte.parseByte(s);
        } else {
            RELIGS = Byte.MIN_VALUE;
        }
    }

    protected final void initRELIGW(String s) {
        if (!s.trim().isEmpty()) {
            RELIGW = Byte.parseByte(s);
        } else {
            RELIGW = Byte.MIN_VALUE;
        }
    }

    protected final void initRF(String s) {
        if (!s.trim().isEmpty()) {
            RF = Byte.parseByte(s);
        } else {
            RF = Byte.MIN_VALUE;
        }
    }

    protected final void initRPCRET1(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                RPCRET1 = false;
            } else {
                RPCRET1 = true;
            }
        }
    }

    protected final void initRPCRET2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                RPCRET2 = false;
            } else {
                RPCRET2 = true;
            }
        }
    }

    protected final void initRPCRET3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                RPCRET3 = false;
            } else {
                RPCRET3 = true;
            }
        }
    }

    protected final void initRPDBCAL_F(String s) {
        if (!s.trim().isEmpty()) {
            RPDBCAL_F = Byte.parseByte(s);
        } else {
            RPDBCAL_F = Byte.MIN_VALUE;
        }
    }

    protected final void initRS(String s) {
        if (!s.trim().isEmpty()) {
            RS = Byte.parseByte(s);
        } else {
            RS = Byte.MIN_VALUE;
        }
    }

    protected final void initSCAC4_I(String s) {
        if (!s.trim().isEmpty()) {
            SCAC4_I = Byte.parseByte(s);
        } else {
            SCAC4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initSCAC5_I(String s) {
        if (!s.trim().isEmpty()) {
            SCAC5_I = Byte.parseByte(s);
        } else {
            SCAC5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initSENO(String s) {
        if (!s.trim().isEmpty()) {
            SENO = Byte.parseByte(s);
        } else {
            SENO = Byte.MIN_VALUE;
        }
    }

    protected final void initSOA1(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            SOA1 = false;
        }
    }

    protected final void initSOA2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            SOA2 = false;
        }
    }

    protected final void initSOC2000(String s) {
        if (!s.trim().isEmpty()) {
            SOC2000 = Byte.parseByte(s);
        } else {
            SOC2000 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPASAF_IORIG(String s) {
        if (!s.trim().isEmpty()) {
            SPASAF_IORIG = Double.parseDouble(s);
        } else {
            SPASAF_IORIG = Double.NaN;
        }
    }

    protected final void initSPECAMT10(String s) {
        if (!s.trim().isEmpty()) {
            SPECAMT10 = Double.parseDouble(s);
        } else {
            SPECAMT10 = Double.NaN;
        }
    }

    protected final void initSPECIAL01(String s) {
        if (!s.trim().isEmpty()) {
            SPECIAL01 = Byte.parseByte(s);
        } else {
            SPECIAL01 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECIAL02(String s) {
        if (!s.trim().isEmpty()) {
            SPECIAL02 = Byte.parseByte(s);
        } else {
            SPECIAL02 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECIAL03(String s) {
        if (!s.trim().isEmpty()) {
            SPECIAL03 = Byte.parseByte(s);
        } else {
            SPECIAL03 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECIAL04(String s) {
        if (!s.trim().isEmpty()) {
            SPECIAL04 = Byte.parseByte(s);
        } else {
            SPECIAL04 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECIAL05(String s) {
        if (!s.trim().isEmpty()) {
            SPECIAL05 = Byte.parseByte(s);
        } else {
            SPECIAL05 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECIAL06(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SPECIAL06 = false;
            } else {
                SPECIAL06 = true;
            }
        }
    }

    protected final void initSPECIAL07(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SPECIAL07 = false;
            } else {
                SPECIAL07 = true;
            }
        }
    }

    protected final void initSPECIAL08(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SPECIAL08 = false;
            } else {
                SPECIAL08 = true;
            }
        }
    }

    protected final void initSPECIAL09(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SPECIAL09 = false;
            } else {
                SPECIAL09 = true;
            }
        }
    }

    protected final void initSPECIAL10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                SPECIAL10 = false;
            } else {
                SPECIAL10 = true;
            }
        }
    }

    protected final void initSPECINCL1(String s) {
        if (!s.trim().isEmpty()) {
            SPECINCL1 = Byte.parseByte(s);
        } else {
            SPECINCL1 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECINCL10(String s) {
        if (!s.trim().isEmpty()) {
            SPECINCL10 = Byte.parseByte(s);
        } else {
            SPECINCL10 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECINCL2(String s) {
        if (!s.trim().isEmpty()) {
            SPECINCL2 = Byte.parseByte(s);
        } else {
            SPECINCL2 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECINCL3(String s) {
        if (!s.trim().isEmpty()) {
            SPECINCL3 = Byte.parseByte(s);
        } else {
            SPECINCL3 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECINCL4(String s) {
        if (!s.trim().isEmpty()) {
            SPECINCL4 = Byte.parseByte(s);
        } else {
            SPECINCL4 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECINCL5(String s) {
        if (!s.trim().isEmpty()) {
            SPECINCL5 = Byte.parseByte(s);
        } else {
            SPECINCL5 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECINCL6(String s) {
        if (!s.trim().isEmpty()) {
            SPECINCL6 = Byte.parseByte(s);
        } else {
            SPECINCL6 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECINCL7(String s) {
        if (!s.trim().isEmpty()) {
            SPECINCL7 = Byte.parseByte(s);
        } else {
            SPECINCL7 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECINCL8(String s) {
        if (!s.trim().isEmpty()) {
            SPECINCL8 = Byte.parseByte(s);
        } else {
            SPECINCL8 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECINCL9(String s) {
        if (!s.trim().isEmpty()) {
            SPECINCL9 = Byte.parseByte(s);
        } else {
            SPECINCL9 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECPD1(String s) {
        if (!s.trim().isEmpty()) {
            SPECPD1 = Byte.parseByte(s);
        } else {
            SPECPD1 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECPD10(String s) {
        if (!s.trim().isEmpty()) {
            SPECPD10 = Byte.parseByte(s);
        } else {
            SPECPD10 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECPD2(String s) {
        if (!s.trim().isEmpty()) {
            SPECPD2 = Short.parseShort(s);
        } else {
            SPECPD2 = Short.MIN_VALUE;
        }
    }

    protected final void initSPECPD3(String s) {
        if (!s.trim().isEmpty()) {
            SPECPD3 = Byte.parseByte(s);
        } else {
            SPECPD3 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECPD4(String s) {
        if (!s.trim().isEmpty()) {
            SPECPD4 = Byte.parseByte(s);
        } else {
            SPECPD4 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECPD5(String s) {
        if (!s.trim().isEmpty()) {
            SPECPD5 = Byte.parseByte(s);
        } else {
            SPECPD5 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECPD6(String s) {
        if (!s.trim().isEmpty()) {
            SPECPD6 = Byte.parseByte(s);
        } else {
            SPECPD6 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECPD7(String s) {
        if (!s.trim().isEmpty()) {
            SPECPD7 = Byte.parseByte(s);
        } else {
            SPECPD7 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECPD8(String s) {
        if (!s.trim().isEmpty()) {
            SPECPD8 = Byte.parseByte(s);
        } else {
            SPECPD8 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECPD9(String s) {
        if (!s.trim().isEmpty()) {
            SPECPD9 = Byte.parseByte(s);
        } else {
            SPECPD9 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECWHEN1(String s) {
        if (!s.trim().isEmpty()) {
            SPECWHEN1 = Byte.parseByte(s);
        } else {
            SPECWHEN1 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECWHEN10(String s) {
        if (!s.trim().isEmpty()) {
            SPECWHEN10 = Byte.parseByte(s);
        } else {
            SPECWHEN10 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECWHEN2(String s) {
        if (!s.trim().isEmpty()) {
            SPECWHEN2 = Byte.parseByte(s);
        } else {
            SPECWHEN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECWHEN3(String s) {
        if (!s.trim().isEmpty()) {
            SPECWHEN3 = Byte.parseByte(s);
        } else {
            SPECWHEN3 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECWHEN4(String s) {
        if (!s.trim().isEmpty()) {
            SPECWHEN4 = Byte.parseByte(s);
        } else {
            SPECWHEN4 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECWHEN5(String s) {
        if (!s.trim().isEmpty()) {
            SPECWHEN5 = Byte.parseByte(s);
        } else {
            SPECWHEN5 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECWHEN6(String s) {
        if (!s.trim().isEmpty()) {
            SPECWHEN6 = Byte.parseByte(s);
        } else {
            SPECWHEN6 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECWHEN7(String s) {
        if (!s.trim().isEmpty()) {
            SPECWHEN7 = Byte.parseByte(s);
        } else {
            SPECWHEN7 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECWHEN8(String s) {
        if (!s.trim().isEmpty()) {
            SPECWHEN8 = Byte.parseByte(s);
        } else {
            SPECWHEN8 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPECWHEN9(String s) {
        if (!s.trim().isEmpty()) {
            SPECWHEN9 = Byte.parseByte(s);
        } else {
            SPECWHEN9 = Byte.MIN_VALUE;
        }
    }

    protected final void initSPENDM(String s) {
        if (!s.trim().isEmpty()) {
            SPENDM = Byte.parseByte(s);
        } else {
            SPENDM = Byte.MIN_VALUE;
        }
    }

    protected final void initSTATSWARD(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            STATSWARD = false;
        }
    }

    protected final void initSTATUS(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                STATUS = false;
            } else {
                STATUS = true;
            }
        }
    }

    protected final void initTACC3(String s) {
        if (!s.trim().isEmpty()) {
            TACC3 = Byte.parseByte(s);
        } else {
            TACC3 = Byte.MIN_VALUE;
        }
    }

    protected final void initTADDVB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TADDVB3 = false;
            } else {
                TADDVB3 = true;
            }
        }
    }

    protected final void initTADDVL(String s) {
        if (!s.trim().isEmpty()) {
            TADDVL = Integer.parseInt(s);
        } else {
            TADDVL = Integer.MIN_VALUE;
        }
    }

    protected final void initTADDVL3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TADDVL3 = false;
            } else {
                TADDVL3 = true;
            }
        }
    }

    protected final void initTBCAP3(String s) {
        if (!s.trim().isEmpty()) {
            TBCAP3 = Byte.parseByte(s);
        } else {
            TBCAP3 = Byte.MIN_VALUE;
        }
    }

    protected final void initTBCAPY3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBCAPY3 = false;
            } else {
                TBCAPY3 = true;
            }
        }
    }

    protected final void initTBCKNO3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBCKNO3 = false;
            } else {
                TBCKNO3 = true;
            }
        }
    }

    protected final void initTBEN13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN13 = false;
            } else {
                TBEN13 = true;
            }
        }
    }

    protected final void initTBEN14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN14 = false;
            } else {
                TBEN14 = true;
            }
        }
    }

    protected final void initTBEN15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN15 = false;
            } else {
                TBEN15 = true;
            }
        }
    }

    protected final void initTBEN16(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN16 = false;
            } else {
                TBEN16 = true;
            }
        }
    }

    protected final void initTBEN17(String s) {
        if (!s.trim().isEmpty()) {
            TBEN17 = Byte.parseByte(s);
        } else {
            TBEN17 = Byte.MIN_VALUE;
        }
    }

    protected final void initTBEN18(String s) {
        if (!s.trim().isEmpty()) {
            TBEN18 = Byte.parseByte(s);
        } else {
            TBEN18 = Byte.MIN_VALUE;
        }
    }

    protected final void initTBEN19(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN19 = false;
            } else {
                TBEN19 = true;
            }
        }
    }

    protected final void initTBEN20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN20 = false;
            } else {
                TBEN20 = true;
            }
        }
    }

    protected final void initTBEN21(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN21 = false;
            } else {
                TBEN21 = true;
            }
        }
    }

    protected final void initTBEN22(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN22 = false;
            } else {
                TBEN22 = true;
            }
        }
    }

    protected final void initTBEN23(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN23 = false;
            } else {
                TBEN23 = true;
            }
        }
    }

    protected final void initTBEN24(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN24 = false;
            } else {
                TBEN24 = true;
            }
        }
    }

    protected final void initTBEN6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN6 = false;
            } else {
                TBEN6 = true;
            }
        }
    }

    protected final void initTBEN7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN7 = false;
            } else {
                TBEN7 = true;
            }
        }
    }

    protected final void initTBEN8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TBEN8 = false;
            } else {
                TBEN8 = true;
            }
        }
    }

    protected final void initTBINC3(String s) {
        if (!s.trim().isEmpty()) {
            TBINC3 = Byte.parseByte(s);
        } else {
            TBINC3 = Byte.MIN_VALUE;
        }
    }

    protected final void initTBREC3(String s) {
        if (!s.trim().isEmpty()) {
            TBREC3 = Short.parseShort(s);
        } else {
            TBREC3 = Short.MIN_VALUE;
        }
    }

    protected final void initTBRECB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -8) {
                TBRECB3 = false;
            } else {
                TBRECB3 = true;
            }
        }
    }

    protected final void initTBVALB3(String s) {
        if (!s.trim().isEmpty()) {
            TBVALB3 = Byte.parseByte(s);
        } else {
            TBVALB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initTDUP3(String s) {
        if (!s.trim().isEmpty()) {
            TDUP3 = Byte.parseByte(s);
        } else {
            TDUP3 = Byte.MIN_VALUE;
        }
    }

    protected final void initTDUPA3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TDUPA3 = false;
            } else {
                TDUPA3 = true;
            }
        }
    }

    protected final void initTJNT5(String s) {
        if (!s.trim().isEmpty()) {
            TJNT5 = Byte.parseByte(s);
        } else {
            TJNT5 = Byte.MIN_VALUE;
        }
    }

    protected final void initTJNT6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TJNT6 = false;
            } else {
                TJNT6 = true;
            }
        }
    }

    protected final void initTRAINEE(String s) {
        if (!s.trim().isEmpty()) {
            TRAINEE = Byte.parseByte(s);
        } else {
            TRAINEE = Byte.MIN_VALUE;
        }
    }

    protected final void initTSNO3(String s) {
        if (!s.trim().isEmpty()) {
            TSNO3 = Byte.parseByte(s);
        } else {
            TSNO3 = Byte.MIN_VALUE;
        }
    }

    protected final void initTVAL3(String s) {
        if (!s.trim().isEmpty()) {
            TVAL3 = Integer.parseInt(s);
        } else {
            TVAL3 = Integer.MIN_VALUE;
        }
    }

    protected final void initTVALB3(String s) {
        if (!s.trim().isEmpty()) {
            TVALB3 = Byte.parseByte(s);
        } else {
            TVALB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initTWHO10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO10 = false;
            } else {
                TWHO10 = true;
            }
        }
    }

    protected final void initTWHO11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO11 = false;
            } else {
                TWHO11 = true;
            }
        }
    }

    protected final void initTWHO12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO12 = false;
            } else {
                TWHO12 = true;
            }
        }
    }

    protected final void initTWHO13(String s) {
        if (!s.trim().isEmpty()) {
            TWHO13 = Byte.parseByte(s);
        } else {
            TWHO13 = Byte.MIN_VALUE;
        }
    }

    protected final void initTWHO14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO14 = false;
            } else {
                TWHO14 = true;
            }
        }
    }

    protected final void initTWHO15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO15 = false;
            } else {
                TWHO15 = true;
            }
        }
    }

    protected final void initTWHO16(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO16 = false;
            } else {
                TWHO16 = true;
            }
        }
    }

    protected final void initTWHO17(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO17 = false;
            } else {
                TWHO17 = true;
            }
        }
    }

    protected final void initTWHO18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO18 = false;
            } else {
                TWHO18 = true;
            }
        }
    }

    protected final void initTWHO3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO3 = false;
            } else {
                TWHO3 = true;
            }
        }
    }

    protected final void initTWHO4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO4 = false;
            } else {
                TWHO4 = true;
            }
        }
    }

    protected final void initTWHO5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO5 = false;
            } else {
                TWHO5 = true;
            }
        }
    }

    protected final void initTWHO6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO6 = false;
            } else {
                TWHO6 = true;
            }
        }
    }

    protected final void initTWHO9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                TWHO9 = false;
            } else {
                TWHO9 = true;
            }
        }
    }

    protected final void initULAND10(String s) {
        if (!s.trim().isEmpty()) {
            ULAND10 = Byte.parseByte(s);
        } else {
            ULAND10 = Byte.MIN_VALUE;
        }
    }

    protected final void initULAND11(String s) {
        if (!s.trim().isEmpty()) {
            ULAND11 = Byte.parseByte(s);
        } else {
            ULAND11 = Byte.MIN_VALUE;
        }
    }

    protected final void initULAND12(String s) {
        if (!s.trim().isEmpty()) {
            ULAND12 = Byte.parseByte(s);
        } else {
            ULAND12 = Byte.MIN_VALUE;
        }
    }

    protected final void initULAND16(String s) {
        if (!s.trim().isEmpty()) {
            ULAND16 = Byte.parseByte(s);
        } else {
            ULAND16 = Byte.MIN_VALUE;
        }
    }

    protected final void initULAND17(String s) {
        if (!s.trim().isEmpty()) {
            ULAND17 = Byte.parseByte(s);
        } else {
            ULAND17 = Byte.MIN_VALUE;
        }
    }

    protected final void initULAND18(String s) {
        if (!s.trim().isEmpty()) {
            ULAND18 = Byte.parseByte(s);
        } else {
            ULAND18 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPROP1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                UPROP1_IFLAG = false;
            } else {
                UPROP1_IFLAG = true;
            }
        }
    }

    protected final void initUPROP2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                UPROP2_IFLAG = false;
            } else {
                UPROP2_IFLAG = true;
            }
        }
    }

    protected final void initUPROP3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                UPROP3_IFLAG = false;
            } else {
                UPROP3_IFLAG = true;
            }
        }
    }

    protected final void initUPROP4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                UPROP4_IFLAG = false;
            } else {
                UPROP4_IFLAG = true;
            }
        }
    }

    protected final void initUPROP5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                UPROP5_IFLAG = false;
            } else {
                UPROP5_IFLAG = true;
            }
        }
    }

    protected final void initUPROP6_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                UPROP6_IFLAG = false;
            } else {
                UPROP6_IFLAG = true;
            }
        }
    }

    protected final void initUPRSH13(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH13 = Byte.parseByte(s);
        } else {
            UPRSH13 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH14(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH14 = Byte.parseByte(s);
        } else {
            UPRSH14 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH15(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH15 = Byte.parseByte(s);
        } else {
            UPRSH15 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH16(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH16 = Byte.parseByte(s);
        } else {
            UPRSH16 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH17(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH17 = Byte.parseByte(s);
        } else {
            UPRSH17 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                UPRSH18 = false;
            } else {
                UPRSH18 = true;
            }
        }
    }

    protected final void initUPRSH19(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH19 = Byte.parseByte(s);
        } else {
            UPRSH19 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH20(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                UPRSH20 = false;
            } else {
                UPRSH20 = true;
            }
        }
    }

    protected final void initUPRSH21(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH21 = Byte.parseByte(s);
        } else {
            UPRSH21 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH22(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                UPRSH22 = false;
            } else {
                UPRSH22 = true;
            }
        }
    }

    protected final void initUPRSH23(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH23 = Byte.parseByte(s);
        } else {
            UPRSH23 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH24(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                UPRSH24 = false;
            } else {
                UPRSH24 = true;
            }
        }
    }

    protected final void initUPRSH25(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH25 = Byte.parseByte(s);
        } else {
            UPRSH25 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH26(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH26 = Byte.parseByte(s);
        } else {
            UPRSH26 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH27(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH27 = Byte.parseByte(s);
        } else {
            UPRSH27 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH28(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                UPRSH28 = false;
            } else {
                UPRSH28 = true;
            }
        }
    }

    protected final void initUPRSH29(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH29 = Byte.parseByte(s);
        } else {
            UPRSH29 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH30(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                UPRSH30 = false;
            } else {
                UPRSH30 = true;
            }
        }
    }

    protected final void initUPRSH31(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH31 = Byte.parseByte(s);
        } else {
            UPRSH31 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH32(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                UPRSH32 = false;
            } else {
                UPRSH32 = true;
            }
        }
    }

    protected final void initUPRSH33(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH33 = Byte.parseByte(s);
        } else {
            UPRSH33 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH34(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                UPRSH34 = false;
            } else {
                UPRSH34 = true;
            }
        }
    }

    protected final void initUPRSH35(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH35 = Byte.parseByte(s);
        } else {
            UPRSH35 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH36(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                UPRSH36 = false;
            } else {
                UPRSH36 = true;
            }
        }
    }

    protected final void initUPRSH6(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH6 = Byte.parseByte(s);
        } else {
            UPRSH6 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRTYP(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                UPRTYP = false;
            } else {
                UPRTYP = true;
            }
        }
    }

    protected final void initW1W3WGT(String s) {
        if (!s.trim().isEmpty()) {
            W1W3WGT = Double.parseDouble(s);
        } else {
            W1W3WGT = Double.NaN;
        }
    }

    protected final void initW2W3WGT(String s) {
        if (!s.trim().isEmpty()) {
            W2W3WGT = Double.parseDouble(s);
        } else {
            W2W3WGT = Double.NaN;
        }
    }

    protected final void initW3XSWGT(String s) {
        if (!s.trim().isEmpty()) {
            W3XSWGT = Double.parseDouble(s);
        } else {
            W3XSWGT = Double.NaN;
        }
    }

    protected final void initWARD98(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            WARD98 = false;
        }
    }

    protected final void initWARDC91(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            WARDC91 = false;
        }
    }

    protected final void initWARDO91(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            WARDO91 = false;
        }
    }

    protected final void initWHOREATT(String s) {
        if (!s.trim().isEmpty()) {
            WHOREATT = Byte.parseByte(s);
        } else {
            WHOREATT = Byte.MIN_VALUE;
        }
    }

    protected final void initWHORECAR(String s) {
        if (!s.trim().isEmpty()) {
            WHORECAR = Byte.parseByte(s);
        } else {
            WHORECAR = Byte.MIN_VALUE;
        }
    }

    protected final void initWHOREMOB(String s) {
        if (!s.trim().isEmpty()) {
            WHOREMOB = Byte.parseByte(s);
        } else {
            WHOREMOB = Byte.MIN_VALUE;
        }
    }

    protected final void initWTCPD(String s) {
        if (!s.trim().isEmpty()) {
            WTCPD = Byte.parseByte(s);
        } else {
            WTCPD = Byte.MIN_VALUE;
        }
    }

    protected final void initXBCON(String s) {
        if (!s.trim().isEmpty()) {
            XBCON = Byte.parseByte(s);
        } else {
            XBCON = Byte.MIN_VALUE;
        }
    }

    protected final void initXBCONREM(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                XBCONREM = false;
            } else {
                XBCONREM = true;
            }
        }
    }

    protected final void initXBCONSC(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                XBCONSC = false;
            } else {
                XBCONSC = true;
            }
        }
    }

    protected final void initXBCRT(String s) {
        if (!s.trim().isEmpty()) {
            XBCRT = Byte.parseByte(s);
        } else {
            XBCRT = Byte.MIN_VALUE;
        }
    }

    protected final void initXBOK(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                XBOK = false;
            } else {
                XBOK = true;
            }
        }
    }

    protected final void initXDCON(String s) {
        if (!s.trim().isEmpty()) {
            XDCON = Byte.parseByte(s);
        } else {
            XDCON = Byte.MIN_VALUE;
        }
    }

    protected final void initXDCONREM(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                XDCONREM = false;
            } else {
                XDCONREM = true;
            }
        }
    }

    protected final void initXDCONSC(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                XDCONSC = false;
            } else {
                XDCONSC = true;
            }
        }
    }

    protected final void initXDOK(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                XDOK = false;
            } else {
                XDOK = true;
            }
        }
    }

    protected final void initXDREF(String s) {
        if (!s.trim().isEmpty()) {
            XDREF = Byte.parseByte(s);
        } else {
            XDREF = Byte.MIN_VALUE;
        }
    }

    protected final void initXICON(String s) {
        if (!s.trim().isEmpty()) {
            XICON = Byte.parseByte(s);
        } else {
            XICON = Byte.MIN_VALUE;
        }
    }

    protected final void initXICONREM(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                XICONREM = false;
            } else {
                XICONREM = true;
            }
        }
    }

    protected final void initXICONSC(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                XICONSC = false;
            } else {
                XICONSC = true;
            }
        }
    }

    public double getACCFRAC() {
        return ACCFRAC;
    }

    public double getAGEASAF1() {
        return AGEASAF1;
    }

    public double getAGMSAF2T() {
        return AGMSAF2T;
    }

    public double getAGMSAFT1() {
        return AGMSAFT1;
    }

    public String getBACCEND1() {
        return BACCEND1;
    }

    public String getBACCEND2() {
        return BACCEND2;
    }

    public String getBACCEND3() {
        return BACCEND3;
    }

    public boolean getBCARRY2() {
        return BCARRY2;
    }

    public byte getBENTYPE01() {
        return BENTYPE01;
    }

    public byte getBENTYPE02() {
        return BENTYPE02;
    }

    public byte getBENTYPE03() {
        return BENTYPE03;
    }

    public byte getBENTYPE04() {
        return BENTYPE04;
    }

    public byte getBENTYPE05() {
        return BENTYPE05;
    }

    public byte getBENTYPE06() {
        return BENTYPE06;
    }

    public boolean getBENTYPE07() {
        return BENTYPE07;
    }

    public boolean getBENTYPE08() {
        return BENTYPE08;
    }

    public boolean getBENTYPE09() {
        return BENTYPE09;
    }

    public boolean getBENTYPE10() {
        return BENTYPE10;
    }

    public boolean getBENTYPE11() {
        return BENTYPE11;
    }

    public boolean getBENTYPE12() {
        return BENTYPE12;
    }

    public byte getBFUND11() {
        return BFUND11;
    }

    public boolean getBFUND12() {
        return BFUND12;
    }

    public boolean getBFUND13() {
        return BFUND13;
    }

    public boolean getBFUND14() {
        return BFUND14;
    }

    public boolean getBFUND15() {
        return BFUND15;
    }

    public boolean getBFUND16() {
        return BFUND16;
    }

    public byte getBFUND18() {
        return BFUND18;
    }

    public boolean getBFUND19() {
        return BFUND19;
    }

    public boolean getBFUND20() {
        return BFUND20;
    }

    public boolean getBFUND21() {
        return BFUND21;
    }

    public boolean getBFUND22() {
        return BFUND22;
    }

    public boolean getBFUND23() {
        return BFUND23;
    }

    public boolean getBFUND24() {
        return BFUND24;
    }

    public byte getBFUND3() {
        return BFUND3;
    }

    public boolean getBFUND4() {
        return BFUND4;
    }

    public boolean getBFUND5() {
        return BFUND5;
    }

    public boolean getBFUND6() {
        return BFUND6;
    }

    public boolean getBFUND7() {
        return BFUND7;
    }

    public boolean getBFUND8() {
        return BFUND8;
    }

    public boolean getBSEPPD09() {
        return BSEPPD09;
    }

    public boolean getBSEPPD10() {
        return BSEPPD10;
    }

    public boolean getBSEPPD11() {
        return BSEPPD11;
    }

    public boolean getBSEPPD12() {
        return BSEPPD12;
    }

    public boolean getBSEPPD13() {
        return BSEPPD13;
    }

    public boolean getBSEPPD14() {
        return BSEPPD14;
    }

    public boolean getBSEPPD15() {
        return BSEPPD15;
    }

    public boolean getBSEPPD16() {
        return BSEPPD16;
    }

    public boolean getBSEPPD17() {
        return BSEPPD17;
    }

    public boolean getBSEPPD18() {
        return BSEPPD18;
    }

    public boolean getBSEPPD19() {
        return BSEPPD19;
    }

    public boolean getBSEPPD20() {
        return BSEPPD20;
    }

    public byte getCAEXTRA() {
        return CAEXTRA;
    }

    public byte getCAOLDER() {
        return CAOLDER;
    }

    public byte getCAOTHER1() {
        return CAOTHER1;
    }

    public boolean getCAOTHER2() {
        return CAOTHER2;
    }

    public boolean getCAOTHER3() {
        return CAOTHER3;
    }

    public boolean getCAOTHER4() {
        return CAOTHER4;
    }

    public boolean getCAOTHER5() {
        return CAOTHER5;
    }

    public byte getCATYPE() {
        return CATYPE;
    }

    public byte getCCAC4_I() {
        return CCAC4_I;
    }

    public byte getCCAC5_I() {
        return CCAC5_I;
    }

    public byte getCOMBPD() {
        return COMBPD;
    }

    public byte getCOMMIT1() {
        return COMMIT1;
    }

    public byte getCOMMIT2() {
        return COMMIT2;
    }

    public byte getCOMMIT3() {
        return COMMIT3;
    }

    public byte getCOMMIT4() {
        return COMMIT4;
    }

    public boolean getCOMMIT5() {
        return COMMIT5;
    }

    public boolean getCOURSE20() {
        return COURSE20;
    }

    public byte getCREDTYPE1() {
        return CREDTYPE1;
    }

    public byte getCREDTYPE2() {
        return CREDTYPE2;
    }

    public byte getCTCPD() {
        return CTCPD;
    }

    public byte getCTOGSEP() {
        return CTOGSEP;
    }

    public boolean getCTPAY() {
        return CTPAY;
    }

    public boolean getCTPAYS() {
        return CTPAYS;
    }

    public boolean getCTPAYW() {
        return CTPAYW;
    }

    public byte getDBURDH() {
        return DBURDH;
    }

    public byte getDBURDW4() {
        return DBURDW4;
    }

    public byte getDBURDW5() {
        return DBURDW5;
    }

    public byte getDBURDW6() {
        return DBURDW6;
    }

    public boolean getDBURDW7() {
        return DBURDW7;
    }

    public byte getDBURD___W3() {
        return DBURD___W3;
    }

    public byte getDC12BEH4() {
        return DC12BEH4;
    }

    public byte getDC12BEH5() {
        return DC12BEH5;
    }

    public short getDC12OWE4() {
        return DC12OWE4;
    }

    public short getDC12OWE5() {
        return DC12OWE5;
    }

    public int getDCAMC4() {
        return DCAMC4;
    }

    public short getDCAMC5() {
        return DCAMC5;
    }

    public short getDCAMD4() {
        return DCAMD4;
    }

    public short getDCAMD5() {
        return DCAMD5;
    }

    public short getDCAMOS4_I() {
        return DCAMOS4_I;
    }

    public short getDCAMOS5_I() {
        return DCAMOS5_I;
    }

    public short getDCAMP4() {
        return DCAMP4;
    }

    public short getDCAMP5() {
        return DCAMP5;
    }

    public byte getDCCOS4() {
        return DCCOS4;
    }

    public byte getDCCOS5() {
        return DCCOS5;
    }

    public byte getDCCSP4() {
        return DCCSP4;
    }

    public byte getDCCSP5() {
        return DCCSP5;
    }

    public byte getDCESB4() {
        return DCESB4;
    }

    public byte getDCESB5() {
        return DCESB5;
    }

    public byte getDCINZ4() {
        return DCINZ4;
    }

    public byte getDCINZ5() {
        return DCINZ5;
    }

    public byte getDCNAM4() {
        return DCNAM4;
    }

    public byte getDCNAM5() {
        return DCNAM5;
    }

    public boolean getDCONM10() {
        return DCONM10;
    }

    public byte getDCONM7() {
        return DCONM7;
    }

    public boolean getDCONM8() {
        return DCONM8;
    }

    public byte getDCONM9() {
        return DCONM9;
    }

    public boolean getDCPER4() {
        return DCPER4;
    }

    public boolean getDCPER5() {
        return DCPER5;
    }

    public byte getDCREC4() {
        return DCREC4;
    }

    public byte getDCREC5() {
        return DCREC5;
    }

    public boolean getDCRSP4() {
        return DCRSP4;
    }

    public boolean getDCRSP5() {
        return DCRSP5;
    }

    public boolean getDHBANY08_I() {
        return DHBANY08_I;
    }

    public boolean getDHBANY08_IFLAG() {
        return DHBANY08_IFLAG;
    }

    public boolean getDHBANY09_I() {
        return DHBANY09_I;
    }

    public boolean getDHBANY09_IFLAG() {
        return DHBANY09_IFLAG;
    }

    public boolean getDHBANY10_I() {
        return DHBANY10_I;
    }

    public boolean getDHBANY10_IFLAG() {
        return DHBANY10_IFLAG;
    }

    public boolean getDHBANY11_I() {
        return DHBANY11_I;
    }

    public boolean getDHBANY11_IFLAG() {
        return DHBANY11_IFLAG;
    }

    public boolean getDHPANY4() {
        return DHPANY4;
    }

    public boolean getDHPANY5() {
        return DHPANY5;
    }

    public boolean getDHPANY6() {
        return DHPANY6;
    }

    public boolean getDHPANY7() {
        return DHPANY7;
    }

    public byte getDHPBEH3() {
        return DHPBEH3;
    }

    public byte getDHPBEH3_I() {
        return DHPBEH3_I;
    }

    public byte getDHPBEH3_IFLAG() {
        return DHPBEH3_IFLAG;
    }

    public byte getDHPBEH4() {
        return DHPBEH4;
    }

    public byte getDHPBEH4_I() {
        return DHPBEH4_I;
    }

    public byte getDHPBEH4_IFLAG() {
        return DHPBEH4_IFLAG;
    }

    public byte getDHPBEH5() {
        return DHPBEH5;
    }

    public byte getDHPBEH5_I() {
        return DHPBEH5_I;
    }

    public boolean getDHPBEH5_IFLAG() {
        return DHPBEH5_IFLAG;
    }

    public byte getDHPEST3() {
        return DHPEST3;
    }

    public byte getDHPEST4() {
        return DHPEST4;
    }

    public boolean getDHPEST5() {
        return DHPEST5;
    }

    public short getDHPINS3() {
        return DHPINS3;
    }

    public short getDHPINS3_I() {
        return DHPINS3_I;
    }

    public byte getDHPINS3_IFLAG() {
        return DHPINS3_IFLAG;
    }

    public short getDHPINS4() {
        return DHPINS4;
    }

    public double getDHPINS4_I() {
        return DHPINS4_I;
    }

    public byte getDHPINS4_IFLAG() {
        return DHPINS4_IFLAG;
    }

    public short getDHPINS5() {
        return DHPINS5;
    }

    public short getDHPINS5_I() {
        return DHPINS5_I;
    }

    public byte getDHPINS5_IFLAG() {
        return DHPINS5_IFLAG;
    }

    public byte getDHPINT3() {
        return DHPINT3;
    }

    public byte getDHPINT4() {
        return DHPINT4;
    }

    public byte getDHPINT5() {
        return DHPINT5;
    }

    public byte getDHPOFT3() {
        return DHPOFT3;
    }

    public byte getDHPOFT3_I() {
        return DHPOFT3_I;
    }

    public byte getDHPOFT3_IFLAG() {
        return DHPOFT3_IFLAG;
    }

    public byte getDHPOFT4() {
        return DHPOFT4;
    }

    public byte getDHPOFT4_I() {
        return DHPOFT4_I;
    }

    public byte getDHPOFT4_IFLAG() {
        return DHPOFT4_IFLAG;
    }

    public byte getDHPOFT5() {
        return DHPOFT5;
    }

    public byte getDHPOFT5_I() {
        return DHPOFT5_I;
    }

    public boolean getDHPOFT5_IFLAG() {
        return DHPOFT5_IFLAG;
    }

    public short getDHPOWE3() {
        return DHPOWE3;
    }

    public short getDHPOWE3_I() {
        return DHPOWE3_I;
    }

    public byte getDHPOWE3_IFLAG() {
        return DHPOWE3_IFLAG;
    }

    public short getDHPOWE4() {
        return DHPOWE4;
    }

    public short getDHPOWE4_I() {
        return DHPOWE4_I;
    }

    public byte getDHPOWE4_IFLAG() {
        return DHPOWE4_IFLAG;
    }

    public short getDHPOWE5() {
        return DHPOWE5;
    }

    public short getDHPOWE5_I() {
        return DHPOWE5_I;
    }

    public boolean getDHPOWE5_IFLAG() {
        return DHPOWE5_IFLAG;
    }

    public byte getDHPWEST3() {
        return DHPWEST3;
    }

    public byte getDHPWEST4() {
        return DHPWEST4;
    }

    public byte getDHPWEST5() {
        return DHPWEST5;
    }

    public byte getDHPWHNM3() {
        return DHPWHNM3;
    }

    public byte getDHPWHNM3_I() {
        return DHPWHNM3_I;
    }

    public byte getDHPWHNM3_IFLAG() {
        return DHPWHNM3_IFLAG;
    }

    public byte getDHPWHNM4() {
        return DHPWHNM4;
    }

    public byte getDHPWHNM4_I() {
        return DHPWHNM4_I;
    }

    public byte getDHPWHNM4_IFLAG() {
        return DHPWHNM4_IFLAG;
    }

    public byte getDHPWHNM5() {
        return DHPWHNM5;
    }

    public byte getDHPWHNM5_I() {
        return DHPWHNM5_I;
    }

    public byte getDHPWHNM5_IFLAG() {
        return DHPWHNM5_IFLAG;
    }

    public short getDHPWHNY3() {
        return DHPWHNY3;
    }

    public short getDHPWHNY3_I() {
        return DHPWHNY3_I;
    }

    public byte getDHPWHNY3_IFLAG() {
        return DHPWHNY3_IFLAG;
    }

    public short getDHPWHNY4() {
        return DHPWHNY4;
    }

    public short getDHPWHNY4_I() {
        return DHPWHNY4_I;
    }

    public byte getDHPWHNY4_IFLAG() {
        return DHPWHNY4_IFLAG;
    }

    public short getDHPWHNY5() {
        return DHPWHNY5;
    }

    public short getDHPWHNY5_I() {
        return DHPWHNY5_I;
    }

    public byte getDHPWHNY5_IFLAG() {
        return DHPWHNY5_IFLAG;
    }

    public byte getDLWHY11() {
        return DLWHY11;
    }

    public boolean getDLWHY12() {
        return DLWHY12;
    }

    public boolean getDLWHY13() {
        return DLWHY13;
    }

    public boolean getDLWHY14() {
        return DLWHY14;
    }

    public byte getDLWHY17() {
        return DLWHY17;
    }

    public boolean getDLWHY18() {
        return DLWHY18;
    }

    public boolean getDLWHY19() {
        return DLWHY19;
    }

    public boolean getDLWHY20() {
        return DLWHY20;
    }

    public boolean getDLWHY21() {
        return DLWHY21;
    }

    public boolean getDLWHY24() {
        return DLWHY24;
    }

    public boolean getDLWHY25() {
        return DLWHY25;
    }

    public boolean getDLWHY26() {
        return DLWHY26;
    }

    public boolean getDLWHY27() {
        return DLWHY27;
    }

    public boolean getDLWHY28() {
        return DLWHY28;
    }

    public boolean getDLWHY31() {
        return DLWHY31;
    }

    public boolean getDLWHY32() {
        return DLWHY32;
    }

    public boolean getDLWHY33() {
        return DLWHY33;
    }

    public boolean getDLWHY34() {
        return DLWHY34;
    }

    public boolean getDLWHY35() {
        return DLWHY35;
    }

    public byte getDMOBEH3() {
        return DMOBEH3;
    }

    public byte getDMOBEH3_I() {
        return DMOBEH3_I;
    }

    public byte getDMOBEH3_IFLAG() {
        return DMOBEH3_IFLAG;
    }

    public byte getDMOBEH4() {
        return DMOBEH4;
    }

    public byte getDMOBEH4_I() {
        return DMOBEH4_I;
    }

    public byte getDMOBEH4_IFLAG() {
        return DMOBEH4_IFLAG;
    }

    public byte getDMOBEH5() {
        return DMOBEH5;
    }

    public byte getDMOBEH5_I() {
        return DMOBEH5_I;
    }

    public byte getDMOBEH5_IFLAG() {
        return DMOBEH5_IFLAG;
    }

    public byte getDMOEST3() {
        return DMOEST3;
    }

    public byte getDMOEST4() {
        return DMOEST4;
    }

    public byte getDMOEST5() {
        return DMOEST5;
    }

    public short getDMOINS3() {
        return DMOINS3;
    }

    public short getDMOINS3_I() {
        return DMOINS3_I;
    }

    public byte getDMOINS3_IFLAG() {
        return DMOINS3_IFLAG;
    }

    public short getDMOINS4() {
        return DMOINS4;
    }

    public byte getDMOINS4_I() {
        return DMOINS4_I;
    }

    public byte getDMOINS4_IFLAG() {
        return DMOINS4_IFLAG;
    }

    public byte getDMOINS5() {
        return DMOINS5;
    }

    public byte getDMOINS5_I() {
        return DMOINS5_I;
    }

    public byte getDMOINS5_IFLAG() {
        return DMOINS5_IFLAG;
    }

    public byte getDMOINT3() {
        return DMOINT3;
    }

    public byte getDMOINT4() {
        return DMOINT4;
    }

    public byte getDMOINT5() {
        return DMOINT5;
    }

    public byte getDMOOFT3() {
        return DMOOFT3;
    }

    public byte getDMOOFT3_I() {
        return DMOOFT3_I;
    }

    public byte getDMOOFT3_IFLAG() {
        return DMOOFT3_IFLAG;
    }

    public byte getDMOOFT4() {
        return DMOOFT4;
    }

    public byte getDMOOFT4_I() {
        return DMOOFT4_I;
    }

    public byte getDMOOFT4_IFLAG() {
        return DMOOFT4_IFLAG;
    }

    public byte getDMOOFT5() {
        return DMOOFT5;
    }

    public boolean getDMOOFT5_I() {
        return DMOOFT5_I;
    }

    public byte getDMOOFT5_IFLAG() {
        return DMOOFT5_IFLAG;
    }

    public short getDMOOWE3() {
        return DMOOWE3;
    }

    public short getDMOOWE3_I() {
        return DMOOWE3_I;
    }

    public byte getDMOOWE3_IFLAG() {
        return DMOOWE3_IFLAG;
    }

    public short getDMOOWE4() {
        return DMOOWE4;
    }

    public short getDMOOWE4_I() {
        return DMOOWE4_I;
    }

    public byte getDMOOWE4_IFLAG() {
        return DMOOWE4_IFLAG;
    }

    public short getDMOOWE5() {
        return DMOOWE5;
    }

    public short getDMOOWE5_I() {
        return DMOOWE5_I;
    }

    public boolean getDMOOWE5_IFLAG() {
        return DMOOWE5_IFLAG;
    }

    public byte getDMOWEST3() {
        return DMOWEST3;
    }

    public byte getDMOWEST4() {
        return DMOWEST4;
    }

    public byte getDMOWEST5() {
        return DMOWEST5;
    }

    public byte getDMOWHNM3() {
        return DMOWHNM3;
    }

    public byte getDMOWHNM3_I() {
        return DMOWHNM3_I;
    }

    public byte getDMOWHNM3_IFLAG() {
        return DMOWHNM3_IFLAG;
    }

    public byte getDMOWHNM4() {
        return DMOWHNM4;
    }

    public byte getDMOWHNM4_I() {
        return DMOWHNM4_I;
    }

    public byte getDMOWHNM4_IFLAG() {
        return DMOWHNM4_IFLAG;
    }

    public byte getDMOWHNM5() {
        return DMOWHNM5;
    }

    public byte getDMOWHNM5_I() {
        return DMOWHNM5_I;
    }

    public byte getDMOWHNM5_IFLAG() {
        return DMOWHNM5_IFLAG;
    }

    public short getDMOWHNY3() {
        return DMOWHNY3;
    }

    public short getDMOWHNY3_I() {
        return DMOWHNY3_I;
    }

    public byte getDMOWHNY3_IFLAG() {
        return DMOWHNY3_IFLAG;
    }

    public short getDMOWHNY4() {
        return DMOWHNY4;
    }

    public short getDMOWHNY4_I() {
        return DMOWHNY4_I;
    }

    public byte getDMOWHNY4_IFLAG() {
        return DMOWHNY4_IFLAG;
    }

    public short getDMOWHNY5() {
        return DMOWHNY5;
    }

    public short getDMOWHNY5_I() {
        return DMOWHNY5_I;
    }

    public byte getDMOWHNY5_IFLAG() {
        return DMOWHNY5_IFLAG;
    }

    public byte getDS12BEH4() {
        return DS12BEH4;
    }

    public byte getDS12BEH5() {
        return DS12BEH5;
    }

    public boolean getDS12OWE4() {
        return DS12OWE4;
    }

    public boolean getDS12OWE5() {
        return DS12OWE5;
    }

    public short getDSAMC4() {
        return DSAMC4;
    }

    public short getDSAMC5() {
        return DSAMC5;
    }

    public short getDSAMD4() {
        return DSAMD4;
    }

    public byte getDSAMD5() {
        return DSAMD5;
    }

    public short getDSAMOS4_I() {
        return DSAMOS4_I;
    }

    public short getDSAMOS5_I() {
        return DSAMOS5_I;
    }

    public short getDSAMP4() {
        return DSAMP4;
    }

    public short getDSAMP5() {
        return DSAMP5;
    }

    public byte getDSCOS4() {
        return DSCOS4;
    }

    public byte getDSCOS5() {
        return DSCOS5;
    }

    public byte getDSCSP4() {
        return DSCSP4;
    }

    public byte getDSCSP5() {
        return DSCSP5;
    }

    public byte getDSESB4() {
        return DSESB4;
    }

    public boolean getDSESB5() {
        return DSESB5;
    }

    public boolean getDSLEST5_IFLAG() {
        return DSLEST5_IFLAG;
    }

    public byte getDSNAM4() {
        return DSNAM4;
    }

    public byte getDSNAM5() {
        return DSNAM5;
    }

    public byte getDSNUM() {
        return DSNUM;
    }

    public boolean getDSONM10() {
        return DSONM10;
    }

    public boolean getDSONM7() {
        return DSONM7;
    }

    public boolean getDSONM8() {
        return DSONM8;
    }

    public boolean getDSONM9() {
        return DSONM9;
    }

    public boolean getDSPER4() {
        return DSPER4;
    }

    public boolean getDSPER5() {
        return DSPER5;
    }

    public boolean getDSREC4() {
        return DSREC4;
    }

    public boolean getDSREC5() {
        return DSREC5;
    }

    public boolean getDSRSP1() {
        return DSRSP1;
    }

    public byte getDSRSP2() {
        return DSRSP2;
    }

    public boolean getDSRSP3() {
        return DSRSP3;
    }

    public boolean getDSRSP4() {
        return DSRSP4;
    }

    public boolean getDSRSP5() {
        return DSRSP5;
    }

    public int getDTLOWE1() {
        return DTLOWE1;
    }

    public int getDTLOWE1_I() {
        return DTLOWE1_I;
    }

    public boolean getDTLOWE1_IFLAG() {
        return DTLOWE1_IFLAG;
    }

    public short getDTLOWE2() {
        return DTLOWE2;
    }

    public short getDTLOWE2_I() {
        return DTLOWE2_I;
    }

    public byte getDTLOWE2_IFLAG() {
        return DTLOWE2_IFLAG;
    }

    public short getDTLOWE3() {
        return DTLOWE3;
    }

    public short getDTLOWE3_I() {
        return DTLOWE3_I;
    }

    public byte getDTLOWE3_IFLAG() {
        return DTLOWE3_IFLAG;
    }

    public boolean getDTLOWE4_I() {
        return DTLOWE4_I;
    }

    public boolean getDTLOWE4_IFLAG() {
        return DTLOWE4_IFLAG;
    }

    public boolean getDTLOWE5_I() {
        return DTLOWE5_I;
    }

    public boolean getDTLOWE5_IFLAG() {
        return DTLOWE5_IFLAG;
    }

    public byte getDTLOWEB1() {
        return DTLOWEB1;
    }

    public byte getDTLOWEB2() {
        return DTLOWEB2;
    }

    public boolean getDTLOWEB3() {
        return DTLOWEB3;
    }

    public byte getDTLTYPE1() {
        return DTLTYPE1;
    }

    public byte getDTLTYPE1_I() {
        return DTLTYPE1_I;
    }

    public boolean getDTLTYPE1_IFLAG() {
        return DTLTYPE1_IFLAG;
    }

    public byte getDTLTYPE2() {
        return DTLTYPE2;
    }

    public byte getDTLTYPE2_I() {
        return DTLTYPE2_I;
    }

    public byte getDTLTYPE2_IFLAG() {
        return DTLTYPE2_IFLAG;
    }

    public byte getDTLTYPE3() {
        return DTLTYPE3;
    }

    public byte getDTLTYPE3_I() {
        return DTLTYPE3_I;
    }

    public byte getDTLTYPE3_IFLAG() {
        return DTLTYPE3_IFLAG;
    }

    public boolean getDTLTYPE4_I() {
        return DTLTYPE4_I;
    }

    public boolean getDTLTYPE4_IFLAG() {
        return DTLTYPE4_IFLAG;
    }

    public boolean getDTLTYPE5_I() {
        return DTLTYPE5_I;
    }

    public boolean getDTLTYPE5_IFLAG() {
        return DTLTYPE5_IFLAG;
    }

    public short getDTTOWE1() {
        return DTTOWE1;
    }

    public short getDTTOWE2() {
        return DTTOWE2;
    }

    public boolean getDTTOWE3() {
        return DTTOWE3;
    }

    public byte getDTTOWEB1() {
        return DTTOWEB1;
    }

    public boolean getDTTOWEB10() {
        return DTTOWEB10;
    }

    public boolean getDTTOWEB11() {
        return DTTOWEB11;
    }

    public boolean getDTTOWEB12() {
        return DTTOWEB12;
    }

    public boolean getDTTOWEB13() {
        return DTTOWEB13;
    }

    public boolean getDTTOWEB14() {
        return DTTOWEB14;
    }

    public boolean getDTTOWEB15() {
        return DTTOWEB15;
    }

    public boolean getDTTOWEB2() {
        return DTTOWEB2;
    }

    public boolean getDTTOWEB3() {
        return DTTOWEB3;
    }

    public boolean getDTTOWEB4() {
        return DTTOWEB4;
    }

    public boolean getDTTOWEB5() {
        return DTTOWEB5;
    }

    public boolean getDTTOWEB6() {
        return DTTOWEB6;
    }

    public boolean getDTTOWEB7() {
        return DTTOWEB7;
    }

    public boolean getDTTOWEB8() {
        return DTTOWEB8;
    }

    public boolean getDTTOWEB9() {
        return DTTOWEB9;
    }

    public byte getDVAGE18() {
        return DVAGE18;
    }

    public byte getDVAGEW3BAND() {
        return DVAGEW3BAND;
    }

    public byte getDVBENU1() {
        return DVBENU1;
    }

    public int getDVCOINV() {
        return DVCOINV;
    }

    public short getDVCTCANNUAL() {
        return DVCTCANNUAL;
    }

    public short getDVDHPOWE3() {
        return DVDHPOWE3;
    }

    public short getDVDHPOWE4() {
        return DVDHPOWE4;
    }

    public short getDVDHPOWE5() {
        return DVDHPOWE5;
    }

    public short getDVDLOWE5() {
        return DVDLOWE5;
    }

    public short getDVDMOOWE3() {
        return DVDMOOWE3;
    }

    public short getDVDMOOWE4() {
        return DVDMOOWE4;
    }

    public short getDVDMOOWE5() {
        return DVDMOOWE5;
    }

    public int getDVGRSPAY_I() {
        return DVGRSPAY_I;
    }

    public boolean getDVGRSPAY_IFLAG() {
        return DVGRSPAY_IFLAG;
    }

    public boolean getDVHASBOND() {
        return DVHASBOND;
    }

    public byte getDVHASCC() {
        return DVHASCC;
    }

    public boolean getDVHASDBR_ORIG() {
        return DVHASDBR_ORIG;
    }

    public boolean getDVHASEMPSH() {
        return DVHASEMPSH;
    }

    public boolean getDVHASGILT() {
        return DVHASGILT;
    }

    public boolean getDVHASISA() {
        return DVHASISA;
    }

    public boolean getDVHASLINS() {
        return DVHASLINS;
    }

    public boolean getDVHASNHP() {
        return DVHASNHP;
    }

    public boolean getDVHASNOFA() {
        return DVHASNOFA;
    }

    public boolean getDVHASNSP() {
        return DVHASNSP;
    }

    public boolean getDVHASOINV() {
        return DVHASOINV;
    }

    public boolean getDVHASOTHSH() {
        return DVHASOTHSH;
    }

    public boolean getDVHASSAVDEP() {
        return DVHASSAVDEP;
    }

    public byte getDVHASSC() {
        return DVHASSC;
    }

    public byte getDVHASSHSAC() {
        return DVHASSHSAC;
    }

    public boolean getDVHASSL() {
        return DVHASSL;
    }

    public boolean getDVHASUTRUST() {
        return DVHASUTRUST;
    }

    public int getDVNETPAY_I() {
        return DVNETPAY_I;
    }

    public boolean getDVNETPAY_IFLAG() {
        return DVNETPAY_IFLAG;
    }

    public short getDVNWHP_SUM() {
        return DVNWHP_SUM;
    }

    public short getDVOIGGTANNUAL() {
        return DVOIGGTANNUAL;
    }

    public int getDVOIGOEANNUAL_I() {
        return DVOIGOEANNUAL_I;
    }

    public int getDVOIGOSANNUAL_I() {
        return DVOIGOSANNUAL_I;
    }

    public int getDVOIGPPANNUAL_I() {
        return DVOIGPPANNUAL_I;
    }

    public short getDVOIGRRANNUAL() {
        return DVOIGRRANNUAL;
    }

    public byte getDVPUBLPRIV() {
        return DVPUBLPRIV;
    }

    public int getDVRENTAMTANNUAL() {
        return DVRENTAMTANNUAL;
    }

    public byte getDVSAME_I() {
        return DVSAME_I;
    }

    public boolean getDVSAME_IFLAG() {
        return DVSAME_IFLAG;
    }

    public boolean getDVSEPANNUAL09() {
        return DVSEPANNUAL09;
    }

    public boolean getDVSEPANNUAL10() {
        return DVSEPANNUAL10;
    }

    public boolean getDVSEPANNUAL11() {
        return DVSEPANNUAL11;
    }

    public boolean getDVSEPANNUAL12() {
        return DVSEPANNUAL12;
    }

    public boolean getDVSEPANNUAL13() {
        return DVSEPANNUAL13;
    }

    public boolean getDVSEPANNUAL14() {
        return DVSEPANNUAL14;
    }

    public boolean getDVSEPANNUAL15() {
        return DVSEPANNUAL15;
    }

    public boolean getDVSEPANNUAL16() {
        return DVSEPANNUAL16;
    }

    public boolean getDVSEPANNUAL17() {
        return DVSEPANNUAL17;
    }

    public boolean getDVSEPANNUAL18() {
        return DVSEPANNUAL18;
    }

    public boolean getDVSEPANNUAL19() {
        return DVSEPANNUAL19;
    }

    public boolean getDVSEPANNUAL20() {
        return DVSEPANNUAL20;
    }

    public double getDVSHODVAL() {
        return DVSHODVAL;
    }

    public double getDVSPECANNUAL01() {
        return DVSPECANNUAL01;
    }

    public double getDVSPECANNUAL02() {
        return DVSPECANNUAL02;
    }

    public double getDVSPECANNUAL03() {
        return DVSPECANNUAL03;
    }

    public double getDVSPECANNUAL04() {
        return DVSPECANNUAL04;
    }

    public short getDVSPECANNUAL05() {
        return DVSPECANNUAL05;
    }

    public short getDVSPECANNUAL06() {
        return DVSPECANNUAL06;
    }

    public short getDVSPECANNUAL07() {
        return DVSPECANNUAL07;
    }

    public short getDVSPECANNUAL08() {
        return DVSPECANNUAL08;
    }

    public short getDVSPECANNUAL09() {
        return DVSPECANNUAL09;
    }

    public short getDVSPECANNUAL10() {
        return DVSPECANNUAL10;
    }

    public boolean getDVSTAT() {
        return DVSTAT;
    }

    public short getDVTOGTCANNUAL() {
        return DVTOGTCANNUAL;
    }

    public double getDVTOTALLBENANNUAL() {
        return DVTOTALLBENANNUAL;
    }

    public double getDVTOTBENANNUAL() {
        return DVTOTBENANNUAL;
    }

    public double getDVTOTTAXANNUAL() {
        return DVTOTTAXANNUAL;
    }

    public byte getDVWAVE() {
        return DVWAVE;
    }

    public double getDVWTCANNUAL() {
        return DVWTCANNUAL;
    }

    public byte getECACT() {
        return ECACT;
    }

    public boolean getEDAGE() {
        return EDAGE;
    }

    public boolean getEMPSTAT1() {
        return EMPSTAT1;
    }

    public byte getEMPSTAT2() {
        return EMPSTAT2;
    }

    public boolean getETYPE() {
        return ETYPE;
    }

    public byte getFINVTY01_IFLAG() {
        return FINVTY01_IFLAG;
    }

    public byte getFINVTY02_IFLAG() {
        return FINVTY02_IFLAG;
    }

    public byte getFINVTY03_IFLAG() {
        return FINVTY03_IFLAG;
    }

    public byte getFINVTY04_IFLAG() {
        return FINVTY04_IFLAG;
    }

    public byte getFINVTY05_IFLAG() {
        return FINVTY05_IFLAG;
    }

    public byte getFINVTY06_IFLAG() {
        return FINVTY06_IFLAG;
    }

    public byte getFINVTY07_IFLAG() {
        return FINVTY07_IFLAG;
    }

    public byte getFINVTY08_IFLAG() {
        return FINVTY08_IFLAG;
    }

    public byte getFINVTY09_IFLAG() {
        return FINVTY09_IFLAG;
    }

    public byte getFINVTY10_IFLAG() {
        return FINVTY10_IFLAG;
    }

    public boolean getFINVTY11_IFLAG() {
        return FINVTY11_IFLAG;
    }

    public short getFLNOS5() {
        return FLNOS5;
    }

    public byte getFLOORN() {
        return FLOORN;
    }

    public int getFNSVAL1() {
        return FNSVAL1;
    }

    public int getFNSVAL1_I() {
        return FNSVAL1_I;
    }

    public int getFSHADA() {
        return FSHADA;
    }

    public byte getFSHADAB() {
        return FSHADAB;
    }

    public byte getFSHADD() {
        return FSHADD;
    }

    public boolean getFSTYPIN5() {
        return FSTYPIN5;
    }

    public boolean getFSTYPSH5() {
        return FSTYPSH5;
    }

    public double getHPLFT3() {
        return HPLFT3;
    }

    public double getHPLFT4() {
        return HPLFT4;
    }

    public double getHPLFT5() {
        return HPLFT5;
    }

    public byte getHPNMN3() {
        return HPNMN3;
    }

    public byte getHPNMN4() {
        return HPNMN4;
    }

    public byte getHPNMN5() {
        return HPNMN5;
    }

    public byte getHPNYR3() {
        return HPNYR3;
    }

    public byte getHPNYR4() {
        return HPNYR4;
    }

    public boolean getHPNYR5() {
        return HPNYR5;
    }

    public double getHPOS3() {
        return HPOS3;
    }

    public double getHPOS4() {
        return HPOS4;
    }

    public double getHPOS5() {
        return HPOS5;
    }

    public byte getHRPDVAGE() {
        return HRPDVAGE;
    }

    public byte getHRPDVAGE9() {
        return HRPDVAGE9;
    }

    public byte getHRPDVILO3A() {
        return HRPDVILO3A;
    }

    public byte getHRPDVMRDF() {
        return HRPDVMRDF;
    }

    public byte getHRPEDATTN1() {
        return HRPEDATTN1;
    }

    public byte getHRPEDATTN2() {
        return HRPEDATTN2;
    }

    public byte getHRPEDATTN3() {
        return HRPEDATTN3;
    }

    public byte getHRPEDLEVEL() {
        return HRPEDLEVEL;
    }

    public byte getHRPEMPSTAT2() {
        return HRPEMPSTAT2;
    }

    public byte getHRPETHNIC() {
        return HRPETHNIC;
    }

    public byte getHRPIOUT1() {
        return HRPIOUT1;
    }

    public byte getHRPNSSEC3() {
        return HRPNSSEC3;
    }

    public byte getHRPPARTIOUT1() {
        return HRPPARTIOUT1;
    }

    public byte getHRPSEX() {
        return HRPSEX;
    }

    public byte getHRP_RESP() {
        return HRP_RESP;
    }

    public byte getH_FLAG1() {
        return H_FLAG1;
    }

    public boolean getIGDS12() {
        return IGDS12;
    }

    public boolean getIGDS13() {
        return IGDS13;
    }

    public boolean getIGDS14() {
        return IGDS14;
    }

    public boolean getIGDS16() {
        return IGDS16;
    }

    public boolean getIGDS17() {
        return IGDS17;
    }

    public boolean getIGDS18() {
        return IGDS18;
    }

    public boolean getIGDS19() {
        return IGDS19;
    }

    public boolean getIGDS20() {
        return IGDS20;
    }

    public boolean getIGDS21() {
        return IGDS21;
    }

    public boolean getIGDS6() {
        return IGDS6;
    }

    public boolean getIGDS7() {
        return IGDS7;
    }

    public boolean getIHSE13() {
        return IHSE13;
    }

    public boolean getIHSE14() {
        return IHSE14;
    }

    public boolean getIHSE15() {
        return IHSE15;
    }

    public boolean getIHSE16() {
        return IHSE16;
    }

    public boolean getIHSE17() {
        return IHSE17;
    }

    public boolean getIHSE18() {
        return IHSE18;
    }

    public boolean getIHSE4() {
        return IHSE4;
    }

    public boolean getIHSE5() {
        return IHSE5;
    }

    public boolean getIHSE6() {
        return IHSE6;
    }

    public boolean getILNUSE06() {
        return ILNUSE06;
    }

    public boolean getILNUSE07() {
        return ILNUSE07;
    }

    public boolean getILNUSE08() {
        return ILNUSE08;
    }

    public boolean getILNUSE09() {
        return ILNUSE09;
    }

    public boolean getILNUSE10() {
        return ILNUSE10;
    }

    public byte getILUMTY2_I() {
        return ILUMTY2_I;
    }

    public boolean getILUMTY2_IFLAG() {
        return ILUMTY2_IFLAG;
    }

    public byte getILUMTY3_I() {
        return ILUMTY3_I;
    }

    public boolean getILUMTY3_IFLAG() {
        return ILUMTY3_IFLAG;
    }

    public boolean getILUMTY4() {
        return ILUMTY4;
    }

    public boolean getILUMTY4_I() {
        return ILUMTY4_I;
    }

    public boolean getILUMTY4_IFLAG() {
        return ILUMTY4_IFLAG;
    }

    public boolean getILUMTY5() {
        return ILUMTY5;
    }

    public boolean getILUMTY5_I() {
        return ILUMTY5_I;
    }

    public boolean getILUMTY5_IFLAG() {
        return ILUMTY5_IFLAG;
    }

    public boolean getILUMTY6() {
        return ILUMTY6;
    }

    public boolean getILUMTY6_I() {
        return ILUMTY6_I;
    }

    public boolean getILUMTY6_IFLAG() {
        return ILUMTY6_IFLAG;
    }

    public boolean getILUMTY7() {
        return ILUMTY7;
    }

    public boolean getILUMTY7_I() {
        return ILUMTY7_I;
    }

    public boolean getILUMTY7_IFLAG() {
        return ILUMTY7_IFLAG;
    }

    public byte getINSPOL() {
        return INSPOL;
    }

    public byte getINTRO() {
        return INTRO;
    }

    public boolean getISHRP() {
        return ISHRP;
    }

    public boolean getISHRPPART() {
        return ISHRPPART;
    }

    public int getIVAL1() {
        return IVAL1;
    }

    public int getIVAL2_I() {
        return IVAL2_I;
    }

    public int getIVAL3_I() {
        return IVAL3_I;
    }

    public boolean getIWAT10() {
        return IWAT10;
    }

    public boolean getIWAT11() {
        return IWAT11;
    }

    public boolean getIWAT12() {
        return IWAT12;
    }

    public boolean getIWAT14() {
        return IWAT14;
    }

    public boolean getIWAT15() {
        return IWAT15;
    }

    public boolean getIWAT16() {
        return IWAT16;
    }

    public boolean getIWAT17() {
        return IWAT17;
    }

    public boolean getIWAT18() {
        return IWAT18;
    }

    public byte getIWAT8() {
        return IWAT8;
    }

    public byte getIWAT9() {
        return IWAT9;
    }

    public byte getIWHO() {
        return IWHO;
    }

    public byte getLIVWTH() {
        return LIVWTH;
    }

    public byte getLNMN1() {
        return LNMN1;
    }

    public byte getLNMN2() {
        return LNMN2;
    }

    public byte getLNMN3() {
        return LNMN3;
    }

    public byte getLNMN4() {
        return LNMN4;
    }

    public byte getLNMN5() {
        return LNMN5;
    }

    public byte getLNYR1() {
        return LNYR1;
    }

    public byte getLNYR2() {
        return LNYR2;
    }

    public byte getLNYR3() {
        return LNYR3;
    }

    public byte getLNYR4() {
        return LNYR4;
    }

    public byte getLNYR5() {
        return LNYR5;
    }

    public byte getLVTDAY() {
        return LVTDAY;
    }

    public double getMOLFT3() {
        return MOLFT3;
    }

    public double getMOLFT4() {
        return MOLFT4;
    }

    public double getMOLFT5() {
        return MOLFT5;
    }

    public double getMOOS3() {
        return MOOS3;
    }

    public double getMOOS4() {
        return MOOS4;
    }

    public double getMOOS5() {
        return MOOS5;
    }

    public byte getNMN1() {
        return NMN1;
    }

    public byte getNMN2() {
        return NMN2;
    }

    public byte getNMN3() {
        return NMN3;
    }

    public byte getNMN4() {
        return NMN4;
    }

    public byte getNMN5() {
        return NMN5;
    }

    public double getNSSEC() {
        return NSSEC;
    }

    public byte getNWHP() {
        return NWHP;
    }

    public byte getNWHPNO() {
        return NWHPNO;
    }

    public short getNWHPVAL1() {
        return NWHPVAL1;
    }

    public short getNWHPVAL2() {
        return NWHPVAL2;
    }

    public short getNWHPVAL3() {
        return NWHPVAL3;
    }

    public byte getNYR1() {
        return NYR1;
    }

    public byte getNYR2() {
        return NYR2;
    }

    public byte getNYR3() {
        return NYR3;
    }

    public byte getNYR4() {
        return NYR4;
    }

    public byte getNYR5() {
        return NYR5;
    }

    public short getOIGGT() {
        return OIGGT;
    }

    public short getOIGRR() {
        return OIGRR;
    }

    public boolean getOIMPRS7() {
        return OIMPRS7;
    }

    public boolean getOIMPRS8() {
        return OIMPRS8;
    }

    public boolean getOIMPRS9() {
        return OIMPRS9;
    }

    public boolean getONOSAVE7() {
        return ONOSAVE7;
    }

    public boolean getONOSAVE8() {
        return ONOSAVE8;
    }

    public boolean getONOSAVE9() {
        return ONOSAVE9;
    }

    public byte getOPENSAV() {
        return OPENSAV;
    }

    public boolean getORUNDO09() {
        return ORUNDO09;
    }

    public boolean getORUNDO10() {
        return ORUNDO10;
    }

    public boolean getORUNDO11() {
        return ORUNDO11;
    }

    public byte getOSAFERE2() {
        return OSAFERE2;
    }

    public byte getOSAFERET() {
        return OSAFERET;
    }

    public byte getOSAVA() {
        return OSAVA;
    }

    public byte getOSAVB() {
        return OSAVB;
    }

    public byte getOSAVC() {
        return OSAVC;
    }

    public short getOSLC4() {
        return OSLC4;
    }

    public boolean getOTHSRC5_I() {
        return OTHSRC5_I;
    }

    public boolean getOTHSRC5_IFLAG() {
        return OTHSRC5_IFLAG;
    }

    public byte getOWHYSAV01() {
        return OWHYSAV01;
    }

    public byte getOWHYSAV02() {
        return OWHYSAV02;
    }

    public byte getOWHYSAV03() {
        return OWHYSAV03;
    }

    public byte getOWHYSAV04() {
        return OWHYSAV04;
    }

    public byte getOWHYSAV05() {
        return OWHYSAV05;
    }

    public byte getOWHYSAV06() {
        return OWHYSAV06;
    }

    public byte getOWHYSAV07() {
        return OWHYSAV07;
    }

    public byte getOWHYSAV08() {
        return OWHYSAV08;
    }

    public byte getOWHYSAV09() {
        return OWHYSAV09;
    }

    public byte getOWHYSAV10() {
        return OWHYSAV10;
    }

    public boolean getOWHYSAV11() {
        return OWHYSAV11;
    }

    public boolean getOWRSRS08() {
        return OWRSRS08;
    }

    public boolean getOWRSRS09() {
        return OWRSRS09;
    }

    public boolean getOWRSRS10() {
        return OWRSRS10;
    }

    public byte getPADDFUT() {
        return PADDFUT;
    }

    public boolean getPADDFUT2() {
        return PADDFUT2;
    }

    public short getPAVCAM1() {
        return PAVCAM1;
    }

    public short getPAVCAM2() {
        return PAVCAM2;
    }

    public byte getPAVCFG1() {
        return PAVCFG1;
    }

    public boolean getPAVCFG2() {
        return PAVCFG2;
    }

    public double getPAVCFR1() {
        return PAVCFR1;
    }

    public byte getPAVCFR2() {
        return PAVCFR2;
    }

    public byte getPAVCH1() {
        return PAVCH1;
    }

    public byte getPAVCH2() {
        return PAVCH2;
    }

    public byte getPAVCIN1() {
        return PAVCIN1;
    }

    public byte getPAVCIN2() {
        return PAVCIN2;
    }

    public byte getPAVCPR1() {
        return PAVCPR1;
    }

    public boolean getPAVCPR2() {
        return PAVCPR2;
    }

    public boolean getPDCVAL3() {
        return PDCVAL3;
    }

    public byte getPEMFIN() {
        return PEMFIN;
    }

    public byte getPESAME_I() {
        return PESAME_I;
    }

    public byte getPESAME_IFLAG() {
        return PESAME_IFLAG;
    }

    public byte getPEWYNO01() {
        return PEWYNO01;
    }

    public byte getPEWYNO02() {
        return PEWYNO02;
    }

    public byte getPEWYNO03() {
        return PEWYNO03;
    }

    public byte getPEWYNO04() {
        return PEWYNO04;
    }

    public byte getPEWYNO05() {
        return PEWYNO05;
    }

    public boolean getPEWYNO06() {
        return PEWYNO06;
    }

    public boolean getPEWYNO07() {
        return PEWYNO07;
    }

    public boolean getPEWYNO08() {
        return PEWYNO08;
    }

    public boolean getPEWYNO09() {
        return PEWYNO09;
    }

    public boolean getPEWYNO10() {
        return PEWYNO10;
    }

    public boolean getPEWYNO11() {
        return PEWYNO11;
    }

    public boolean getPFANEH3() {
        return PFANEH3;
    }

    public boolean getPFANEH5() {
        return PFANEH5;
    }

    public boolean getPFANEH6() {
        return PFANEH6;
    }

    public boolean getPFANEXM1() {
        return PFANEXM1;
    }

    public boolean getPFANEXM2() {
        return PFANEXM2;
    }

    public boolean getPFANEXM3() {
        return PFANEXM3;
    }

    public boolean getPFANEXM4() {
        return PFANEXM4;
    }

    public boolean getPFANEXM5() {
        return PFANEXM5;
    }

    public boolean getPFANEXM6() {
        return PFANEXM6;
    }

    public boolean getPFANEXY1() {
        return PFANEXY1;
    }

    public boolean getPFANEXY2() {
        return PFANEXY2;
    }

    public boolean getPFANEXY3() {
        return PFANEXY3;
    }

    public boolean getPFANEXY4() {
        return PFANEXY4;
    }

    public boolean getPFANEXY5() {
        return PFANEXY5;
    }

    public boolean getPFANEXY6() {
        return PFANEXY6;
    }

    public byte getPFANGA3() {
        return PFANGA3;
    }

    public boolean getPFANGA5() {
        return PFANGA5;
    }

    public boolean getPFANGA6() {
        return PFANGA6;
    }

    public boolean getPFANIF3() {
        return PFANIF3;
    }

    public boolean getPFANIF5() {
        return PFANIF5;
    }

    public boolean getPFANIF6() {
        return PFANIF6;
    }

    public byte getPFANJT3() {
        return PFANJT3;
    }

    public boolean getPFANJT5() {
        return PFANJT5;
    }

    public boolean getPFANJT6() {
        return PFANJT6;
    }

    public boolean getPFANLM1() {
        return PFANLM1;
    }

    public boolean getPFANLM2() {
        return PFANLM2;
    }

    public boolean getPFANLM3() {
        return PFANLM3;
    }

    public boolean getPFANLM4() {
        return PFANLM4;
    }

    public boolean getPFANLM5() {
        return PFANLM5;
    }

    public boolean getPFANLM6() {
        return PFANLM6;
    }

    public boolean getPFANN10() {
        return PFANN10;
    }

    public byte getPFANN11() {
        return PFANN11;
    }

    public boolean getPFANN12() {
        return PFANN12;
    }

    public boolean getPFANN13() {
        return PFANN13;
    }

    public boolean getPFANN14() {
        return PFANN14;
    }

    public boolean getPFANN15() {
        return PFANN15;
    }

    public boolean getPFANN17() {
        return PFANN17;
    }

    public boolean getPFANN18() {
        return PFANN18;
    }

    public boolean getPFANN19() {
        return PFANN19;
    }

    public boolean getPFANN2() {
        return PFANN2;
    }

    public boolean getPFANN20() {
        return PFANN20;
    }

    public boolean getPFANN21() {
        return PFANN21;
    }

    public boolean getPFANN22() {
        return PFANN22;
    }

    public boolean getPFANN23() {
        return PFANN23;
    }

    public boolean getPFANN24() {
        return PFANN24;
    }

    public boolean getPFANN25() {
        return PFANN25;
    }

    public boolean getPFANN26() {
        return PFANN26;
    }

    public boolean getPFANN27() {
        return PFANN27;
    }

    public boolean getPFANN28() {
        return PFANN28;
    }

    public boolean getPFANN29() {
        return PFANN29;
    }

    public boolean getPFANN3() {
        return PFANN3;
    }

    public boolean getPFANN30() {
        return PFANN30;
    }

    public boolean getPFANN4() {
        return PFANN4;
    }

    public boolean getPFANN5() {
        return PFANN5;
    }

    public boolean getPFANN7() {
        return PFANN7;
    }

    public boolean getPFANN8() {
        return PFANN8;
    }

    public boolean getPFANN9() {
        return PFANN9;
    }

    public boolean getPFANVB1() {
        return PFANVB1;
    }

    public boolean getPFANVB2() {
        return PFANVB2;
    }

    public boolean getPFANVB3() {
        return PFANVB3;
    }

    public boolean getPFANVB4() {
        return PFANVB4;
    }

    public boolean getPFANVB5() {
        return PFANVB5;
    }

    public boolean getPFANVB6() {
        return PFANVB6;
    }

    public short getPFANVI1() {
        return PFANVI1;
    }

    public short getPFANVI2() {
        return PFANVI2;
    }

    public short getPFANVI3() {
        return PFANVI3;
    }

    public boolean getPFANVI4() {
        return PFANVI4;
    }

    public boolean getPFANVI5() {
        return PFANVI5;
    }

    public boolean getPFANVI6() {
        return PFANVI6;
    }

    public short getPFBEG1() {
        return PFBEG1;
    }

    public short getPFBEG2() {
        return PFBEG2;
    }

    public short getPFBEG3() {
        return PFBEG3;
    }

    public short getPFBEG4() {
        return PFBEG4;
    }

    public boolean getPFBEG5() {
        return PFBEG5;
    }

    public boolean getPFBEG6() {
        return PFBEG6;
    }

    public boolean getPFCASH5() {
        return PFCASH5;
    }

    public boolean getPFCASH5_I() {
        return PFCASH5_I;
    }

    public boolean getPFCASH5_IFLAG() {
        return PFCASH5_IFLAG;
    }

    public boolean getPFCASH6() {
        return PFCASH6;
    }

    public boolean getPFCASH6_I() {
        return PFCASH6_I;
    }

    public boolean getPFCASH6_IFLAG() {
        return PFCASH6_IFLAG;
    }

    public int getPFDDV4() {
        return PFDDV4;
    }

    public boolean getPFDDV5() {
        return PFDDV5;
    }

    public boolean getPFDDV5_I() {
        return PFDDV5_I;
    }

    public boolean getPFDDV5_IFLAG() {
        return PFDDV5_IFLAG;
    }

    public boolean getPFDDV6() {
        return PFDDV6;
    }

    public boolean getPFDDV6_I() {
        return PFDDV6_I;
    }

    public boolean getPFDDV6_IFLAG() {
        return PFDDV6_IFLAG;
    }

    public boolean getPFDDVB4() {
        return PFDDVB4;
    }

    public boolean getPFDDVB5() {
        return PFDDVB5;
    }

    public boolean getPFDDVB6() {
        return PFDDVB6;
    }

    public boolean getPFDRAW4() {
        return PFDRAW4;
    }

    public boolean getPFDRAW4_I() {
        return PFDRAW4_I;
    }

    public byte getPFDRAW4_IFLAG() {
        return PFDRAW4_IFLAG;
    }

    public boolean getPFDRAW5() {
        return PFDRAW5;
    }

    public boolean getPFDRAW5_I() {
        return PFDRAW5_I;
    }

    public boolean getPFDRAW5_IFLAG() {
        return PFDRAW5_IFLAG;
    }

    public boolean getPFDRAW6() {
        return PFDRAW6;
    }

    public boolean getPFDRAW6_I() {
        return PFDRAW6_I;
    }

    public boolean getPFDRAW6_IFLAG() {
        return PFDRAW6_IFLAG;
    }

    public boolean getPFDRA___W3() {
        return PFDRA___W3;
    }

    public short getPFDRINC2() {
        return PFDRINC2;
    }

    public boolean getPFDRINC3() {
        return PFDRINC3;
    }

    public boolean getPFDRINC4() {
        return PFDRINC4;
    }

    public boolean getPFDRINC5() {
        return PFDRINC5;
    }

    public boolean getPFDRINC6() {
        return PFDRINC6;
    }

    public boolean getPFDRINCB1() {
        return PFDRINCB1;
    }

    public boolean getPFDRINCB2() {
        return PFDRINCB2;
    }

    public boolean getPFDRINCB3() {
        return PFDRINCB3;
    }

    public boolean getPFDRINCB4() {
        return PFDRINCB4;
    }

    public boolean getPFDRINCB5() {
        return PFDRINCB5;
    }

    public boolean getPFDRINCB6() {
        return PFDRINCB6;
    }

    public boolean getPFDRVB2() {
        return PFDRVB2;
    }

    public boolean getPFDRVB3() {
        return PFDRVB3;
    }

    public boolean getPFDRVB4() {
        return PFDRVB4;
    }

    public boolean getPFDRVB5() {
        return PFDRVB5;
    }

    public boolean getPFDRVB6() {
        return PFDRVB6;
    }

    public int getPFDRVI2() {
        return PFDRVI2;
    }

    public boolean getPFDRVI3() {
        return PFDRVI3;
    }

    public boolean getPFDRVI4() {
        return PFDRVI4;
    }

    public boolean getPFDRVI5() {
        return PFDRVI5;
    }

    public boolean getPFDRVI6() {
        return PFDRVI6;
    }

    public short getPFEND1() {
        return PFEND1;
    }

    public short getPFEND2() {
        return PFEND2;
    }

    public short getPFEND3() {
        return PFEND3;
    }

    public short getPFEND4() {
        return PFEND4;
    }

    public boolean getPFEND5() {
        return PFEND5;
    }

    public boolean getPFEND6() {
        return PFEND6;
    }

    public boolean getPFFAAG3() {
        return PFFAAG3;
    }

    public boolean getPFFAAG4() {
        return PFFAAG4;
    }

    public boolean getPFFAAG5() {
        return PFFAAG5;
    }

    public boolean getPFFAAG6() {
        return PFFAAG6;
    }

    public boolean getPFFAN10() {
        return PFFAN10;
    }

    public boolean getPFFAN12() {
        return PFFAN12;
    }

    public boolean getPFFAN13() {
        return PFFAN13;
    }

    public boolean getPFFAN14() {
        return PFFAN14;
    }

    public boolean getPFFAN15() {
        return PFFAN15;
    }

    public boolean getPFFAN17() {
        return PFFAN17;
    }

    public boolean getPFFAN18() {
        return PFFAN18;
    }

    public boolean getPFFAN19() {
        return PFFAN19;
    }

    public boolean getPFFAN20() {
        return PFFAN20;
    }

    public boolean getPFFAN21() {
        return PFFAN21;
    }

    public boolean getPFFAN22() {
        return PFFAN22;
    }

    public boolean getPFFAN23() {
        return PFFAN23;
    }

    public boolean getPFFAN24() {
        return PFFAN24;
    }

    public boolean getPFFAN25() {
        return PFFAN25;
    }

    public boolean getPFFAN26() {
        return PFFAN26;
    }

    public boolean getPFFAN27() {
        return PFFAN27;
    }

    public boolean getPFFAN28() {
        return PFFAN28;
    }

    public boolean getPFFAN29() {
        return PFFAN29;
    }

    public boolean getPFFAN3() {
        return PFFAN3;
    }

    public boolean getPFFAN30() {
        return PFFAN30;
    }

    public boolean getPFFAN4() {
        return PFFAN4;
    }

    public boolean getPFFAN5() {
        return PFFAN5;
    }

    public boolean getPFFAN7() {
        return PFFAN7;
    }

    public boolean getPFFAN8() {
        return PFFAN8;
    }

    public boolean getPFFAN9() {
        return PFFAN9;
    }

    public boolean getPFFAWH10() {
        return PFFAWH10;
    }

    public boolean getPFFAWH11() {
        return PFFAWH11;
    }

    public boolean getPFFAWH12() {
        return PFFAWH12;
    }

    public byte getPFFAWH13() {
        return PFFAWH13;
    }

    public boolean getPFFAWH14() {
        return PFFAWH14;
    }

    public boolean getPFFAWH15() {
        return PFFAWH15;
    }

    public boolean getPFFAWH17() {
        return PFFAWH17;
    }

    public boolean getPFFAWH18() {
        return PFFAWH18;
    }

    public boolean getPFFAWH19() {
        return PFFAWH19;
    }

    public boolean getPFFAWH2() {
        return PFFAWH2;
    }

    public boolean getPFFAWH20() {
        return PFFAWH20;
    }

    public boolean getPFFAWH21() {
        return PFFAWH21;
    }

    public boolean getPFFAWH22() {
        return PFFAWH22;
    }

    public boolean getPFFAWH23() {
        return PFFAWH23;
    }

    public boolean getPFFAWH24() {
        return PFFAWH24;
    }

    public boolean getPFFAWH25() {
        return PFFAWH25;
    }

    public boolean getPFFAWH26() {
        return PFFAWH26;
    }

    public boolean getPFFAWH27() {
        return PFFAWH27;
    }

    public boolean getPFFAWH28() {
        return PFFAWH28;
    }

    public boolean getPFFAWH29() {
        return PFFAWH29;
    }

    public boolean getPFFAWH3() {
        return PFFAWH3;
    }

    public boolean getPFFAWH30() {
        return PFFAWH30;
    }

    public boolean getPFFAWH31() {
        return PFFAWH31;
    }

    public boolean getPFFAWH32() {
        return PFFAWH32;
    }

    public boolean getPFFAWH33() {
        return PFFAWH33;
    }

    public boolean getPFFAWH34() {
        return PFFAWH34;
    }

    public boolean getPFFAWH35() {
        return PFFAWH35;
    }

    public boolean getPFFAWH36() {
        return PFFAWH36;
    }

    public boolean getPFFAWH4() {
        return PFFAWH4;
    }

    public boolean getPFFAWH5() {
        return PFFAWH5;
    }

    public byte getPFFAWH7() {
        return PFFAWH7;
    }

    public boolean getPFFAWH8() {
        return PFFAWH8;
    }

    public boolean getPFFAWH9() {
        return PFFAWH9;
    }

    public boolean getPFINCA6_IFLAG() {
        return PFINCA6_IFLAG;
    }

    public boolean getPFLMUS5() {
        return PFLMUS5;
    }

    public boolean getPFLMUS6() {
        return PFLMUS6;
    }

    public boolean getPFLMV5() {
        return PFLMV5;
    }

    public boolean getPFLMV5_I() {
        return PFLMV5_I;
    }

    public boolean getPFLMV5_IFLAG() {
        return PFLMV5_IFLAG;
    }

    public boolean getPFLMV6_I() {
        return PFLMV6_I;
    }

    public boolean getPFLMV6_IFLAG() {
        return PFLMV6_IFLAG;
    }

    public boolean getPFLMVB4() {
        return PFLMVB4;
    }

    public boolean getPFLMVB5() {
        return PFLMVB5;
    }

    public boolean getPFLMVB6() {
        return PFLMVB6;
    }

    public boolean getPFLUMALL5() {
        return PFLUMALL5;
    }

    public boolean getPFLUMALL5_I() {
        return PFLUMALL5_I;
    }

    public boolean getPFLUMALL5_IFLAG() {
        return PFLUMALL5_IFLAG;
    }

    public boolean getPFLUMALL6() {
        return PFLUMALL6;
    }

    public boolean getPFLUMALL6_I() {
        return PFLUMALL6_I;
    }

    public boolean getPFLUMALL6_IFLAG() {
        return PFLUMALL6_IFLAG;
    }

    public byte getPFPENVB1() {
        return PFPENVB1;
    }

    public boolean getPFPENVB2() {
        return PFPENVB2;
    }

    public boolean getPFPENVB3() {
        return PFPENVB3;
    }

    public boolean getPFPENVB4() {
        return PFPENVB4;
    }

    public boolean getPFPENVB5() {
        return PFPENVB5;
    }

    public boolean getPFPENVB6() {
        return PFPENVB6;
    }

    public int getPFPENVI1() {
        return PFPENVI1;
    }

    public short getPFPENVI2() {
        return PFPENVI2;
    }

    public short getPFPENVI3() {
        return PFPENVI3;
    }

    public short getPFPENVI4() {
        return PFPENVI4;
    }

    public boolean getPFPENVI5() {
        return PFPENVI5;
    }

    public boolean getPFPENVI6() {
        return PFPENVI6;
    }

    public boolean getPFREM5() {
        return PFREM5;
    }

    public boolean getPFREM5_I() {
        return PFREM5_I;
    }

    public boolean getPFREM5_IFLAG() {
        return PFREM5_IFLAG;
    }

    public boolean getPFREM6() {
        return PFREM6;
    }

    public boolean getPFREM6_I() {
        return PFREM6_I;
    }

    public boolean getPFREM6_IFLAG() {
        return PFREM6_IFLAG;
    }

    public byte getPFSIPTY1() {
        return PFSIPTY1;
    }

    public byte getPFSIPTY10() {
        return PFSIPTY10;
    }

    public boolean getPFSIPTY11() {
        return PFSIPTY11;
    }

    public boolean getPFSIPTY12() {
        return PFSIPTY12;
    }

    public boolean getPFSIPTY13() {
        return PFSIPTY13;
    }

    public boolean getPFSIPTY14() {
        return PFSIPTY14;
    }

    public byte getPFSIPTY15() {
        return PFSIPTY15;
    }

    public boolean getPFSIPTY16() {
        return PFSIPTY16;
    }

    public boolean getPFSIPTY17() {
        return PFSIPTY17;
    }

    public boolean getPFSIPTY18() {
        return PFSIPTY18;
    }

    public boolean getPFSIPTY19() {
        return PFSIPTY19;
    }

    public byte getPFSIPTY2() {
        return PFSIPTY2;
    }

    public boolean getPFSIPTY20() {
        return PFSIPTY20;
    }

    public boolean getPFSIPTY21() {
        return PFSIPTY21;
    }

    public byte getPFSIPTY22() {
        return PFSIPTY22;
    }

    public boolean getPFSIPTY23() {
        return PFSIPTY23;
    }

    public boolean getPFSIPTY24() {
        return PFSIPTY24;
    }

    public boolean getPFSIPTY25() {
        return PFSIPTY25;
    }

    public boolean getPFSIPTY26() {
        return PFSIPTY26;
    }

    public boolean getPFSIPTY27() {
        return PFSIPTY27;
    }

    public boolean getPFSIPTY28() {
        return PFSIPTY28;
    }

    public boolean getPFSIPTY29() {
        return PFSIPTY29;
    }

    public byte getPFSIPTY3() {
        return PFSIPTY3;
    }

    public boolean getPFSIPTY30() {
        return PFSIPTY30;
    }

    public boolean getPFSIPTY31() {
        return PFSIPTY31;
    }

    public boolean getPFSIPTY32() {
        return PFSIPTY32;
    }

    public boolean getPFSIPTY33() {
        return PFSIPTY33;
    }

    public boolean getPFSIPTY34() {
        return PFSIPTY34;
    }

    public boolean getPFSIPTY35() {
        return PFSIPTY35;
    }

    public boolean getPFSIPTY36() {
        return PFSIPTY36;
    }

    public boolean getPFSIPTY37() {
        return PFSIPTY37;
    }

    public boolean getPFSIPTY38() {
        return PFSIPTY38;
    }

    public boolean getPFSIPTY39() {
        return PFSIPTY39;
    }

    public byte getPFSIPTY4() {
        return PFSIPTY4;
    }

    public boolean getPFSIPTY40() {
        return PFSIPTY40;
    }

    public boolean getPFSIPTY41() {
        return PFSIPTY41;
    }

    public boolean getPFSIPTY42() {
        return PFSIPTY42;
    }

    public byte getPFSIPTY5() {
        return PFSIPTY5;
    }

    public byte getPFSIPTY6() {
        return PFSIPTY6;
    }

    public boolean getPFSIPTY7() {
        return PFSIPTY7;
    }

    public byte getPFSIPTY8() {
        return PFSIPTY8;
    }

    public byte getPFSIPTY9() {
        return PFSIPTY9;
    }

    public short getPIRREG() {
        return PIRREG;
    }

    public short getPIRREG2() {
        return PIRREG2;
    }

    public byte getPMORTC() {
        return PMORTC;
    }

    public byte getPNEWMEM() {
        return PNEWMEM;
    }

    public boolean getPOADD5() {
        return POADD5;
    }

    public boolean getPOADD6() {
        return POADD6;
    }

    public boolean getPOANEH2() {
        return POANEH2;
    }

    public boolean getPOANEXM1() {
        return POANEXM1;
    }

    public boolean getPOANEXM2() {
        return POANEXM2;
    }

    public boolean getPOANEXY1() {
        return POANEXY1;
    }

    public boolean getPOANEXY2() {
        return POANEXY2;
    }

    public boolean getPOANGA2() {
        return POANGA2;
    }

    public boolean getPOANIF2() {
        return POANIF2;
    }

    public boolean getPOANJT2() {
        return POANJT2;
    }

    public boolean getPOANLM1() {
        return POANLM1;
    }

    public boolean getPOANLM2() {
        return POANLM2;
    }

    public boolean getPOANN2() {
        return POANN2;
    }

    public boolean getPOANN3() {
        return POANN3;
    }

    public boolean getPOANN4() {
        return POANN4;
    }

    public boolean getPOANN6() {
        return POANN6;
    }

    public boolean getPOANN7() {
        return POANN7;
    }

    public boolean getPOANN8() {
        return POANN8;
    }

    public boolean getPOANVB() {
        return POANVB;
    }

    public boolean getPOANVB2() {
        return POANVB2;
    }

    public short getPOANVI1() {
        return POANVI1;
    }

    public short getPOANVI2() {
        return POANVI2;
    }

    public byte getPOCNDRS1() {
        return POCNDRS1;
    }

    public boolean getPOCNDRS10() {
        return POCNDRS10;
    }

    public boolean getPOCNDRS11() {
        return POCNDRS11;
    }

    public boolean getPOCNDRS12() {
        return POCNDRS12;
    }

    public byte getPOCNDRS2() {
        return POCNDRS2;
    }

    public byte getPOCNDRS3() {
        return POCNDRS3;
    }

    public boolean getPOCNDRS4() {
        return POCNDRS4;
    }

    public boolean getPOCNDRS5() {
        return POCNDRS5;
    }

    public boolean getPOCNDRS6() {
        return POCNDRS6;
    }

    public byte getPOCNDRS7() {
        return POCNDRS7;
    }

    public boolean getPOCNDRS8() {
        return POCNDRS8;
    }

    public boolean getPOCNDRS9() {
        return POCNDRS9;
    }

    public byte getPOCNHOW1() {
        return POCNHOW1;
    }

    public byte getPOCNHOW2() {
        return POCNHOW2;
    }

    public byte getPOCNLRS1() {
        return POCNLRS1;
    }

    public byte getPOCNLRS2() {
        return POCNLRS2;
    }

    public boolean getPOCNLRS3() {
        return POCNLRS3;
    }

    public boolean getPOCNLRS4() {
        return POCNLRS4;
    }

    public boolean getPOCNLRS5() {
        return POCNLRS5;
    }

    public boolean getPOCNLRS6() {
        return POCNLRS6;
    }

    public boolean getPOCNLRS7() {
        return POCNLRS7;
    }

    public boolean getPOCNLRS8() {
        return POCNLRS8;
    }

    public byte getPOCNPLN1() {
        return POCNPLN1;
    }

    public byte getPOCNPLN2() {
        return POCNPLN2;
    }

    public byte getPOCNVOL1() {
        return POCNVOL1;
    }

    public byte getPOCNVOL2() {
        return POCNVOL2;
    }

    public byte getPOCONCH1() {
        return POCONCH1;
    }

    public byte getPOCONCH2() {
        return POCONCH2;
    }

    public boolean getPOFAN10() {
        return POFAN10;
    }

    public boolean getPOFAN11() {
        return POFAN11;
    }

    public boolean getPOFAN12() {
        return POFAN12;
    }

    public boolean getPOFAN9() {
        return POFAN9;
    }

    public boolean getPOFAWH10() {
        return POFAWH10;
    }

    public boolean getPOFAWH11() {
        return POFAWH11;
    }

    public boolean getPOFAWH12() {
        return POFAWH12;
    }

    public boolean getPOFAWH3() {
        return POFAWH3;
    }

    public boolean getPOFAWH4() {
        return POFAWH4;
    }

    public boolean getPOFAWH5() {
        return POFAWH5;
    }

    public byte getPOFAWH7() {
        return POFAWH7;
    }

    public boolean getPOFAWH8() {
        return POFAWH8;
    }

    public boolean getPOFAWH9() {
        return POFAWH9;
    }

    public boolean getPOLMUS10() {
        return POLMUS10;
    }

    public boolean getPOLMUS11() {
        return POLMUS11;
    }

    public boolean getPOLMUS12() {
        return POLMUS12;
    }

    public boolean getPOLMUS9() {
        return POLMUS9;
    }

    public boolean getPOLMVB2() {
        return POLMVB2;
    }

    public byte getPOPENVB() {
        return POPENVB;
    }

    public boolean getPOPENVB2() {
        return POPENVB2;
    }

    public int getPOPENVI() {
        return POPENVI;
    }

    public int getPOPENVI2() {
        return POPENVI2;
    }

    public byte getPOPYCH() {
        return POPYCH;
    }

    public boolean getPPANEXM1() {
        return PPANEXM1;
    }

    public boolean getPPANEXM2() {
        return PPANEXM2;
    }

    public boolean getPPANEXM3() {
        return PPANEXM3;
    }

    public boolean getPPANEXY1() {
        return PPANEXY1;
    }

    public boolean getPPANEXY2() {
        return PPANEXY2;
    }

    public boolean getPPANEXY3() {
        return PPANEXY3;
    }

    public boolean getPPANLM1() {
        return PPANLM1;
    }

    public byte getPPANLM2() {
        return PPANLM2;
    }

    public boolean getPPANLM3() {
        return PPANLM3;
    }

    public boolean getPPANN3() {
        return PPANN3;
    }

    public boolean getPPANN4() {
        return PPANN4;
    }

    public boolean getPPANN6() {
        return PPANN6;
    }

    public boolean getPPANN7() {
        return PPANN7;
    }

    public boolean getPPANN8() {
        return PPANN8;
    }

    public byte getPPANVB1() {
        return PPANVB1;
    }

    public boolean getPPANVB2() {
        return PPANVB2;
    }

    public boolean getPPANVB3() {
        return PPANVB3;
    }

    public int getPPANVI1() {
        return PPANVI1;
    }

    public short getPPANVI2() {
        return PPANVI2;
    }

    public short getPPANVI3() {
        return PPANVI3;
    }

    public boolean getPPCNDRS12() {
        return PPCNDRS12;
    }

    public boolean getPPCNDRS13() {
        return PPCNDRS13;
    }

    public boolean getPPCNDRS14() {
        return PPCNDRS14;
    }

    public boolean getPPCNDRS15() {
        return PPCNDRS15;
    }

    public boolean getPPCNDRS16() {
        return PPCNDRS16;
    }

    public byte getPPCNDRS17() {
        return PPCNDRS17;
    }

    public boolean getPPCNDRS18() {
        return PPCNDRS18;
    }

    public boolean getPPCNDRS20() {
        return PPCNDRS20;
    }

    public boolean getPPCNDRS21() {
        return PPCNDRS21;
    }

    public boolean getPPCNDRS22() {
        return PPCNDRS22;
    }

    public boolean getPPCNDRS23() {
        return PPCNDRS23;
    }

    public boolean getPPCNDRS24() {
        return PPCNDRS24;
    }

    public boolean getPPCNDRS3() {
        return PPCNDRS3;
    }

    public boolean getPPCNDRS4() {
        return PPCNDRS4;
    }

    public boolean getPPCNDRS5() {
        return PPCNDRS5;
    }

    public boolean getPPCNDRS6() {
        return PPCNDRS6;
    }

    public boolean getPPCNDRS7() {
        return PPCNDRS7;
    }

    public boolean getPPCNDRS8() {
        return PPCNDRS8;
    }

    public byte getPPCNDRS9() {
        return PPCNDRS9;
    }

    public byte getPPCNHO___W3() {
        return PPCNHO___W3;
    }

    public boolean getPPCNLRS10() {
        return PPCNLRS10;
    }

    public boolean getPPCNLRS11() {
        return PPCNLRS11;
    }

    public boolean getPPCNLRS12() {
        return PPCNLRS12;
    }

    public boolean getPPCNLRS4() {
        return PPCNLRS4;
    }

    public boolean getPPCNLRS6() {
        return PPCNLRS6;
    }

    public boolean getPPCNLRS7() {
        return PPCNLRS7;
    }

    public boolean getPPCNLRS8() {
        return PPCNLRS8;
    }

    public byte getPPCNLRS9() {
        return PPCNLRS9;
    }

    public byte getPPCNPLN1() {
        return PPCNPLN1;
    }

    public byte getPPCNPLN2() {
        return PPCNPLN2;
    }

    public byte getPPCNPLN3() {
        return PPCNPLN3;
    }

    public byte getPPCONCH() {
        return PPCONCH;
    }

    public boolean getPPDRINC3() {
        return PPDRINC3;
    }

    public byte getPPDRINCB() {
        return PPDRINCB;
    }

    public boolean getPPDRINCB3() {
        return PPDRINCB3;
    }

    public boolean getPPDRVB3() {
        return PPDRVB3;
    }

    public boolean getPPDRVI3() {
        return PPDRVI3;
    }

    public boolean getPPFAAG2() {
        return PPFAAG2;
    }

    public boolean getPPFAAG3() {
        return PPFAAG3;
    }

    public boolean getPPFAN10() {
        return PPFAN10;
    }

    public boolean getPPFAN12() {
        return PPFAN12;
    }

    public boolean getPPFAN13() {
        return PPFAN13;
    }

    public boolean getPPFAN14() {
        return PPFAN14;
    }

    public boolean getPPFAN15() {
        return PPFAN15;
    }

    public boolean getPPFAN3() {
        return PPFAN3;
    }

    public boolean getPPFAN4() {
        return PPFAN4;
    }

    public boolean getPPFAN5() {
        return PPFAN5;
    }

    public boolean getPPFAN7() {
        return PPFAN7;
    }

    public boolean getPPFAN8() {
        return PPFAN8;
    }

    public boolean getPPFAN9() {
        return PPFAN9;
    }

    public boolean getPPFAWH10() {
        return PPFAWH10;
    }

    public boolean getPPFAWH11() {
        return PPFAWH11;
    }

    public boolean getPPFAWH12() {
        return PPFAWH12;
    }

    public boolean getPPFAWH13() {
        return PPFAWH13;
    }

    public boolean getPPFAWH14() {
        return PPFAWH14;
    }

    public boolean getPPFAWH16() {
        return PPFAWH16;
    }

    public boolean getPPFAWH17() {
        return PPFAWH17;
    }

    public boolean getPPFAWH18() {
        return PPFAWH18;
    }

    public boolean getPPFAWH19() {
        return PPFAWH19;
    }

    public boolean getPPFAWH20() {
        return PPFAWH20;
    }

    public boolean getPPFAWH21() {
        return PPFAWH21;
    }

    public boolean getPPFAWH4() {
        return PPFAWH4;
    }

    public boolean getPPFAWH5() {
        return PPFAWH5;
    }

    public boolean getPPFAWH7() {
        return PPFAWH7;
    }

    public byte getPPFAWH8() {
        return PPFAWH8;
    }

    public boolean getPPFAWH9() {
        return PPFAWH9;
    }

    public byte getPPIRNO1() {
        return PPIRNO1;
    }

    public byte getPPIRNO2() {
        return PPIRNO2;
    }

    public boolean getPPIRNO3() {
        return PPIRNO3;
    }

    public int getPPIRRA1() {
        return PPIRRA1;
    }

    public int getPPIRRA2() {
        return PPIRRA2;
    }

    public short getPPIRRA3() {
        return PPIRRA3;
    }

    public boolean getPPIRRF1() {
        return PPIRRF1;
    }

    public boolean getPPIRRF2() {
        return PPIRRF2;
    }

    public boolean getPPIRRF3() {
        return PPIRRF3;
    }

    public byte getPPIRRH1() {
        return PPIRRH1;
    }

    public byte getPPIRRH2() {
        return PPIRRH2;
    }

    public boolean getPPIRRH3() {
        return PPIRRH3;
    }

    public short getPPIRRY1() {
        return PPIRRY1;
    }

    public short getPPIRRY2() {
        return PPIRRY2;
    }

    public short getPPIRRY3() {
        return PPIRRY3;
    }

    public short getPPLASY1() {
        return PPLASY1;
    }

    public short getPPLASY2() {
        return PPLASY2;
    }

    public short getPPLASY3() {
        return PPLASY3;
    }

    public byte getPPNINS1() {
        return PPNINS1;
    }

    public byte getPPNINS2() {
        return PPNINS2;
    }

    public byte getPPNINS3() {
        return PPNINS3;
    }

    public int getPPRGAM() {
        return PPRGAM;
    }

    public boolean getPPRGFG3() {
        return PPRGFG3;
    }

    public boolean getPPRGFR3() {
        return PPRGFR3;
    }

    public byte getPPYSTP15() {
        return PPYSTP15;
    }

    public boolean getPPYSTP16() {
        return PPYSTP16;
    }

    public boolean getPPYSTP17() {
        return PPYSTP17;
    }

    public boolean getPPYSTP18() {
        return PPYSTP18;
    }

    public boolean getPPYSTP20() {
        return PPYSTP20;
    }

    public boolean getPPYSTP21() {
        return PPYSTP21;
    }

    public byte getPPYSTP3() {
        return PPYSTP3;
    }

    public boolean getPPYSTP4() {
        return PPYSTP4;
    }

    public boolean getPPYSTP5() {
        return PPYSTP5;
    }

    public boolean getPPYSTP6() {
        return PPYSTP6;
    }

    public boolean getPPYSTP7() {
        return PPYSTP7;
    }

    public byte getPRCRELIG() {
        return PRCRELIG;
    }

    public boolean getPROXPERS() {
        return PROXPERS;
    }

    public byte getPSCHY_F() {
        return PSCHY_F;
    }

    public byte getPSCHY_S() {
        return PSCHY_S;
    }

    public byte getPSCHY_T() {
        return PSCHY_T;
    }

    public byte getPSTYPE1() {
        return PSTYPE1;
    }

    public byte getPSTYPE10() {
        return PSTYPE10;
    }

    public byte getPSTYPE11() {
        return PSTYPE11;
    }

    public boolean getPSTYPE12() {
        return PSTYPE12;
    }

    public boolean getPSTYPE13() {
        return PSTYPE13;
    }

    public boolean getPSTYPE14() {
        return PSTYPE14;
    }

    public byte getPSTYPE15() {
        return PSTYPE15;
    }

    public byte getPSTYPE16() {
        return PSTYPE16;
    }

    public boolean getPSTYPE17() {
        return PSTYPE17;
    }

    public boolean getPSTYPE18() {
        return PSTYPE18;
    }

    public boolean getPSTYPE19() {
        return PSTYPE19;
    }

    public byte getPSTYPE2() {
        return PSTYPE2;
    }

    public boolean getPSTYPE20() {
        return PSTYPE20;
    }

    public boolean getPSTYPE21() {
        return PSTYPE21;
    }

    public byte getPSTYPE3() {
        return PSTYPE3;
    }

    public byte getPSTYPE4() {
        return PSTYPE4;
    }

    public byte getPSTYPE5() {
        return PSTYPE5;
    }

    public byte getPSTYPE6() {
        return PSTYPE6;
    }

    public boolean getPSTYPE7() {
        return PSTYPE7;
    }

    public byte getPSTYPE8() {
        return PSTYPE8;
    }

    public byte getPSTYPE9() {
        return PSTYPE9;
    }

    public boolean getREGLRPY3() {
        return REGLRPY3;
    }

    public boolean getREGLRPY3_I() {
        return REGLRPY3_I;
    }

    public boolean getREGLRPY3_IFLAG() {
        return REGLRPY3_IFLAG;
    }

    public boolean getREGLRPY4() {
        return REGLRPY4;
    }

    public boolean getREGLRPY4_I() {
        return REGLRPY4_I;
    }

    public boolean getREGLRPY4_IFLAG() {
        return REGLRPY4_IFLAG;
    }

    public boolean getREGLRPY5() {
        return REGLRPY5;
    }

    public boolean getREGLRPY5_I() {
        return REGLRPY5_I;
    }

    public boolean getREGLRPY5_IFLAG() {
        return REGLRPY5_IFLAG;
    }

    public byte getRELIGE() {
        return RELIGE;
    }

    public byte getRELIGS() {
        return RELIGS;
    }

    public byte getRELIGW() {
        return RELIGW;
    }

    public byte getRF() {
        return RF;
    }

    public boolean getRPCRET1() {
        return RPCRET1;
    }

    public boolean getRPCRET2() {
        return RPCRET2;
    }

    public boolean getRPCRET3() {
        return RPCRET3;
    }

    public byte getRPDBCAL_F() {
        return RPDBCAL_F;
    }

    public byte getRS() {
        return RS;
    }

    public byte getSCAC4_I() {
        return SCAC4_I;
    }

    public byte getSCAC5_I() {
        return SCAC5_I;
    }

    public byte getSENO() {
        return SENO;
    }

    public boolean getSOA1() {
        return SOA1;
    }

    public boolean getSOA2() {
        return SOA2;
    }

    public byte getSOC2000() {
        return SOC2000;
    }

    public double getSPASAF_IORIG() {
        return SPASAF_IORIG;
    }

    public double getSPECAMT10() {
        return SPECAMT10;
    }

    public byte getSPECIAL01() {
        return SPECIAL01;
    }

    public byte getSPECIAL02() {
        return SPECIAL02;
    }

    public byte getSPECIAL03() {
        return SPECIAL03;
    }

    public byte getSPECIAL04() {
        return SPECIAL04;
    }

    public byte getSPECIAL05() {
        return SPECIAL05;
    }

    public boolean getSPECIAL06() {
        return SPECIAL06;
    }

    public boolean getSPECIAL07() {
        return SPECIAL07;
    }

    public boolean getSPECIAL08() {
        return SPECIAL08;
    }

    public boolean getSPECIAL09() {
        return SPECIAL09;
    }

    public boolean getSPECIAL10() {
        return SPECIAL10;
    }

    public byte getSPECINCL1() {
        return SPECINCL1;
    }

    public byte getSPECINCL10() {
        return SPECINCL10;
    }

    public byte getSPECINCL2() {
        return SPECINCL2;
    }

    public byte getSPECINCL3() {
        return SPECINCL3;
    }

    public byte getSPECINCL4() {
        return SPECINCL4;
    }

    public byte getSPECINCL5() {
        return SPECINCL5;
    }

    public byte getSPECINCL6() {
        return SPECINCL6;
    }

    public byte getSPECINCL7() {
        return SPECINCL7;
    }

    public byte getSPECINCL8() {
        return SPECINCL8;
    }

    public byte getSPECINCL9() {
        return SPECINCL9;
    }

    public byte getSPECPD1() {
        return SPECPD1;
    }

    public byte getSPECPD10() {
        return SPECPD10;
    }

    public short getSPECPD2() {
        return SPECPD2;
    }

    public byte getSPECPD3() {
        return SPECPD3;
    }

    public byte getSPECPD4() {
        return SPECPD4;
    }

    public byte getSPECPD5() {
        return SPECPD5;
    }

    public byte getSPECPD6() {
        return SPECPD6;
    }

    public byte getSPECPD7() {
        return SPECPD7;
    }

    public byte getSPECPD8() {
        return SPECPD8;
    }

    public byte getSPECPD9() {
        return SPECPD9;
    }

    public byte getSPECWHEN1() {
        return SPECWHEN1;
    }

    public byte getSPECWHEN10() {
        return SPECWHEN10;
    }

    public byte getSPECWHEN2() {
        return SPECWHEN2;
    }

    public byte getSPECWHEN3() {
        return SPECWHEN3;
    }

    public byte getSPECWHEN4() {
        return SPECWHEN4;
    }

    public byte getSPECWHEN5() {
        return SPECWHEN5;
    }

    public byte getSPECWHEN6() {
        return SPECWHEN6;
    }

    public byte getSPECWHEN7() {
        return SPECWHEN7;
    }

    public byte getSPECWHEN8() {
        return SPECWHEN8;
    }

    public byte getSPECWHEN9() {
        return SPECWHEN9;
    }

    public byte getSPENDM() {
        return SPENDM;
    }

    public boolean getSTATSWARD() {
        return STATSWARD;
    }

    public boolean getSTATUS() {
        return STATUS;
    }

    public byte getTACC3() {
        return TACC3;
    }

    public boolean getTADDVB3() {
        return TADDVB3;
    }

    public int getTADDVL() {
        return TADDVL;
    }

    public boolean getTADDVL3() {
        return TADDVL3;
    }

    public byte getTBCAP3() {
        return TBCAP3;
    }

    public boolean getTBCAPY3() {
        return TBCAPY3;
    }

    public boolean getTBCKNO3() {
        return TBCKNO3;
    }

    public boolean getTBEN13() {
        return TBEN13;
    }

    public boolean getTBEN14() {
        return TBEN14;
    }

    public boolean getTBEN15() {
        return TBEN15;
    }

    public boolean getTBEN16() {
        return TBEN16;
    }

    public byte getTBEN17() {
        return TBEN17;
    }

    public byte getTBEN18() {
        return TBEN18;
    }

    public boolean getTBEN19() {
        return TBEN19;
    }

    public boolean getTBEN20() {
        return TBEN20;
    }

    public boolean getTBEN21() {
        return TBEN21;
    }

    public boolean getTBEN22() {
        return TBEN22;
    }

    public boolean getTBEN23() {
        return TBEN23;
    }

    public boolean getTBEN24() {
        return TBEN24;
    }

    public boolean getTBEN6() {
        return TBEN6;
    }

    public boolean getTBEN7() {
        return TBEN7;
    }

    public boolean getTBEN8() {
        return TBEN8;
    }

    public byte getTBINC3() {
        return TBINC3;
    }

    public short getTBREC3() {
        return TBREC3;
    }

    public boolean getTBRECB3() {
        return TBRECB3;
    }

    public byte getTBVALB3() {
        return TBVALB3;
    }

    public byte getTDUP3() {
        return TDUP3;
    }

    public boolean getTDUPA3() {
        return TDUPA3;
    }

    public byte getTJNT5() {
        return TJNT5;
    }

    public boolean getTJNT6() {
        return TJNT6;
    }

    public byte getTRAINEE() {
        return TRAINEE;
    }

    public byte getTSNO3() {
        return TSNO3;
    }

    public int getTVAL3() {
        return TVAL3;
    }

    public byte getTVALB3() {
        return TVALB3;
    }

    public boolean getTWHO10() {
        return TWHO10;
    }

    public boolean getTWHO11() {
        return TWHO11;
    }

    public boolean getTWHO12() {
        return TWHO12;
    }

    public byte getTWHO13() {
        return TWHO13;
    }

    public boolean getTWHO14() {
        return TWHO14;
    }

    public boolean getTWHO15() {
        return TWHO15;
    }

    public boolean getTWHO16() {
        return TWHO16;
    }

    public boolean getTWHO17() {
        return TWHO17;
    }

    public boolean getTWHO18() {
        return TWHO18;
    }

    public boolean getTWHO3() {
        return TWHO3;
    }

    public boolean getTWHO4() {
        return TWHO4;
    }

    public boolean getTWHO5() {
        return TWHO5;
    }

    public boolean getTWHO6() {
        return TWHO6;
    }

    public boolean getTWHO9() {
        return TWHO9;
    }

    public byte getULAND10() {
        return ULAND10;
    }

    public byte getULAND11() {
        return ULAND11;
    }

    public byte getULAND12() {
        return ULAND12;
    }

    public byte getULAND16() {
        return ULAND16;
    }

    public byte getULAND17() {
        return ULAND17;
    }

    public byte getULAND18() {
        return ULAND18;
    }

    public boolean getUPROP1_IFLAG() {
        return UPROP1_IFLAG;
    }

    public boolean getUPROP2_IFLAG() {
        return UPROP2_IFLAG;
    }

    public boolean getUPROP3_IFLAG() {
        return UPROP3_IFLAG;
    }

    public boolean getUPROP4_IFLAG() {
        return UPROP4_IFLAG;
    }

    public boolean getUPROP5_IFLAG() {
        return UPROP5_IFLAG;
    }

    public boolean getUPROP6_IFLAG() {
        return UPROP6_IFLAG;
    }

    public byte getUPRSH13() {
        return UPRSH13;
    }

    public byte getUPRSH14() {
        return UPRSH14;
    }

    public byte getUPRSH15() {
        return UPRSH15;
    }

    public byte getUPRSH16() {
        return UPRSH16;
    }

    public byte getUPRSH17() {
        return UPRSH17;
    }

    public boolean getUPRSH18() {
        return UPRSH18;
    }

    public byte getUPRSH19() {
        return UPRSH19;
    }

    public boolean getUPRSH20() {
        return UPRSH20;
    }

    public byte getUPRSH21() {
        return UPRSH21;
    }

    public boolean getUPRSH22() {
        return UPRSH22;
    }

    public byte getUPRSH23() {
        return UPRSH23;
    }

    public boolean getUPRSH24() {
        return UPRSH24;
    }

    public byte getUPRSH25() {
        return UPRSH25;
    }

    public byte getUPRSH26() {
        return UPRSH26;
    }

    public byte getUPRSH27() {
        return UPRSH27;
    }

    public boolean getUPRSH28() {
        return UPRSH28;
    }

    public byte getUPRSH29() {
        return UPRSH29;
    }

    public boolean getUPRSH30() {
        return UPRSH30;
    }

    public byte getUPRSH31() {
        return UPRSH31;
    }

    public boolean getUPRSH32() {
        return UPRSH32;
    }

    public byte getUPRSH33() {
        return UPRSH33;
    }

    public boolean getUPRSH34() {
        return UPRSH34;
    }

    public byte getUPRSH35() {
        return UPRSH35;
    }

    public boolean getUPRSH36() {
        return UPRSH36;
    }

    public byte getUPRSH6() {
        return UPRSH6;
    }

    public boolean getUPRTYP() {
        return UPRTYP;
    }

    public double getW1W3WGT() {
        return W1W3WGT;
    }

    public double getW2W3WGT() {
        return W2W3WGT;
    }

    public double getW3XSWGT() {
        return W3XSWGT;
    }

    public boolean getWARD98() {
        return WARD98;
    }

    public boolean getWARDC91() {
        return WARDC91;
    }

    public boolean getWARDO91() {
        return WARDO91;
    }

    public byte getWHOREATT() {
        return WHOREATT;
    }

    public byte getWHORECAR() {
        return WHORECAR;
    }

    public byte getWHOREMOB() {
        return WHOREMOB;
    }

    public byte getWTCPD() {
        return WTCPD;
    }

    public byte getXBCON() {
        return XBCON;
    }

    public boolean getXBCONREM() {
        return XBCONREM;
    }

    public boolean getXBCONSC() {
        return XBCONSC;
    }

    public byte getXBCRT() {
        return XBCRT;
    }

    public boolean getXBOK() {
        return XBOK;
    }

    public byte getXDCON() {
        return XDCON;
    }

    public boolean getXDCONREM() {
        return XDCONREM;
    }

    public boolean getXDCONSC() {
        return XDCONSC;
    }

    public boolean getXDOK() {
        return XDOK;
    }

    public byte getXDREF() {
        return XDREF;
    }

    public byte getXICON() {
        return XICON;
    }

    public boolean getXICONREM() {
        return XICONREM;
    }

    public boolean getXICONSC() {
        return XICONSC;
    }


    public WaAS_W3PRecord(WaAS_RecordID i, String line) throws Exception {
        super(i);
        s = line.split("\t");
        initPERSONW1(s[0]);
        initPERSONW2(s[1]);
        initPERSONW3(s[2]);
        initDVWAVE(s[3]);
        initCURSTAT(s[4]);
        initRPDBCAL_F(s[5]);
        initSTATUS(s[6]);
        initDVAGEW3BAND(s[7]);
        initXMARSTA(s[8]);
        initMARBEF(s[9]);
        initLIVWTH(s[10]);
        initHHLDR(s[11]);
        initDVAGE4(s[12]);
        initDVAGE5(s[13]);
        initDVAGE6(s[14]);
        initDVAGE7(s[15]);
        initDVAGE9(s[16]);
        initDVAGE17(s[17]);
        initDVAGE18(s[18]);
        initWORKAGE(s[19]);
        initNUMADULT(s[20]);
        initNUMCHILD(s[21]);
        initNUMCIVPTR(s[22]);
        initNUMSSEX(s[23]);
        initNUMCPART(s[24]);
        initNUMCH18(s[25]);
        initPENFLAG(s[26]);
        initFTED(s[27]);
        initFTED19(s[28]);
        initTRAINEE(s[29]);
        initQUALCHK(s[30]);
        initHIHNUM(s[31]);
        initDVHRPNUM(s[32]);
        initHRPPART(s[33]);
        initR01(s[34]);
        initR02(s[35]);
        initR03(s[36]);
        initR04(s[37]);
        initR05(s[38]);
        initR06(s[39]);
        initR07(s[40]);
        initR08(s[41]);
        initR09(s[42]);
        initR10(s[43]);
        initR11(s[44]);
        initRESPDNT(s[45]);
        initPARTNER(s[46]);
        initPARTNO(s[47]);
        initISDEP(s[48]);
        initISNDEP(s[49]);
        initNUMDEPCH(s[50]);
        initHASCHD(s[51]);
        initHASDEP(s[52]);
        initHASNDEP(s[53]);
        initSINGPAR(s[54]);
        initPERSPROX(s[55]);
        initPROXYNUM(s[56]);
        initPRCRELIG(s[57]);
        initWRKING(s[58]);
        initSCHEMEET(s[59]);
        initJBAWAY(s[60]);
        initOWNBUS(s[61]);
        initRELBUS(s[62]);
        initLOOKED(s[63]);
        initSTARTJ(s[64]);
        initLKTIME(s[65]);
        initYINACT(s[66]);
        initDVILO3A(s[67]);
        initDVILO4A(s[68]);
        initWKBETW(s[69]);
        initMRECJB(s[70]);
        initSAMJOB(s[71]);
        initSAMEMP(s[72]);
        initPERNOWK(s[73]);
        initEMPSTAT1(s[74]);
        initNUMJOB(s[75]);
        initDTJBL(s[76]);
        initDVJB12ML(s[77]);
        initSAMEJOB1(s[78]);
        initSAMEJOB2(s[79]);
        initSAMEJOB3(s[80]);
        initSAMEJOB4(s[81]);
        initSAMEJOB5(s[82]);
        initSAMEJOB6(s[83]);
        initSECTOR(s[84]);
        initSECTR2(s[85]);
        initETYPE(s[86]);
        initSTAT(s[87]);
        initDVSTAT(s[88]);
        initSVISE(s[89]);
        initEMPNO(s[90]);
        initEMPN(s[91]);
        initONETEN(s[92]);
        initDVEMPNO(s[93]);
        initSOLO(s[94]);
        initDVSENO(s[95]);
        initSENO(s[96]);
        initSEMN(s[97]);
        initFTPTWK(s[98]);
        initWKHRS(s[99]);
        initWKHRSIR(s[100]);
        initEMPSTY(s[101]);
        initSEMPSTY(s[102]);
        initPERMJB(s[103]);
        initTEA(s[104]);
        initPNOWK(s[105]);
        initPNOWKLN(s[106]);
        initEDATTN1(s[107]);
        initEDATTN2(s[108]);
        initEDATTN3(s[109]);
        initENROLL(s[110]);
        initATTEND(s[111]);
        initCOURSE(s[112]);
        initCOURSE20(s[113]);
        initEDAGE(s[114]);
        initFTSTUD(s[115]);
        initJOBNO(s[116]);
        initBTYPE1(s[117]);
        initBDIRNI1(s[118]);
        initBOWN1(s[119]);
        initBPROPN1(s[120]);
        initBACCSA1(s[121]);
        initBACCSB1(s[122]);
        initBPART1(s[123]);
        initBACCBEG1(s[124]);
        initBACCEND1(s[125]);
        initBDOCS1(s[126]);
        initBPROFIT1(s[127]);
        initBPRFLOSS1(s[128]);
        initBTAX1(s[129]);
        initBNATINS1(s[130]);
        initBBEFORE1(s[131]);
        initBCARRY1(s[132]);
        initBSIZE1(s[133]);
        initBEMPN1(s[134]);
        initBYEAR1(s[135]);
        initBSTART1(s[136]);
        initBFUND1(s[137]);
        initBFUND2(s[138]);
        initBFUND3(s[139]);
        initBFUND4(s[140]);
        initBFUND5(s[141]);
        initBFUND6(s[142]);
        initBFUND7(s[143]);
        initBFUND8(s[144]);
        initBRETIRE1(s[145]);
        initBDEBTS1(s[146]);
        initBOWED1(s[147]);
        initBVAL1(s[148]);
        initBVALB1(s[149]);
        initBTYPE2(s[150]);
        initBDIRNI2(s[151]);
        initBOWN2(s[152]);
        initBPROPN2(s[153]);
        initBACCSA2(s[154]);
        initBACCSB2(s[155]);
        initBPART2(s[156]);
        initBACCBEG2(s[157]);
        initBACCEND2(s[158]);
        initBDOCS2(s[159]);
        initBPROFIT2(s[160]);
        initBPRFLOSS2(s[161]);
        initBTAX2(s[162]);
        initBNATINS2(s[163]);
        initBBEFORE2(s[164]);
        initBCARRY2(s[165]);
        initBSIZE2(s[166]);
        initBEMPN2(s[167]);
        initBYEAR2(s[168]);
        initBSTART2(s[169]);
        initBFUND9(s[170]);
        initBFUND10(s[171]);
        initBFUND11(s[172]);
        initBFUND12(s[173]);
        initBFUND13(s[174]);
        initBFUND14(s[175]);
        initBFUND15(s[176]);
        initBFUND16(s[177]);
        initBRETIRE2(s[178]);
        initBDEBTS2(s[179]);
        initBOWED2(s[180]);
        initBVAL2(s[181]);
        initBVALB2(s[182]);
        initBTYPE3(s[183]);
        initBDIRNI3(s[184]);
        initBOWN3(s[185]);
        initBPROPN3(s[186]);
        initBACCSA3(s[187]);
        initBACCSB3(s[188]);
        initBPART3(s[189]);
        initBACCBEG3(s[190]);
        initBACCEND3(s[191]);
        initBDOCS3(s[192]);
        initBPROFIT3(s[193]);
        initBPRFLOSS3(s[194]);
        initBTAX3(s[195]);
        initBNATINS3(s[196]);
        initBBEFORE3(s[197]);
        initBCARRY3(s[198]);
        initBSIZE3(s[199]);
        initBEMPN3(s[200]);
        initBYEAR3(s[201]);
        initBSTART3(s[202]);
        initBFUND17(s[203]);
        initBFUND18(s[204]);
        initBFUND19(s[205]);
        initBFUND20(s[206]);
        initBFUND21(s[207]);
        initBFUND22(s[208]);
        initBFUND23(s[209]);
        initBFUND24(s[210]);
        initBRETIRE3(s[211]);
        initBDEBTS3(s[212]);
        initBOWED3(s[213]);
        initBVAL3(s[214]);
        initBVALB3(s[215]);
        initBPAST(s[216]);
        initBSELLYR(s[217]);
        initBSELLAM(s[218]);
        initBSELLAB(s[219]);
        initBSELLTX(s[220]);
        initBMOREBUS(s[221]);
        initBWORTH(s[222]);
        initBWORTHB(s[223]);
        initPAYPER(s[224]);
        initPAYESP(s[225]);
        initPAYESM(s[226]);
        initGRSESP(s[227]);
        initGRSESM(s[228]);
        initPAYINC1(s[229]);
        initPAYINC2(s[230]);
        initPAYINC3(s[231]);
        initPAYINC4(s[232]);
        initPAYINC5(s[233]);
        initPAYINC6(s[234]);
        initPAYINC7(s[235]);
        initSMTPEN(s[236]);
        initPAYSLP(s[237]);
        initPAYBON(s[238]);
        initBONTAX(s[239]);
        initEMSHAR1(s[240]);
        initEMSHAR2(s[241]);
        initEMSHAR3(s[242]);
        initSEPER(s[243]);
        initSEAMK(s[244]);
        initSEESW(s[245]);
        initSEESM(s[246]);
        initGROSSPER(s[247]);
        initGRSAMK(s[248]);
        initGRSEESW(s[249]);
        initGRSEESM(s[250]);
        initSEPEL(s[251]);
        initSJOB2(s[252]);
        initSJEMP1(s[253]);
        initSJEMP2(s[254]);
        initINTRO(s[255]);
        initBENTYPE01(s[256]);
        initBENTYPE02(s[257]);
        initBENTYPE03(s[258]);
        initBENTYPE04(s[259]);
        initBENTYPE05(s[260]);
        initBENTYPE06(s[261]);
        initBENTYPE07(s[262]);
        initBENTYPE08(s[263]);
        initBENTYPE09(s[264]);
        initBENTYPE10(s[265]);
        initBENTYPE11(s[266]);
        initBENTYPE12(s[267]);
        initBTOGSEP(s[268]);
        initBPAYNUM(s[269]);
        initBTOGPD(s[270]);
        initBSEPPD01(s[271]);
        initBSEPPD02(s[272]);
        initBSEPPD03(s[273]);
        initBSEPPD04(s[274]);
        initBSEPPD05(s[275]);
        initBSEPPD06(s[276]);
        initBSEPPD07(s[277]);
        initBSEPPD08(s[278]);
        initBSEPPD09(s[279]);
        initBSEPPD10(s[280]);
        initBSEPPD11(s[281]);
        initBSEPPD12(s[282]);
        initBSEPPD13(s[283]);
        initBSEPPD14(s[284]);
        initBSEPPD15(s[285]);
        initBSEPPD16(s[286]);
        initBSEPPD17(s[287]);
        initBSEPPD18(s[288]);
        initBSEPPD19(s[289]);
        initBSEPPD20(s[290]);
        initCREDTYPE1(s[291]);
        initCREDTYPE2(s[292]);
        initCTOGSEP(s[293]);
        initWTCPD(s[294]);
        initCTCPD(s[295]);
        initCOMBPD(s[296]);
        initSPECIAL01(s[297]);
        initSPECIAL02(s[298]);
        initSPECIAL03(s[299]);
        initSPECIAL04(s[300]);
        initSPECIAL05(s[301]);
        initSPECIAL06(s[302]);
        initSPECIAL07(s[303]);
        initSPECIAL08(s[304]);
        initSPECIAL09(s[305]);
        initSPECIAL10(s[306]);
        initWHORECAR(s[307]);
        initWHOREMOB(s[308]);
        initWHOREATT(s[309]);
        initSPECPD1(s[310]);
        initSPECWHEN1(s[311]);
        initSPECINCL1(s[312]);
        initSPECPD2(s[313]);
        initSPECWHEN2(s[314]);
        initSPECINCL2(s[315]);
        initSPECPD3(s[316]);
        initSPECWHEN3(s[317]);
        initSPECINCL3(s[318]);
        initSPECPD4(s[319]);
        initSPECWHEN4(s[320]);
        initSPECINCL4(s[321]);
        initSPECPD5(s[322]);
        initSPECWHEN5(s[323]);
        initSPECINCL5(s[324]);
        initSPECPD6(s[325]);
        initSPECWHEN6(s[326]);
        initSPECINCL6(s[327]);
        initSPECPD7(s[328]);
        initSPECWHEN7(s[329]);
        initSPECINCL7(s[330]);
        initSPECPD8(s[331]);
        initSPECWHEN8(s[332]);
        initSPECINCL8(s[333]);
        initSPECPD9(s[334]);
        initSPECWHEN9(s[335]);
        initSPECINCL9(s[336]);
        initSPECAMT10(s[337]);
        initSPECPD10(s[338]);
        initSPECWHEN10(s[339]);
        initSPECINCL10(s[340]);
        initOSAVA(s[341]);
        initOSAVB(s[342]);
        initOSAVC(s[343]);
        initOWAIT(s[344]);
        initOLEFT(s[345]);
        initOLEFTDO(s[346]);
        initOSAV2Y(s[347]);
        initOWHYSAV01(s[348]);
        initOWHYSAV02(s[349]);
        initOWHYSAV03(s[350]);
        initOWHYSAV04(s[351]);
        initOWHYSAV05(s[352]);
        initOWHYSAV06(s[353]);
        initOWHYSAV07(s[354]);
        initOWHYSAV08(s[355]);
        initOWHYSAV09(s[356]);
        initOWHYSAV10(s[357]);
        initOWHYSAV11(s[358]);
        initONOSAVE1(s[359]);
        initONOSAVE2(s[360]);
        initONOSAVE3(s[361]);
        initONOSAVE4(s[362]);
        initONOSAVE5(s[363]);
        initONOSAVE6(s[364]);
        initONOSAVE7(s[365]);
        initONOSAVE8(s[366]);
        initONOSAVE9(s[367]);
        initOINTEND(s[368]);
        initOSAVEXT(s[369]);
        initPSIT(s[370]);
        initPSITF(s[371]);
        initPNOWKRS(s[372]);
        initPAGESTP(s[373]);
        initPEXPRET(s[374]);
        initPAGERET(s[375]);
        initPFULRET(s[376]);
        initPEARLRS(s[377]);
        initOLONG(s[378]);
        initOLONGYR(s[379]);
        initOSAFERET(s[380]);
        initOSAFERE2(s[381]);
        initOUNDER(s[382]);
        initPESAME(s[383]);
        initPEMOFF(s[384]);
        initPEMELG(s[385]);
        initPEMMEM(s[386]);
        initPNEWMEM(s[387]);
        initPEWYNO01(s[388]);
        initPEWYNO02(s[389]);
        initPEWYNO03(s[390]);
        initPEWYNO04(s[391]);
        initPEWYNO05(s[392]);
        initPEWYNO06(s[393]);
        initPEWYNO07(s[394]);
        initPEWYNO08(s[395]);
        initPEWYNO09(s[396]);
        initPEWYNO10(s[397]);
        initPEWYNO11(s[398]);
        initPEMFIN(s[399]);
        initPCONT(s[400]);
        initPANYO(s[401]);
        initPNUMOS(s[402]);
        initPOCNMSC(s[403]);
        initPPRNMSC(s[404]);
        initPSCHM_F(s[405]);
        initPSCHY_F(s[406]);
        initPSCHM_S(s[407]);
        initPSCHY_S(s[408]);
        initPSCHM_T(s[409]);
        initPSCHY_T(s[410]);
        initPOCTYP1(s[411]);
        initPOJOIN1(s[412]);
        initPORAGE1(s[413]);
        initPOMETH1(s[414]);
        initPOPYCH(s[415]);
        initPOCONH1(s[416]);
        initPOCNPR1(s[417]);
        initPOCNFR1(s[418]);
        initPOCNFG1(s[419]);
        initPOLSYR1(s[420]);
        initPOYRAM1(s[421]);
        initPOEMP1(s[422]);
        initPOEMPH1(s[423]);
        initPOEMAM1(s[424]);
        initPOEMPR1(s[425]);
        initPOEMFR1(s[426]);
        initPOEMFG1(s[427]);
        initPOADD1(s[428]);
        initPOADD2(s[429]);
        initPOADD3(s[430]);
        initPAVCH1(s[431]);
        initPAVCAM1(s[432]);
        initPAVCPR1(s[433]);
        initPAVCFR1(s[434]);
        initPAVCFG1(s[435]);
        initPAVCIN1(s[436]);
        initPIRREG(s[437]);
        initPADDFUT(s[438]);
        initPOCONCH1(s[439]);
        initPOCNHOW1(s[440]);
        initPOCNVOL1(s[441]);
        initPOCNLRS1(s[442]);
        initPOCNLRS2(s[443]);
        initPOCNLRS3(s[444]);
        initPOCNLRS4(s[445]);
        initPOCNDRS1(s[446]);
        initPOCNDRS2(s[447]);
        initPOCNDRS3(s[448]);
        initPOCNDRS4(s[449]);
        initPOCNDRS5(s[450]);
        initPOCNDRS6(s[451]);
        initPOCNPLN1(s[452]);
        initPDBCAL1(s[453]);
        initPBFRAC1(s[454]);
        initPBQUAL1(s[455]);
        initPBLUMV1(s[456]);
        initPBINCH1(s[457]);
        initPBINCF1(s[458]);
        initPBINCA1(s[459]);
        initPBDOCS1(s[460]);
        initPBSTYR1(s[461]);
        initPBSTMN1(s[462]);
        initPAVCUV1(s[463]);
        initPAVCVB1(s[464]);
        initPAVDOC1(s[465]);
        initPASTYR1(s[466]);
        initPASTMN1(s[467]);
        initPDCVAL1(s[468]);
        initPDCVB1(s[469]);
        initPCDOCS1(s[470]);
        initPCSTYR1(s[471]);
        initPCSTMN1(s[472]);
        initPOLUM1(s[473]);
        initPOLMV1(s[474]);
        initPOLMVB1(s[475]);
        initPOLMUS1(s[476]);
        initPOLMUS2(s[477]);
        initPOLMUS3(s[478]);
        initPOLMUS4(s[479]);
        initPOLMUS5(s[480]);
        initPOLMUS6(s[481]);
        initPOCASH1(s[482]);
        initPOANN1(s[483]);
        initPOANN2(s[484]);
        initPOANN3(s[485]);
        initPOANN4(s[486]);
        initPOANLM1(s[487]);
        initPOANEXY1(s[488]);
        initPOANEXM1(s[489]);
        initPOANJT1(s[490]);
        initPOANIF1(s[491]);
        initPOANEH1(s[492]);
        initPOANGA1(s[493]);
        initPOANVI1(s[494]);
        initPOANVB(s[495]);
        initPODRVI1(s[496]);
        initPODRVB1(s[497]);
        initPODRINC1(s[498]);
        initPODRINCB1(s[499]);
        initPOPENVI(s[500]);
        initPOPENVB(s[501]);
        initPOFAN1(s[502]);
        initPOFAN2(s[503]);
        initPOFAN3(s[504]);
        initPOFAN4(s[505]);
        initPOFAN5(s[506]);
        initPOFAN6(s[507]);
        initPOFAWH1(s[508]);
        initPOFAWH2(s[509]);
        initPOFAWH3(s[510]);
        initPOFAWH4(s[511]);
        initPOFAWH5(s[512]);
        initPOFAWH6(s[513]);
        initPOFAAG1(s[514]);
        initPOCTYP2(s[515]);
        initPOJOIN2(s[516]);
        initPORAGE2(s[517]);
        initPOMETH2(s[518]);
        initPOPYCH2(s[519]);
        initPOCONH2(s[520]);
        initPOCNPR2(s[521]);
        initPOCNFR2(s[522]);
        initPOCNFG2(s[523]);
        initPOLSYR2(s[524]);
        initPOYRAM2(s[525]);
        initPOEMP2(s[526]);
        initPOEMPH2(s[527]);
        initPOEMAM2(s[528]);
        initPOEMPR2(s[529]);
        initPOEMFR2(s[530]);
        initPOEMFG2(s[531]);
        initPOADD4(s[532]);
        initPOADD5(s[533]);
        initPOADD6(s[534]);
        initPAVCH2(s[535]);
        initPAVCAM2(s[536]);
        initPAVCPR2(s[537]);
        initPAVCFR2(s[538]);
        initPAVCFG2(s[539]);
        initPAVCIN2(s[540]);
        initPIRREG2(s[541]);
        initPADDFUT2(s[542]);
        initPOCONCH2(s[543]);
        initPOCNHOW2(s[544]);
        initPOCNVOL2(s[545]);
        initPOCNLRS5(s[546]);
        initPOCNLRS6(s[547]);
        initPOCNLRS7(s[548]);
        initPOCNLRS8(s[549]);
        initPOCNDRS7(s[550]);
        initPOCNDRS8(s[551]);
        initPOCNDRS9(s[552]);
        initPOCNDRS10(s[553]);
        initPOCNDRS11(s[554]);
        initPOCNDRS12(s[555]);
        initPOCNPLN2(s[556]);
        initPDBCAL2(s[557]);
        initPBFRAC2(s[558]);
        initPBQUAL2(s[559]);
        initPBLUMV2(s[560]);
        initPBLMVB2(s[561]);
        initPBINCH2(s[562]);
        initPBINCF2(s[563]);
        initPBINCA2(s[564]);
        initPBDOCS2(s[565]);
        initPBSTYR2(s[566]);
        initPBSTMN2(s[567]);
        initPAVCUV2(s[568]);
        initPAVCVB2(s[569]);
        initPAVDOC2(s[570]);
        initPASTYR2(s[571]);
        initPASTMN2(s[572]);
        initPDCVAL2(s[573]);
        initPDCVB2(s[574]);
        initPCDOCS2(s[575]);
        initPCSTYR2(s[576]);
        initPCSTMN2(s[577]);
        initPOLUM2(s[578]);
        initPOLMV2(s[579]);
        initPOLMVB2(s[580]);
        initPOLMUS7(s[581]);
        initPOLMUS8(s[582]);
        initPOLMUS9(s[583]);
        initPOLMUS10(s[584]);
        initPOLMUS11(s[585]);
        initPOLMUS12(s[586]);
        initPOCASH2(s[587]);
        initPOANN5(s[588]);
        initPOANN6(s[589]);
        initPOANN7(s[590]);
        initPOANN8(s[591]);
        initPOANLM2(s[592]);
        initPOANEXY2(s[593]);
        initPOANEXM2(s[594]);
        initPOANJT2(s[595]);
        initPOANIF2(s[596]);
        initPOANEH2(s[597]);
        initPOANGA2(s[598]);
        initPOANVI2(s[599]);
        initPOANVB2(s[600]);
        initPODRVI2(s[601]);
        initPODRVB2(s[602]);
        initPODRINC2(s[603]);
        initPODRINCB2(s[604]);
        initPOPENVI2(s[605]);
        initPOPENVB2(s[606]);
        initPOFAN7(s[607]);
        initPOFAN8(s[608]);
        initPOFAN9(s[609]);
        initPOFAN10(s[610]);
        initPOFAN11(s[611]);
        initPOFAN12(s[612]);
        initPOFAWH7(s[613]);
        initPOFAWH8(s[614]);
        initPOFAWH9(s[615]);
        initPOFAWH10(s[616]);
        initPOFAWH11(s[617]);
        initPOFAWH12(s[618]);
        initPOFAAG2(s[619]);
        initPPYRST1(s[620]);
        initPPORG1(s[621]);
        initPPTYP1(s[622]);
        initPPSIPP1(s[623]);
        initPPPAY1(s[624]);
        initPPRGH1(s[625]);
        initPPRGAM(s[626]);
        initPPRGPE1(s[627]);
        initPPRGFR1(s[628]);
        initPPRGFG1(s[629]);
        initPPIRRY1(s[630]);
        initPPIRRH1(s[631]);
        initPPIRRA1(s[632]);
        initPPIRRF1(s[633]);
        initPPIRNO1(s[634]);
        initPPLASY1(s[635]);
        initPPLSTA1(s[636]);
        initPPLSTP1(s[637]);
        initPPEVRG1(s[638]);
        initPPYSTP1(s[639]);
        initPPYSTP2(s[640]);
        initPPYSTP3(s[641]);
        initPPYSTP4(s[642]);
        initPPYSTP5(s[643]);
        initPPYSTP6(s[644]);
        initPPYSTP7(s[645]);
        initPPCONCH(s[646]);
        initPPCNHOW1(s[647]);
        initPPCNLRS1(s[648]);
        initPPCNLRS2(s[649]);
        initPPCNLRS3(s[650]);
        initPPCNLRS4(s[651]);
        initPPCNDRS1(s[652]);
        initPPCNDRS2(s[653]);
        initPPCNDRS3(s[654]);
        initPPCNDRS4(s[655]);
        initPPCNDRS5(s[656]);
        initPPCNDRS6(s[657]);
        initPPCNDRS7(s[658]);
        initPPCNDRS8(s[659]);
        initPPCNPLN1(s[660]);
        initPPEMP1(s[661]);
        initPPEMPH1(s[662]);
        initPPEMAM1(s[663]);
        initPPEMPR1(s[664]);
        initPPEMFR1(s[665]);
        initPPEIRH1(s[666]);
        initPPEIRA1(s[667]);
        initPPEIRF1(s[668]);
        initPPNINS1(s[669]);
        initPPVINT1(s[670]);
        initPSTYPE1(s[671]);
        initPSTYPE2(s[672]);
        initPSTYPE3(s[673]);
        initPSTYPE4(s[674]);
        initPSTYPE5(s[675]);
        initPSTYPE6(s[676]);
        initPSTYPE7(s[677]);
        initPPVAL1(s[678]);
        initPPVALB1(s[679]);
        initPPDOCS1(s[680]);
        initPPSTYR1(s[681]);
        initPPSTMN1(s[682]);
        initPMORTC(s[683]);
        initPPLUM1(s[684]);
        initPPLMV1(s[685]);
        initPPLMVB1(s[686]);
        initPPLMUS1(s[687]);
        initPPCASH1(s[688]);
        initPPANN1(s[689]);
        initPPANN2(s[690]);
        initPPANN3(s[691]);
        initPPANN4(s[692]);
        initPPANLM1(s[693]);
        initPPANEXY1(s[694]);
        initPPANEXM1(s[695]);
        initPPANJT1(s[696]);
        initPPANIF1(s[697]);
        initPPANEH1(s[698]);
        initPPANGA1(s[699]);
        initPPANVI1(s[700]);
        initPPANVB1(s[701]);
        initPPDRVI1(s[702]);
        initPPDRVB1(s[703]);
        initPPDRINC1(s[704]);
        initPPDRINCB(s[705]);
        initPPFAN1(s[706]);
        initPPFAN2(s[707]);
        initPPFAN3(s[708]);
        initPPFAN4(s[709]);
        initPPFAN5(s[710]);
        initPPFAWH1(s[711]);
        initPPFAWH2(s[712]);
        initPPFAWH3(s[713]);
        initPPFAWH4(s[714]);
        initPPFAWH5(s[715]);
        initPPFAWH6(s[716]);
        initPPFAWH7(s[717]);
        initPPFAAG1(s[718]);
        initPPACCU1(s[719]);
        initPPYRST2(s[720]);
        initPPORG2(s[721]);
        initPPTYP2(s[722]);
        initPPSIPP2(s[723]);
        initPPPAY2(s[724]);
        initPPRGH2(s[725]);
        initPPRGAM2(s[726]);
        initPPRGPE2(s[727]);
        initPPRGFR2(s[728]);
        initPPRGFG2(s[729]);
        initPPIRRY2(s[730]);
        initPPIRRH2(s[731]);
        initPPIRRA2(s[732]);
        initPPIRRF2(s[733]);
        initPPIRNO2(s[734]);
        initPPLASY2(s[735]);
        initPPLSTA2(s[736]);
        initPPLSTP2(s[737]);
        initPPEVRG2(s[738]);
        initPPYSTP8(s[739]);
        initPPYSTP9(s[740]);
        initPPYSTP10(s[741]);
        initPPYSTP11(s[742]);
        initPPYSTP12(s[743]);
        initPPYSTP13(s[744]);
        initPPYSTP14(s[745]);
        initPPCONCH2(s[746]);
        initPPCNHOW2(s[747]);
        initPPCNLRS5(s[748]);
        initPPCNLRS6(s[749]);
        initPPCNLRS7(s[750]);
        initPPCNLRS8(s[751]);
        initPPCNDRS9(s[752]);
        initPPCNDRS10(s[753]);
        initPPCNDRS11(s[754]);
        initPPCNDRS12(s[755]);
        initPPCNDRS13(s[756]);
        initPPCNDRS14(s[757]);
        initPPCNDRS15(s[758]);
        initPPCNDRS16(s[759]);
        initPPCNPLN2(s[760]);
        initPPEMP2(s[761]);
        initPPEMPH2(s[762]);
        initPPEMAM2(s[763]);
        initPPEMPR2(s[764]);
        initPPEMFR2(s[765]);
        initPPEIRH2(s[766]);
        initPPEIRA2(s[767]);
        initPPEIRF2(s[768]);
        initPPNINS2(s[769]);
        initPPVINT2(s[770]);
        initPSTYPE8(s[771]);
        initPSTYPE9(s[772]);
        initPSTYPE10(s[773]);
        initPSTYPE11(s[774]);
        initPSTYPE12(s[775]);
        initPSTYPE13(s[776]);
        initPSTYPE14(s[777]);
        initPPVAL2(s[778]);
        initPPVALB2(s[779]);
        initPPDOCS2(s[780]);
        initPPSTYR2(s[781]);
        initPPSTMN2(s[782]);
        initPMORTC2(s[783]);
        initPPLUM2(s[784]);
        initPPLMV2(s[785]);
        initPPLMVB2(s[786]);
        initPPLMUS2(s[787]);
        initPPCASH2(s[788]);
        initPPANN5(s[789]);
        initPPANN6(s[790]);
        initPPANN7(s[791]);
        initPPANN8(s[792]);
        initPPANLM2(s[793]);
        initPPANEXY2(s[794]);
        initPPANEXM2(s[795]);
        initPPANJT2(s[796]);
        initPPANIF2(s[797]);
        initPPANEH2(s[798]);
        initPPANGA2(s[799]);
        initPPANVI2(s[800]);
        initPPANVB2(s[801]);
        initPPDRVI2(s[802]);
        initPPDRVB2(s[803]);
        initPPDRINC2(s[804]);
        initPPDRINCB2(s[805]);
        initPPFAN6(s[806]);
        initPPFAN7(s[807]);
        initPPFAN8(s[808]);
        initPPFAN9(s[809]);
        initPPFAN10(s[810]);
        initPPFAWH8(s[811]);
        initPPFAWH9(s[812]);
        initPPFAWH10(s[813]);
        initPPFAWH11(s[814]);
        initPPFAWH12(s[815]);
        initPPFAWH13(s[816]);
        initPPFAWH14(s[817]);
        initPPFAAG2(s[818]);
        initPPACCU2(s[819]);
        initPPYRST3(s[820]);
        initPPORG3(s[821]);
        initPPTYP3(s[822]);
        initPPSIPP3(s[823]);
        initPPPAY3(s[824]);
        initPPRGH3(s[825]);
        initPPRGAM3(s[826]);
        initPPRGPE3(s[827]);
        initPPRGFR3(s[828]);
        initPPRGFG3(s[829]);
        initPPIRRY3(s[830]);
        initPPIRRH3(s[831]);
        initPPIRRA3(s[832]);
        initPPIRRF3(s[833]);
        initPPIRNO3(s[834]);
        initPPLASY3(s[835]);
        initPPLSTA3(s[836]);
        initPPLSTP3(s[837]);
        initPPEVRG3(s[838]);
        initPPYSTP15(s[839]);
        initPPYSTP16(s[840]);
        initPPYSTP17(s[841]);
        initPPYSTP18(s[842]);
        initPPYSTP19(s[843]);
        initPPYSTP20(s[844]);
        initPPYSTP21(s[845]);
        initPPCONCH3(s[846]);
        initPPCNHO___W3(s[847]);
        initPPCNLRS9(s[848]);
        initPPCNLRS10(s[849]);
        initPPCNLRS11(s[850]);
        initPPCNLRS12(s[851]);
        initPPCNDRS17(s[852]);
        initPPCNDRS18(s[853]);
        initPPCNDRS19(s[854]);
        initPPCNDRS20(s[855]);
        initPPCNDRS21(s[856]);
        initPPCNDRS22(s[857]);
        initPPCNDRS23(s[858]);
        initPPCNDRS24(s[859]);
        initPPCNPLN3(s[860]);
        initPPEMP3(s[861]);
        initPPEMPH3(s[862]);
        initPPEMAM3(s[863]);
        initPPEMPR3(s[864]);
        initPPEMFR3(s[865]);
        initPPEIRH3(s[866]);
        initPPEIRA3(s[867]);
        initPPEIRF3(s[868]);
        initPPNINS3(s[869]);
        initPPVINT3(s[870]);
        initPSTYPE15(s[871]);
        initPSTYPE16(s[872]);
        initPSTYPE17(s[873]);
        initPSTYPE18(s[874]);
        initPSTYPE19(s[875]);
        initPSTYPE20(s[876]);
        initPSTYPE21(s[877]);
        initPPVAL3(s[878]);
        initPPVALB3(s[879]);
        initPPDOCS3(s[880]);
        initPPSTYR3(s[881]);
        initPPSTMN3(s[882]);
        initPMORTC3(s[883]);
        initPPLUM3(s[884]);
        initPPLMV3(s[885]);
        initPPLMVB3(s[886]);
        initPPLMUS3(s[887]);
        initPPCASH3(s[888]);
        initPPANN9(s[889]);
        initPPANN10(s[890]);
        initPPANN11(s[891]);
        initPPANN12(s[892]);
        initPPANLM3(s[893]);
        initPPANEXY3(s[894]);
        initPPANEXM3(s[895]);
        initPPANJT3(s[896]);
        initPPANIF3(s[897]);
        initPPANEH3(s[898]);
        initPPANGA3(s[899]);
        initPPANVI3(s[900]);
        initPPANVB3(s[901]);
        initPPDRVI3(s[902]);
        initPPDRVB3(s[903]);
        initPPDRINC3(s[904]);
        initPPDRINCB3(s[905]);
        initPPFAN11(s[906]);
        initPPFAN12(s[907]);
        initPPFAN13(s[908]);
        initPPFAN14(s[909]);
        initPPFAN15(s[910]);
        initPPFAWH15(s[911]);
        initPPFAWH16(s[912]);
        initPPFAWH17(s[913]);
        initPPFAWH18(s[914]);
        initPPFAWH19(s[915]);
        initPPFAWH20(s[916]);
        initPPFAWH21(s[917]);
        initPPFAAG3(s[918]);
        initPPACCU3(s[919]);
        initPFNEW(s[920]);
        initPFNEWNO(s[921]);
        initPEVERC(s[922]);
        initPEVERNC(s[923]);
        initPRETAIN(s[924]);
        initPFNUM(s[925]);
        initPFEN(s[926]);
        initPFENNUM(s[927]);
        initRPFCRET1(s[928]);
        initRPFCRET2(s[929]);
        initRPFCRET3(s[930]);
        initRPFCRET4(s[931]);
        initRPFCRET5(s[932]);
        initRPFCRET6(s[933]);
        initRPCRET1(s[934]);
        initRPCRET2(s[935]);
        initRPCRET3(s[936]);
        initPFTYP1(s[937]);
        initPFOCTY1(s[938]);
        initPFLUM1(s[939]);
        initPFLMV1(s[940]);
        initPFLMVB1(s[941]);
        initPFLMUS1(s[942]);
        initPFLUMALL1(s[943]);
        initPFCASH1(s[944]);
        initPFANN1(s[945]);
        initPFANN2(s[946]);
        initPFANN3(s[947]);
        initPFANN4(s[948]);
        initPFANN5(s[949]);
        initPFREM1(s[950]);
        initPFANLM1(s[951]);
        initPFANEXY1(s[952]);
        initPFANEXM1(s[953]);
        initPFANJT1(s[954]);
        initPFANIF1(s[955]);
        initPFANEH1(s[956]);
        initPFANGA1(s[957]);
        initPFANVI1(s[958]);
        initPFANVB1(s[959]);
        initPFDRVI1(s[960]);
        initPFDRVB1(s[961]);
        initPFDRINC1(s[962]);
        initPFDRINCB1(s[963]);
        initPFPENVI1(s[964]);
        initPFPENVB1(s[965]);
        initPFFAN1(s[966]);
        initPFFAN2(s[967]);
        initPFFAN3(s[968]);
        initPFFAN4(s[969]);
        initPFFAN5(s[970]);
        initPFFAWH1(s[971]);
        initPFFAWH2(s[972]);
        initPFFAWH3(s[973]);
        initPFFAWH4(s[974]);
        initPFFAWH5(s[975]);
        initPFFAWH6(s[976]);
        initPFFAAG1(s[977]);
        initPFREC1(s[978]);
        initPFDRAW1(s[979]);
        initPFDDV1(s[980]);
        initPFDDVB1(s[981]);
        initPFBEG1(s[982]);
        initPFEND1(s[983]);
        initPFSIPTY1(s[984]);
        initPFSIPTY2(s[985]);
        initPFSIPTY3(s[986]);
        initPFSIPTY4(s[987]);
        initPFSIPTY5(s[988]);
        initPFSIPTY6(s[989]);
        initPFSIPTY7(s[990]);
        initPFCURV1(s[991]);
        initPFCUVB1(s[992]);
        initPFLUMV1(s[993]);
        initPFLUVB1(s[994]);
        initPFINCP1(s[995]);
        initPFINCA1(s[996]);
        initPFDOCS1(s[997]);
        initPFSTMY1(s[998]);
        initPFSTMM1(s[999]);
        initPFSTAT1(s[1000]);
        initPFTYP2(s[1001]);
        initPFOCTY2(s[1002]);
        initPFLUM2(s[1003]);
        initPFLMV2(s[1004]);
        initPFLMVB2(s[1005]);
        initPFLMUS2(s[1006]);
        initPFLUMALL2(s[1007]);
        initPFCASH2(s[1008]);
        initPFANN6(s[1009]);
        initPFANN7(s[1010]);
        initPFANN8(s[1011]);
        initPFANN9(s[1012]);
        initPFANN10(s[1013]);
        initPFREM2(s[1014]);
        initPFANLM2(s[1015]);
        initPFANEXY2(s[1016]);
        initPFANEXM2(s[1017]);
        initPFANJT2(s[1018]);
        initPFANIF2(s[1019]);
        initPFANEH2(s[1020]);
        initPFANGA2(s[1021]);
        initPFANVI2(s[1022]);
        initPFANVB2(s[1023]);
        initPFDRVI2(s[1024]);
        initPFDRVB2(s[1025]);
        initPFDRINC2(s[1026]);
        initPFDRINCB2(s[1027]);
        initPFPENVI2(s[1028]);
        initPFPENVB2(s[1029]);
        initPFFAN6(s[1030]);
        initPFFAN7(s[1031]);
        initPFFAN8(s[1032]);
        initPFFAN9(s[1033]);
        initPFFAN10(s[1034]);
        initPFFAWH7(s[1035]);
        initPFFAWH8(s[1036]);
        initPFFAWH9(s[1037]);
        initPFFAWH10(s[1038]);
        initPFFAWH11(s[1039]);
        initPFFAWH12(s[1040]);
        initPFFAAG2(s[1041]);
        initPFREC2(s[1042]);
        initPFDRAW2(s[1043]);
        initPFDDV2(s[1044]);
        initPFDDVB2(s[1045]);
        initPFBEG2(s[1046]);
        initPFEND2(s[1047]);
        initPFSIPTY8(s[1048]);
        initPFSIPTY9(s[1049]);
        initPFSIPTY10(s[1050]);
        initPFSIPTY11(s[1051]);
        initPFSIPTY12(s[1052]);
        initPFSIPTY13(s[1053]);
        initPFSIPTY14(s[1054]);
        initPFCURV2(s[1055]);
        initPFCUVB2(s[1056]);
        initPFLUMV2(s[1057]);
        initPFLUVB2(s[1058]);
        initPFINCP2(s[1059]);
        initPFINCA2(s[1060]);
        initPFDOCS2(s[1061]);
        initPFSTMY2(s[1062]);
        initPFSTMM2(s[1063]);
        initPFSTAT2(s[1064]);
        initPFTYP3(s[1065]);
        initPFOCTY3(s[1066]);
        initPFLUM3(s[1067]);
        initPFLMV3(s[1068]);
        initPFLMVB3(s[1069]);
        initPFLMUS3(s[1070]);
        initPFLUMALL3(s[1071]);
        initPFCASH3(s[1072]);
        initPFANN11(s[1073]);
        initPFANN12(s[1074]);
        initPFANN13(s[1075]);
        initPFANN14(s[1076]);
        initPFANN15(s[1077]);
        initPFREM3(s[1078]);
        initPFANLM3(s[1079]);
        initPFANEXY3(s[1080]);
        initPFANEXM3(s[1081]);
        initPFANJT3(s[1082]);
        initPFANIF3(s[1083]);
        initPFANEH3(s[1084]);
        initPFANGA3(s[1085]);
        initPFANVI3(s[1086]);
        initPFANVB3(s[1087]);
        initPFDRVI3(s[1088]);
        initPFDRVB3(s[1089]);
        initPFDRINC3(s[1090]);
        initPFDRINCB3(s[1091]);
        initPFPENVI3(s[1092]);
        initPFPENVB3(s[1093]);
        initPFFAN11(s[1094]);
        initPFFAN12(s[1095]);
        initPFFAN13(s[1096]);
        initPFFAN14(s[1097]);
        initPFFAN15(s[1098]);
        initPFFAWH13(s[1099]);
        initPFFAWH14(s[1100]);
        initPFFAWH15(s[1101]);
        initPFFAWH16(s[1102]);
        initPFFAWH17(s[1103]);
        initPFFAWH18(s[1104]);
        initPFFAAG3(s[1105]);
        initPFREC3(s[1106]);
        initPFDRA___W3(s[1107]);
        initPFDDV3(s[1108]);
        initPFDDVB3(s[1109]);
        initPFBEG3(s[1110]);
        initPFEND3(s[1111]);
        initPFSIPTY15(s[1112]);
        initPFSIPTY16(s[1113]);
        initPFSIPTY17(s[1114]);
        initPFSIPTY18(s[1115]);
        initPFSIPTY19(s[1116]);
        initPFSIPTY20(s[1117]);
        initPFSIPTY21(s[1118]);
        initPFCURV3(s[1119]);
        initPFCUVB3(s[1120]);
        initPFLUMV3(s[1121]);
        initPFLUVB3(s[1122]);
        initPFINCP3(s[1123]);
        initPFINCA3(s[1124]);
        initPFDOCS3(s[1125]);
        initPFSTMY3(s[1126]);
        initPFSTMM3(s[1127]);
        initPFSTAT3(s[1128]);
        initPFTYP4(s[1129]);
        initPFOCTY4(s[1130]);
        initPFLUM4(s[1131]);
        initPFLMV4(s[1132]);
        initPFLMVB4(s[1133]);
        initPFLMUS4(s[1134]);
        initPFLUMALL4(s[1135]);
        initPFCASH4(s[1136]);
        initPFANN16(s[1137]);
        initPFANN17(s[1138]);
        initPFANN18(s[1139]);
        initPFANN19(s[1140]);
        initPFANN20(s[1141]);
        initPFREM4(s[1142]);
        initPFANLM4(s[1143]);
        initPFANEXY4(s[1144]);
        initPFANEXM4(s[1145]);
        initPFANJT4(s[1146]);
        initPFANIF4(s[1147]);
        initPFANEH4(s[1148]);
        initPFANGA4(s[1149]);
        initPFANVI4(s[1150]);
        initPFANVB4(s[1151]);
        initPFDRVI4(s[1152]);
        initPFDRVB4(s[1153]);
        initPFDRINC4(s[1154]);
        initPFDRINCB4(s[1155]);
        initPFPENVI4(s[1156]);
        initPFPENVB4(s[1157]);
        initPFFAN16(s[1158]);
        initPFFAN17(s[1159]);
        initPFFAN18(s[1160]);
        initPFFAN19(s[1161]);
        initPFFAN20(s[1162]);
        initPFFAWH19(s[1163]);
        initPFFAWH20(s[1164]);
        initPFFAWH21(s[1165]);
        initPFFAWH22(s[1166]);
        initPFFAWH23(s[1167]);
        initPFFAWH24(s[1168]);
        initPFFAAG4(s[1169]);
        initPFREC4(s[1170]);
        initPFDRAW4(s[1171]);
        initPFDDV4(s[1172]);
        initPFDDVB4(s[1173]);
        initPFBEG4(s[1174]);
        initPFEND4(s[1175]);
        initPFSIPTY22(s[1176]);
        initPFSIPTY23(s[1177]);
        initPFSIPTY24(s[1178]);
        initPFSIPTY25(s[1179]);
        initPFSIPTY26(s[1180]);
        initPFSIPTY27(s[1181]);
        initPFSIPTY28(s[1182]);
        initPFCURV4(s[1183]);
        initPFCUVB4(s[1184]);
        initPFLUMV4(s[1185]);
        initPFLUVB4(s[1186]);
        initPFINCP4(s[1187]);
        initPFINCA4(s[1188]);
        initPFDOCS4(s[1189]);
        initPFSTMY4(s[1190]);
        initPFSTMM4(s[1191]);
        initPFSTAT4(s[1192]);
        initPFTYP5(s[1193]);
        initPFOCTY5(s[1194]);
        initPFLUM5(s[1195]);
        initPFLMV5(s[1196]);
        initPFLMVB5(s[1197]);
        initPFLMUS5(s[1198]);
        initPFLUMALL5(s[1199]);
        initPFCASH5(s[1200]);
        initPFANN21(s[1201]);
        initPFANN22(s[1202]);
        initPFANN23(s[1203]);
        initPFANN24(s[1204]);
        initPFANN25(s[1205]);
        initPFREM5(s[1206]);
        initPFANLM5(s[1207]);
        initPFANEXY5(s[1208]);
        initPFANEXM5(s[1209]);
        initPFANJT5(s[1210]);
        initPFANIF5(s[1211]);
        initPFANEH5(s[1212]);
        initPFANGA5(s[1213]);
        initPFANVI5(s[1214]);
        initPFANVB5(s[1215]);
        initPFDRVI5(s[1216]);
        initPFDRVB5(s[1217]);
        initPFDRINC5(s[1218]);
        initPFDRINCB5(s[1219]);
        initPFPENVI5(s[1220]);
        initPFPENVB5(s[1221]);
        initPFFAN21(s[1222]);
        initPFFAN22(s[1223]);
        initPFFAN23(s[1224]);
        initPFFAN24(s[1225]);
        initPFFAN25(s[1226]);
        initPFFAWH25(s[1227]);
        initPFFAWH26(s[1228]);
        initPFFAWH27(s[1229]);
        initPFFAWH28(s[1230]);
        initPFFAWH29(s[1231]);
        initPFFAWH30(s[1232]);
        initPFFAAG5(s[1233]);
        initPFREC5(s[1234]);
        initPFDRAW5(s[1235]);
        initPFDDV5(s[1236]);
        initPFDDVB5(s[1237]);
        initPFBEG5(s[1238]);
        initPFEND5(s[1239]);
        initPFSIPTY29(s[1240]);
        initPFSIPTY30(s[1241]);
        initPFSIPTY31(s[1242]);
        initPFSIPTY32(s[1243]);
        initPFSIPTY33(s[1244]);
        initPFSIPTY34(s[1245]);
        initPFSIPTY35(s[1246]);
        initPFCURV5(s[1247]);
        initPFCUVB5(s[1248]);
        initPFLUMV5(s[1249]);
        initPFLUVB5(s[1250]);
        initPFINCP5(s[1251]);
        initPFINCA5(s[1252]);
        initPFDOCS5(s[1253]);
        initPFSTMY5(s[1254]);
        initPFSTMM5(s[1255]);
        initPFSTAT5(s[1256]);
        initPFTYP6(s[1257]);
        initPFOCTY6(s[1258]);
        initPFLUM6(s[1259]);
        initPFLMV6(s[1260]);
        initPFLMVB6(s[1261]);
        initPFLMUS6(s[1262]);
        initPFLUMALL6(s[1263]);
        initPFCASH6(s[1264]);
        initPFANN26(s[1265]);
        initPFANN27(s[1266]);
        initPFANN28(s[1267]);
        initPFANN29(s[1268]);
        initPFANN30(s[1269]);
        initPFREM6(s[1270]);
        initPFANLM6(s[1271]);
        initPFANEXY6(s[1272]);
        initPFANEXM6(s[1273]);
        initPFANJT6(s[1274]);
        initPFANIF6(s[1275]);
        initPFANEH6(s[1276]);
        initPFANGA6(s[1277]);
        initPFANVI6(s[1278]);
        initPFANVB6(s[1279]);
        initPFDRVI6(s[1280]);
        initPFDRVB6(s[1281]);
        initPFDRINC6(s[1282]);
        initPFDRINCB6(s[1283]);
        initPFPENVI6(s[1284]);
        initPFPENVB6(s[1285]);
        initPFFAN26(s[1286]);
        initPFFAN27(s[1287]);
        initPFFAN28(s[1288]);
        initPFFAN29(s[1289]);
        initPFFAN30(s[1290]);
        initPFFAWH31(s[1291]);
        initPFFAWH32(s[1292]);
        initPFFAWH33(s[1293]);
        initPFFAWH34(s[1294]);
        initPFFAWH35(s[1295]);
        initPFFAWH36(s[1296]);
        initPFFAAG6(s[1297]);
        initPFREC6(s[1298]);
        initPFDRAW6(s[1299]);
        initPFDDV6(s[1300]);
        initPFDDVB6(s[1301]);
        initPFBEG6(s[1302]);
        initPFEND6(s[1303]);
        initPFSIPTY36(s[1304]);
        initPFSIPTY37(s[1305]);
        initPFSIPTY38(s[1306]);
        initPFSIPTY39(s[1307]);
        initPFSIPTY40(s[1308]);
        initPFSIPTY41(s[1309]);
        initPFSIPTY42(s[1310]);
        initPFCURV6(s[1311]);
        initPFCUVB6(s[1312]);
        initPFLUMV6(s[1313]);
        initPFLUVB6(s[1314]);
        initPFINCP6(s[1315]);
        initPFINCA6(s[1316]);
        initPFDOCS6(s[1317]);
        initPFSTMY6(s[1318]);
        initPFSTMM6(s[1319]);
        initPFSTAT6(s[1320]);
        initPWID(s[1321]);
        initPWIDFUT(s[1322]);
        initPWLUM(s[1323]);
        initPWLUVAL(s[1324]);
        initPWEXPH(s[1325]);
        initPWEXPA(s[1326]);
        initPSPSE(s[1327]);
        initPSPLUM(s[1328]);
        initPSPLUVAL(s[1329]);
        initPSPEXPH(s[1330]);
        initPSPEXPA(s[1331]);
        initPWACCU(s[1332]);
        initOPENS01(s[1333]);
        initOPENS02(s[1334]);
        initOPENS03(s[1335]);
        initOPENS04(s[1336]);
        initOPENS05(s[1337]);
        initOPENS06(s[1338]);
        initOPENS07(s[1339]);
        initOPENS08(s[1340]);
        initOPENS09(s[1341]);
        initOPENS10(s[1342]);
        initOPENS11(s[1343]);
        initOPENS12(s[1344]);
        initOPENS13(s[1345]);
        initOPENS14(s[1346]);
        initOPENS15(s[1347]);
        initOEXPINC01(s[1348]);
        initOEXPINC02(s[1349]);
        initOEXPINC03(s[1350]);
        initOEXPINC04(s[1351]);
        initOEXPINC05(s[1352]);
        initOEXPINC06(s[1353]);
        initOEXPINC07(s[1354]);
        initOEXPINC08(s[1355]);
        initOEXPINC09(s[1356]);
        initOEXPINC10(s[1357]);
        initOEXPINC11(s[1358]);
        initOEXPINC12(s[1359]);
        initOEXPINC13(s[1360]);
        initOEXPINC14(s[1361]);
        initOEXPINC15(s[1362]);
        initOLARGE(s[1363]);
        initOPENSAV(s[1364]);
        initOSTANDL(s[1365]);
        initFINVTY01(s[1366]);
        initFINVTY02(s[1367]);
        initFINVTY03(s[1368]);
        initFINVTY04(s[1369]);
        initFINVTY05(s[1370]);
        initFINVTY06(s[1371]);
        initFINVTY07(s[1372]);
        initFINVTY08(s[1373]);
        initFINVTY09(s[1374]);
        initFINVTY10(s[1375]);
        initFINVTY11(s[1376]);
        initDCOSHV1(s[1377]);
        initDCOSHVB1(s[1378]);
        initDCOSHV2(s[1379]);
        initDCOSHVB2(s[1380]);
        initDCOSHV3(s[1381]);
        initDCOSHVB3(s[1382]);
        initDCOSHV4(s[1383]);
        initDCOSHVB4(s[1384]);
        initDCOSHV5(s[1385]);
        initDCOSHVB5(s[1386]);
        initDCOINV1(s[1387]);
        initDCOINVB1(s[1388]);
        initDCOINV2(s[1389]);
        initDCOINVB2(s[1390]);
        initDCOINV3(s[1391]);
        initDCOINVB3(s[1392]);
        initDCOINV4(s[1393]);
        initDCOINVB4(s[1394]);
        initDCOINV5(s[1395]);
        initDCOINVB5(s[1396]);
        initFCACSH(s[1397]);
        initFCNUMSH(s[1398]);
        initFCNUMIN(s[1399]);
        initFCSUPPR(s[1400]);
        initFCOVDSH(s[1401]);
        initFCOVNSH(s[1402]);
        initFCSHVAL(s[1403]);
        initFCSHVLB(s[1404]);
        initFCOVDIN(s[1405]);
        initFCOVNIN(s[1406]);
        initFCOVDIF(s[1407]);
        initFCINVAL(s[1408]);
        initFCINVLB(s[1409]);
        initFSACSH(s[1410]);
        initFSNUMSH(s[1411]);
        initFSNUMIN(s[1412]);
        initFSSUPPR(s[1413]);
        initFSTYPSH1(s[1414]);
        initFSTYPSH2(s[1415]);
        initFSTYPSH3(s[1416]);
        initFSTYPSH4(s[1417]);
        initFSTYPSH5(s[1418]);
        initFSTYPIN1(s[1419]);
        initFSTYPIN2(s[1420]);
        initFSTYPIN3(s[1421]);
        initFSTYPIN4(s[1422]);
        initFSTYPIN5(s[1423]);
        initFSSHVAL(s[1424]);
        initFSSHVLB(s[1425]);
        initFSINVAL(s[1426]);
        initFSINVLB(s[1427]);
        initFSOSHAV(s[1428]);
        initFSOSVLB(s[1429]);
        initFISA1(s[1430]);
        initFISA2(s[1431]);
        initFCISAV(s[1432]);
        initFCISAB(s[1433]);
        initFIISAV(s[1434]);
        initFIISAB(s[1435]);
        initFKISAV(s[1436]);
        initFKISAB(s[1437]);
        initNEWFCMX(s[1438]);
        initFCISAWD(s[1439]);
        initFCIWNUM(s[1440]);
        initFCIWDAB(s[1441]);
        initFCISCE(s[1442]);
        initFBONDTY1(s[1443]);
        initFBONDTY2(s[1444]);
        initFBONDTY3(s[1445]);
        initFBONDV(s[1446]);
        initFBONDVB(s[1447]);
        initFCOLLV(s[1448]);
        initFCOLLVB(s[1449]);
        initFESHA(s[1450]);
        initFESHAV(s[1451]);
        initFESHVB(s[1452]);
        initFEOPTV(s[1453]);
        initFEOPVB(s[1454]);
        initFSHARE1(s[1455]);
        initFSHARE2(s[1456]);
        initFSHARE3(s[1457]);
        initFSHUKV(s[1458]);
        initFSHUKVB(s[1459]);
        initFSHOSV(s[1460]);
        initFSHOSVB(s[1461]);
        initFSHADD(s[1462]);
        initFSHADA(s[1463]);
        initFSHADAB(s[1464]);
        initFNSAV1(s[1465]);
        initFNSAV2(s[1466]);
        initFNSAV3(s[1467]);
        initFNSAV4(s[1468]);
        initFNSVAL1(s[1469]);
        initFNSVB(s[1470]);
        initFGILTS1(s[1471]);
        initFGILTS2(s[1472]);
        initFGILTS3(s[1473]);
        initFGILTS4(s[1474]);
        initFGLTUKV(s[1475]);
        initFGUKVB(s[1476]);
        initFGLTFOV(s[1477]);
        initFGFOVB(s[1478]);
        initFLFENV(s[1479]);
        initFLFENVB(s[1480]);
        initFLFSIV(s[1481]);
        initFLFSIVB(s[1482]);
        initFLFFSV(s[1483]);
        initFLFFSVB(s[1484]);
        initFLFTEV(s[1485]);
        initFLFTEVB(s[1486]);
        initFINS(s[1487]);
        initFINSV(s[1488]);
        initFLPROD1(s[1489]);
        initFLPROD2(s[1490]);
        initFLPROD3(s[1491]);
        initFLPROD4(s[1492]);
        initFINVOTV(s[1493]);
        initFINVOVB(s[1494]);
        initFINCVB(s[1495]);
        initFINFSAV1(s[1496]);
        initFINFSAV2(s[1497]);
        initFINFSAV3(s[1498]);
        initFINFSAV4(s[1499]);
        initFINFLV(s[1500]);
        initFLOANVB(s[1501]);
        initFINFV(s[1502]);
        initFINFVB(s[1503]);
        initFSAVED(s[1504]);
        initFWITHD(s[1505]);
        initFSAVAB(s[1506]);
        initUPROP1(s[1507]);
        initUPROP2(s[1508]);
        initUPROP3(s[1509]);
        initUPROP4(s[1510]);
        initUNMTYP(s[1511]);
        initUNUMHS(s[1512]);
        initUBUYLET(s[1513]);
        initUNUMBD(s[1514]);
        initUNUMLA(s[1515]);
        initUNUMOV(s[1516]);
        initUNUMRE(s[1517]);
        initUPRTYP(s[1518]);
        initUPRSH1(s[1519]);
        initUPRSH2(s[1520]);
        initUPRTYP2(s[1521]);
        initUPRSH3(s[1522]);
        initUPRSH4(s[1523]);
        initUPRTYP3(s[1524]);
        initUPRSH5(s[1525]);
        initUPRSH6(s[1526]);
        initUPRTYP4(s[1527]);
        initUPRTYP5(s[1528]);
        initUPRTYP6(s[1529]);
        initUPRTYP7(s[1530]);
        initUPRSH13(s[1531]);
        initUPRSH14(s[1532]);
        initUPRTYP8(s[1533]);
        initUPRSH15(s[1534]);
        initUPRSH16(s[1535]);
        initUPRTYP9(s[1536]);
        initUPRSH17(s[1537]);
        initUPRSH18(s[1538]);
        initUPRTYP10(s[1539]);
        initUPRSH19(s[1540]);
        initUPRSH20(s[1541]);
        initULAND10(s[1542]);
        initUPRTYP11(s[1543]);
        initUPRSH21(s[1544]);
        initUPRSH22(s[1545]);
        initULAND11(s[1546]);
        initUPRTYP12(s[1547]);
        initUPRSH23(s[1548]);
        initUPRSH24(s[1549]);
        initULAND12(s[1550]);
        initUPRTYP13(s[1551]);
        initUPRSH25(s[1552]);
        initUPRSH26(s[1553]);
        initUPRTYP14(s[1554]);
        initUPRSH27(s[1555]);
        initUPRSH28(s[1556]);
        initUPRTYP15(s[1557]);
        initUPRSH29(s[1558]);
        initUPRSH30(s[1559]);
        initUPRTYP16(s[1560]);
        initUPRSH31(s[1561]);
        initUPRSH32(s[1562]);
        initULAND16(s[1563]);
        initUPRTYP17(s[1564]);
        initUPRSH33(s[1565]);
        initUPRSH34(s[1566]);
        initULAND17(s[1567]);
        initUPRTYP18(s[1568]);
        initUPRSH35(s[1569]);
        initUPRSH36(s[1570]);
        initULAND18(s[1571]);
        initDCNUM2(s[1572]);
        initDCANY(s[1573]);
        initDCANU(s[1574]);
        initDCNUM1(s[1575]);
        initDCCOS1(s[1576]);
        initDCCSP1(s[1577]);
        initDCNAM1(s[1578]);
        initDCONM1(s[1579]);
        initDCONM2(s[1580]);
        initDCRSP1(s[1581]);
        initDCREC1(s[1582]);
        initDCPER1(s[1583]);
        initDCAMC1(s[1584]);
        initDCAMP1(s[1585]);
        initDCAMD1(s[1586]);
        initDCESB1(s[1587]);
        initDCINZ1(s[1588]);
        initDC12BEH1(s[1589]);
        initDC12OWE1(s[1590]);
        initDCCOS2(s[1591]);
        initDCCSP2(s[1592]);
        initDCNAM2(s[1593]);
        initDCONM3(s[1594]);
        initDCONM4(s[1595]);
        initDCRSP2(s[1596]);
        initDCREC2(s[1597]);
        initDCPER2(s[1598]);
        initDCAMC2(s[1599]);
        initDCAMP2(s[1600]);
        initDCAMD2(s[1601]);
        initDCESB2(s[1602]);
        initDCINZ2(s[1603]);
        initDC12BEH2(s[1604]);
        initDC12OWE2(s[1605]);
        initDCCOS3(s[1606]);
        initDCCSP3(s[1607]);
        initDCNAM3(s[1608]);
        initDCONM5(s[1609]);
        initDCONM6(s[1610]);
        initDCRSP3(s[1611]);
        initDCREC3(s[1612]);
        initDCPER3(s[1613]);
        initDCAMC3(s[1614]);
        initDCAMP3(s[1615]);
        initDCAMD3(s[1616]);
        initDCESB3(s[1617]);
        initDCINZ3(s[1618]);
        initDC12BEH3(s[1619]);
        initDC12OWE3(s[1620]);
        initDCCOS4(s[1621]);
        initDCCSP4(s[1622]);
        initDCNAM4(s[1623]);
        initDCONM7(s[1624]);
        initDCONM8(s[1625]);
        initDCRSP4(s[1626]);
        initDCREC4(s[1627]);
        initDCPER4(s[1628]);
        initDCAMC4(s[1629]);
        initDCAMP4(s[1630]);
        initDCAMD4(s[1631]);
        initDCESB4(s[1632]);
        initDCINZ4(s[1633]);
        initDC12BEH4(s[1634]);
        initDC12OWE4(s[1635]);
        initDCCOS5(s[1636]);
        initDCCSP5(s[1637]);
        initDCNAM5(s[1638]);
        initDCONM9(s[1639]);
        initDCONM10(s[1640]);
        initDCRSP5(s[1641]);
        initDCREC5(s[1642]);
        initDCPER5(s[1643]);
        initDCAMC5(s[1644]);
        initDCAMP5(s[1645]);
        initDCAMD5(s[1646]);
        initDCESB5(s[1647]);
        initDCINZ5(s[1648]);
        initDC12BEH5(s[1649]);
        initDC12OWE5(s[1650]);
        initDSNUM2(s[1651]);
        initDSANY1(s[1652]);
        initDSANY2(s[1653]);
        initDSANU1(s[1654]);
        initDSANU2(s[1655]);
        initDSNUM(s[1656]);
        initDSCOS1(s[1657]);
        initDSCSP1(s[1658]);
        initDSNAM1(s[1659]);
        initDSONM1(s[1660]);
        initDSONM2(s[1661]);
        initDSRSP1(s[1662]);
        initDSREC1(s[1663]);
        initDSPER1(s[1664]);
        initDSAMC1(s[1665]);
        initDSAMP1(s[1666]);
        initDSAMD1(s[1667]);
        initDSESB1(s[1668]);
        initDS12BEH1(s[1669]);
        initDS12OWE1(s[1670]);
        initDSCOS2(s[1671]);
        initDSCSP2(s[1672]);
        initDSNAM2(s[1673]);
        initDSONM3(s[1674]);
        initDSONM4(s[1675]);
        initDSRSP2(s[1676]);
        initDSREC2(s[1677]);
        initDSPER2(s[1678]);
        initDSAMC2(s[1679]);
        initDSAMP2(s[1680]);
        initDSAMD2(s[1681]);
        initDSESB2(s[1682]);
        initDS12BEH2(s[1683]);
        initDS12OWE2(s[1684]);
        initDSCOS3(s[1685]);
        initDSCSP3(s[1686]);
        initDSNAM3(s[1687]);
        initDSONM5(s[1688]);
        initDSONM6(s[1689]);
        initDSRSP3(s[1690]);
        initDSREC3(s[1691]);
        initDSPER3(s[1692]);
        initDSAMC3(s[1693]);
        initDSAMP3(s[1694]);
        initDSAMD3(s[1695]);
        initDSESB3(s[1696]);
        initDS12BEH3(s[1697]);
        initDS12OWE3(s[1698]);
        initDSCOS4(s[1699]);
        initDSCSP4(s[1700]);
        initDSNAM4(s[1701]);
        initDSONM7(s[1702]);
        initDSONM8(s[1703]);
        initDSRSP4(s[1704]);
        initDSREC4(s[1705]);
        initDSPER4(s[1706]);
        initDSAMC4(s[1707]);
        initDSAMP4(s[1708]);
        initDSAMD4(s[1709]);
        initDSESB4(s[1710]);
        initDS12BEH4(s[1711]);
        initDS12OWE4(s[1712]);
        initDSCOS5(s[1713]);
        initDSCSP5(s[1714]);
        initDSNAM5(s[1715]);
        initDSONM9(s[1716]);
        initDSONM10(s[1717]);
        initDSRSP5(s[1718]);
        initDSREC5(s[1719]);
        initDSPER5(s[1720]);
        initDSAMC5(s[1721]);
        initDSAMP5(s[1722]);
        initDSAMD5(s[1723]);
        initDSESB5(s[1724]);
        initDS12BEH5(s[1725]);
        initDS12OWE5(s[1726]);
        initPRESMON(s[1727]);
        initPRESYR(s[1728]);
        initDMOANY(s[1729]);
        initDMONUM(s[1730]);
        initDMOINS1(s[1731]);
        initDMOEST1(s[1732]);
        initDMOOFT1(s[1733]);
        initDMOWHNY1(s[1734]);
        initDMOWHNM1(s[1735]);
        initDMOWEST1(s[1736]);
        initDMOINT1(s[1737]);
        initDMOBEH1(s[1738]);
        initDMOOWE1(s[1739]);
        initDMOINS2(s[1740]);
        initDMOEST2(s[1741]);
        initDMOOFT2(s[1742]);
        initDMOWHNY2(s[1743]);
        initDMOWHNM2(s[1744]);
        initDMOWEST2(s[1745]);
        initDMOINT2(s[1746]);
        initDMOBEH2(s[1747]);
        initDMOOWE2(s[1748]);
        initDMOINS3(s[1749]);
        initDMOEST3(s[1750]);
        initDMOOFT3(s[1751]);
        initDMOWHNY3(s[1752]);
        initDMOWHNM3(s[1753]);
        initDMOWEST3(s[1754]);
        initDMOINT3(s[1755]);
        initDMOBEH3(s[1756]);
        initDMOOWE3(s[1757]);
        initDMOINS4(s[1758]);
        initDMOEST4(s[1759]);
        initDMOOFT4(s[1760]);
        initDMOWHNY4(s[1761]);
        initDMOWHNM4(s[1762]);
        initDMOWEST4(s[1763]);
        initDMOINT4(s[1764]);
        initDMOBEH4(s[1765]);
        initDMOOWE4(s[1766]);
        initDMOINS5(s[1767]);
        initDMOEST5(s[1768]);
        initDMOOFT5(s[1769]);
        initDMOWHNY5(s[1770]);
        initDMOWHNM5(s[1771]);
        initDMOWEST5(s[1772]);
        initDMOINT5(s[1773]);
        initDMOBEH5(s[1774]);
        initDMOOWE5(s[1775]);
        initDHPANY1(s[1776]);
        initDHPANY2(s[1777]);
        initDHPANY3(s[1778]);
        initDHPANY4(s[1779]);
        initDHPANY5(s[1780]);
        initDHPANY6(s[1781]);
        initDHPANY7(s[1782]);
        initDHPNUM(s[1783]);
        initDHPINS1(s[1784]);
        initDHPEST1(s[1785]);
        initDHPOFT1(s[1786]);
        initDHPWHNY1(s[1787]);
        initDHPWHNM1(s[1788]);
        initDHPWEST1(s[1789]);
        initDHPINT1(s[1790]);
        initDHPBEH1(s[1791]);
        initDHPOWE1(s[1792]);
        initDTTOWE1(s[1793]);
        initDTTOWEB1(s[1794]);
        initDTTOWE2(s[1795]);
        initDTTOWEB2(s[1796]);
        initDTTOWE3(s[1797]);
        initDTTOWEB3(s[1798]);
        initDHPINS2(s[1799]);
        initDHPEST2(s[1800]);
        initDHPOFT2(s[1801]);
        initDHPWHNY2(s[1802]);
        initDHPWHNM2(s[1803]);
        initDHPWEST2(s[1804]);
        initDHPINT2(s[1805]);
        initDHPBEH2(s[1806]);
        initDHPOWE2(s[1807]);
        initDTTOWEB4(s[1808]);
        initDTTOWEB5(s[1809]);
        initDTTOWEB6(s[1810]);
        initDHPINS3(s[1811]);
        initDHPEST3(s[1812]);
        initDHPOFT3(s[1813]);
        initDHPWHNY3(s[1814]);
        initDHPWHNM3(s[1815]);
        initDHPWEST3(s[1816]);
        initDHPINT3(s[1817]);
        initDHPBEH3(s[1818]);
        initDHPOWE3(s[1819]);
        initDTTOWEB7(s[1820]);
        initDTTOWEB8(s[1821]);
        initDTTOWEB9(s[1822]);
        initDHPINS4(s[1823]);
        initDHPEST4(s[1824]);
        initDHPOFT4(s[1825]);
        initDHPWHNY4(s[1826]);
        initDHPWHNM4(s[1827]);
        initDHPWEST4(s[1828]);
        initDHPINT4(s[1829]);
        initDHPBEH4(s[1830]);
        initDHPOWE4(s[1831]);
        initDTTOWEB10(s[1832]);
        initDTTOWEB11(s[1833]);
        initDTTOWEB12(s[1834]);
        initDHPINS5(s[1835]);
        initDHPEST5(s[1836]);
        initDHPOFT5(s[1837]);
        initDHPWHNY5(s[1838]);
        initDHPWHNM5(s[1839]);
        initDHPWEST5(s[1840]);
        initDHPINT5(s[1841]);
        initDHPBEH5(s[1842]);
        initDHPOWE5(s[1843]);
        initDTTOWEB13(s[1844]);
        initDTTOWEB14(s[1845]);
        initDTTOWEB15(s[1846]);
        initNWHP(s[1847]);
        initNWHPNO(s[1848]);
        initDLONM(s[1849]);
        initDLOLD1(s[1850]);
        initDLOLD2(s[1851]);
        initDLOLD3(s[1852]);
        initDLOLD4(s[1853]);
        initDLOLD5(s[1854]);
        initDLANY(s[1855]);
        initDLNNM(s[1856]);
        initDLNUM(s[1857]);
        initDLTYPE1(s[1858]);
        initDSLPAY1(s[1859]);
        initDSLAMT1(s[1860]);
        initDSLEST1(s[1861]);
        initDLWHY1(s[1862]);
        initDLWHY2(s[1863]);
        initDLWHY3(s[1864]);
        initDLWHY4(s[1865]);
        initDLWHY5(s[1866]);
        initDLWHY6(s[1867]);
        initDLWHY7(s[1868]);
        initDLSEC1(s[1869]);
        initDLINS1(s[1870]);
        initDLEST1(s[1871]);
        initDLOFT1(s[1872]);
        initDLWHNY1(s[1873]);
        initDLWHNM1(s[1874]);
        initDLWEST1(s[1875]);
        initDLINT1(s[1876]);
        initDLBEH1(s[1877]);
        initDLOWE1(s[1878]);
        initDLTYPE2(s[1879]);
        initDSLPAY2(s[1880]);
        initDSLAMT2(s[1881]);
        initDSLEST2(s[1882]);
        initDLWHY8(s[1883]);
        initDLWHY9(s[1884]);
        initDLWHY10(s[1885]);
        initDLWHY11(s[1886]);
        initDLWHY12(s[1887]);
        initDLWHY13(s[1888]);
        initDLWHY14(s[1889]);
        initDLSEC2(s[1890]);
        initDLINS2(s[1891]);
        initDLEST2(s[1892]);
        initDLOFT2(s[1893]);
        initDLWHNY2(s[1894]);
        initDLWHNM2(s[1895]);
        initDLWEST2(s[1896]);
        initDLINT2(s[1897]);
        initDLBEH2(s[1898]);
        initDLOWE2(s[1899]);
        initDLTYPE3(s[1900]);
        initDSLPAY3(s[1901]);
        initDSLAMT3(s[1902]);
        initDSLEST3(s[1903]);
        initDLWHY15(s[1904]);
        initDLWHY16(s[1905]);
        initDLWHY17(s[1906]);
        initDLWHY18(s[1907]);
        initDLWHY19(s[1908]);
        initDLWHY20(s[1909]);
        initDLWHY21(s[1910]);
        initDLSEC3(s[1911]);
        initDLINS3(s[1912]);
        initDLEST3(s[1913]);
        initDLOFT3(s[1914]);
        initDLWHNY3(s[1915]);
        initDLWHNM3(s[1916]);
        initDLWEST3(s[1917]);
        initDLINT3(s[1918]);
        initDLBEH3(s[1919]);
        initDLOWE3(s[1920]);
        initDLTYPE4(s[1921]);
        initDSLPAY4(s[1922]);
        initDSLAMT4(s[1923]);
        initDSLEST4(s[1924]);
        initDLWHY22(s[1925]);
        initDLWHY23(s[1926]);
        initDLWHY24(s[1927]);
        initDLWHY25(s[1928]);
        initDLWHY26(s[1929]);
        initDLWHY27(s[1930]);
        initDLWHY28(s[1931]);
        initDLSEC4(s[1932]);
        initDLINS4(s[1933]);
        initDLEST4(s[1934]);
        initDLOFT4(s[1935]);
        initDLWHNY4(s[1936]);
        initDLWHNM4(s[1937]);
        initDLWEST4(s[1938]);
        initDLINT4(s[1939]);
        initDLBEH4(s[1940]);
        initDLOWE4(s[1941]);
        initDLTYPE5(s[1942]);
        initDSLPAY5(s[1943]);
        initDSLAMT5(s[1944]);
        initDSLEST5(s[1945]);
        initDLWHY29(s[1946]);
        initDLWHY30(s[1947]);
        initDLWHY31(s[1948]);
        initDLWHY32(s[1949]);
        initDLWHY33(s[1950]);
        initDLWHY34(s[1951]);
        initDLWHY35(s[1952]);
        initDLSEC5(s[1953]);
        initDLINS5(s[1954]);
        initDLEST5(s[1955]);
        initDLOFT5(s[1956]);
        initDLWHNY5(s[1957]);
        initDLWHNM5(s[1958]);
        initDLWEST5(s[1959]);
        initDLINT5(s[1960]);
        initDLBEH5(s[1961]);
        initDLOWE5(s[1962]);
        initNWLN(s[1963]);
        initNWLNNO(s[1964]);
        initDTLTYPE1(s[1965]);
        initDTLOWE1(s[1966]);
        initDTLOWEB1(s[1967]);
        initDTLTYPE2(s[1968]);
        initDTLOWE2(s[1969]);
        initDTLOWEB2(s[1970]);
        initDTLTYPE3(s[1971]);
        initDTLOWE3(s[1972]);
        initDTLOWEB3(s[1973]);
        initDHBFIX(s[1974]);
        initDHBANY01(s[1975]);
        initDHBANY02(s[1976]);
        initDHBANY03(s[1977]);
        initDHBANY04(s[1978]);
        initDHBANY05(s[1979]);
        initDHBANY06(s[1980]);
        initDHBANY07(s[1981]);
        initDHBANY08(s[1982]);
        initDHBANY09(s[1983]);
        initDHBANY10(s[1984]);
        initDHBANY11(s[1985]);
        initDHBAMT01(s[1986]);
        initDHBAMT02(s[1987]);
        initDHBAMT03(s[1988]);
        initDHBAMT04(s[1989]);
        initDHBAMT05(s[1990]);
        initDHBAMT06(s[1991]);
        initDHBAMT07(s[1992]);
        initDHBAMT08(s[1993]);
        initDHBAMT09(s[1994]);
        initDHBAMT10(s[1995]);
        initDHBAMT11(s[1996]);
        initDHBEST01(s[1997]);
        initDHBEST02(s[1998]);
        initDHBEST03(s[1999]);
        initDHBEST04(s[2000]);
        initDHBEST05(s[2001]);
        initDHBEST06(s[2002]);
        initDHBEST07(s[2003]);
        initDHBEST08(s[2004]);
        initDHBEST09(s[2005]);
        initDHBEST10(s[2006]);
        initDHBEST11(s[2007]);
        initDBURD(s[2008]);
        initDBURDA(s[2009]);
        initDBURDW1(s[2010]);
        initDBURDW2(s[2011]);
        initDBURD___W3(s[2012]);
        initDBURDW4(s[2013]);
        initDBURDW5(s[2014]);
        initDBURDW6(s[2015]);
        initDBURDW7(s[2016]);
        initDADVMTH(s[2017]);
        initDADVACT1(s[2018]);
        initDADVACT2(s[2019]);
        initDADVACT3(s[2020]);
        initDBURDH(s[2021]);
        initINSPOL(s[2022]);
        initCOMMIT1(s[2023]);
        initCOMMIT2(s[2024]);
        initCOMMIT3(s[2025]);
        initCOMMIT4(s[2026]);
        initCOMMIT5(s[2027]);
        initXINSOL(s[2028]);
        initXINTYP(s[2029]);
        initXINCSE(s[2030]);
        initXBCONSC(s[2031]);
        initXBCON(s[2032]);
        initXBCONREM(s[2033]);
        initXBOK(s[2034]);
        initXBCRT(s[2035]);
        initXDCONSC(s[2036]);
        initXDCON(s[2037]);
        initXDCONREM(s[2038]);
        initXDOK(s[2039]);
        initXDREF(s[2040]);
        initXICONSC(s[2041]);
        initXICON(s[2042]);
        initXICONREM(s[2043]);
        initRENTPAY(s[2044]);
        initDVRENTAMTANNUAL(s[2045]);
        initOTHSRC1(s[2046]);
        initOTHSRC2(s[2047]);
        initOTHSRC3(s[2048]);
        initOIGRR(s[2049]);
        initOIGGT(s[2050]);
        initREGLRPY1(s[2051]);
        initREGLRPY2(s[2052]);
        initREGLRPY3(s[2053]);
        initREGLRPY4(s[2054]);
        initREGLRPY5(s[2055]);
        initOTRUST01(s[2056]);
        initOTRUST02(s[2057]);
        initOTRUST03(s[2058]);
        initOTRUST04(s[2059]);
        initOTRUST05(s[2060]);
        initOTRUST06(s[2061]);
        initOTRUST07(s[2062]);
        initOTRUST08(s[2063]);
        initOTRUST09(s[2064]);
        initOTRUST10(s[2065]);
        initOTRUST11(s[2066]);
        initOTRUST12(s[2067]);
        initOTRUST13(s[2068]);
        initOTRUST14(s[2069]);
        initOTRUST15(s[2070]);
        initOSITUAT(s[2071]);
        initOSITCH(s[2072]);
        initOIMPRS1(s[2073]);
        initOIMPRS2(s[2074]);
        initOIMPRS3(s[2075]);
        initOIMPRS4(s[2076]);
        initOIMPRS5(s[2077]);
        initOIMPRS6(s[2078]);
        initOIMPRS7(s[2079]);
        initOIMPRS8(s[2080]);
        initOIMPRS9(s[2081]);
        initOWRSRS01(s[2082]);
        initOWRSRS02(s[2083]);
        initOWRSRS03(s[2084]);
        initOWRSRS04(s[2085]);
        initOWRSRS05(s[2086]);
        initOWRSRS06(s[2087]);
        initOWRSRS07(s[2088]);
        initOWRSRS08(s[2089]);
        initOWRSRS09(s[2090]);
        initOWRSRS10(s[2091]);
        initORETINC(s[2092]);
        initSELECTAD(s[2093]);
        initCACTF(s[2094]);
        initCACTV(s[2095]);
        initCACTVB(s[2096]);
        initCATYPE(s[2097]);
        initCAOPEN(s[2098]);
        initCACONTR1(s[2099]);
        initCACONTR2(s[2100]);
        initCACONTR3(s[2101]);
        initCACONTR4(s[2102]);
        initCACONTR5(s[2103]);
        initCACONTR6(s[2104]);
        initCAEXTRA(s[2105]);
        initCASAV(s[2106]);
        initCASVV(s[2107]);
        initCASVB(s[2108]);
        initCACONTRAM1(s[2109]);
        initCACONTRAMB1(s[2110]);
        initCACONTRAM2(s[2111]);
        initCACONTRAMB2(s[2112]);
        initCACONTRAM3(s[2113]);
        initCACONTRAMB3(s[2114]);
        initCACONTRAM4(s[2115]);
        initCACONTRAMB4(s[2116]);
        initCACONTRAM5(s[2117]);
        initCACONTRAMB5(s[2118]);
        initCACONTRAM6(s[2119]);
        initCACONTRAMB6(s[2120]);
        initCAOLDER(s[2121]);
        initCAOTHER1(s[2122]);
        initCAOTHER2(s[2123]);
        initCAOTHER3(s[2124]);
        initCAOTHER4(s[2125]);
        initCAOTHER5(s[2126]);
        initNUMCHSAV(s[2127]);
        initOCSVR1(s[2128]);
        initOCSVR2(s[2129]);
        initOCSVR3(s[2130]);
        initOCSVR4(s[2131]);
        initOCSVR5(s[2132]);
        initOCSVR6(s[2133]);
        initOCSVR7(s[2134]);
        initOCSVR8(s[2135]);
        initIHRECNT(s[2136]);
        initIHRCNUM(s[2137]);
        initIWAT1(s[2138]);
        initIWAT2(s[2139]);
        initIWAT3(s[2140]);
        initIWAT4(s[2141]);
        initIWAT5(s[2142]);
        initIWAT6(s[2143]);
        initIWHO(s[2144]);
        initIVAL1(s[2145]);
        initIVALB1(s[2146]);
        initIHSE1(s[2147]);
        initIHSE2(s[2148]);
        initIHSE3(s[2149]);
        initIHSE4(s[2150]);
        initIHSE5(s[2151]);
        initIHSE6(s[2152]);
        initIGDS1(s[2153]);
        initIGDS2(s[2154]);
        initIGDS3(s[2155]);
        initIGDS4(s[2156]);
        initIGDS5(s[2157]);
        initIGDS6(s[2158]);
        initIGDS7(s[2159]);
        initIWAT7(s[2160]);
        initIWAT8(s[2161]);
        initIWAT9(s[2162]);
        initIWAT10(s[2163]);
        initIWAT11(s[2164]);
        initIWAT12(s[2165]);
        initIWHO2(s[2166]);
        initIVALB2(s[2167]);
        initIHSE7(s[2168]);
        initIHSE8(s[2169]);
        initIHSE9(s[2170]);
        initIHSE10(s[2171]);
        initIHSE11(s[2172]);
        initIHSE12(s[2173]);
        initIGDS8(s[2174]);
        initIGDS9(s[2175]);
        initIGDS10(s[2176]);
        initIGDS11(s[2177]);
        initIGDS12(s[2178]);
        initIGDS13(s[2179]);
        initIGDS14(s[2180]);
        initIWAT13(s[2181]);
        initIWAT14(s[2182]);
        initIWAT15(s[2183]);
        initIWAT16(s[2184]);
        initIWAT17(s[2185]);
        initIWAT18(s[2186]);
        initIWHO3(s[2187]);
        initIVALB3(s[2188]);
        initIHSE13(s[2189]);
        initIHSE14(s[2190]);
        initIHSE15(s[2191]);
        initIHSE16(s[2192]);
        initIHSE17(s[2193]);
        initIHSE18(s[2194]);
        initIGDS15(s[2195]);
        initIGDS16(s[2196]);
        initIGDS17(s[2197]);
        initIGDS18(s[2198]);
        initIGDS19(s[2199]);
        initIGDS20(s[2200]);
        initIGDS21(s[2201]);
        initILGIFT(s[2202]);
        initIGFVALB(s[2203]);
        initNEWGIFT(s[2204]);
        initILOAN(s[2205]);
        initILNUSE01(s[2206]);
        initILNUSE02(s[2207]);
        initILNUSE03(s[2208]);
        initILNUSE04(s[2209]);
        initILNUSE05(s[2210]);
        initILNUSE06(s[2211]);
        initILNUSE07(s[2212]);
        initILNUSE08(s[2213]);
        initILNUSE09(s[2214]);
        initILNUSE10(s[2215]);
        initILNVAL(s[2216]);
        initILNVALB(s[2217]);
        initILNPBK(s[2218]);
        initILNPBAM(s[2219]);
        initILUMP(s[2220]);
        initILUMTY1(s[2221]);
        initILUMTY2(s[2222]);
        initILUMTY3(s[2223]);
        initILUMTY4(s[2224]);
        initILUMTY5(s[2225]);
        initILUMTY6(s[2226]);
        initILUMTY7(s[2227]);
        initILIFB(s[2228]);
        initILUPP(s[2229]);
        initILUPB(s[2230]);
        initILACB(s[2231]);
        initILINB(s[2232]);
        initILRDB(s[2233]);
        initILWNB(s[2234]);
        initILOTB(s[2235]);
        initTINTRO(s[2236]);
        initTSETT(s[2237]);
        initTSNUM1(s[2238]);
        initTSNEW(s[2239]);
        initTSNUM2(s[2240]);
        initTJNT1(s[2241]);
        initTJNT2(s[2242]);
        initTACC1(s[2243]);
        initTBEN1(s[2244]);
        initTBEN2(s[2245]);
        initTBEN3(s[2246]);
        initTBEN4(s[2247]);
        initTBEN5(s[2248]);
        initTBEN6(s[2249]);
        initTBEN7(s[2250]);
        initTBEN8(s[2251]);
        initTVAL1(s[2252]);
        initTVALB1(s[2253]);
        initTDUP1(s[2254]);
        initTDUPA1(s[2255]);
        initTADDVL(s[2256]);
        initTADDVB1(s[2257]);
        initTJNT3(s[2258]);
        initTJNT4(s[2259]);
        initTACC2(s[2260]);
        initTBEN9(s[2261]);
        initTBEN10(s[2262]);
        initTBEN11(s[2263]);
        initTBEN12(s[2264]);
        initTBEN13(s[2265]);
        initTBEN14(s[2266]);
        initTBEN15(s[2267]);
        initTBEN16(s[2268]);
        initTVAL2(s[2269]);
        initTVALB2(s[2270]);
        initTDUP2(s[2271]);
        initTDUPA2(s[2272]);
        initTADDVL2(s[2273]);
        initTADDVB2(s[2274]);
        initTSNO3(s[2275]);
        initTJNT5(s[2276]);
        initTJNT6(s[2277]);
        initTACC3(s[2278]);
        initTBEN17(s[2279]);
        initTBEN18(s[2280]);
        initTBEN19(s[2281]);
        initTBEN20(s[2282]);
        initTBEN21(s[2283]);
        initTBEN22(s[2284]);
        initTBEN23(s[2285]);
        initTBEN24(s[2286]);
        initTVAL3(s[2287]);
        initTVALB3(s[2288]);
        initTDUP3(s[2289]);
        initTDUPA3(s[2290]);
        initTADDVL3(s[2291]);
        initTADDVB3(s[2292]);
        initTBENEF(s[2293]);
        initTBENNUM(s[2294]);
        initTWHO1(s[2295]);
        initTWHO2(s[2296]);
        initTWHO3(s[2297]);
        initTWHO4(s[2298]);
        initTWHO5(s[2299]);
        initTWHO6(s[2300]);
        initTBINC1(s[2301]);
        initTBREC1(s[2302]);
        initTBRECB1(s[2303]);
        initTBCAP1(s[2304]);
        initTBCKNO1(s[2305]);
        initTBCAPY1(s[2306]);
        initTBVALB1(s[2307]);
        initTWHO7(s[2308]);
        initTWHO8(s[2309]);
        initTWHO9(s[2310]);
        initTWHO10(s[2311]);
        initTWHO11(s[2312]);
        initTWHO12(s[2313]);
        initTBINC2(s[2314]);
        initTBREC2(s[2315]);
        initTBRECB2(s[2316]);
        initTBCAP2(s[2317]);
        initTBCKNO2(s[2318]);
        initTBCAPY2(s[2319]);
        initTBVALB2(s[2320]);
        initTWHO13(s[2321]);
        initTWHO14(s[2322]);
        initTWHO15(s[2323]);
        initTWHO16(s[2324]);
        initTWHO17(s[2325]);
        initTWHO18(s[2326]);
        initTBINC3(s[2327]);
        initTBREC3(s[2328]);
        initTBRECB3(s[2329]);
        initTBCAP3(s[2330]);
        initTBCKNO3(s[2331]);
        initTBCAPY3(s[2332]);
        initTBVALB3(s[2333]);
        initOTHASCH(s[2334]);
        initOTHASVL(s[2335]);
        initOTHASVB(s[2336]);
        initCOMMI(s[2337]);
        initORUNOUT(s[2338]);
        initORUNDO01(s[2339]);
        initORUNDO02(s[2340]);
        initORUNDO03(s[2341]);
        initORUNDO04(s[2342]);
        initORUNDO05(s[2343]);
        initORUNDO06(s[2344]);
        initORUNDO07(s[2345]);
        initORUNDO08(s[2346]);
        initORUNDO09(s[2347]);
        initORUNDO10(s[2348]);
        initORUNDO11(s[2349]);
        initIFBANKACC(s[2350]);
        initKNOWBALANCE(s[2351]);
        initOFTCHECKED(s[2352]);
        initKNOHOWMUCH(s[2353]);
        initINCDROP(s[2354]);
        initFNDCASH1(s[2355]);
        initFNDCASH2(s[2356]);
        initFNDCASH3(s[2357]);
        initFNDCASH4(s[2358]);
        initFNDCASH5(s[2359]);
        initORGNSED(s[2360]);
        initRNYDAY(s[2361]);
        initLVTDAY(s[2362]);
        initSPENDM(s[2363]);
        initGSTDNW(s[2364]);
        initPRODTS(s[2365]);
        initSOURC2P(s[2366]);
        initCHOICP(s[2367]);
        initEYE1(s[2368]);
        initEYE2(s[2369]);
        initEYE3(s[2370]);
        initEYE4(s[2371]);
        initEYE5(s[2372]);
        initEYE6(s[2373]);
        initEYE7(s[2374]);
        initEYE8(s[2375]);
        initINDFREQ(s[2376]);
        initORISKA(s[2377]);
        initORISKC(s[2378]);
        initOSAFESAV(s[2379]);
        initORISKS(s[2380]);
        initQHEALTH1(s[2381]);
        initCUTDOWN(s[2382]);
        initLSILL(s[2383]);
        initILLLIM(s[2384]);
        initDISTYPE1(s[2385]);
        initDISTYPE2(s[2386]);
        initDISTYPE3(s[2387]);
        initDISTYPE4(s[2388]);
        initDISTYPE5(s[2389]);
        initDISTYPE6(s[2390]);
        initDISTYPE7(s[2391]);
        initDISTYPE8(s[2392]);
        initDISTYPE9(s[2393]);
        initDISEVER(s[2394]);
        initFBSITU(s[2395]);
        initFBSIBS(s[2396]);
        initFBTEN(s[2397]);
        initFBFAED(s[2398]);
        initFBMOED(s[2399]);
        initFTHECST(s[2400]);
        initMTHECST(s[2401]);
        initDWELLTYP(s[2402]);
        initFLOORN(s[2403]);
        initIOUT1(s[2404]);
        initPROXPERS(s[2405]);
        initNOUNITS(s[2406]);
        initDVBENU1(s[2407]);
        initDVNUMBU(s[2408]);
        initES2000(s[2409]);
        initNSSEC(s[2410]);
        initNSSECB(s[2411]);
        initNSSEC5(s[2412]);
        initNSSEC3(s[2413]);
        initHOUT(s[2414]);
        initHPROX(s[2415]);
        initPENIND1(s[2416]);
        initPENIND2(s[2417]);
        initPENIND3(s[2418]);
        initPENIND4(s[2419]);
        initPENIND5(s[2420]);
        initPENIND6(s[2421]);
        initUVALS(s[2422]);
        initUVALBS(s[2423]);
        initUDEBTS(s[2424]);
        initUDEBTBS(s[2425]);
        initUGDVBS(s[2426]);
        initUVALL(s[2427]);
        initUVALBL(s[2428]);
        initUDEBTL(s[2429]);
        initUDEBTBL(s[2430]);
        initUGDVBL(s[2431]);
        initUVALO(s[2432]);
        initUVALBO(s[2433]);
        initUDEBTO(s[2434]);
        initUDEBTBO(s[2435]);
        initUVALLU(s[2436]);
        initUVALBLU(s[2437]);
        initUDEBTLU(s[2438]);
        initUDEBTBLU(s[2439]);
        initUVALOS(s[2440]);
        initUVALBOS(s[2441]);
        initUDEBTOS(s[2442]);
        initUDEBTBOS(s[2443]);
        initUGDVBOS(s[2444]);
        initUVALOR(s[2445]);
        initUVALBOR(s[2446]);
        initUDEBTOR(s[2447]);
        initUDEBTBOR(s[2448]);
        initRELIGE(s[2449]);
        initRELIGW(s[2450]);
        initRELIGS(s[2451]);
        initCTPAY(s[2452]);
        initCTPAYW(s[2453]);
        initCTPAYS(s[2454]);
        initEVERWK(s[2455]);
        initPDCVAL3(s[2456]);
        initDVPUBLPRIV(s[2457]);
        initUDEBTS_I(s[2458]);
        initUDEBTS_IFLAG(s[2459]);
        initUDEBTL_I(s[2460]);
        initUDEBTL_IFLAG(s[2461]);
        initUDEBTO_I(s[2462]);
        initUDEBTO_IFLAG(s[2463]);
        initUDEBTLU_I(s[2464]);
        initUDEBTLU_IFLAG(s[2465]);
        initUDEBTOS_I(s[2466]);
        initUDEBTOS_IFLAG(s[2467]);
        initUDEBTOR_I(s[2468]);
        initUDEBTOR_IFLAG(s[2469]);
        initUPROP1_I(s[2470]);
        initUPROP1_IFLAG(s[2471]);
        initUPROP2_I(s[2472]);
        initUPROP2_IFLAG(s[2473]);
        initUPROP3_I(s[2474]);
        initUPROP3_IFLAG(s[2475]);
        initUPROP4_I(s[2476]);
        initUPROP4_IFLAG(s[2477]);
        initUPROP5_I(s[2478]);
        initUPROP5_IFLAG(s[2479]);
        initUPROP6_I(s[2480]);
        initUPROP6_IFLAG(s[2481]);
        initUNUMHS_I(s[2482]);
        initUNUMHS_IFLAG(s[2483]);
        initUBUYLET_I(s[2484]);
        initUBUYLET_IFLAG(s[2485]);
        initUNUMBD_I(s[2486]);
        initUNUMBD_IFLAG(s[2487]);
        initUNUMLA_I(s[2488]);
        initUNUMLA_IFLAG(s[2489]);
        initUNUMOV_I(s[2490]);
        initUNUMOV_IFLAG(s[2491]);
        initUNUMRE_I(s[2492]);
        initUNUMRE_IFLAG(s[2493]);
        initUVALS_I(s[2494]);
        initUVALS_IFLAG(s[2495]);
        initUVALL_I(s[2496]);
        initUVALL_IFLAG(s[2497]);
        initUVALO_I(s[2498]);
        initUVALO_IFLAG(s[2499]);
        initUVALLU_I(s[2500]);
        initUVALLU_IFLAG(s[2501]);
        initUVALOS_I(s[2502]);
        initUVALOS_IFLAG(s[2503]);
        initUVALOR_I(s[2504]);
        initUVALOR_IFLAG(s[2505]);
        initUGDVBS_I(s[2506]);
        initUGDVBS_IFLAG(s[2507]);
        initUGDVBL_I(s[2508]);
        initUGDVBL_IFLAG(s[2509]);
        initUGDVBOS_I(s[2510]);
        initUGDVBOS_IFLAG(s[2511]);
        initDVHSEDEBT(s[2512]);
        initDVBLTDEBT(s[2513]);
        initDVBLDDEBT(s[2514]);
        initDVLUKDEBT(s[2515]);
        initDVLOSDEBT(s[2516]);
        initDVOPRDEBT(s[2517]);
        initDVHSEVAL(s[2518]);
        initDVBLTVAL(s[2519]);
        initDVBLDVAL(s[2520]);
        initDVLUKVAL(s[2521]);
        initDVLOSVAL(s[2522]);
        initDVOPRVAL(s[2523]);
        initOTHMORT(s[2524]);
        initHOUSGDST(s[2525]);
        initBUYLGDST(s[2526]);
        initHOUSGDSOST(s[2527]);
        initPHYSHOUSGDST(s[2528]);
        initPHYSBUYLGDST(s[2529]);
        initPHYSHOUSGDSOST(s[2530]);
        initTYPE(s[2531]);
        initP_FLAG1(s[2532]);
        initP_FLAG3(s[2533]);
        initP_FLAG4(s[2534]);
        initH_FLAG1(s[2535]);
        initDVSAME(s[2536]);
        initPBLMVB1(s[2537]);
        initALLRET(s[2538]);
        initNUMCOUPLES(s[2539]);
        initCOUPLENUM(s[2540]);
        initPARTNSSEC(s[2541]);
        initPARTNSSECB(s[2542]);
        initPARTNSSEC8(s[2543]);
        initPARTNSSEC5(s[2544]);
        initPARTNSSEC3(s[2545]);
        initHRPEDLEVEL(s[2546]);
        initWRKING_I(s[2547]);
        initWRKING_IFLAG(s[2548]);
        initSCHEMEET_I(s[2549]);
        initSCHEMEET_IFLAG(s[2550]);
        initJBAWAY_I(s[2551]);
        initJBAWAY_IFLAG(s[2552]);
        initOWNBUS_I(s[2553]);
        initOWNBUS_IFLAG(s[2554]);
        initRELBUS_I(s[2555]);
        initRELBUS_IFLAG(s[2556]);
        initLOOKED_I(s[2557]);
        initLOOKED_IFLAG(s[2558]);
        initSTARTJ_I(s[2559]);
        initSTARTJ_IFLAG(s[2560]);
        initDVILO3A_I(s[2561]);
        initDVILO3A_IFLAG(s[2562]);
        initEVERWK_I(s[2563]);
        initEVERWK_IFLAG(s[2564]);
        initSTAT_I(s[2565]);
        initSTAT_IFLAG(s[2566]);
        initBTYPE1_I(s[2567]);
        initBTYPE1_IFLAG(s[2568]);
        initBDIRNI1_I(s[2569]);
        initBDIRNI1_IFLAG(s[2570]);
        initSEX(s[2571]);
        initDVSAME_I(s[2572]);
        initDVSAME_IFLAG(s[2573]);
        initPESAME_I(s[2574]);
        initPESAME_IFLAG(s[2575]);
        initPEMOFF_I(s[2576]);
        initPEMOFF_IFLAG(s[2577]);
        initPEMELG_I(s[2578]);
        initPEMELG_IFLAG(s[2579]);
        initPEMMEM_I(s[2580]);
        initPEMMEM_IFLAG(s[2581]);
        initPCONT_I(s[2582]);
        initPCONT_IFLAG(s[2583]);
        initPANYO_I(s[2584]);
        initPANYO_IFLAG(s[2585]);
        initPNUMOS_I(s[2586]);
        initPNUMOS_IFLAG(s[2587]);
        initPSCHM_F_I(s[2588]);
        initPSCHM_F_IFLAG(s[2589]);
        initPSCHM_S_I(s[2590]);
        initPSCHM_S_IFLAG(s[2591]);
        initPSCHM_T_I(s[2592]);
        initPSCHM_T_IFLAG(s[2593]);
        initPOCNMSC_I(s[2594]);
        initPOCNMSC_IFLAG(s[2595]);
        initPOCTYP1_I(s[2596]);
        initPOCTYP1_IFLAG(s[2597]);
        initPOCTYP2_I(s[2598]);
        initPOCTYP2_IFLAG(s[2599]);
        initPBFRAC1_I(s[2600]);
        initPBFRAC1_IFLAG(s[2601]);
        initPBFRAC2_I(s[2602]);
        initPBFRAC2_IFLAG(s[2603]);
        initPBQUAL1_I(s[2604]);
        initPBQUAL1_IFLAG(s[2605]);
        initPBQUAL2_I(s[2606]);
        initPBQUAL2_IFLAG(s[2607]);
        initPBLUMV1_I(s[2608]);
        initPBLUMV1_IFLAG(s[2609]);
        initPBLUMV2_I(s[2610]);
        initPBLUMV2_IFLAG(s[2611]);
        initASAF2T(s[2612]);
        initPOWER1T(s[2613]);
        initPOWER2T(s[2614]);
        initPPRNMSC_I(s[2615]);
        initPPRNMSC_IFLAG(s[2616]);
        initPPVAL1_I(s[2617]);
        initPPVAL1_IFLAG(s[2618]);
        initPPVAL2_I(s[2619]);
        initPPVAL2_IFLAG(s[2620]);
        initPPVAL3_I(s[2621]);
        initPPVAL3_IFLAG(s[2622]);
        initW3XSWGT(s[2623]);
        initW1W3WGT(s[2624]);
        initW2W3WGT(s[2625]);
        initPDCVAL1_I(s[2626]);
        initPDCVAL1_IFLAG(s[2627]);
        initPDCVAL2_I(s[2628]);
        initPDCVAL2_IFLAG(s[2629]);
        initPOADD1_I(s[2630]);
        initPOADD1_IFLAG(s[2631]);
        initPOADD2_I(s[2632]);
        initPOADD2_IFLAG(s[2633]);
        initPOADD3_I(s[2634]);
        initPOADD3_IFLAG(s[2635]);
        initPOADD4_I(s[2636]);
        initPOADD4_IFLAG(s[2637]);
        initPOADD5_I(s[2638]);
        initPOADD5_IFLAG(s[2639]);
        initPOADD6_I(s[2640]);
        initPOADD6_IFLAG(s[2641]);
        initPAVCUV1_I(s[2642]);
        initPAVCUV1_IFLAG(s[2643]);
        initPAVCUV2_I(s[2644]);
        initPAVCUV2_IFLAG(s[2645]);
        initDVHASAVC(s[2646]);
        initDVPAVCUV(s[2647]);
        initDVHASDC(s[2648]);
        initDVVALDCOS(s[2649]);
        initDVPPVAL(s[2650]);
        initDVHASPP(s[2651]);
        initDVHASDB(s[2652]);
        initFRSTSCH(s[2653]);
        initACCFRAC1(s[2654]);
        initACCFRAC2(s[2655]);
        initVALPBLUM1(s[2656]);
        initVALPBLUM2(s[2657]);
        initDVVALDBLUM(s[2658]);
        initDVPENINC1(s[2659]);
        initDVPENINC2(s[2660]);
        initASAF1T(s[2661]);
        initTOPDVDBOPEN1T(s[2662]);
        initBOTDVDBOPEN1T(s[2663]);
        initDVDBOPEN1T(s[2664]);
        initTOPDVDBOPEN2T(s[2665]);
        initBOTDVDBOPEN2T(s[2666]);
        initDVDBOPEN2T(s[2667]);
        initDVVALDBT(s[2668]);
        initTRUST(s[2669]);
        initFSACSH_I(s[2670]);
        initFSNUMIN_I(s[2671]);
        initFSINVAL_I(s[2672]);
        initFSSHVAL_I(s[2673]);
        initFSNUMSH_I(s[2674]);
        initFINVTY01_I(s[2675]);
        initFINVTY02_I(s[2676]);
        initFINVTY03_I(s[2677]);
        initFINVTY04_I(s[2678]);
        initFINVTY05_I(s[2679]);
        initFINVTY06_I(s[2680]);
        initFINVTY07_I(s[2681]);
        initFINVTY08_I(s[2682]);
        initFINVTY09_I(s[2683]);
        initFINVTY10_I(s[2684]);
        initFINVTY11_I(s[2685]);
        initFCACSH_I(s[2686]);
        initFCNUMSH_I(s[2687]);
        initFCNUMIN_I(s[2688]);
        initFCOVDSH_I(s[2689]);
        initFCOVNSH_I(s[2690]);
        initDCOSHV1_I(s[2691]);
        initDCOSHV2_I(s[2692]);
        initDCOSHV3_I(s[2693]);
        initFCSHVAL_I(s[2694]);
        initFCOVDIN_I(s[2695]);
        initFCOVNIN_I(s[2696]);
        initDCOINV1_I(s[2697]);
        initDCOINV2_I(s[2698]);
        initDCOINV3_I(s[2699]);
        initDCOINV4_I(s[2700]);
        initDCOINV5_I(s[2701]);
        initFCINVAL_I(s[2702]);
        initFISA1_I(s[2703]);
        initFISA2_I(s[2704]);
        initFCISAV_I(s[2705]);
        initFIISAV_I(s[2706]);
        initFKISAV_I(s[2707]);
        initFBONDV_I(s[2708]);
        initFCOLLV_I(s[2709]);
        initFESHA_I(s[2710]);
        initFESHAV_I(s[2711]);
        initFEOPTV_I(s[2712]);
        initFSHARE1_I(s[2713]);
        initFSHARE2_I(s[2714]);
        initFSHARE3_I(s[2715]);
        initFSHUKV_I(s[2716]);
        initFSHOSV_I(s[2717]);
        initFNSVAL1_I(s[2718]);
        initFGILTS1_I(s[2719]);
        initFGILTS2_I(s[2720]);
        initFGILTS3_I(s[2721]);
        initFGILTS4_I(s[2722]);
        initFGLTUKV_I(s[2723]);
        initFGLTFOV_I(s[2724]);
        initFINS_I(s[2725]);
        initFINSV_I(s[2726]);
        initFLPROD1_I(s[2727]);
        initFLPROD2_I(s[2728]);
        initFLPROD3_I(s[2729]);
        initFLPROD4_I(s[2730]);
        initFLFENV_I(s[2731]);
        initFLFSIV_I(s[2732]);
        initFLFFSV_I(s[2733]);
        initFLFTEV_I(s[2734]);
        initFINVOTV_I(s[2735]);
        initFSACSH_IFLAG(s[2736]);
        initFSNUMIN_IFLAG(s[2737]);
        initFSSHVAL_IFLAG(s[2738]);
        initFSINVAL_IFLAG(s[2739]);
        initFSNUMSH_IFLAG(s[2740]);
        initFINVTY01_IFLAG(s[2741]);
        initFINVTY02_IFLAG(s[2742]);
        initFINVTY03_IFLAG(s[2743]);
        initFINVTY04_IFLAG(s[2744]);
        initFINVTY05_IFLAG(s[2745]);
        initFINVTY06_IFLAG(s[2746]);
        initFINVTY07_IFLAG(s[2747]);
        initFINVTY08_IFLAG(s[2748]);
        initFINVTY09_IFLAG(s[2749]);
        initFINVTY10_IFLAG(s[2750]);
        initFINVTY11_IFLAG(s[2751]);
        initFCACSH_IFLAG(s[2752]);
        initFCNUMSH_IFLAG(s[2753]);
        initFCNUMIN_IFLAG(s[2754]);
        initFCOVDSH_IFLAG(s[2755]);
        initFCOVNSH_IFLAG(s[2756]);
        initDCOSHV1_IFLAG(s[2757]);
        initDCOSHV2_IFLAG(s[2758]);
        initDCOSHV3_IFLAG(s[2759]);
        initFCSHVAL_IFLAG(s[2760]);
        initFCOVDIN_IFLAG(s[2761]);
        initFCOVNIN_IFLAG(s[2762]);
        initDCOINV1_IFLAG(s[2763]);
        initDCOINV2_IFLAG(s[2764]);
        initDCOINV3_IFLAG(s[2765]);
        initDCOINV4_IFLAG(s[2766]);
        initDCOINV5_IFLAG(s[2767]);
        initFCINVAL_IFLAG(s[2768]);
        initFISA1_IFLAG(s[2769]);
        initFISA2_IFLAG(s[2770]);
        initFCISAV_IFLAG(s[2771]);
        initFIISAV_IFLAG(s[2772]);
        initFKISAV_IFLAG(s[2773]);
        initFBONDV_IFLAG(s[2774]);
        initFCOLLV_IFLAG(s[2775]);
        initFESHA_IFLAG(s[2776]);
        initFESHAV_IFLAG(s[2777]);
        initFEOPTV_IFLAG(s[2778]);
        initFSHARE1_IFLAG(s[2779]);
        initFSHARE2_IFLAG(s[2780]);
        initFSHARE3_IFLAG(s[2781]);
        initFSHUKV_IFLAG(s[2782]);
        initFSHOSV_IFLAG(s[2783]);
        initFNSVAL_IFLAG(s[2784]);
        initFGILTS1_IFLAG(s[2785]);
        initFGILTS2_IFLAG(s[2786]);
        initFGILTS3_IFLAG(s[2787]);
        initFGILTS4_IFLAG(s[2788]);
        initFGLTUKV_IFLAG(s[2789]);
        initFGLTFOV_IFLAG(s[2790]);
        initFINS_IFLAG(s[2791]);
        initFINSV_IFLAG(s[2792]);
        initFLPROD1_IFLAG(s[2793]);
        initFLPROD2_IFLAG(s[2794]);
        initFLPROD3_IFLAG(s[2795]);
        initFLPROD4_IFLAG(s[2796]);
        initFLFENV_IFLAG(s[2797]);
        initFLFSIV_IFLAG(s[2798]);
        initFLFFSV_IFLAG(s[2799]);
        initFLFTEV_IFLAG(s[2800]);
        initFINVOTV_IFLAG(s[2801]);
        initPEVERC_I(s[2802]);
        initPEVERC_IFLAG(s[2803]);
        initPEVERNC_I(s[2804]);
        initPEVERNC_IFLAG(s[2805]);
        initPRETAIN_I(s[2806]);
        initPRETAIN_IFLAG(s[2807]);
        initPFNUM_I(s[2808]);
        initPFNUM_IFLAG(s[2809]);
        initPFNEW_I(s[2810]);
        initPFNEW_IFLAG(s[2811]);
        initPFNEWNO_I(s[2812]);
        initPFNEWNO_IFLAG(s[2813]);
        initALLRET_I(s[2814]);
        initPFTYP1_I(s[2815]);
        initPFTYP1_IFLAG(s[2816]);
        initPFTYP2_I(s[2817]);
        initPFTYP2_IFLAG(s[2818]);
        initPFTYP3_I(s[2819]);
        initPFTYP3_IFLAG(s[2820]);
        initPFTYP4_I(s[2821]);
        initPFTYP4_IFLAG(s[2822]);
        initPFTYP5_I(s[2823]);
        initPFTYP5_IFLAG(s[2824]);
        initPFTYP6_I(s[2825]);
        initPFTYP6_IFLAG(s[2826]);
        initPFOCTY1_I(s[2827]);
        initPFOCTY1_IFLAG(s[2828]);
        initPFOCTY2_I(s[2829]);
        initPFOCTY2_IFLAG(s[2830]);
        initPFOCTY3_I(s[2831]);
        initPFOCTY3_IFLAG(s[2832]);
        initPFOCTY4_I(s[2833]);
        initPFOCTY4_IFLAG(s[2834]);
        initPFOCTY5_I(s[2835]);
        initPFOCTY5_IFLAG(s[2836]);
        initPFOCTY6_I(s[2837]);
        initPFOCTY6_IFLAG(s[2838]);
        initPFLUM1_I(s[2839]);
        initPFLUM1_IFLAG(s[2840]);
        initPFLUM2_I(s[2841]);
        initPFLUM2_IFLAG(s[2842]);
        initPFLUM3_I(s[2843]);
        initPFLUM3_IFLAG(s[2844]);
        initPFLUM4_I(s[2845]);
        initPFLUM4_IFLAG(s[2846]);
        initPFLUM5_I(s[2847]);
        initPFLUM5_IFLAG(s[2848]);
        initPFLUM6_I(s[2849]);
        initPFLUM6_IFLAG(s[2850]);
        initPFLUMALL1_I(s[2851]);
        initPFLUMALL1_IFLAG(s[2852]);
        initPFLUMALL2_I(s[2853]);
        initPFLUMALL2_IFLAG(s[2854]);
        initPFLUMALL3_I(s[2855]);
        initPFLUMALL3_IFLAG(s[2856]);
        initPFLUMALL4_I(s[2857]);
        initPFLUMALL4_IFLAG(s[2858]);
        initPFLUMALL5_I(s[2859]);
        initPFLUMALL5_IFLAG(s[2860]);
        initPFLUMALL6_I(s[2861]);
        initPFLUMALL6_IFLAG(s[2862]);
        initPFCASH1_I(s[2863]);
        initPFCASH1_IFLAG(s[2864]);
        initPFCASH2_I(s[2865]);
        initPFCASH2_IFLAG(s[2866]);
        initPFCASH3_I(s[2867]);
        initPFCASH3_IFLAG(s[2868]);
        initPFCASH4_I(s[2869]);
        initPFCASH4_IFLAG(s[2870]);
        initPFCASH5_I(s[2871]);
        initPFCASH5_IFLAG(s[2872]);
        initPFCASH6_I(s[2873]);
        initPFCASH6_IFLAG(s[2874]);
        initPFREM1_I(s[2875]);
        initPFREM1_IFLAG(s[2876]);
        initPFREM2_I(s[2877]);
        initPFREM2_IFLAG(s[2878]);
        initPFREM3_I(s[2879]);
        initPFREM3_IFLAG(s[2880]);
        initPFREM4_I(s[2881]);
        initPFREM4_IFLAG(s[2882]);
        initPFREM5_I(s[2883]);
        initPFREM5_IFLAG(s[2884]);
        initPFREM6_I(s[2885]);
        initPFREM6_IFLAG(s[2886]);
        initPFREC1_I(s[2887]);
        initPFREC1_IFLAG(s[2888]);
        initPFREC2_I(s[2889]);
        initPFREC2_IFLAG(s[2890]);
        initPFREC3_I(s[2891]);
        initPFREC3_IFLAG(s[2892]);
        initPFREC4_I(s[2893]);
        initPFREC4_IFLAG(s[2894]);
        initPFREC5_I(s[2895]);
        initPFREC5_IFLAG(s[2896]);
        initPFREC6_I(s[2897]);
        initPFREC6_IFLAG(s[2898]);
        initPFDRAW1_I(s[2899]);
        initPFDRAW1_IFLAG(s[2900]);
        initPFDRAW2_I(s[2901]);
        initPFDRAW2_IFLAG(s[2902]);
        initPFDRAW3_I(s[2903]);
        initPFDRAW3_IFLAG(s[2904]);
        initPFDRAW4_I(s[2905]);
        initPFDRAW4_IFLAG(s[2906]);
        initPFDRAW5_I(s[2907]);
        initPFDRAW5_IFLAG(s[2908]);
        initPFDRAW6_I(s[2909]);
        initPFDRAW6_IFLAG(s[2910]);
        initPFLUMV1_IFLAG(s[2911]);
        initPFLUMV2_IFLAG(s[2912]);
        initPFLUMV3_IFLAG(s[2913]);
        initPFLUMV4_IFLAG(s[2914]);
        initPFLUMV5_IFLAG(s[2915]);
        initPFLUMV6_IFLAG(s[2916]);
        initPFINCP1_I(s[2917]);
        initPFINCP1_IFLAG(s[2918]);
        initPFINCP2_I(s[2919]);
        initPFINCP2_IFLAG(s[2920]);
        initPFINCP3_I(s[2921]);
        initPFINCP3_IFLAG(s[2922]);
        initPFINCP4_I(s[2923]);
        initPFINCP4_IFLAG(s[2924]);
        initPFINCP5_I(s[2925]);
        initPFINCP5_IFLAG(s[2926]);
        initPFINCP6_I(s[2927]);
        initPFINCP6_IFLAG(s[2928]);
        initPFINCA1_I(s[2929]);
        initPFINCA1_IFLAG(s[2930]);
        initPFINCA2_I(s[2931]);
        initPFINCA2_IFLAG(s[2932]);
        initPFINCA3_I(s[2933]);
        initPFINCA3_IFLAG(s[2934]);
        initPFINCA4_I(s[2935]);
        initPFINCA4_IFLAG(s[2936]);
        initPFINCA5_I(s[2937]);
        initPFINCA5_IFLAG(s[2938]);
        initPFINCA6_I(s[2939]);
        initPFINCA6_IFLAG(s[2940]);
        initOTHSRC1_I(s[2941]);
        initOTHSRC1_IFLAG(s[2942]);
        initOTHSRC2_I(s[2943]);
        initOTHSRC2_IFLAG(s[2944]);
        initOTHSRC3_I(s[2945]);
        initOTHSRC3_IFLAG(s[2946]);
        initOTHSRC4_I(s[2947]);
        initOTHSRC4_IFLAG(s[2948]);
        initOTHSRC5_I(s[2949]);
        initOTHSRC5_IFLAG(s[2950]);
        initPSPEXPH_I(s[2951]);
        initPSPEXPH_IFLAG(s[2952]);
        initPSPSE_I(s[2953]);
        initPSPSE_IFLAG(s[2954]);
        initPWEXPH_I(s[2955]);
        initPWEXPH_IFLAG(s[2956]);
        initPWIDFUT_I(s[2957]);
        initPWIDFUT_IFLAG(s[2958]);
        initXMARSTA_I(s[2959]);
        initXMARSTA_IFLAG(s[2960]);
        initMARBEF_I(s[2961]);
        initMARBEF_IFLAG(s[2962]);
        initPWEXPA_I(s[2963]);
        initPWEXPA_IFLAG(s[2964]);
        initPSPEXPA_I(s[2965]);
        initPSPEXPA_IFLAG(s[2966]);
        initAGEASAF1(s[2967]);
        initSPASAF_IORIG(s[2968]);
        initPINCINP(s[2969]);
        initPFCURV1_IFLAG(s[2970]);
        initPFCURV2_IFLAG(s[2971]);
        initPFCURV3_IFLAG(s[2972]);
        initPFCURV4_IFLAG(s[2973]);
        initPFCURV5_IFLAG(s[2974]);
        initPFCURV6_IFLAG(s[2975]);
        initPFDDV1_I(s[2976]);
        initPFDDV1_IFLAG(s[2977]);
        initPFDDV2_I(s[2978]);
        initPFDDV2_IFLAG(s[2979]);
        initPFDDV3_I(s[2980]);
        initPFDDV3_IFLAG(s[2981]);
        initPFDDV4_I(s[2982]);
        initPFDDV4_IFLAG(s[2983]);
        initPFDDV5_I(s[2984]);
        initPFDDV5_IFLAG(s[2985]);
        initPFDDV6_I(s[2986]);
        initPFDDV6_IFLAG(s[2987]);
        initDVHSIZE(s[2988]);
        initPINC(s[2989]);
        initHASSHAC(s[2990]);
        initCACRNUM(s[2991]);
        initDVSHCVAL(s[2992]);
        initCAODNUM(s[2993]);
        initDVSHODVAL(s[2994]);
        initDVSHODVAL2(s[2995]);
        initDVSHODVAL3(s[2996]);
        initDVFCINVAL(s[2997]);
        initDVCOINV(s[2998]);
        initDVCOINV2(s[2999]);
        initDVCOINV3(s[3000]);
        initDVCOINV4(s[3001]);
        initDVCOINV5(s[3002]);
        initDVCACRVAL_SUM(s[3003]);
        initDVCAODVAL_SUM(s[3004]);
        initDVCAVAL_SUM(s[3005]);
        initDLANY_I(s[3006]);
        initDLNUM_I(s[3007]);
        initDLTYPE1_I(s[3008]);
        initDLTYPE2_I(s[3009]);
        initDLTYPE3_I(s[3010]);
        initDLTYPE4_I(s[3011]);
        initDLTYPE5_I(s[3012]);
        initDLINS1_I(s[3013]);
        initDLINS2_I(s[3014]);
        initDLINS3_I(s[3015]);
        initDLINS4_I(s[3016]);
        initDLINS5_I(s[3017]);
        initDLOFT1_I(s[3018]);
        initDLOFT2_I(s[3019]);
        initDLOFT3_I(s[3020]);
        initDLOFT4_I(s[3021]);
        initDLOFT5_I(s[3022]);
        initDLWHNY1_I(s[3023]);
        initDLWHNY2_I(s[3024]);
        initDLWHNY3_I(s[3025]);
        initDLWHNY4_I(s[3026]);
        initDLWHNY5_I(s[3027]);
        initDLWHNM1_I(s[3028]);
        initDLWHNM2_I(s[3029]);
        initDLWHNM3_I(s[3030]);
        initDLWHNM4_I(s[3031]);
        initDLWHNM5_I(s[3032]);
        initDSLAMT1_I(s[3033]);
        initDSLAMT2_I(s[3034]);
        initDSLAMT3_I(s[3035]);
        initDSLAMT4_I(s[3036]);
        initDSLAMT5_I(s[3037]);
        initNWLN_I(s[3038]);
        initNWLN_IFLAG(s[3039]);
        initNWLNNO_I(s[3040]);
        initDTLTYPE1_I(s[3041]);
        initDTLTYPE2_I(s[3042]);
        initDTLTYPE3_I(s[3043]);
        initDTLTYPE4_I(s[3044]);
        initDTLTYPE5_I(s[3045]);
        initDTLOWE1_I(s[3046]);
        initDTLOWE2_I(s[3047]);
        initDTLOWE3_I(s[3048]);
        initDTLOWE4_I(s[3049]);
        initDTLOWE5_I(s[3050]);
        initDLBEH1_I(s[3051]);
        initDLBEH2_I(s[3052]);
        initDLBEH3_I(s[3053]);
        initDLBEH4_I(s[3054]);
        initDLBEH5_I(s[3055]);
        initDLOWE1_I(s[3056]);
        initDLOWE2_I(s[3057]);
        initDLOWE3_I(s[3058]);
        initDLOWE4_I(s[3059]);
        initDLOWE5_I(s[3060]);
        initDLANY_IFLAG(s[3061]);
        initDLNUM_IFLAG(s[3062]);
        initDLTYPE1_IFLAG(s[3063]);
        initDLTYPE2_IFLAG(s[3064]);
        initDLTYPE3_IFLAG(s[3065]);
        initDLTYPE4_IFLAG(s[3066]);
        initDLTYPE5_IFLAG(s[3067]);
        initDLINS1_IFLAG(s[3068]);
        initDLINS2_IFLAG(s[3069]);
        initDLINS3_IFLAG(s[3070]);
        initDLINS4_IFLAG(s[3071]);
        initDLINS5_IFLAG(s[3072]);
        initDLOFT1_IFLAG(s[3073]);
        initDLOFT2_IFLAG(s[3074]);
        initDLOFT3_IFLAG(s[3075]);
        initDLOFT4_IFLAG(s[3076]);
        initDLOFT5_IFLAG(s[3077]);
        initDLWHNY1_IFLAG(s[3078]);
        initDLWHNY2_IFLAG(s[3079]);
        initDLWHNY3_IFLAG(s[3080]);
        initDLWHNY4_IFLAG(s[3081]);
        initDLWHNY5_IFLAG(s[3082]);
        initDLWHNM1_IFLAG(s[3083]);
        initDLWHNM2_IFLAG(s[3084]);
        initDLWHNM3_IFLAG(s[3085]);
        initDLWHNM4_IFLAG(s[3086]);
        initDLWHNM5_IFLAG(s[3087]);
        initDSLAMT1_IFLAG(s[3088]);
        initDSLAMT2_IFLAG(s[3089]);
        initDSLAMT3_IFLAG(s[3090]);
        initDSLAMT4_IFLAG(s[3091]);
        initDSLAMT5_IFLAG(s[3092]);
        initNWLNNO_IFLAG(s[3093]);
        initDTLTYPE1_IFLAG(s[3094]);
        initDTLTYPE2_IFLAG(s[3095]);
        initDTLTYPE3_IFLAG(s[3096]);
        initDTLTYPE4_IFLAG(s[3097]);
        initDTLTYPE5_IFLAG(s[3098]);
        initDTLOWE1_IFLAG(s[3099]);
        initDTLOWE2_IFLAG(s[3100]);
        initDTLOWE3_IFLAG(s[3101]);
        initDTLOWE4_IFLAG(s[3102]);
        initDTLOWE5_IFLAG(s[3103]);
        initDLBEH1_IFLAG(s[3104]);
        initDLBEH2_IFLAG(s[3105]);
        initDLBEH3_IFLAG(s[3106]);
        initDLBEH4_IFLAG(s[3107]);
        initDLBEH5_IFLAG(s[3108]);
        initDLOWE1_IFLAG(s[3109]);
        initDLOWE2_IFLAG(s[3110]);
        initDLOWE3_IFLAG(s[3111]);
        initDLOWE4_IFLAG(s[3112]);
        initDLOWE5_IFLAG(s[3113]);
        initDHBANY01_I(s[3114]);
        initDHBANY02_I(s[3115]);
        initDHBANY03_I(s[3116]);
        initDHBANY04_I(s[3117]);
        initDHBANY05_I(s[3118]);
        initDHBANY06_I(s[3119]);
        initDHBANY07_I(s[3120]);
        initDHBANY08_I(s[3121]);
        initDHBANY09_I(s[3122]);
        initDHBANY10_I(s[3123]);
        initDHBANY11_I(s[3124]);
        initDHBAMT01_I(s[3125]);
        initDHBAMT02_I(s[3126]);
        initDHBAMT03_I(s[3127]);
        initDHBAMT04_I(s[3128]);
        initDHBAMT05_I(s[3129]);
        initDHBAMT06_I(s[3130]);
        initDHBAMT07_I(s[3131]);
        initDHBAMT08_I(s[3132]);
        initDHBAMT09_I(s[3133]);
        initDHBAMT10_I(s[3134]);
        initDHBAMT11_I(s[3135]);
        initCACTF_I(s[3136]);
        initCASAV_I(s[3137]);
        initCACTV_I(s[3138]);
        initCASVV_I(s[3139]);
        initFINFSAV1_I(s[3140]);
        initFINFSAV2_I(s[3141]);
        initFINFSAV3_I(s[3142]);
        initFINFSAV4_I(s[3143]);
        initFINFLV_I(s[3144]);
        initFINFV_I(s[3145]);
        initDHBANY01_IFLAG(s[3146]);
        initDHBANY02_IFLAG(s[3147]);
        initDHBANY03_IFLAG(s[3148]);
        initDHBANY04_IFLAG(s[3149]);
        initDHBANY05_IFLAG(s[3150]);
        initDHBANY06_IFLAG(s[3151]);
        initDHBANY07_IFLAG(s[3152]);
        initDHBANY08_IFLAG(s[3153]);
        initDHBANY09_IFLAG(s[3154]);
        initDHBANY10_IFLAG(s[3155]);
        initDHBANY11_IFLAG(s[3156]);
        initDHBAMT01_IFLAG(s[3157]);
        initDHBAMT02_IFLAG(s[3158]);
        initDHBAMT03_IFLAG(s[3159]);
        initDHBAMT04_IFLAG(s[3160]);
        initDHBAMT05_IFLAG(s[3161]);
        initDHBAMT06_IFLAG(s[3162]);
        initDHBAMT07_IFLAG(s[3163]);
        initDHBAMT08_IFLAG(s[3164]);
        initDHBAMT09_IFLAG(s[3165]);
        initDHBAMT10_IFLAG(s[3166]);
        initDHBAMT11_IFLAG(s[3167]);
        initCACTF_IFLAG(s[3168]);
        initCASAV_IFLAG(s[3169]);
        initCACTV_IFLAG(s[3170]);
        initCASVV_IFLAG(s[3171]);
        initFINFSAV1_IFLAG(s[3172]);
        initFINFSAV2_IFLAG(s[3173]);
        initFINFSAV3_IFLAG(s[3174]);
        initFINFSAV4_IFLAG(s[3175]);
        initFINFLV_IFLAG(s[3176]);
        initFINFV_IFLAG(s[3177]);
        initDVHASSAVDEP(s[3178]);
        initDVHASSHSAC(s[3179]);
        initSAVNUM(s[3180]);
        initDVSHSVAL(s[3181]);
        initDVFSINVAL(s[3182]);
        initDVSAVAL_SUM(s[3183]);
        initDVELARR(s[3184]);
        initDVGASARR(s[3185]);
        initDVCTARR(s[3186]);
        initDVTELARR(s[3187]);
        initDVWATARR(s[3188]);
        initDVRNTARR(s[3189]);
        initDVCHMARR(s[3190]);
        initDVCRTARR(s[3191]);
        initDVTAXARR(s[3192]);
        initDVVATARR(s[3193]);
        initDVOTHARR(s[3194]);
        initDVANYARR(s[3195]);
        initTOTBILLARR_SUM(s[3196]);
        initDVHASISA(s[3197]);
        initDVHASBOND(s[3198]);
        initDVHASUTRUST(s[3199]);
        initDVHASEMPSH(s[3200]);
        initDVHASOTHSH(s[3201]);
        initDVHASNSP(s[3202]);
        initDVHASGILT(s[3203]);
        initDVHASLINS(s[3204]);
        initDVHASOINV(s[3205]);
        initDVHASNOFA(s[3206]);
        initDVCISAV(s[3207]);
        initDVIISAV(s[3208]);
        initDVKISAV(s[3209]);
        initDVFNSVAL(s[3210]);
        initDVFSHUKV(s[3211]);
        initDVFLFENV(s[3212]);
        initDVFLFSIV(s[3213]);
        initDVFLFFSV(s[3214]);
        initDVFLFTEV(s[3215]);
        initDVFBONDV(s[3216]);
        initDVFEOPTV(s[3217]);
        initDVFESHAV(s[3218]);
        initDVFCOLLV(s[3219]);
        initDVFSHOSV(s[3220]);
        initDVFGLTUKV(s[3221]);
        initDVFGLTFOV(s[3222]);
        initDVFINVOTV(s[3223]);
        initDVFINFLV(s[3224]);
        initDVFINFV(s[3225]);
        initDVCACTV(s[3226]);
        initDVCASVV(s[3227]);
        initDVISAVAL_SUM(s[3228]);
        initDVINSV_SUM(s[3229]);
        initDVFESHARES_SUM(s[3230]);
        initDVFINFVAL_SUM(s[3231]);
        initNWFLNVAL1(s[3232]);
        initNWILNVAL1(s[3233]);
        initNWFLNVAL2(s[3234]);
        initNWILNVAL2(s[3235]);
        initNWFLNVAL3(s[3236]);
        initNWILNVAL3(s[3237]);
        initDVNWFLN_SUM(s[3238]);
        initDVNWILN_SUM(s[3239]);
        initLNYR1(s[3240]);
        initLNMN1(s[3241]);
        initLNLFT1(s[3242]);
        initLNYR2(s[3243]);
        initLNMN2(s[3244]);
        initLNLFT2(s[3245]);
        initLNYR3(s[3246]);
        initLNMN3(s[3247]);
        initLNLFT3(s[3248]);
        initLNYR4(s[3249]);
        initLNMN4(s[3250]);
        initLNLFT4(s[3251]);
        initLNYR5(s[3252]);
        initLNMN5(s[3253]);
        initLNLFT5(s[3254]);
        initLNOS1(s[3255]);
        initLNOS2(s[3256]);
        initLNOS3(s[3257]);
        initLNOS4(s[3258]);
        initLNOS5(s[3259]);
        initFLNOS1(s[3260]);
        initFLNOS2(s[3261]);
        initFLNOS3(s[3262]);
        initFLNOS4(s[3263]);
        initFLNOS5(s[3264]);
        initDVHASLF(s[3265]);
        initDVHASPLINF(s[3266]);
        initDVHASSL(s[3267]);
        initDVDLOWE1(s[3268]);
        initDVDLOWE2(s[3269]);
        initDVDLOWE3(s[3270]);
        initDVDLOWE4(s[3271]);
        initDVDLOWE5(s[3272]);
        initLNARR_SUM(s[3273]);
        initDVHASLNAR(s[3274]);
        initDMOANY_I(s[3275]);
        initDMONUM_I(s[3276]);
        initDMOINS1_I(s[3277]);
        initDMOINS2_I(s[3278]);
        initDMOINS3_I(s[3279]);
        initDMOINS4_I(s[3280]);
        initDMOINS5_I(s[3281]);
        initDMOOFT1_I(s[3282]);
        initDMOOFT2_I(s[3283]);
        initDMOOFT3_I(s[3284]);
        initDMOOFT4_I(s[3285]);
        initDMOOFT5_I(s[3286]);
        initDMOWHNY1_I(s[3287]);
        initDMOWHNY2_I(s[3288]);
        initDMOWHNY3_I(s[3289]);
        initDMOWHNY4_I(s[3290]);
        initDMOWHNY5_I(s[3291]);
        initDMOWHNM1_I(s[3292]);
        initDMOWHNM2_I(s[3293]);
        initDMOWHNM3_I(s[3294]);
        initDMOWHNM4_I(s[3295]);
        initDMOWHNM5_I(s[3296]);
        initDMOBEH1_I(s[3297]);
        initDMOBEH2_I(s[3298]);
        initDMOBEH3_I(s[3299]);
        initDMOBEH4_I(s[3300]);
        initDMOBEH5_I(s[3301]);
        initDMOOWE1_I(s[3302]);
        initDMOOWE2_I(s[3303]);
        initDMOOWE3_I(s[3304]);
        initDMOOWE4_I(s[3305]);
        initDMOOWE5_I(s[3306]);
        initDMOANY_IFLAG(s[3307]);
        initDMONUM_IFLAG(s[3308]);
        initDMOINS1_IFLAG(s[3309]);
        initDMOINS2_IFLAG(s[3310]);
        initDMOINS3_IFLAG(s[3311]);
        initDMOINS4_IFLAG(s[3312]);
        initDMOINS5_IFLAG(s[3313]);
        initDMOOFT1_IFLAG(s[3314]);
        initDMOOFT2_IFLAG(s[3315]);
        initDMOOFT3_IFLAG(s[3316]);
        initDMOOFT4_IFLAG(s[3317]);
        initDMOOFT5_IFLAG(s[3318]);
        initDMOWHNY1_IFLAG(s[3319]);
        initDMOWHNY2_IFLAG(s[3320]);
        initDMOWHNY3_IFLAG(s[3321]);
        initDMOWHNY4_IFLAG(s[3322]);
        initDMOWHNY5_IFLAG(s[3323]);
        initDMOWHNM1_IFLAG(s[3324]);
        initDMOWHNM2_IFLAG(s[3325]);
        initDMOWHNM3_IFLAG(s[3326]);
        initDMOWHNM4_IFLAG(s[3327]);
        initDMOWHNM5_IFLAG(s[3328]);
        initDMOBEH1_IFLAG(s[3329]);
        initDMOBEH2_IFLAG(s[3330]);
        initDMOBEH3_IFLAG(s[3331]);
        initDMOBEH4_IFLAG(s[3332]);
        initDMOBEH5_IFLAG(s[3333]);
        initDMOOWE1_IFLAG(s[3334]);
        initDMOOWE2_IFLAG(s[3335]);
        initDMOOWE3_IFLAG(s[3336]);
        initDMOOWE4_IFLAG(s[3337]);
        initDMOOWE5_IFLAG(s[3338]);
        initMOLFT1(s[3339]);
        initNYR1(s[3340]);
        initNMN1(s[3341]);
        initMOLFT2(s[3342]);
        initNYR2(s[3343]);
        initNMN2(s[3344]);
        initMOLFT3(s[3345]);
        initNYR3(s[3346]);
        initNMN3(s[3347]);
        initMOLFT4(s[3348]);
        initNYR4(s[3349]);
        initNMN4(s[3350]);
        initMOLFT5(s[3351]);
        initNYR5(s[3352]);
        initNMN5(s[3353]);
        initMOOS1(s[3354]);
        initMOOS2(s[3355]);
        initMOOS3(s[3356]);
        initMOOS4(s[3357]);
        initMOOS5(s[3358]);
        initTOTMO_SUM(s[3359]);
        initDVDMOOWE1(s[3360]);
        initDVDMOOWE2(s[3361]);
        initDVDMOOWE3(s[3362]);
        initDVDMOOWE4(s[3363]);
        initDVDMOOWE5(s[3364]);
        initMOARR_SUM(s[3365]);
        initDVHASMOAR(s[3366]);
        initPFLUMV1_I(s[3367]);
        initPFLUMV2_I(s[3368]);
        initPFLUMV3_I(s[3369]);
        initPFLUMV4_I(s[3370]);
        initPFLUMV5_I(s[3371]);
        initPFLUMV6_I(s[3372]);
        initPFCURV1_I(s[3373]);
        initPFCURV2_I(s[3374]);
        initPFCURV3_I(s[3375]);
        initPFCURV4_I(s[3376]);
        initPFCURV5_I(s[3377]);
        initPFCURV6_I(s[3378]);
        initCCAC1_I(s[3379]);
        initDCAMOS1_I(s[3380]);
        initCCAC2_I(s[3381]);
        initDCAMOS2_I(s[3382]);
        initCCAC3_I(s[3383]);
        initDCAMOS3_I(s[3384]);
        initCCAC4_I(s[3385]);
        initDCAMOS4_I(s[3386]);
        initCCAC5_I(s[3387]);
        initDCAMOS5_I(s[3388]);
        initSCAC1_I(s[3389]);
        initDSAMOS1_I(s[3390]);
        initSCAC2_I(s[3391]);
        initDSAMOS2_I(s[3392]);
        initSCAC3_I(s[3393]);
        initDSAMOS3_I(s[3394]);
        initSCAC4_I(s[3395]);
        initDSAMOS4_I(s[3396]);
        initSCAC5_I(s[3397]);
        initDSAMOS5_I(s[3398]);
        initTOTSC_SUM(s[3399]);
        initDVHASSC(s[3400]);
        initTOTCC_SUM(s[3401]);
        initDVHASCC(s[3402]);
        initOSLC1(s[3403]);
        initOSLC2(s[3404]);
        initOSLC3(s[3405]);
        initOSLC4(s[3406]);
        initNSLC1(s[3407]);
        initNSLC2(s[3408]);
        initNSLC3(s[3409]);
        initOSLBNK1(s[3410]);
        initOSLBNK2(s[3411]);
        initOSLBNK3(s[3412]);
        initNSLBNK1(s[3413]);
        initNSLBNK2(s[3414]);
        initNSLBNK3(s[3415]);
        initTOTSLC_SUM(s[3416]);
        initTOTSLBNK_SUM(s[3417]);
        initDVHASSLC(s[3418]);
        initDVHASSLBNK(s[3419]);
        initDHPBEH1_I(s[3420]);
        initDHPBEH2_I(s[3421]);
        initDHPBEH3_I(s[3422]);
        initDHPBEH4_I(s[3423]);
        initDHPBEH5_I(s[3424]);
        initDHPOWE1_I(s[3425]);
        initDHPOWE2_I(s[3426]);
        initDHPOWE3_I(s[3427]);
        initDHPOWE4_I(s[3428]);
        initDHPOWE5_I(s[3429]);
        initDHPANY1_I(s[3430]);
        initDHPANY2_I(s[3431]);
        initDHPANY3_I(s[3432]);
        initDHPNUM_I(s[3433]);
        initDHPOFT1_I(s[3434]);
        initDHPOFT2_I(s[3435]);
        initDHPOFT3_I(s[3436]);
        initDHPOFT4_I(s[3437]);
        initDHPOFT5_I(s[3438]);
        initDHPINS1_I(s[3439]);
        initDHPINS2_I(s[3440]);
        initDHPINS3_I(s[3441]);
        initDHPINS4_I(s[3442]);
        initDHPINS5_I(s[3443]);
        initDHPWHNY1_I(s[3444]);
        initDHPWHNM1_I(s[3445]);
        initDHPWHNY2_I(s[3446]);
        initDHPWHNM2_I(s[3447]);
        initDHPWHNY3_I(s[3448]);
        initDHPWHNM3_I(s[3449]);
        initDHPWHNY4_I(s[3450]);
        initDHPWHNM4_I(s[3451]);
        initDHPWHNY5_I(s[3452]);
        initDHPWHNM5_I(s[3453]);
        initDHPBEH1_IFLAG(s[3454]);
        initDHPBEH2_IFLAG(s[3455]);
        initDHPBEH3_IFLAG(s[3456]);
        initDHPBEH4_IFLAG(s[3457]);
        initDHPBEH5_IFLAG(s[3458]);
        initDHPOWE1_IFLAG(s[3459]);
        initDHPOWE2_IFLAG(s[3460]);
        initDHPOWE3_IFLAG(s[3461]);
        initDHPOWE4_IFLAG(s[3462]);
        initDHPOWE5_IFLAG(s[3463]);
        initDHPANY1_IFLAG(s[3464]);
        initDHPANY2_IFLAG(s[3465]);
        initDHPANY3_IFLAG(s[3466]);
        initDHPNUM_IFLAG(s[3467]);
        initDHPOFT1_IFLAG(s[3468]);
        initDHPOFT2_IFLAG(s[3469]);
        initDHPOFT3_IFLAG(s[3470]);
        initDHPOFT4_IFLAG(s[3471]);
        initDHPOFT5_IFLAG(s[3472]);
        initDHPINS1_IFLAG(s[3473]);
        initDHPINS2_IFLAG(s[3474]);
        initDHPINS3_IFLAG(s[3475]);
        initDHPINS4_IFLAG(s[3476]);
        initDHPINS5_IFLAG(s[3477]);
        initDHPWHNY1_IFLAG(s[3478]);
        initDHPWHNM1_IFLAG(s[3479]);
        initDHPWHNY2_IFLAG(s[3480]);
        initDHPWHNM2_IFLAG(s[3481]);
        initDHPWHNY3_IFLAG(s[3482]);
        initDHPWHNM3_IFLAG(s[3483]);
        initDHPWHNY4_IFLAG(s[3484]);
        initDHPWHNM4_IFLAG(s[3485]);
        initDHPWHNY5_IFLAG(s[3486]);
        initDHPWHNM5_IFLAG(s[3487]);
        initDVMRDF(s[3488]);
        initDVDBLUMP1(s[3489]);
        initDVDBLUMP2(s[3490]);
        initDVDBLUMP3(s[3491]);
        initDVDBLUMP4(s[3492]);
        initDVDBLUMP5(s[3493]);
        initDVDBLUMP6(s[3494]);
        initDVDBINC1(s[3495]);
        initDVDBINC2(s[3496]);
        initDVDBINC3(s[3497]);
        initDVDBINC4(s[3498]);
        initDVDBINC5(s[3499]);
        initDVDBINC6(s[3500]);
        initDVHASPFD(s[3501]);
        initDVPFDDV(s[3502]);
        initHPNYR1(s[3503]);
        initHPNMN1(s[3504]);
        initHPLFT1(s[3505]);
        initHPNYR2(s[3506]);
        initHPNMN2(s[3507]);
        initHPLFT2(s[3508]);
        initHPNYR3(s[3509]);
        initHPNMN3(s[3510]);
        initHPLFT3(s[3511]);
        initHPNYR4(s[3512]);
        initHPNMN4(s[3513]);
        initHPLFT4(s[3514]);
        initHPNYR5(s[3515]);
        initHPNMN5(s[3516]);
        initHPLFT5(s[3517]);
        initHPOS1(s[3518]);
        initHPOS2(s[3519]);
        initHPOS3(s[3520]);
        initHPOS4(s[3521]);
        initHPOS5(s[3522]);
        initDVHASHP(s[3523]);
        initDVDHPOWE1(s[3524]);
        initDVDHPOWE2(s[3525]);
        initDVDHPOWE3(s[3526]);
        initDVDHPOWE4(s[3527]);
        initDVDHPOWE5(s[3528]);
        initHPARR_SUM(s[3529]);
        initDVHPAR(s[3530]);
        initNWHPVAL1(s[3531]);
        initNWHPVAL2(s[3532]);
        initNWHPVAL3(s[3533]);
        initDVNWHP_SUM(s[3534]);
        initDVHASNHP(s[3535]);
        initTOTNSLC_SUM(s[3536]);
        initTOTNSLBNK_SUM(s[3537]);
        initTOTOSLC_SUM(s[3538]);
        initTOTOSLBNK_SUM(s[3539]);
        initEMPSTAT2(s[3540]);
        initTOTNLOS_SUM(s[3541]);
        initTOTARR_EXCMORT_SUM(s[3542]);
        initHFINW_EXCENDW_SUM(s[3543]);
        initDVFFASSETS_SUM(s[3544]);
        initDVGRSBONAMT(s[3545]);
        initDVHASNLF(s[3546]);
        initDVHASNLI(s[3547]);
        initDVSEPANNUAL09(s[3548]);
        initDVSEPANNUAL10(s[3549]);
        initDVSEPANNUAL11(s[3550]);
        initDVSEPANNUAL12(s[3551]);
        initDVSEPANNUAL13(s[3552]);
        initDVSEPANNUAL14(s[3553]);
        initDVSEPANNUAL15(s[3554]);
        initDVSEPANNUAL16(s[3555]);
        initDVSEPANNUAL17(s[3556]);
        initDVSEPANNUAL18(s[3557]);
        initDVSEPANNUAL19(s[3558]);
        initDVSEPANNUAL20(s[3559]);
        initDVNETPAY_I(s[3560]);
        initDVNETPAY_IFLAG(s[3561]);
        initDVGRSPAY_I(s[3562]);
        initDVGRSPAY_IFLAG(s[3563]);
        initSJOB2_I(s[3564]);
        initSJOB2_IFLAG(s[3565]);
        initSJEMP1_I(s[3566]);
        initSJEMP1_IFLAG(s[3567]);
        initDVNETEMPSECJOB_IFLAG(s[3568]);
        initDVGRSEMPSECJOB_IFLAG(s[3569]);
        initPAYBON_I(s[3570]);
        initPAYBON_IFLAG(s[3571]);
        initDVNETBONAMT_IFLAG(s[3572]);
        initDVGRSBONAMT_IFLAG(s[3573]);
        initDVSENETPAY_IFLAG(s[3574]);
        initDVSEGRSPAY_IFLAG(s[3575]);
        initDVGRSSESECJOB_IFLAG(s[3576]);
        initEDLEVEL(s[3577]);
        initDVOIGGTANNUAL(s[3578]);
        initFINCV_IFLAG(s[3579]);
        initRENTPAY_I(s[3580]);
        initRENTPAY_IFLAG(s[3581]);
        initDVRENTAMTANNUAL_IFLAG(s[3582]);
        initDVOINRRANNUAL_IFLAG(s[3583]);
        initDVOINGTANNUAL_IFLAG(s[3584]);
        initREGLRPY1_I(s[3585]);
        initREGLRPY2_I(s[3586]);
        initREGLRPY3_I(s[3587]);
        initREGLRPY4_I(s[3588]);
        initREGLRPY5_I(s[3589]);
        initREGLRPY1_IFLAG(s[3590]);
        initREGLRPY2_IFLAG(s[3591]);
        initREGLRPY3_IFLAG(s[3592]);
        initREGLRPY4_IFLAG(s[3593]);
        initREGLRPY5_IFLAG(s[3594]);
        initDVOINEGANNUAL_IFLAG(s[3595]);
        initDVOINFRANNUAL_IFLAG(s[3596]);
        initDVOINMAANNUAL_IFLAG(s[3597]);
        initDVOINROANNUAL_IFLAG(s[3598]);
        initDVOINOPANNUAL_IFLAG(s[3599]);
        initTOTLNS_SUM(s[3600]);
        initTOTFLNS_SUM(s[3601]);
        initTOTHP_SUM(s[3602]);
        initTOTLOS_SUM(s[3603]);
        initHFINL_SUM(s[3604]);
        initPOLUM1_I(s[3605]);
        initPOLUM1_IFLAG(s[3606]);
        initPOLUM2_I(s[3607]);
        initPOLUM2_IFLAG(s[3608]);
        initPOLMV1_I(s[3609]);
        initPOLMV1_IFLAG(s[3610]);
        initPPLUM1_I(s[3611]);
        initPPLUM1_IFLAG(s[3612]);
        initPPLUM2_I(s[3613]);
        initPPLUM2_IFLAG(s[3614]);
        initPPLUM3_I(s[3615]);
        initPPLUM3_IFLAG(s[3616]);
        initPPLMV1_I(s[3617]);
        initPPLMV1_IFLAG(s[3618]);
        initPPLMV2_I(s[3619]);
        initPPLMV2_IFLAG(s[3620]);
        initPPLMV3_I(s[3621]);
        initPPLMV3_IFLAG(s[3622]);
        initPFLMV1_I(s[3623]);
        initPFLMV1_IFLAG(s[3624]);
        initPFLMV2_I(s[3625]);
        initPFLMV2_IFLAG(s[3626]);
        initPFLMV3_I(s[3627]);
        initPFLMV3_IFLAG(s[3628]);
        initPFLMV4_I(s[3629]);
        initPFLMV4_IFLAG(s[3630]);
        initPFLMV5_I(s[3631]);
        initPFLMV5_IFLAG(s[3632]);
        initPFLMV6_I(s[3633]);
        initPFLMV6_IFLAG(s[3634]);
        initIHRECNT_I(s[3635]);
        initIHRECNT_IFLAG(s[3636]);
        initIHRCNUM_I(s[3637]);
        initIHRCNUM_IFLAG(s[3638]);
        initIVAL1_IFLAG(s[3639]);
        initIVAL2_I(s[3640]);
        initIVAL2_IFLAG(s[3641]);
        initIVAL3_I(s[3642]);
        initIVAL3_IFLAG(s[3643]);
        initILGIFT_I(s[3644]);
        initILGIFT_IFLAG(s[3645]);
        initIGIFVAL_IFLAG(s[3646]);
        initILUMTY1_I(s[3647]);
        initILUMTY2_I(s[3648]);
        initILUMTY3_I(s[3649]);
        initILUMTY4_I(s[3650]);
        initILUMTY5_I(s[3651]);
        initILUMTY6_I(s[3652]);
        initILUMTY7_I(s[3653]);
        initILUMTY1_IFLAG(s[3654]);
        initILUMTY2_IFLAG(s[3655]);
        initILUMTY3_IFLAG(s[3656]);
        initILUMTY4_IFLAG(s[3657]);
        initILUMTY5_IFLAG(s[3658]);
        initILUMTY6_IFLAG(s[3659]);
        initILUMTY7_IFLAG(s[3660]);
        initILIFB_I(s[3661]);
        initILIFB_IFLAG(s[3662]);
        initILIFE_IFLAG(s[3663]);
        initILUPP_I(s[3664]);
        initILUPP_IFLAG(s[3665]);
        initILACC_IFLAG(s[3666]);
        initILINS_IFLAG(s[3667]);
        initILRED_IFLAG(s[3668]);
        initILWIN_IFLAG(s[3669]);
        initILOTH_IFLAG(s[3670]);
        initNSSEC8(s[3671]);
        initAGMSAFT1(s[3672]);
        initAGMSAF2T(s[3673]);
        initMNTHSCAPE(s[3674]);
        initACCFRAC(s[3675]);
        initRETFRAC(s[3676]);
        initDVPINPVAL(s[3677]);
        initDVWID(s[3678]);
        initDVSPS(s[3679]);
        initDVSPEN(s[3680]);
        initDVDBINCALL(s[3681]);
        initDVVALPBLUM(s[3682]);
        initDVPFCURVAL(s[3683]);
        initDVDBRWEALTHVAL(s[3684]);
        initTOTPEN(s[3685]);
        initDVNIEMP(s[3686]);
        initCURRAC(s[3687]);
        initDVHASPFCUR(s[3688]);
        initDVHASDBR_ORIG(s[3689]);
        initDVHASPFOCC(s[3690]);
        initDVHASPFGRP(s[3691]);
        initDVHASPFPRIV(s[3692]);
        initDVHASPFSIPP(s[3693]);
        initDVHASPFRAC(s[3694]);
        initPOLMV2_IFLAG(s[3695]);
        initPOLMV2_I(s[3696]);
        initSCNDSCH(s[3697]);
        initRF(s[3698]);
        initRS(s[3699]);
        initSOA2(s[3700]);
        initSOA1(s[3701]);
        initWARDC91(s[3702]);
        initWARDO91(s[3703]);
        initWARD98(s[3704]);
        initSTATSWARD(s[3705]);
        initSATIS(s[3706]);
        initWORTH(s[3707]);
        initHAPPY(s[3708]);
        initANXIOUS(s[3709]);
        initISHRP(s[3710]);
        initISHRPPART(s[3711]);
        initHRPIOUT1(s[3712]);
        initHRPPARTIOUT1(s[3713]);
        initHRP_RESP(s[3714]);
        initHRPDVAGE(s[3715]);
        initHRPDVAGE9(s[3716]);
        initHRPSEX(s[3717]);
        initHRPNSSEC3(s[3718]);
        initHRPDVILO3A(s[3719]);
        initHRPDVMRDF(s[3720]);
        initHRPEDATTN1(s[3721]);
        initHRPEDATTN2(s[3722]);
        initHRPEDATTN3(s[3723]);
        initHRPEMPSTAT2(s[3724]);
        initHRPETHNIC(s[3725]);
        initBONTAX_I(s[3726]);
        initBONTAX_IFLAG(s[3727]);
        initPFEN_I(s[3728]);
        initPFEN_IFLAG(s[3729]);
        initPFENNUM_I(s[3730]);
        initPFENNUM_IFLAG(s[3731]);
        initILUMP_I(s[3732]);
        initILUMP_IFLAG(s[3733]);
        initCAJISA_I(s[3734]);
        initCAJISA_IFLAG(s[3735]);
        initDSLEST5_IFLAG(s[3736]);
        initDVCCARDYN_I(s[3737]);
        initDVCCARDYN_IFLAG(s[3738]);
        initDVCCARDNUM_I(s[3739]);
        initDVCCARDNUM_IFLAG(s[3740]);
        initCCAC1_IFLAG(s[3741]);
        initCCAC2_IFLAG(s[3742]);
        initCCAC3_IFLAG(s[3743]);
        initDCAMOS1_IFLAG(s[3744]);
        initDCAMOS2_IFLAG(s[3745]);
        initDCAMOS3_IFLAG(s[3746]);
        initDVSCARDYN_I(s[3747]);
        initDVSCARDYN_IFLAG(s[3748]);
        initDVSCARDNUM_I(s[3749]);
        initDVSCARDNUM_IFLAG(s[3750]);
        initSCAC1_IFLAG(s[3751]);
        initSCAC2_IFLAG(s[3752]);
        initSCAC3_IFLAG(s[3753]);
        initDSAMOS1_IFLAG(s[3754]);
        initDSAMOS2_IFLAG(s[3755]);
        initDSAMOS3_IFLAG(s[3756]);
        initDVOIGOEANNUAL_I(s[3757]);
        initDVOIGOEANNUAL_IFLAG(s[3758]);
        initDVOIGOSANNUAL_I(s[3759]);
        initDVOIGOSANNUAL_IFLAG(s[3760]);
        initDVOIGPPANNUAL_I(s[3761]);
        initDVOIGPPANNUAL_IFLAG(s[3762]);
        initCASEW3(s[3763]);
        initCASEW2(s[3764]);
        initCASEW1(s[3765]);
        initSOC2010(s[3766]);
        initSICCODE(s[3767]);
        initSOC2000(s[3768]);
        initDVSEPANNUAL01(s[3769]);
        initDVSEPANNUAL02(s[3770]);
        initDVSEPANNUAL03(s[3771]);
        initDVSEPANNUAL04(s[3772]);
        initDVSEPANNUAL05(s[3773]);
        initDVSEPANNUAL06(s[3774]);
        initDVSEPANNUAL07(s[3775]);
        initDVSEPANNUAL08(s[3776]);
        initDVSPECANNUAL01(s[3777]);
        initDVSPECANNUAL02(s[3778]);
        initDVSPECANNUAL03(s[3779]);
        initDVSPECANNUAL04(s[3780]);
        initDVSPECANNUAL05(s[3781]);
        initDVSPECANNUAL06(s[3782]);
        initDVSPECANNUAL07(s[3783]);
        initDVSPECANNUAL08(s[3784]);
        initDVSPECANNUAL09(s[3785]);
        initDVSPECANNUAL10(s[3786]);
        initDVTOTALLBENANNUAL(s[3787]);
        initDVTOTTAXANNUAL(s[3788]);
        initDVGIEMP(s[3789]);
        initDVGIPPEN(s[3790]);
        initDVGRSSESECJOB(s[3791]);
        initDVGRSSESECJOB_I(s[3792]);
        initDVNETRENTAMTANNUAL(s[3793]);
        initDVOIGROANNUAL_I(s[3794]);
        initDVBTOGANNUAL(s[3795]);
        initDVCTCANNUAL(s[3796]);
        initDVGIINV(s[3797]);
        initDVGISE(s[3798]);
        initDVGRSBONAMT_I(s[3799]);
        initDVGRSEMPSECJOB(s[3800]);
        initDVGRSEMPSECJOB_I(s[3801]);
        initDVGRSPAY(s[3802]);
        initDVRENTAMTANNUAL_I(s[3803]);
        initDVGRSRENTAMTANNUAL(s[3804]);
        initDVNETBONAMT(s[3805]);
        initDVNETBONAMT_I(s[3806]);
        initDVNETEMPSECJOB(s[3807]);
        initDVNETEMPSECJOB_I(s[3808]);
        initDVNETPAY(s[3809]);
        initDVNETSESECJOB(s[3810]);
        initDVNIINV(s[3811]);
        initDVNIPPEN(s[3812]);
        initDVNISE(s[3813]);
        initPARTGRSPAY(s[3814]);
        initTOTPARTGRSPAY(s[3815]);
        initDVOIGEGANNUAL_I(s[3816]);
        initDVOIGFRANNUAL_I(s[3817]);
        initDVOIGGTANNUAL_I(s[3818]);
        initDVOIGMAANNUAL_I(s[3819]);
        initDVOIGOPANNUAL_I(s[3820]);
        initDVOIGRRANNUAL(s[3821]);
        initDVOIGRRANNUAL_I(s[3822]);
        initDVOINEGANNUAL_I(s[3823]);
        initDVOINFRANNUAL_I(s[3824]);
        initDVOINGTANNUAL_I(s[3825]);
        initDVOINMAANNUAL_I(s[3826]);
        initDVOINOPANNUAL_I(s[3827]);
        initDVOINROANNUAL_I(s[3828]);
        initDVOINRRANNUAL_I(s[3829]);
        initDVSEGRSPAY(s[3830]);
        initDVSEGRSPAY_I(s[3831]);
        initDVSENETPAY(s[3832]);
        initDVSENETPAY_I(s[3833]);
        initDVTOGTCANNUAL(s[3834]);
        initDVTOTBENANNUAL(s[3835]);
        initDVWTCANNUAL(s[3836]);
        initDVNIOTHI(s[3837]);
        initDVIRREGOTHANNUAL(s[3838]);
        initDVWINANNUAL(s[3839]);
        initDVACCINANNUAL(s[3840]);
        initDVLUMPPENANNUAL(s[3841]);
        initDVREDUNANNUAL(s[3842]);
        initDVOTHINSANNUAL(s[3843]);
        initDVLIFEANNUAL(s[3844]);
        initDVINHERITANNUAL(s[3845]);
        initDVGIFTANNUAL(s[3846]);
        initGRSPAYEMPORSE(s[3847]);
        initMARST(s[3848]);
        initECACT(s[3849]);
        initYEAR(s[3850]);
        initMONTH(s[3851]);
        initGOR(s[3852]);
    }

    @Override
    public WaAS_RecordID getID() {
        return (WaAS_RecordID) id;
    }
}
