/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.waas.process.WaAS_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.andyt.generic.data.waas.data.hhold;
public class WaAS_W3HRecord extends WaAS_W3W4W5HRecord {
protected boolean DATEBLT;
protected int DVERECANNUAL;
protected short DVERVRECANNUAL;
protected int DVTOTALLBENANNUAL_AGGR;
protected int DVTOTCARVAL;
protected int DVTOTMOTBVAL;
protected int DVTOTVANVAL;
protected byte EPRPER_I;
protected boolean EPRPER_IFLAG;
protected short EPRVAL_I;
protected boolean EPRVAL_IFLAG;
protected byte EPRVPAY_I;
protected boolean EPRVPAY_IFLAG;
protected byte EQREAS1;
protected byte EQREAS2;
protected byte EQREAS3;
protected byte EQREAS4;
protected boolean EQREAS5;
protected boolean EQREAS6;
protected boolean EQREAS7;
protected boolean EQREAS8;
protected boolean EQREAS9;
protected boolean EQTYPE3;
protected boolean EQTYPE4;
protected boolean EQTYPE5;
protected boolean EQTYPE6;
protected boolean EQTYPE7;
protected boolean EQTYPE8;
protected boolean EQTYPE9;
protected byte ERECMBM_I;
protected boolean ERECMBM_IFLAG;
protected boolean ERECMBY_I;
protected boolean ERECMBY_IFLAG;
protected boolean ERECMPD_I;
protected boolean ERECMPD_IFLAG;
protected short ERECM_I;
protected boolean ERECM_IFLAG;
protected byte ERECTAX_I;
protected boolean ERECTAX_IFLAG;
protected byte EREC_I;
protected boolean EREC_IFLAG;
protected short ERENTAM;
protected boolean ERENTB;
protected boolean ERVRECBM_I;
protected boolean ERVRECBM_IFLAG;
protected boolean ERVRECBY_I;
protected boolean ERVRECBY_IFLAG;
protected byte ERVRECPD_I;
protected boolean ERVRECPD_IFLAG;
protected short ERVREC_I;
protected boolean ERVREC_IFLAG;
protected byte ERVREG1_I;
protected boolean ERVREG1_IFLAG;
protected byte ERVTAX_I;
protected boolean ERVTAX_IFLAG;
protected boolean GCOMODU;
protected boolean GCPREAM;
protected boolean HASLIFT;
protected boolean HEXT5;
protected boolean HEXT6;
protected boolean HEXT7;
protected boolean HINTRO;
protected byte HRPDVAGE15;
protected byte HRPDVAGEW3BAND;
protected byte HRPEMPSTAT2;
protected byte HVALRS1;
protected byte HVALRS2;
protected byte HVALRS3;
protected byte HVALRS4;
protected boolean HVALRS5;
protected boolean HVALRS6;
protected boolean HVALRS7;
protected boolean LTRESMTH;
protected boolean LTRESYRS;
protected byte MALL;
protected byte MALLTY;
protected byte MALLTY3_I;
protected boolean MALLTY3_IFLAG;
protected byte MALLTY_I;
protected boolean MALLTY_IFLAG;
protected byte MALL_I;
protected boolean MALL_IFLAG;
protected byte MARRS;
protected int MARRSV;
protected byte MDIFFPY;
protected byte MENDNUM;
protected byte MENDNUM_I;
protected boolean MENDNUM_IFLAG;
protected int MENDV;
protected boolean MENDV10;
protected boolean MENDV10_I;
protected boolean MENDV10_IFLAG;
protected int MENDV11_I;
protected boolean MENDV11_IFLAG;
protected short MENDV12;
protected boolean MENDV12_I;
protected boolean MENDV12_IFLAG;
protected short MENDV13;
protected boolean MENDV13_I;
protected boolean MENDV13_IFLAG;
protected boolean MENDV14;
protected boolean MENDV14_I;
protected boolean MENDV14_IFLAG;
protected boolean MENDV15;
protected boolean MENDV15_I;
protected boolean MENDV15_IFLAG;
protected boolean MENDV8_I;
protected boolean MENDV8_IFLAG;
protected boolean MENDV9;
protected boolean MENDV9_I;
protected boolean MENDV9_IFLAG;
protected byte MENDVB;
protected boolean MENDVB10;
protected boolean MENDVB12;
protected boolean MENDVB13;
protected boolean MENDVB14;
protected boolean MENDVB15;
protected boolean MENDVB5;
protected boolean MENDVB8;
protected boolean MENDVB9;
protected double MENDV_I;
protected boolean MENDV_IFLAG;
protected byte MENDW;
protected byte MENDW_I;
protected boolean MENDW_IFLAG;
protected byte MENDX;
protected byte MENDY;
protected boolean MENDY10;
protected boolean MENDY12;
protected boolean MENDY13;
protected boolean MENDY14;
protected boolean MENDY15;
protected byte MENDY5;
protected boolean MENDY8;
protected boolean MENDY9;
protected byte MEND___W3;
protected byte MEXTRS4;
protected boolean MEXTRS5;
protected boolean MEXTRS6;
protected boolean MEXTRS7;
protected boolean MEXTRS8;
protected boolean MEXTRS9;
protected byte MHOWPY;
protected boolean MINC10;
protected boolean MINC12;
protected boolean MINC13;
protected boolean MINC14;
protected boolean MINC15;
protected byte MINC7;
protected boolean MINC8;
protected boolean MINC9;
protected boolean MINTRO;
protected boolean MJNAME05;
protected boolean MJNAME06;
protected boolean MJNAME07;
protected boolean MJNAME08;
protected boolean MJNAME09;
protected boolean MJNAME10;
protected boolean MJNAME11;
protected boolean MJNAME12;
protected boolean MJNAME13;
protected boolean MJNAME14;
protected boolean MJNAME15;
protected boolean MJNAME16;
protected boolean MJNAME17;
protected boolean MJNAME21;
protected boolean MJNAME22;
protected boolean MJNAME23;
protected boolean MJNAME24;
protected boolean MJNAME25;
protected boolean MJNAME26;
protected boolean MJNAME27;
protected boolean MJNAME28;
protected boolean MJNAME29;
protected boolean MJNAME30;
protected boolean MJNAME31;
protected boolean MJNAME32;
protected boolean MJNAME33;
protected boolean MJNAME34;
protected boolean MJNAME37;
protected boolean MJNAME38;
protected boolean MJNAME39;
protected boolean MJNAME40;
protected boolean MJNAME41;
protected boolean MJNAME42;
protected boolean MJNAME43;
protected boolean MJNAME44;
protected boolean MJNAME45;
protected boolean MJNAME46;
protected boolean MJNAME47;
protected boolean MJNAME48;
protected boolean MJNAME49;
protected boolean MJNAME50;
protected boolean MJNAME51;
protected byte MNAME;
protected int MNEG;
protected int MNEG3_I;
protected boolean MNEG3_IFLAG;
protected byte MNEGB;
protected int MNEG_I;
protected boolean MNEG_IFLAG;
protected byte MONAME;
protected byte MORTID;
protected boolean MORTID2;
protected boolean MORTID3;
protected byte MPAYB;
protected int MPAYM;
protected byte MPP;
protected boolean MREAS08;
protected boolean MREAS09;
protected boolean MREAS10;
protected byte MREAS11;
protected boolean MREAS15;
protected boolean MREAS16;
protected boolean MREAS17;
protected boolean MREAS18;
protected boolean MREAS19;
protected boolean MREAS20;
protected byte MREAS21;
protected byte MREAS22;
protected boolean MREAS25;
protected boolean MREAS26;
protected boolean MREAS27;
protected boolean MREAS28;
protected boolean MREAS29;
protected boolean MREAS30;
protected boolean MREAS31;
protected boolean MREAS32;
protected boolean MREAS33;
protected byte MTYPE;
protected byte MTYPE_I;
protected boolean MTYPE_IFLAG;
protected int MVAL;
protected int MVALB;
protected double MVAL_I;
protected boolean MVAL_IFLAG;
protected byte MYIFCH;
protected byte MYLFT;
protected byte NUMADISW;
protected boolean NUMPSING;
protected boolean NUMSSEX;
protected String SOA1;
protected String SOA2;
protected byte SRBPERC;
protected byte SRBWHENM;
protected short SRBWHENY;
protected String STATSWARD;
protected boolean STOREY;
protected short TOTDVNWHP_AGGR;
protected byte VCADD;
protected byte VCADDN;
protected int VESTV;
protected int VESTV2;
protected int VESTV2_I;
protected boolean VESTV2_IFLAG;
protected int VESTV_I;
protected boolean VESTV_IFLAG;
protected byte VESVB;
protected byte VESVB2;
protected byte VESVB3;
protected String VOTYO;
protected boolean VOTYP1_IFLAG;
protected boolean VOTYP2_IFLAG;
protected boolean VOTYP3_IFLAG;
protected boolean VOTYP4_IFLAG;
protected boolean VOTYP5;
protected boolean VOTYP5_IFLAG;
protected byte VTYPE;
protected boolean VTYPE2_IFLAG;
protected byte VTYPE_I;
protected double W3XSWGT;
protected final void initDATEBLT(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
DATEBLT = false;
} else {
DATEBLT = true;
}
}
}

protected final void initDVERECANNUAL(String s) {
if (!s.trim().isEmpty()) {
DVERECANNUAL = Integer.parseInt(s);
} else {
DVERECANNUAL = Integer.MIN_VALUE;
}
}

protected final void initDVERVRECANNUAL(String s) {
if (!s.trim().isEmpty()) {
DVERVRECANNUAL = Short.parseShort(s);
} else {
DVERVRECANNUAL = Short.MIN_VALUE;
}
}

protected final void initDVTOTALLBENANNUAL_AGGR(String s) {
if (!s.trim().isEmpty()) {
DVTOTALLBENANNUAL_AGGR = Integer.parseInt(s);
} else {
DVTOTALLBENANNUAL_AGGR = Integer.MIN_VALUE;
}
}

protected final void initDVTOTCARVAL(String s) {
if (!s.trim().isEmpty()) {
DVTOTCARVAL = Integer.parseInt(s);
} else {
DVTOTCARVAL = Integer.MIN_VALUE;
}
}

protected final void initDVTOTMOTBVAL(String s) {
if (!s.trim().isEmpty()) {
DVTOTMOTBVAL = Integer.parseInt(s);
} else {
DVTOTMOTBVAL = Integer.MIN_VALUE;
}
}

protected final void initDVTOTVANVAL(String s) {
if (!s.trim().isEmpty()) {
DVTOTVANVAL = Integer.parseInt(s);
} else {
DVTOTVANVAL = Integer.MIN_VALUE;
}
}

protected final void initEPRPER_I(String s) {
if (!s.trim().isEmpty()) {
EPRPER_I = Byte.parseByte(s);
} else {
EPRPER_I = Byte.MIN_VALUE;
}
}

protected final void initEPRPER_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
EPRPER_IFLAG = false;
} else {
EPRPER_IFLAG = true;
}
}
}

protected final void initEPRVAL_I(String s) {
if (!s.trim().isEmpty()) {
EPRVAL_I = Short.parseShort(s);
} else {
EPRVAL_I = Short.MIN_VALUE;
}
}

protected final void initEPRVAL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
EPRVAL_IFLAG = false;
} else {
EPRVAL_IFLAG = true;
}
}
}

protected final void initEPRVPAY_I(String s) {
if (!s.trim().isEmpty()) {
EPRVPAY_I = Byte.parseByte(s);
} else {
EPRVPAY_I = Byte.MIN_VALUE;
}
}

protected final void initEPRVPAY_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
EPRVPAY_IFLAG = false;
} else {
EPRVPAY_IFLAG = true;
}
}
}

protected final void initEQREAS1(String s) {
if (!s.trim().isEmpty()) {
EQREAS1 = Byte.parseByte(s);
} else {
EQREAS1 = Byte.MIN_VALUE;
}
}

protected final void initEQREAS2(String s) {
if (!s.trim().isEmpty()) {
EQREAS2 = Byte.parseByte(s);
} else {
EQREAS2 = Byte.MIN_VALUE;
}
}

protected final void initEQREAS3(String s) {
if (!s.trim().isEmpty()) {
EQREAS3 = Byte.parseByte(s);
} else {
EQREAS3 = Byte.MIN_VALUE;
}
}

protected final void initEQREAS4(String s) {
if (!s.trim().isEmpty()) {
EQREAS4 = Byte.parseByte(s);
} else {
EQREAS4 = Byte.MIN_VALUE;
}
}

protected final void initEQREAS5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
EQREAS5 = false;
} else {
EQREAS5 = true;
}
}
}

protected final void initEQREAS6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
EQREAS6 = false;
} else {
EQREAS6 = true;
}
}
}

protected final void initEQREAS7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
EQREAS7 = false;
} else {
EQREAS7 = true;
}
}
}

protected final void initEQREAS8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
EQREAS8 = false;
} else {
EQREAS8 = true;
}
}
}

protected final void initEQREAS9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
EQREAS9 = false;
} else {
EQREAS9 = true;
}
}
}

protected final void initEQTYPE3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
EQTYPE3 = false;
} else {
EQTYPE3 = true;
}
}
}

protected final void initEQTYPE4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
EQTYPE4 = false;
} else {
EQTYPE4 = true;
}
}
}

protected final void initEQTYPE5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
EQTYPE5 = false;
} else {
EQTYPE5 = true;
}
}
}

protected final void initEQTYPE6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
EQTYPE6 = false;
} else {
EQTYPE6 = true;
}
}
}

protected final void initEQTYPE7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
EQTYPE7 = false;
} else {
EQTYPE7 = true;
}
}
}

protected final void initEQTYPE8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
EQTYPE8 = false;
} else {
EQTYPE8 = true;
}
}
}

protected final void initEQTYPE9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
EQTYPE9 = false;
} else {
EQTYPE9 = true;
}
}
}

protected final void initERECMBM_I(String s) {
if (!s.trim().isEmpty()) {
ERECMBM_I = Byte.parseByte(s);
} else {
ERECMBM_I = Byte.MIN_VALUE;
}
}

protected final void initERECMBM_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
ERECMBM_IFLAG = false;
} else {
ERECMBM_IFLAG = true;
}
}
}

protected final void initERECMBY_I(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ERECMBY_I = false;
} else {
ERECMBY_I = true;
}
}
}

protected final void initERECMBY_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
ERECMBY_IFLAG = false;
} else {
ERECMBY_IFLAG = true;
}
}
}

protected final void initERECMPD_I(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ERECMPD_I = false;
} else {
ERECMPD_I = true;
}
}
}

protected final void initERECMPD_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
ERECMPD_IFLAG = false;
} else {
ERECMPD_IFLAG = true;
}
}
}

protected final void initERECM_I(String s) {
if (!s.trim().isEmpty()) {
ERECM_I = Short.parseShort(s);
} else {
ERECM_I = Short.MIN_VALUE;
}
}

protected final void initERECM_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
ERECM_IFLAG = false;
} else {
ERECM_IFLAG = true;
}
}
}

protected final void initERECTAX_I(String s) {
if (!s.trim().isEmpty()) {
ERECTAX_I = Byte.parseByte(s);
} else {
ERECTAX_I = Byte.MIN_VALUE;
}
}

protected final void initERECTAX_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
ERECTAX_IFLAG = false;
} else {
ERECTAX_IFLAG = true;
}
}
}

protected final void initEREC_I(String s) {
if (!s.trim().isEmpty()) {
EREC_I = Byte.parseByte(s);
} else {
EREC_I = Byte.MIN_VALUE;
}
}

protected final void initEREC_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
EREC_IFLAG = false;
} else {
EREC_IFLAG = true;
}
}
}

protected final void initERENTAM(String s) {
if (!s.trim().isEmpty()) {
ERENTAM = Short.parseShort(s);
} else {
ERENTAM = Short.MIN_VALUE;
}
}

protected final void initERENTB(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ERENTB = false;
} else {
ERENTB = true;
}
}
}

protected final void initERVRECBM_I(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ERVRECBM_I = false;
} else {
ERVRECBM_I = true;
}
}
}

protected final void initERVRECBM_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
ERVRECBM_IFLAG = false;
} else {
ERVRECBM_IFLAG = true;
}
}
}

protected final void initERVRECBY_I(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ERVRECBY_I = false;
} else {
ERVRECBY_I = true;
}
}
}

protected final void initERVRECBY_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
ERVRECBY_IFLAG = false;
} else {
ERVRECBY_IFLAG = true;
}
}
}

protected final void initERVRECPD_I(String s) {
if (!s.trim().isEmpty()) {
ERVRECPD_I = Byte.parseByte(s);
} else {
ERVRECPD_I = Byte.MIN_VALUE;
}
}

protected final void initERVRECPD_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
ERVRECPD_IFLAG = false;
} else {
ERVRECPD_IFLAG = true;
}
}
}

protected final void initERVREC_I(String s) {
if (!s.trim().isEmpty()) {
ERVREC_I = Short.parseShort(s);
} else {
ERVREC_I = Short.MIN_VALUE;
}
}

protected final void initERVREC_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
ERVREC_IFLAG = false;
} else {
ERVREC_IFLAG = true;
}
}
}

protected final void initERVREG1_I(String s) {
if (!s.trim().isEmpty()) {
ERVREG1_I = Byte.parseByte(s);
} else {
ERVREG1_I = Byte.MIN_VALUE;
}
}

protected final void initERVREG1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
ERVREG1_IFLAG = false;
} else {
ERVREG1_IFLAG = true;
}
}
}

protected final void initERVTAX_I(String s) {
if (!s.trim().isEmpty()) {
ERVTAX_I = Byte.parseByte(s);
} else {
ERVTAX_I = Byte.MIN_VALUE;
}
}

protected final void initERVTAX_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
ERVTAX_IFLAG = false;
} else {
ERVTAX_IFLAG = true;
}
}
}

protected final void initGCOMODU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
GCOMODU = false;
} else {
GCOMODU = true;
}
}
}

protected final void initGCPREAM(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
GCPREAM = false;
} else {
GCPREAM = true;
}
}
}

protected final void initHASLIFT(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
HASLIFT = false;
} else {
HASLIFT = true;
}
}
}

protected final void initHEXT5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
HEXT5 = false;
} else {
HEXT5 = true;
}
}
}

protected final void initHEXT6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
HEXT6 = false;
} else {
HEXT6 = true;
}
}
}

protected final void initHEXT7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
HEXT7 = false;
} else {
HEXT7 = true;
}
}
}

protected final void initHINTRO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
HINTRO = false;
} else {
HINTRO = true;
}
}
}

protected final void initHRPDVAGE15(String s) {
if (!s.trim().isEmpty()) {
HRPDVAGE15 = Byte.parseByte(s);
} else {
HRPDVAGE15 = Byte.MIN_VALUE;
}
}

protected final void initHRPDVAGEW3BAND(String s) {
if (!s.trim().isEmpty()) {
HRPDVAGEW3BAND = Byte.parseByte(s);
} else {
HRPDVAGEW3BAND = Byte.MIN_VALUE;
}
}

protected final void initHRPEMPSTAT2(String s) {
if (!s.trim().isEmpty()) {
HRPEMPSTAT2 = Byte.parseByte(s);
} else {
HRPEMPSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initHVALRS1(String s) {
if (!s.trim().isEmpty()) {
HVALRS1 = Byte.parseByte(s);
} else {
HVALRS1 = Byte.MIN_VALUE;
}
}

protected final void initHVALRS2(String s) {
if (!s.trim().isEmpty()) {
HVALRS2 = Byte.parseByte(s);
} else {
HVALRS2 = Byte.MIN_VALUE;
}
}

protected final void initHVALRS3(String s) {
if (!s.trim().isEmpty()) {
HVALRS3 = Byte.parseByte(s);
} else {
HVALRS3 = Byte.MIN_VALUE;
}
}

protected final void initHVALRS4(String s) {
if (!s.trim().isEmpty()) {
HVALRS4 = Byte.parseByte(s);
} else {
HVALRS4 = Byte.MIN_VALUE;
}
}

protected final void initHVALRS5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
HVALRS5 = false;
} else {
HVALRS5 = true;
}
}
}

protected final void initHVALRS6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
HVALRS6 = false;
} else {
HVALRS6 = true;
}
}
}

protected final void initHVALRS7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
HVALRS7 = false;
} else {
HVALRS7 = true;
}
}
}

protected final void initLTRESMTH(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
LTRESMTH = false;
} else {
LTRESMTH = true;
}
}
}

protected final void initLTRESYRS(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
LTRESYRS = false;
} else {
LTRESYRS = true;
}
}
}

protected final void initMALL(String s) {
if (!s.trim().isEmpty()) {
MALL = Byte.parseByte(s);
} else {
MALL = Byte.MIN_VALUE;
}
}

protected final void initMALLTY(String s) {
if (!s.trim().isEmpty()) {
MALLTY = Byte.parseByte(s);
} else {
MALLTY = Byte.MIN_VALUE;
}
}

protected final void initMALLTY3_I(String s) {
if (!s.trim().isEmpty()) {
MALLTY3_I = Byte.parseByte(s);
} else {
MALLTY3_I = Byte.MIN_VALUE;
}
}

protected final void initMALLTY3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
MALLTY3_IFLAG = false;
} else {
MALLTY3_IFLAG = true;
}
}
}

protected final void initMALLTY_I(String s) {
if (!s.trim().isEmpty()) {
MALLTY_I = Byte.parseByte(s);
} else {
MALLTY_I = Byte.MIN_VALUE;
}
}

protected final void initMALLTY_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
MALLTY_IFLAG = false;
} else {
MALLTY_IFLAG = true;
}
}
}

protected final void initMALL_I(String s) {
if (!s.trim().isEmpty()) {
MALL_I = Byte.parseByte(s);
} else {
MALL_I = Byte.MIN_VALUE;
}
}

protected final void initMALL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
MALL_IFLAG = false;
} else {
MALL_IFLAG = true;
}
}
}

protected final void initMARRS(String s) {
if (!s.trim().isEmpty()) {
MARRS = Byte.parseByte(s);
} else {
MARRS = Byte.MIN_VALUE;
}
}

protected final void initMARRSV(String s) {
if (!s.trim().isEmpty()) {
MARRSV = Integer.parseInt(s);
} else {
MARRSV = Integer.MIN_VALUE;
}
}

protected final void initMDIFFPY(String s) {
if (!s.trim().isEmpty()) {
MDIFFPY = Byte.parseByte(s);
} else {
MDIFFPY = Byte.MIN_VALUE;
}
}

protected final void initMENDNUM(String s) {
if (!s.trim().isEmpty()) {
MENDNUM = Byte.parseByte(s);
} else {
MENDNUM = Byte.MIN_VALUE;
}
}

protected final void initMENDNUM_I(String s) {
if (!s.trim().isEmpty()) {
MENDNUM_I = Byte.parseByte(s);
} else {
MENDNUM_I = Byte.MIN_VALUE;
}
}

protected final void initMENDNUM_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
MENDNUM_IFLAG = false;
} else {
MENDNUM_IFLAG = true;
}
}
}

protected final void initMENDV(String s) {
if (!s.trim().isEmpty()) {
MENDV = Integer.parseInt(s);
} else {
MENDV = Integer.MIN_VALUE;
}
}

protected final void initMENDV10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDV10 = false;
} else {
MENDV10 = true;
}
}
}

protected final void initMENDV10_I(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDV10_I = false;
} else {
MENDV10_I = true;
}
}
}

protected final void initMENDV10_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
MENDV10_IFLAG = false;
} else {
MENDV10_IFLAG = true;
}
}
}

protected final void initMENDV11_I(String s) {
if (!s.trim().isEmpty()) {
MENDV11_I = Integer.parseInt(s);
} else {
MENDV11_I = Integer.MIN_VALUE;
}
}

protected final void initMENDV11_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
MENDV11_IFLAG = false;
} else {
MENDV11_IFLAG = true;
}
}
}

protected final void initMENDV12(String s) {
if (!s.trim().isEmpty()) {
MENDV12 = Short.parseShort(s);
} else {
MENDV12 = Short.MIN_VALUE;
}
}

protected final void initMENDV12_I(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDV12_I = false;
} else {
MENDV12_I = true;
}
}
}

protected final void initMENDV12_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
MENDV12_IFLAG = false;
} else {
MENDV12_IFLAG = true;
}
}
}

protected final void initMENDV13(String s) {
if (!s.trim().isEmpty()) {
MENDV13 = Short.parseShort(s);
} else {
MENDV13 = Short.MIN_VALUE;
}
}

protected final void initMENDV13_I(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDV13_I = false;
} else {
MENDV13_I = true;
}
}
}

protected final void initMENDV13_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
MENDV13_IFLAG = false;
} else {
MENDV13_IFLAG = true;
}
}
}

protected final void initMENDV14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDV14 = false;
} else {
MENDV14 = true;
}
}
}

protected final void initMENDV14_I(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDV14_I = false;
} else {
MENDV14_I = true;
}
}
}

protected final void initMENDV14_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
MENDV14_IFLAG = false;
} else {
MENDV14_IFLAG = true;
}
}
}

protected final void initMENDV15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDV15 = false;
} else {
MENDV15 = true;
}
}
}

protected final void initMENDV15_I(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDV15_I = false;
} else {
MENDV15_I = true;
}
}
}

protected final void initMENDV15_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
MENDV15_IFLAG = false;
} else {
MENDV15_IFLAG = true;
}
}
}

protected final void initMENDV8_I(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDV8_I = false;
} else {
MENDV8_I = true;
}
}
}

protected final void initMENDV8_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
MENDV8_IFLAG = false;
} else {
MENDV8_IFLAG = true;
}
}
}

protected final void initMENDV9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDV9 = false;
} else {
MENDV9 = true;
}
}
}

protected final void initMENDV9_I(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDV9_I = false;
} else {
MENDV9_I = true;
}
}
}

protected final void initMENDV9_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
MENDV9_IFLAG = false;
} else {
MENDV9_IFLAG = true;
}
}
}

protected final void initMENDVB(String s) {
if (!s.trim().isEmpty()) {
MENDVB = Byte.parseByte(s);
} else {
MENDVB = Byte.MIN_VALUE;
}
}

protected final void initMENDVB10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDVB10 = false;
} else {
MENDVB10 = true;
}
}
}

protected final void initMENDVB12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDVB12 = false;
} else {
MENDVB12 = true;
}
}
}

protected final void initMENDVB13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDVB13 = false;
} else {
MENDVB13 = true;
}
}
}

protected final void initMENDVB14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDVB14 = false;
} else {
MENDVB14 = true;
}
}
}

protected final void initMENDVB15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDVB15 = false;
} else {
MENDVB15 = true;
}
}
}

protected final void initMENDVB5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDVB5 = false;
} else {
MENDVB5 = true;
}
}
}

protected final void initMENDVB8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDVB8 = false;
} else {
MENDVB8 = true;
}
}
}

protected final void initMENDVB9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDVB9 = false;
} else {
MENDVB9 = true;
}
}
}

protected final void initMENDV_I(String s) {
if (!s.trim().isEmpty()) {
MENDV_I = Double.parseDouble(s);
} else {
MENDV_I = Double.NaN;
}
}

protected final void initMENDV_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
MENDV_IFLAG = false;
} else {
MENDV_IFLAG = true;
}
}
}

protected final void initMENDW(String s) {
if (!s.trim().isEmpty()) {
MENDW = Byte.parseByte(s);
} else {
MENDW = Byte.MIN_VALUE;
}
}

protected final void initMENDW_I(String s) {
if (!s.trim().isEmpty()) {
MENDW_I = Byte.parseByte(s);
} else {
MENDW_I = Byte.MIN_VALUE;
}
}

protected final void initMENDW_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
MENDW_IFLAG = false;
} else {
MENDW_IFLAG = true;
}
}
}

protected final void initMENDX(String s) {
if (!s.trim().isEmpty()) {
MENDX = Byte.parseByte(s);
} else {
MENDX = Byte.MIN_VALUE;
}
}

protected final void initMENDY(String s) {
if (!s.trim().isEmpty()) {
MENDY = Byte.parseByte(s);
} else {
MENDY = Byte.MIN_VALUE;
}
}

protected final void initMENDY10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDY10 = false;
} else {
MENDY10 = true;
}
}
}

protected final void initMENDY12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDY12 = false;
} else {
MENDY12 = true;
}
}
}

protected final void initMENDY13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDY13 = false;
} else {
MENDY13 = true;
}
}
}

protected final void initMENDY14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDY14 = false;
} else {
MENDY14 = true;
}
}
}

protected final void initMENDY15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDY15 = false;
} else {
MENDY15 = true;
}
}
}

protected final void initMENDY5(String s) {
if (!s.trim().isEmpty()) {
MENDY5 = Byte.parseByte(s);
} else {
MENDY5 = Byte.MIN_VALUE;
}
}

protected final void initMENDY8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDY8 = false;
} else {
MENDY8 = true;
}
}
}

protected final void initMENDY9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MENDY9 = false;
} else {
MENDY9 = true;
}
}
}

protected final void initMEND___W3(String s) {
if (!s.trim().isEmpty()) {
MEND___W3 = Byte.parseByte(s);
} else {
MEND___W3 = Byte.MIN_VALUE;
}
}

protected final void initMEXTRS4(String s) {
if (!s.trim().isEmpty()) {
MEXTRS4 = Byte.parseByte(s);
} else {
MEXTRS4 = Byte.MIN_VALUE;
}
}

protected final void initMEXTRS5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MEXTRS5 = false;
} else {
MEXTRS5 = true;
}
}
}

protected final void initMEXTRS6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MEXTRS6 = false;
} else {
MEXTRS6 = true;
}
}
}

protected final void initMEXTRS7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MEXTRS7 = false;
} else {
MEXTRS7 = true;
}
}
}

protected final void initMEXTRS8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MEXTRS8 = false;
} else {
MEXTRS8 = true;
}
}
}

protected final void initMEXTRS9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MEXTRS9 = false;
} else {
MEXTRS9 = true;
}
}
}

protected final void initMHOWPY(String s) {
if (!s.trim().isEmpty()) {
MHOWPY = Byte.parseByte(s);
} else {
MHOWPY = Byte.MIN_VALUE;
}
}

protected final void initMINC10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MINC10 = false;
} else {
MINC10 = true;
}
}
}

protected final void initMINC12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MINC12 = false;
} else {
MINC12 = true;
}
}
}

protected final void initMINC13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MINC13 = false;
} else {
MINC13 = true;
}
}
}

protected final void initMINC14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MINC14 = false;
} else {
MINC14 = true;
}
}
}

protected final void initMINC15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MINC15 = false;
} else {
MINC15 = true;
}
}
}

protected final void initMINC7(String s) {
if (!s.trim().isEmpty()) {
MINC7 = Byte.parseByte(s);
} else {
MINC7 = Byte.MIN_VALUE;
}
}

protected final void initMINC8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MINC8 = false;
} else {
MINC8 = true;
}
}
}

protected final void initMINC9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MINC9 = false;
} else {
MINC9 = true;
}
}
}

protected final void initMINTRO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MINTRO = false;
} else {
MINTRO = true;
}
}
}

protected final void initMJNAME05(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME05 = false;
} else {
MJNAME05 = true;
}
}
}

protected final void initMJNAME06(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME06 = false;
} else {
MJNAME06 = true;
}
}
}

protected final void initMJNAME07(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME07 = false;
} else {
MJNAME07 = true;
}
}
}

protected final void initMJNAME08(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME08 = false;
} else {
MJNAME08 = true;
}
}
}

protected final void initMJNAME09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME09 = false;
} else {
MJNAME09 = true;
}
}
}

protected final void initMJNAME10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME10 = false;
} else {
MJNAME10 = true;
}
}
}

protected final void initMJNAME11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME11 = false;
} else {
MJNAME11 = true;
}
}
}

protected final void initMJNAME12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME12 = false;
} else {
MJNAME12 = true;
}
}
}

protected final void initMJNAME13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME13 = false;
} else {
MJNAME13 = true;
}
}
}

protected final void initMJNAME14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME14 = false;
} else {
MJNAME14 = true;
}
}
}

protected final void initMJNAME15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME15 = false;
} else {
MJNAME15 = true;
}
}
}

protected final void initMJNAME16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME16 = false;
} else {
MJNAME16 = true;
}
}
}

protected final void initMJNAME17(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME17 = false;
} else {
MJNAME17 = true;
}
}
}

protected final void initMJNAME21(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME21 = false;
} else {
MJNAME21 = true;
}
}
}

protected final void initMJNAME22(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME22 = false;
} else {
MJNAME22 = true;
}
}
}

protected final void initMJNAME23(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME23 = false;
} else {
MJNAME23 = true;
}
}
}

protected final void initMJNAME24(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME24 = false;
} else {
MJNAME24 = true;
}
}
}

protected final void initMJNAME25(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME25 = false;
} else {
MJNAME25 = true;
}
}
}

protected final void initMJNAME26(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME26 = false;
} else {
MJNAME26 = true;
}
}
}

protected final void initMJNAME27(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME27 = false;
} else {
MJNAME27 = true;
}
}
}

protected final void initMJNAME28(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME28 = false;
} else {
MJNAME28 = true;
}
}
}

protected final void initMJNAME29(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME29 = false;
} else {
MJNAME29 = true;
}
}
}

protected final void initMJNAME30(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME30 = false;
} else {
MJNAME30 = true;
}
}
}

protected final void initMJNAME31(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME31 = false;
} else {
MJNAME31 = true;
}
}
}

protected final void initMJNAME32(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME32 = false;
} else {
MJNAME32 = true;
}
}
}

protected final void initMJNAME33(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME33 = false;
} else {
MJNAME33 = true;
}
}
}

protected final void initMJNAME34(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME34 = false;
} else {
MJNAME34 = true;
}
}
}

protected final void initMJNAME37(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME37 = false;
} else {
MJNAME37 = true;
}
}
}

protected final void initMJNAME38(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME38 = false;
} else {
MJNAME38 = true;
}
}
}

protected final void initMJNAME39(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME39 = false;
} else {
MJNAME39 = true;
}
}
}

protected final void initMJNAME40(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME40 = false;
} else {
MJNAME40 = true;
}
}
}

protected final void initMJNAME41(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME41 = false;
} else {
MJNAME41 = true;
}
}
}

protected final void initMJNAME42(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME42 = false;
} else {
MJNAME42 = true;
}
}
}

protected final void initMJNAME43(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME43 = false;
} else {
MJNAME43 = true;
}
}
}

protected final void initMJNAME44(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME44 = false;
} else {
MJNAME44 = true;
}
}
}

protected final void initMJNAME45(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME45 = false;
} else {
MJNAME45 = true;
}
}
}

protected final void initMJNAME46(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME46 = false;
} else {
MJNAME46 = true;
}
}
}

protected final void initMJNAME47(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME47 = false;
} else {
MJNAME47 = true;
}
}
}

protected final void initMJNAME48(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME48 = false;
} else {
MJNAME48 = true;
}
}
}

protected final void initMJNAME49(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME49 = false;
} else {
MJNAME49 = true;
}
}
}

protected final void initMJNAME50(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME50 = false;
} else {
MJNAME50 = true;
}
}
}

protected final void initMJNAME51(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MJNAME51 = false;
} else {
MJNAME51 = true;
}
}
}

protected final void initMNAME(String s) {
if (!s.trim().isEmpty()) {
MNAME = Byte.parseByte(s);
} else {
MNAME = Byte.MIN_VALUE;
}
}

protected final void initMNEG(String s) {
if (!s.trim().isEmpty()) {
MNEG = Integer.parseInt(s);
} else {
MNEG = Integer.MIN_VALUE;
}
}

protected final void initMNEG3_I(String s) {
if (!s.trim().isEmpty()) {
MNEG3_I = Integer.parseInt(s);
} else {
MNEG3_I = Integer.MIN_VALUE;
}
}

protected final void initMNEG3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
MNEG3_IFLAG = false;
} else {
MNEG3_IFLAG = true;
}
}
}

protected final void initMNEGB(String s) {
if (!s.trim().isEmpty()) {
MNEGB = Byte.parseByte(s);
} else {
MNEGB = Byte.MIN_VALUE;
}
}

protected final void initMNEG_I(String s) {
if (!s.trim().isEmpty()) {
MNEG_I = Integer.parseInt(s);
} else {
MNEG_I = Integer.MIN_VALUE;
}
}

protected final void initMNEG_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
MNEG_IFLAG = false;
} else {
MNEG_IFLAG = true;
}
}
}

protected final void initMONAME(String s) {
if (!s.trim().isEmpty()) {
MONAME = Byte.parseByte(s);
} else {
MONAME = Byte.MIN_VALUE;
}
}

protected final void initMORTID(String s) {
if (!s.trim().isEmpty()) {
MORTID = Byte.parseByte(s);
} else {
MORTID = Byte.MIN_VALUE;
}
}

protected final void initMORTID2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MORTID2 = false;
} else {
MORTID2 = true;
}
}
}

protected final void initMORTID3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MORTID3 = false;
} else {
MORTID3 = true;
}
}
}

protected final void initMPAYB(String s) {
if (!s.trim().isEmpty()) {
MPAYB = Byte.parseByte(s);
} else {
MPAYB = Byte.MIN_VALUE;
}
}

protected final void initMPAYM(String s) {
if (!s.trim().isEmpty()) {
MPAYM = Integer.parseInt(s);
} else {
MPAYM = Integer.MIN_VALUE;
}
}

protected final void initMPP(String s) {
if (!s.trim().isEmpty()) {
MPP = Byte.parseByte(s);
} else {
MPP = Byte.MIN_VALUE;
}
}

protected final void initMREAS08(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MREAS08 = false;
} else {
MREAS08 = true;
}
}
}

protected final void initMREAS09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MREAS09 = false;
} else {
MREAS09 = true;
}
}
}

protected final void initMREAS10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MREAS10 = false;
} else {
MREAS10 = true;
}
}
}

protected final void initMREAS11(String s) {
if (!s.trim().isEmpty()) {
MREAS11 = Byte.parseByte(s);
} else {
MREAS11 = Byte.MIN_VALUE;
}
}

protected final void initMREAS15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MREAS15 = false;
} else {
MREAS15 = true;
}
}
}

protected final void initMREAS16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MREAS16 = false;
} else {
MREAS16 = true;
}
}
}

protected final void initMREAS17(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MREAS17 = false;
} else {
MREAS17 = true;
}
}
}

protected final void initMREAS18(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MREAS18 = false;
} else {
MREAS18 = true;
}
}
}

protected final void initMREAS19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MREAS19 = false;
} else {
MREAS19 = true;
}
}
}

protected final void initMREAS20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MREAS20 = false;
} else {
MREAS20 = true;
}
}
}

protected final void initMREAS21(String s) {
if (!s.trim().isEmpty()) {
MREAS21 = Byte.parseByte(s);
} else {
MREAS21 = Byte.MIN_VALUE;
}
}

protected final void initMREAS22(String s) {
if (!s.trim().isEmpty()) {
MREAS22 = Byte.parseByte(s);
} else {
MREAS22 = Byte.MIN_VALUE;
}
}

protected final void initMREAS25(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MREAS25 = false;
} else {
MREAS25 = true;
}
}
}

protected final void initMREAS26(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MREAS26 = false;
} else {
MREAS26 = true;
}
}
}

protected final void initMREAS27(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MREAS27 = false;
} else {
MREAS27 = true;
}
}
}

protected final void initMREAS28(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MREAS28 = false;
} else {
MREAS28 = true;
}
}
}

protected final void initMREAS29(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MREAS29 = false;
} else {
MREAS29 = true;
}
}
}

protected final void initMREAS30(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MREAS30 = false;
} else {
MREAS30 = true;
}
}
}

protected final void initMREAS31(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MREAS31 = false;
} else {
MREAS31 = true;
}
}
}

protected final void initMREAS32(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MREAS32 = false;
} else {
MREAS32 = true;
}
}
}

protected final void initMREAS33(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
MREAS33 = false;
} else {
MREAS33 = true;
}
}
}

protected final void initMTYPE(String s) {
if (!s.trim().isEmpty()) {
MTYPE = Byte.parseByte(s);
} else {
MTYPE = Byte.MIN_VALUE;
}
}

protected final void initMTYPE_I(String s) {
if (!s.trim().isEmpty()) {
MTYPE_I = Byte.parseByte(s);
} else {
MTYPE_I = Byte.MIN_VALUE;
}
}

protected final void initMTYPE_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
MTYPE_IFLAG = false;
} else {
MTYPE_IFLAG = true;
}
}
}

protected final void initMVAL(String s) {
if (!s.trim().isEmpty()) {
MVAL = Integer.parseInt(s);
} else {
MVAL = Integer.MIN_VALUE;
}
}

protected final void initMVALB(String s) {
if (!s.trim().isEmpty()) {
MVALB = Integer.parseInt(s);
} else {
MVALB = Integer.MIN_VALUE;
}
}

protected final void initMVAL_I(String s) {
if (!s.trim().isEmpty()) {
MVAL_I = Double.parseDouble(s);
} else {
MVAL_I = Double.NaN;
}
}

protected final void initMVAL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
MVAL_IFLAG = false;
} else {
MVAL_IFLAG = true;
}
}
}

protected final void initMYIFCH(String s) {
if (!s.trim().isEmpty()) {
MYIFCH = Byte.parseByte(s);
} else {
MYIFCH = Byte.MIN_VALUE;
}
}

protected final void initMYLFT(String s) {
if (!s.trim().isEmpty()) {
MYLFT = Byte.parseByte(s);
} else {
MYLFT = Byte.MIN_VALUE;
}
}

protected final void initNUMADISW(String s) {
if (!s.trim().isEmpty()) {
NUMADISW = Byte.parseByte(s);
} else {
NUMADISW = Byte.MIN_VALUE;
}
}

protected final void initNUMPSING(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
NUMPSING = false;
} else {
NUMPSING = true;
}
}
}

protected final void initNUMSSEX(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
NUMSSEX = false;
} else {
NUMSSEX = true;
}
}
}

protected final void initSOA1(String s) {
if (!s.trim().isEmpty()) {
SOA1 = s;
}
}

protected final void initSOA2(String s) {
if (!s.trim().isEmpty()) {
SOA2 = s;
}
}

protected final void initSRBPERC(String s) {
if (!s.trim().isEmpty()) {
SRBPERC = Byte.parseByte(s);
} else {
SRBPERC = Byte.MIN_VALUE;
}
}

protected final void initSRBWHENM(String s) {
if (!s.trim().isEmpty()) {
SRBWHENM = Byte.parseByte(s);
} else {
SRBWHENM = Byte.MIN_VALUE;
}
}

protected final void initSRBWHENY(String s) {
if (!s.trim().isEmpty()) {
SRBWHENY = Short.parseShort(s);
} else {
SRBWHENY = Short.MIN_VALUE;
}
}

protected final void initSTATSWARD(String s) {
if (!s.trim().isEmpty()) {
STATSWARD = s;
}
}

protected final void initSTOREY(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
STOREY = false;
} else {
STOREY = true;
}
}
}

protected final void initTOTDVNWHP_AGGR(String s) {
if (!s.trim().isEmpty()) {
TOTDVNWHP_AGGR = Short.parseShort(s);
} else {
TOTDVNWHP_AGGR = Short.MIN_VALUE;
}
}

protected final void initVCADD(String s) {
if (!s.trim().isEmpty()) {
VCADD = Byte.parseByte(s);
} else {
VCADD = Byte.MIN_VALUE;
}
}

protected final void initVCADDN(String s) {
if (!s.trim().isEmpty()) {
VCADDN = Byte.parseByte(s);
} else {
VCADDN = Byte.MIN_VALUE;
}
}

protected final void initVESTV(String s) {
if (!s.trim().isEmpty()) {
VESTV = Integer.parseInt(s);
} else {
VESTV = Integer.MIN_VALUE;
}
}

protected final void initVESTV2(String s) {
if (!s.trim().isEmpty()) {
VESTV2 = Integer.parseInt(s);
} else {
VESTV2 = Integer.MIN_VALUE;
}
}

protected final void initVESTV2_I(String s) {
if (!s.trim().isEmpty()) {
VESTV2_I = Integer.parseInt(s);
} else {
VESTV2_I = Integer.MIN_VALUE;
}
}

protected final void initVESTV2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
VESTV2_IFLAG = false;
} else {
VESTV2_IFLAG = true;
}
}
}

protected final void initVESTV_I(String s) {
if (!s.trim().isEmpty()) {
VESTV_I = Integer.parseInt(s);
} else {
VESTV_I = Integer.MIN_VALUE;
}
}

protected final void initVESTV_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
VESTV_IFLAG = false;
} else {
VESTV_IFLAG = true;
}
}
}

protected final void initVESVB(String s) {
if (!s.trim().isEmpty()) {
VESVB = Byte.parseByte(s);
} else {
VESVB = Byte.MIN_VALUE;
}
}

protected final void initVESVB2(String s) {
if (!s.trim().isEmpty()) {
VESVB2 = Byte.parseByte(s);
} else {
VESVB2 = Byte.MIN_VALUE;
}
}

protected final void initVESVB3(String s) {
if (!s.trim().isEmpty()) {
VESVB3 = Byte.parseByte(s);
} else {
VESVB3 = Byte.MIN_VALUE;
}
}

protected final void initVOTYO(String s) {
if (!s.trim().isEmpty()) {
VOTYO = s;
}
}

protected final void initVOTYP1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
VOTYP1_IFLAG = false;
} else {
VOTYP1_IFLAG = true;
}
}
}

protected final void initVOTYP2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
VOTYP2_IFLAG = false;
} else {
VOTYP2_IFLAG = true;
}
}
}

protected final void initVOTYP3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
VOTYP3_IFLAG = false;
} else {
VOTYP3_IFLAG = true;
}
}
}

protected final void initVOTYP4_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
VOTYP4_IFLAG = false;
} else {
VOTYP4_IFLAG = true;
}
}
}

protected final void initVOTYP5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
VOTYP5 = false;
} else {
VOTYP5 = true;
}
}
}

protected final void initVOTYP5_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
VOTYP5_IFLAG = false;
} else {
VOTYP5_IFLAG = true;
}
}
}

protected final void initVTYPE(String s) {
if (!s.trim().isEmpty()) {
VTYPE = Byte.parseByte(s);
} else {
VTYPE = Byte.MIN_VALUE;
}
}

protected final void initVTYPE2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
VTYPE2_IFLAG = false;
} else {
VTYPE2_IFLAG = true;
}
}
}

protected final void initVTYPE_I(String s) {
if (!s.trim().isEmpty()) {
VTYPE_I = Byte.parseByte(s);
} else {
VTYPE_I = Byte.MIN_VALUE;
}
}

protected final void initW3XSWGT(String s) {
if (!s.trim().isEmpty()) {
W3XSWGT = Double.parseDouble(s);
} else {
W3XSWGT = Double.NaN;
}
}

public boolean getDATEBLT() {
return DATEBLT;
}

public int getDVERECANNUAL() {
return DVERECANNUAL;
}

public short getDVERVRECANNUAL() {
return DVERVRECANNUAL;
}

public int getDVTOTALLBENANNUAL_AGGR() {
return DVTOTALLBENANNUAL_AGGR;
}

public int getDVTOTCARVAL() {
return DVTOTCARVAL;
}

public int getDVTOTMOTBVAL() {
return DVTOTMOTBVAL;
}

public int getDVTOTVANVAL() {
return DVTOTVANVAL;
}

public byte getEPRPER_I() {
return EPRPER_I;
}

public boolean getEPRPER_IFLAG() {
return EPRPER_IFLAG;
}

public short getEPRVAL_I() {
return EPRVAL_I;
}

public boolean getEPRVAL_IFLAG() {
return EPRVAL_IFLAG;
}

public byte getEPRVPAY_I() {
return EPRVPAY_I;
}

public boolean getEPRVPAY_IFLAG() {
return EPRVPAY_IFLAG;
}

public byte getEQREAS1() {
return EQREAS1;
}

public byte getEQREAS2() {
return EQREAS2;
}

public byte getEQREAS3() {
return EQREAS3;
}

public byte getEQREAS4() {
return EQREAS4;
}

public boolean getEQREAS5() {
return EQREAS5;
}

public boolean getEQREAS6() {
return EQREAS6;
}

public boolean getEQREAS7() {
return EQREAS7;
}

public boolean getEQREAS8() {
return EQREAS8;
}

public boolean getEQREAS9() {
return EQREAS9;
}

public boolean getEQTYPE3() {
return EQTYPE3;
}

public boolean getEQTYPE4() {
return EQTYPE4;
}

public boolean getEQTYPE5() {
return EQTYPE5;
}

public boolean getEQTYPE6() {
return EQTYPE6;
}

public boolean getEQTYPE7() {
return EQTYPE7;
}

public boolean getEQTYPE8() {
return EQTYPE8;
}

public boolean getEQTYPE9() {
return EQTYPE9;
}

public byte getERECMBM_I() {
return ERECMBM_I;
}

public boolean getERECMBM_IFLAG() {
return ERECMBM_IFLAG;
}

public boolean getERECMBY_I() {
return ERECMBY_I;
}

public boolean getERECMBY_IFLAG() {
return ERECMBY_IFLAG;
}

public boolean getERECMPD_I() {
return ERECMPD_I;
}

public boolean getERECMPD_IFLAG() {
return ERECMPD_IFLAG;
}

public short getERECM_I() {
return ERECM_I;
}

public boolean getERECM_IFLAG() {
return ERECM_IFLAG;
}

public byte getERECTAX_I() {
return ERECTAX_I;
}

public boolean getERECTAX_IFLAG() {
return ERECTAX_IFLAG;
}

public byte getEREC_I() {
return EREC_I;
}

public boolean getEREC_IFLAG() {
return EREC_IFLAG;
}

public short getERENTAM() {
return ERENTAM;
}

public boolean getERENTB() {
return ERENTB;
}

public boolean getERVRECBM_I() {
return ERVRECBM_I;
}

public boolean getERVRECBM_IFLAG() {
return ERVRECBM_IFLAG;
}

public boolean getERVRECBY_I() {
return ERVRECBY_I;
}

public boolean getERVRECBY_IFLAG() {
return ERVRECBY_IFLAG;
}

public byte getERVRECPD_I() {
return ERVRECPD_I;
}

public boolean getERVRECPD_IFLAG() {
return ERVRECPD_IFLAG;
}

public short getERVREC_I() {
return ERVREC_I;
}

public boolean getERVREC_IFLAG() {
return ERVREC_IFLAG;
}

public byte getERVREG1_I() {
return ERVREG1_I;
}

public boolean getERVREG1_IFLAG() {
return ERVREG1_IFLAG;
}

public byte getERVTAX_I() {
return ERVTAX_I;
}

public boolean getERVTAX_IFLAG() {
return ERVTAX_IFLAG;
}

public boolean getGCOMODU() {
return GCOMODU;
}

public boolean getGCPREAM() {
return GCPREAM;
}

public boolean getHASLIFT() {
return HASLIFT;
}

public boolean getHEXT5() {
return HEXT5;
}

public boolean getHEXT6() {
return HEXT6;
}

public boolean getHEXT7() {
return HEXT7;
}

public boolean getHINTRO() {
return HINTRO;
}

public byte getHRPDVAGE15() {
return HRPDVAGE15;
}

public byte getHRPDVAGEW3BAND() {
return HRPDVAGEW3BAND;
}

public byte getHRPEMPSTAT2() {
return HRPEMPSTAT2;
}

public byte getHVALRS1() {
return HVALRS1;
}

public byte getHVALRS2() {
return HVALRS2;
}

public byte getHVALRS3() {
return HVALRS3;
}

public byte getHVALRS4() {
return HVALRS4;
}

public boolean getHVALRS5() {
return HVALRS5;
}

public boolean getHVALRS6() {
return HVALRS6;
}

public boolean getHVALRS7() {
return HVALRS7;
}

public boolean getLTRESMTH() {
return LTRESMTH;
}

public boolean getLTRESYRS() {
return LTRESYRS;
}

public byte getMALL() {
return MALL;
}

public byte getMALLTY() {
return MALLTY;
}

public byte getMALLTY3_I() {
return MALLTY3_I;
}

public boolean getMALLTY3_IFLAG() {
return MALLTY3_IFLAG;
}

public byte getMALLTY_I() {
return MALLTY_I;
}

public boolean getMALLTY_IFLAG() {
return MALLTY_IFLAG;
}

public byte getMALL_I() {
return MALL_I;
}

public boolean getMALL_IFLAG() {
return MALL_IFLAG;
}

public byte getMARRS() {
return MARRS;
}

public int getMARRSV() {
return MARRSV;
}

public byte getMDIFFPY() {
return MDIFFPY;
}

public byte getMENDNUM() {
return MENDNUM;
}

public byte getMENDNUM_I() {
return MENDNUM_I;
}

public boolean getMENDNUM_IFLAG() {
return MENDNUM_IFLAG;
}

public int getMENDV() {
return MENDV;
}

public boolean getMENDV10() {
return MENDV10;
}

public boolean getMENDV10_I() {
return MENDV10_I;
}

public boolean getMENDV10_IFLAG() {
return MENDV10_IFLAG;
}

public int getMENDV11_I() {
return MENDV11_I;
}

public boolean getMENDV11_IFLAG() {
return MENDV11_IFLAG;
}

public short getMENDV12() {
return MENDV12;
}

public boolean getMENDV12_I() {
return MENDV12_I;
}

public boolean getMENDV12_IFLAG() {
return MENDV12_IFLAG;
}

public short getMENDV13() {
return MENDV13;
}

public boolean getMENDV13_I() {
return MENDV13_I;
}

public boolean getMENDV13_IFLAG() {
return MENDV13_IFLAG;
}

public boolean getMENDV14() {
return MENDV14;
}

public boolean getMENDV14_I() {
return MENDV14_I;
}

public boolean getMENDV14_IFLAG() {
return MENDV14_IFLAG;
}

public boolean getMENDV15() {
return MENDV15;
}

public boolean getMENDV15_I() {
return MENDV15_I;
}

public boolean getMENDV15_IFLAG() {
return MENDV15_IFLAG;
}

public boolean getMENDV8_I() {
return MENDV8_I;
}

public boolean getMENDV8_IFLAG() {
return MENDV8_IFLAG;
}

public boolean getMENDV9() {
return MENDV9;
}

public boolean getMENDV9_I() {
return MENDV9_I;
}

public boolean getMENDV9_IFLAG() {
return MENDV9_IFLAG;
}

public byte getMENDVB() {
return MENDVB;
}

public boolean getMENDVB10() {
return MENDVB10;
}

public boolean getMENDVB12() {
return MENDVB12;
}

public boolean getMENDVB13() {
return MENDVB13;
}

public boolean getMENDVB14() {
return MENDVB14;
}

public boolean getMENDVB15() {
return MENDVB15;
}

public boolean getMENDVB5() {
return MENDVB5;
}

public boolean getMENDVB8() {
return MENDVB8;
}

public boolean getMENDVB9() {
return MENDVB9;
}

public double getMENDV_I() {
return MENDV_I;
}

public boolean getMENDV_IFLAG() {
return MENDV_IFLAG;
}

public byte getMENDW() {
return MENDW;
}

public byte getMENDW_I() {
return MENDW_I;
}

public boolean getMENDW_IFLAG() {
return MENDW_IFLAG;
}

public byte getMENDX() {
return MENDX;
}

public byte getMENDY() {
return MENDY;
}

public boolean getMENDY10() {
return MENDY10;
}

public boolean getMENDY12() {
return MENDY12;
}

public boolean getMENDY13() {
return MENDY13;
}

public boolean getMENDY14() {
return MENDY14;
}

public boolean getMENDY15() {
return MENDY15;
}

public byte getMENDY5() {
return MENDY5;
}

public boolean getMENDY8() {
return MENDY8;
}

public boolean getMENDY9() {
return MENDY9;
}

public byte getMEND___W3() {
return MEND___W3;
}

public byte getMEXTRS4() {
return MEXTRS4;
}

public boolean getMEXTRS5() {
return MEXTRS5;
}

public boolean getMEXTRS6() {
return MEXTRS6;
}

public boolean getMEXTRS7() {
return MEXTRS7;
}

public boolean getMEXTRS8() {
return MEXTRS8;
}

public boolean getMEXTRS9() {
return MEXTRS9;
}

public byte getMHOWPY() {
return MHOWPY;
}

public boolean getMINC10() {
return MINC10;
}

public boolean getMINC12() {
return MINC12;
}

public boolean getMINC13() {
return MINC13;
}

public boolean getMINC14() {
return MINC14;
}

public boolean getMINC15() {
return MINC15;
}

public byte getMINC7() {
return MINC7;
}

public boolean getMINC8() {
return MINC8;
}

public boolean getMINC9() {
return MINC9;
}

public boolean getMINTRO() {
return MINTRO;
}

public boolean getMJNAME05() {
return MJNAME05;
}

public boolean getMJNAME06() {
return MJNAME06;
}

public boolean getMJNAME07() {
return MJNAME07;
}

public boolean getMJNAME08() {
return MJNAME08;
}

public boolean getMJNAME09() {
return MJNAME09;
}

public boolean getMJNAME10() {
return MJNAME10;
}

public boolean getMJNAME11() {
return MJNAME11;
}

public boolean getMJNAME12() {
return MJNAME12;
}

public boolean getMJNAME13() {
return MJNAME13;
}

public boolean getMJNAME14() {
return MJNAME14;
}

public boolean getMJNAME15() {
return MJNAME15;
}

public boolean getMJNAME16() {
return MJNAME16;
}

public boolean getMJNAME17() {
return MJNAME17;
}

public boolean getMJNAME21() {
return MJNAME21;
}

public boolean getMJNAME22() {
return MJNAME22;
}

public boolean getMJNAME23() {
return MJNAME23;
}

public boolean getMJNAME24() {
return MJNAME24;
}

public boolean getMJNAME25() {
return MJNAME25;
}

public boolean getMJNAME26() {
return MJNAME26;
}

public boolean getMJNAME27() {
return MJNAME27;
}

public boolean getMJNAME28() {
return MJNAME28;
}

public boolean getMJNAME29() {
return MJNAME29;
}

public boolean getMJNAME30() {
return MJNAME30;
}

public boolean getMJNAME31() {
return MJNAME31;
}

public boolean getMJNAME32() {
return MJNAME32;
}

public boolean getMJNAME33() {
return MJNAME33;
}

public boolean getMJNAME34() {
return MJNAME34;
}

public boolean getMJNAME37() {
return MJNAME37;
}

public boolean getMJNAME38() {
return MJNAME38;
}

public boolean getMJNAME39() {
return MJNAME39;
}

public boolean getMJNAME40() {
return MJNAME40;
}

public boolean getMJNAME41() {
return MJNAME41;
}

public boolean getMJNAME42() {
return MJNAME42;
}

public boolean getMJNAME43() {
return MJNAME43;
}

public boolean getMJNAME44() {
return MJNAME44;
}

public boolean getMJNAME45() {
return MJNAME45;
}

public boolean getMJNAME46() {
return MJNAME46;
}

public boolean getMJNAME47() {
return MJNAME47;
}

public boolean getMJNAME48() {
return MJNAME48;
}

public boolean getMJNAME49() {
return MJNAME49;
}

public boolean getMJNAME50() {
return MJNAME50;
}

public boolean getMJNAME51() {
return MJNAME51;
}

public byte getMNAME() {
return MNAME;
}

public int getMNEG() {
return MNEG;
}

public int getMNEG3_I() {
return MNEG3_I;
}

public boolean getMNEG3_IFLAG() {
return MNEG3_IFLAG;
}

public byte getMNEGB() {
return MNEGB;
}

public int getMNEG_I() {
return MNEG_I;
}

public boolean getMNEG_IFLAG() {
return MNEG_IFLAG;
}

public byte getMONAME() {
return MONAME;
}

public byte getMORTID() {
return MORTID;
}

public boolean getMORTID2() {
return MORTID2;
}

public boolean getMORTID3() {
return MORTID3;
}

public byte getMPAYB() {
return MPAYB;
}

public int getMPAYM() {
return MPAYM;
}

public byte getMPP() {
return MPP;
}

public boolean getMREAS08() {
return MREAS08;
}

public boolean getMREAS09() {
return MREAS09;
}

public boolean getMREAS10() {
return MREAS10;
}

public byte getMREAS11() {
return MREAS11;
}

public boolean getMREAS15() {
return MREAS15;
}

public boolean getMREAS16() {
return MREAS16;
}

public boolean getMREAS17() {
return MREAS17;
}

public boolean getMREAS18() {
return MREAS18;
}

public boolean getMREAS19() {
return MREAS19;
}

public boolean getMREAS20() {
return MREAS20;
}

public byte getMREAS21() {
return MREAS21;
}

public byte getMREAS22() {
return MREAS22;
}

public boolean getMREAS25() {
return MREAS25;
}

public boolean getMREAS26() {
return MREAS26;
}

public boolean getMREAS27() {
return MREAS27;
}

public boolean getMREAS28() {
return MREAS28;
}

public boolean getMREAS29() {
return MREAS29;
}

public boolean getMREAS30() {
return MREAS30;
}

public boolean getMREAS31() {
return MREAS31;
}

public boolean getMREAS32() {
return MREAS32;
}

public boolean getMREAS33() {
return MREAS33;
}

public byte getMTYPE() {
return MTYPE;
}

public byte getMTYPE_I() {
return MTYPE_I;
}

public boolean getMTYPE_IFLAG() {
return MTYPE_IFLAG;
}

public int getMVAL() {
return MVAL;
}

public int getMVALB() {
return MVALB;
}

public double getMVAL_I() {
return MVAL_I;
}

public boolean getMVAL_IFLAG() {
return MVAL_IFLAG;
}

public byte getMYIFCH() {
return MYIFCH;
}

public byte getMYLFT() {
return MYLFT;
}

public byte getNUMADISW() {
return NUMADISW;
}

public boolean getNUMPSING() {
return NUMPSING;
}

public boolean getNUMSSEX() {
return NUMSSEX;
}

public String getSOA1() {
return SOA1;
}

public String getSOA2() {
return SOA2;
}

public byte getSRBPERC() {
return SRBPERC;
}

public byte getSRBWHENM() {
return SRBWHENM;
}

public short getSRBWHENY() {
return SRBWHENY;
}

public String getSTATSWARD() {
return STATSWARD;
}

public boolean getSTOREY() {
return STOREY;
}

public short getTOTDVNWHP_AGGR() {
return TOTDVNWHP_AGGR;
}

public byte getVCADD() {
return VCADD;
}

public byte getVCADDN() {
return VCADDN;
}

public int getVESTV() {
return VESTV;
}

public int getVESTV2() {
return VESTV2;
}

public int getVESTV2_I() {
return VESTV2_I;
}

public boolean getVESTV2_IFLAG() {
return VESTV2_IFLAG;
}

public int getVESTV_I() {
return VESTV_I;
}

public boolean getVESTV_IFLAG() {
return VESTV_IFLAG;
}

public byte getVESVB() {
return VESVB;
}

public byte getVESVB2() {
return VESVB2;
}

public byte getVESVB3() {
return VESVB3;
}

public String getVOTYO() {
return VOTYO;
}

public boolean getVOTYP1_IFLAG() {
return VOTYP1_IFLAG;
}

public boolean getVOTYP2_IFLAG() {
return VOTYP2_IFLAG;
}

public boolean getVOTYP3_IFLAG() {
return VOTYP3_IFLAG;
}

public boolean getVOTYP4_IFLAG() {
return VOTYP4_IFLAG;
}

public boolean getVOTYP5() {
return VOTYP5;
}

public boolean getVOTYP5_IFLAG() {
return VOTYP5_IFLAG;
}

public byte getVTYPE() {
return VTYPE;
}

public boolean getVTYPE2_IFLAG() {
return VTYPE2_IFLAG;
}

public byte getVTYPE_I() {
return VTYPE_I;
}

public double getW3XSWGT() {
return W3XSWGT;
}

public WaAS_W3HRecord(String line) {
s = line.split("\t");
initHOUT(s[0]);
initW3XSWGT(s[1]);
initNUMADISW(s[2]);
initNUMADULT(s[3]);
initNUMCH18(s[4]);
initNUMCHILD(s[5]);
initNUMCIVPTR(s[6]);
initNUMCPART(s[7]);
initNUMDEPCH(s[8]);
initNUMELCH(s[9]);
initNUMHHLDR(s[10]);
initNUMMPART(s[11]);
initNUMNOELCH(s[12]);
initNUMPSING(s[13]);
initNUMSSEX(s[14]);
initHHOLDTYPE(s[15]);
initHRPEDLEVEL(s[16]);
initHSETYPE(s[17]);
initDVHSIZE(s[18]);
initACCOM(s[19]);
initFLTTYP(s[20]);
initACCOTH(s[21]);
initLTRESYRS(s[22]);
initLTRESMTH(s[23]);
initSTOREY(s[24]);
initHASLIFT(s[25]);
initDATEBLT(s[26]);
initTEN1(s[27]);
initTIED(s[28]);
initLLORD(s[29]);
initFURN(s[30]);
initDVPRIRNT(s[31]);
initHHOWN(s[32]);
initHINTRO(s[33]);
initHAGEB(s[34]);
initHAGEYR(s[35]);
initHBUYYR(s[36]);
initHBUYSE(s[37]);
initHSHARE(s[38]);
initHSHAREP(s[39]);
initHPRICE(s[40]);
initHPRICEB(s[41]);
initHBFROM(s[42]);
initHRTBEV(s[43]);
initHHOSCH(s[44]);
initHVALUE(s[45]);
initHVALB(s[46]);
initHVALRS1(s[47]);
initHVALRS2(s[48]);
initHVALRS3(s[49]);
initHVALRS4(s[50]);
initHVALRS5(s[51]);
initHVALRS6(s[52]);
initHVALRS7(s[53]);
initHEXT1(s[54]);
initHEXT2(s[55]);
initHEXT3(s[56]);
initHEXT4(s[57]);
initHEXT5(s[58]);
initHEXT6(s[59]);
initHEXT7(s[60]);
initMINTRO(s[61]);
initMNUMBN(s[62]);
initMNUMB(s[63]);
initMW2CHK1(s[64]);
initMW2CHK2(s[65]);
initMW2CHK3(s[66]);
initMEXTN(s[67]);
initMEXTRS1(s[68]);
initMEXTRS2(s[69]);
initMEXTRS3(s[70]);
initMEXTRS4(s[71]);
initMEXTRS5(s[72]);
initMEXTRS6(s[73]);
initMEXTRS7(s[74]);
initMEXTRS8(s[75]);
initMEXTRS9(s[76]);
initMCHGE(s[77]);
initMCHGENUM(s[78]);
initMNUMBO(s[79]);
initMORTID(s[80]);
initMNAME(s[81]);
initMONAME(s[82]);
initMJNAME01(s[83]);
initMJNAME02(s[84]);
initMJNAME03(s[85]);
initMJNAME04(s[86]);
initMJNAME05(s[87]);
initMJNAME06(s[88]);
initMJNAME07(s[89]);
initMJNAME08(s[90]);
initMJNAME09(s[91]);
initMJNAME10(s[92]);
initMJNAME11(s[93]);
initMJNAME12(s[94]);
initMJNAME13(s[95]);
initMJNAME14(s[96]);
initMJNAME15(s[97]);
initMJNAME16(s[98]);
initMJNAME17(s[99]);
initMREAS01(s[100]);
initMREAS02(s[101]);
initMREAS03(s[102]);
initMREAS04(s[103]);
initMREAS05(s[104]);
initMREAS06(s[105]);
initMREAS07(s[106]);
initMREAS08(s[107]);
initMREAS09(s[108]);
initMREAS10(s[109]);
initMREAS11(s[110]);
initMTYPE(s[111]);
initMENDW(s[112]);
initMENDNUM(s[113]);
initMALL(s[114]);
initMALLTY(s[115]);
initMVAL(s[116]);
initMVALB(s[117]);
initMNEG(s[118]);
initMNEGB(s[119]);
initMENDV(s[120]);
initMENDVB(s[121]);
initMENDY(s[122]);
initMENDV2(s[123]);
initMENDVB2(s[124]);
initMENDY2(s[125]);
initMENDV3(s[126]);
initMENDVB3(s[127]);
initMENDY3(s[128]);
initMENDV4(s[129]);
initMENDVB4(s[130]);
initMENDY4(s[131]);
initMENDV5(s[132]);
initMENDVB5(s[133]);
initMENDY5(s[134]);
initMENDX(s[135]);
initMYLFT(s[136]);
initMYIFCH(s[137]);
initMPAYM(s[138]);
initMPAYB(s[139]);
initMINC1(s[140]);
initMINC2(s[141]);
initMINC3(s[142]);
initMINC4(s[143]);
initMINC5(s[144]);
initMPP(s[145]);
initMHOWPY(s[146]);
initMARRS(s[147]);
initMARRSV(s[148]);
initMORTID2(s[149]);
initMNAME2(s[150]);
initMONAME2(s[151]);
initMJNAME18(s[152]);
initMJNAME19(s[153]);
initMJNAME20(s[154]);
initMJNAME21(s[155]);
initMJNAME22(s[156]);
initMJNAME23(s[157]);
initMJNAME24(s[158]);
initMJNAME25(s[159]);
initMJNAME26(s[160]);
initMJNAME27(s[161]);
initMJNAME28(s[162]);
initMJNAME29(s[163]);
initMJNAME30(s[164]);
initMJNAME31(s[165]);
initMJNAME32(s[166]);
initMJNAME33(s[167]);
initMJNAME34(s[168]);
initMREAS12(s[169]);
initMREAS13(s[170]);
initMREAS14(s[171]);
initMREAS15(s[172]);
initMREAS16(s[173]);
initMREAS17(s[174]);
initMREAS18(s[175]);
initMREAS19(s[176]);
initMREAS20(s[177]);
initMREAS21(s[178]);
initMREAS22(s[179]);
initMTYPE2(s[180]);
initMENDW2(s[181]);
initMENDNUM2(s[182]);
initMALL2(s[183]);
initMALLTY2(s[184]);
initMVAL2(s[185]);
initMVALB2(s[186]);
initMNEG2(s[187]);
initMNEGB2(s[188]);
initMENDV6(s[189]);
initMENDVB6(s[190]);
initMENDY6(s[191]);
initMENDV7(s[192]);
initMENDVB7(s[193]);
initMENDY7(s[194]);
initMENDV8(s[195]);
initMENDVB8(s[196]);
initMENDY8(s[197]);
initMENDV9(s[198]);
initMENDVB9(s[199]);
initMENDY9(s[200]);
initMENDV10(s[201]);
initMENDVB10(s[202]);
initMENDY10(s[203]);
initMENDX2(s[204]);
initMYLFT2(s[205]);
initMYIFCH2(s[206]);
initMPAYM2(s[207]);
initMPAYB2(s[208]);
initMINC6(s[209]);
initMINC7(s[210]);
initMINC8(s[211]);
initMINC9(s[212]);
initMINC10(s[213]);
initMPP2(s[214]);
initMHOWPY2(s[215]);
initMARRS2(s[216]);
initMARRSV2(s[217]);
initMORTID3(s[218]);
initMNAME3(s[219]);
initMONAME3(s[220]);
initMJNAME35(s[221]);
initMJNAME36(s[222]);
initMJNAME37(s[223]);
initMJNAME38(s[224]);
initMJNAME39(s[225]);
initMJNAME40(s[226]);
initMJNAME41(s[227]);
initMJNAME42(s[228]);
initMJNAME43(s[229]);
initMJNAME44(s[230]);
initMJNAME45(s[231]);
initMJNAME46(s[232]);
initMJNAME47(s[233]);
initMJNAME48(s[234]);
initMJNAME49(s[235]);
initMJNAME50(s[236]);
initMJNAME51(s[237]);
initMREAS23(s[238]);
initMREAS24(s[239]);
initMREAS25(s[240]);
initMREAS26(s[241]);
initMREAS27(s[242]);
initMREAS28(s[243]);
initMREAS29(s[244]);
initMREAS30(s[245]);
initMREAS31(s[246]);
initMREAS32(s[247]);
initMREAS33(s[248]);
initMTYPE3(s[249]);
initMEND___W3(s[250]);
initMENDNUM3(s[251]);
initMALL3(s[252]);
initMALLTY3(s[253]);
initMVAL3(s[254]);
initMVALB3(s[255]);
initMNEG3(s[256]);
initMNEGB3(s[257]);
initMENDV11(s[258]);
initMENDVB11(s[259]);
initMENDY11(s[260]);
initMENDV12(s[261]);
initMENDVB12(s[262]);
initMENDY12(s[263]);
initMENDV13(s[264]);
initMENDVB13(s[265]);
initMENDY13(s[266]);
initMENDV14(s[267]);
initMENDVB14(s[268]);
initMENDY14(s[269]);
initMENDV15(s[270]);
initMENDVB15(s[271]);
initMENDY15(s[272]);
initMENDX3(s[273]);
initMYLFT3(s[274]);
initMYIFCH3(s[275]);
initMPAYM3(s[276]);
initMPAYB3(s[277]);
initMINC11(s[278]);
initMINC12(s[279]);
initMINC13(s[280]);
initMINC14(s[281]);
initMINC15(s[282]);
initMPP3(s[283]);
initMHOWPY3(s[284]);
initMARRS3(s[285]);
initMARRSV3(s[286]);
initMDIFFPY(s[287]);
initEQOLD(s[288]);
initEQNEW(s[289]);
initEQYES(s[290]);
initEQTYPE1(s[291]);
initEQTYPE2(s[292]);
initEQTYPE3(s[293]);
initEQTYPE4(s[294]);
initEQTYPE5(s[295]);
initEQTYPE6(s[296]);
initEQTYPE7(s[297]);
initEQTYPE8(s[298]);
initEQTYPE9(s[299]);
initEQREAS1(s[300]);
initEQREAS2(s[301]);
initEQREAS3(s[302]);
initEQREAS4(s[303]);
initEQREAS5(s[304]);
initEQREAS6(s[305]);
initEQREAS7(s[306]);
initEQREAS8(s[307]);
initEQREAS9(s[308]);
initEQWHENY(s[309]);
initEQWHENM(s[310]);
initEQDRAW(s[311]);
initEQVAL(s[312]);
initEQVALB(s[313]);
initEQVALDR(s[314]);
initEQVALDRB(s[315]);
initEREC(s[316]);
initERECMPD(s[317]);
initERECMBY(s[318]);
initERECTAX(s[319]);
initEINT(s[320]);
initEINTFIX(s[321]);
initEINTRAT(s[322]);
initEMSPAY(s[323]);
initEMSARR(s[324]);
initFRREPFIX(s[325]);
initSHARAPP(s[326]);
initESHARAPP(s[327]);
initERVREG1(s[328]);
initERVREG2(s[329]);
initERVSUM(s[330]);
initERVSUMB(s[331]);
initERVRECPD(s[332]);
initERVRECBY(s[333]);
initERVTAX(s[334]);
initERVRENT(s[335]);
initERENTAM(s[336]);
initERENTB(s[337]);
initERVPRP(s[338]);
initSRBWHENY(s[339]);
initSRBWHENM(s[340]);
initSRBPERC(s[341]);
initEPRVPAY(s[342]);
initEPRVAL(s[343]);
initEPRPER(s[344]);
initEOTHREG(s[345]);
initEOTHRVA(s[346]);
initEOTHRVB(s[347]);
initPRREPAY(s[348]);
initPRREPFIX(s[349]);
initPRREPPC(s[350]);
initGCOMODU(s[351]);
initGCPREAM(s[352]);
initGCOLLEC(s[353]);
initGCOLLV(s[354]);
initGCOLLVB(s[355]);
initGCONTVB(s[356]);
initVCARN(s[357]);
initVCADD(s[358]);
initVCADDN(s[359]);
initVTYPE(s[360]);
initVESTV(s[361]);
initVESVB(s[362]);
initVTYPE2(s[363]);
initVESTV2(s[364]);
initVESVB2(s[365]);
initVPERS(s[366]);
initVPERV(s[367]);
initVOTYP1(s[368]);
initVOTYP2(s[369]);
initVOTYP3(s[370]);
initVOTYP4(s[371]);
initVOTYP5(s[372]);
initVOTPN(s[373]);
initVOTYO(s[374]);
initVOVAL(s[375]);
initVOVLB(s[376]);
initOFINAL(s[377]);
initNOUNITS(s[378]);
initSOA2(s[379]);
initSOA1(s[380]);
initSTATSWARD(s[381]);
initTEN1_I(s[382]);
initTEN1_IFLAG(s[383]);
initHSHARE_I(s[384]);
initHSHARE_IFLAG(s[385]);
initHSHAREP_I(s[386]);
initHSHAREP_IFLAG(s[387]);
initHVALUE_I(s[388]);
initHVALUE_IFLAG(s[389]);
initEQUITY_YN_I(s[390]);
initEQUITY_YN_IFLAG(s[391]);
initEQTYPE1_I(s[392]);
initEQTYPE1_IFLAG(s[393]);
initEQDRAW_I(s[394]);
initEQDRAW_IFLAG(s[395]);
initEQVAL_I(s[396]);
initEQVAL_IFLAG(s[397]);
initEINT_I(s[398]);
initEINT_IFLAG(s[399]);
initEINTRAT_I(s[400]);
initEINTRAT_IFLAG(s[401]);
initERVPRP_I(s[402]);
initERVPRP_IFLAG(s[403]);
initPRREPAY_I(s[404]);
initPRREPAY_IFLAG(s[405]);
initPRREPFIX_I(s[406]);
initPRREPFIX_IFLAG(s[407]);
initPRREPPC_I(s[408]);
initPRREPPC_IFLAG(s[409]);
initMNUMB_I(s[410]);
initMNUMB_IFLAG(s[411]);
initMALL_I(s[412]);
initMALL_IFLAG(s[413]);
initMALL2_I(s[414]);
initMALL2_IFLAG(s[415]);
initMALL3_I(s[416]);
initMALL3_IFLAG(s[417]);
initMALLTY_I(s[418]);
initMALLTY_IFLAG(s[419]);
initMALLTY2_I(s[420]);
initMALLTY2_IFLAG(s[421]);
initMALLTY3_I(s[422]);
initMALLTY3_IFLAG(s[423]);
initMVAL_I(s[424]);
initMVAL_IFLAG(s[425]);
initMVAL2_I(s[426]);
initMVAL2_IFLAG(s[427]);
initMVAL3_I(s[428]);
initMVAL3_IFLAG(s[429]);
initMNEG_I(s[430]);
initMNEG_IFLAG(s[431]);
initMNEG2_I(s[432]);
initMNEG2_IFLAG(s[433]);
initMNEG3_I(s[434]);
initMNEG3_IFLAG(s[435]);
initMTYPE_I(s[436]);
initMTYPE_IFLAG(s[437]);
initMTYPE2_I(s[438]);
initMTYPE2_IFLAG(s[439]);
initMTYPE3_I(s[440]);
initMTYPE3_IFLAG(s[441]);
initMENDW_I(s[442]);
initMENDW_IFLAG(s[443]);
initMENDW2_I(s[444]);
initMENDW2_IFLAG(s[445]);
initMENDW3_I(s[446]);
initMENDW3_IFLAG(s[447]);
initMENDNUM_I(s[448]);
initMENDNUM_IFLAG(s[449]);
initMENDNUM2_I(s[450]);
initMENDNUM2_IFLAG(s[451]);
initMENDNUM3_I(s[452]);
initMENDNUM3_IFLAG(s[453]);
initMENDV15_I(s[454]);
initMENDV15_IFLAG(s[455]);
initMENDV_I(s[456]);
initMENDV_IFLAG(s[457]);
initMENDV2_I(s[458]);
initMENDV2_IFLAG(s[459]);
initMENDV3_I(s[460]);
initMENDV3_IFLAG(s[461]);
initMENDV4_I(s[462]);
initMENDV4_IFLAG(s[463]);
initMENDV5_I(s[464]);
initMENDV5_IFLAG(s[465]);
initMENDV6_I(s[466]);
initMENDV6_IFLAG(s[467]);
initMENDV7_I(s[468]);
initMENDV7_IFLAG(s[469]);
initMENDV8_I(s[470]);
initMENDV8_IFLAG(s[471]);
initMENDV9_I(s[472]);
initMENDV9_IFLAG(s[473]);
initMENDV10_I(s[474]);
initMENDV10_IFLAG(s[475]);
initMENDV11_I(s[476]);
initMENDV11_IFLAG(s[477]);
initMENDV12_I(s[478]);
initMENDV12_IFLAG(s[479]);
initMENDV13_I(s[480]);
initMENDV13_IFLAG(s[481]);
initMENDV14_I(s[482]);
initMENDV14_IFLAG(s[483]);
initGCOLLEC_I(s[484]);
initGCOLLV_I(s[485]);
initGCONTVB_I(s[486]);
initGCOLLEC_IFLAG(s[487]);
initGCOLLV_IFLAG(s[488]);
initGCONTVB_IFLAG(s[489]);
initVCARN_I(s[490]);
initVCARN_IFLAG(s[491]);
initVTYPE_I(s[492]);
initVTYPE_IFLAG(s[493]);
initVTYPE2_I(s[494]);
initVTYPE2_IFLAG(s[495]);
initVESTV_I(s[496]);
initVESTV_IFLAG(s[497]);
initVESTV2_I(s[498]);
initVESTV2_IFLAG(s[499]);
initVPERS_I(s[500]);
initVPERS_IFLAG(s[501]);
initVPERV_I(s[502]);
initVPERV_IFLAG(s[503]);
initVOTYP1_I(s[504]);
initVOTYP2_I(s[505]);
initVOTYP3_I(s[506]);
initVOTYP4_I(s[507]);
initVOTYP5_I(s[508]);
initVOTYP1_IFLAG(s[509]);
initVOTYP2_IFLAG(s[510]);
initVOTYP3_IFLAG(s[511]);
initVOTYP4_IFLAG(s[512]);
initVOTYP5_IFLAG(s[513]);
initVOVAL_I(s[514]);
initVOVAL_IFLAG(s[515]);
initHRPDVAGE9(s[516]);
initHRPSEX(s[517]);
initHRPNSSEC3(s[518]);
initHRPDVILO3A(s[519]);
initHRPDVMRDF(s[520]);
initHRPEDATTN1(s[521]);
initHRPEDATTN2(s[522]);
initHRPEDATTN3(s[523]);
initHRPEMPSTAT2(s[524]);
initPHYSHOUSGDST_AGGR(s[525]);
initPHYSBUYLGDST_AGGR(s[526]);
initPHYSHOUSGDSOST_AGGR(s[527]);
initGCONTVLS(s[528]);
initDVGCOLLV(s[529]);
initDVTOTCARVAL(s[530]);
initDVTOTVANVAL(s[531]);
initDVTOTMOTBVAL(s[532]);
initDVTOTOTHVEHVAL(s[533]);
initDVTOTPERNPVAL(s[534]);
initDVTOTVEHVAL(s[535]);
initHPHYSW(s[536]);
initDVVALDBT_AGGR(s[537]);
initDVVALDCOS_AGGR(s[538]);
initDVDBRWEALTHVAL_AGGR(s[539]);
initDVPFCURVAL_AGGR(s[540]);
initDVPAVCUV_AGGR(s[541]);
initDVPFDDV_AGGR(s[542]);
initDVPINPVAL_AGGR(s[543]);
initDVPPVAL_AGGR(s[544]);
initDVSPEN_AGGR(s[545]);
initTOTPEN_AGGR(s[546]);
initDVHSEVAL_SUM(s[547]);
initDVBLTVAL_SUM(s[548]);
initDVBLDVAL_SUM(s[549]);
initDVLUKVAL_SUM(s[550]);
initDVLOSVAL_SUM(s[551]);
initDVOPRVAL_SUM(s[552]);
initDVHSEDEBT_SUM(s[553]);
initDVBLTDEBT_SUM(s[554]);
initDVBLDDEBT_SUM(s[555]);
initDVLUKDEBT_SUM(s[556]);
initDVLOSDEBT_SUM(s[557]);
initDVOPRDEBT_SUM(s[558]);
initOTHMORT_SUM(s[559]);
initDVHVALUE(s[560]);
initTOTMVAL(s[561]);
initTOTMNEG(s[562]);
initTOTMORT(s[563]);
initDVEQRELVAL(s[564]);
initDVEQLTM(s[565]);
initDVHORP(s[566]);
initDVEQSRB(s[567]);
initDVEQPRUN(s[568]);
initDVPROPERTY(s[569]);
initHMORTG(s[570]);
initHPROPW(s[571]);
initALLENDW(s[572]);
initDVNIOTHI_AGGR(s[573]);
initDVCISAV_AGGR(s[574]);
initDVIISAV_AGGR(s[575]);
initDVKISAV_AGGR(s[576]);
initDVFNSVAL_AGGR(s[577]);
initDVFSHUKV_AGGR(s[578]);
initDVINSV_AGGR(s[579]);
initDVFLFENV_AGGR(s[580]);
initDVFLFSIV_AGGR(s[581]);
initDVFLFFSV_AGGR(s[582]);
initDVFLFTEV_AGGR(s[583]);
initDVFBONDV_AGGR(s[584]);
initDVFESHARES_AGGR(s[585]);
initDVFESHAV_AGGR(s[586]);
initDVFEOPTV_AGGR(s[587]);
initDVFCOLLV_AGGR(s[588]);
initDVFSHOSV_AGGR(s[589]);
initDVFGLTUKV_AGGR(s[590]);
initDVFGLTFOV_AGGR(s[591]);
initDVFINVOTV_AGGR(s[592]);
initDVFINFVAL_AGGR(s[593]);
initDVFINFLV_AGGR(s[594]);
initDVFINFV_AGGR(s[595]);
initDVISAVAL_AGGR(s[596]);
initDVFFASSETS_AGGR(s[597]);
initDVCACTV_AGGR(s[598]);
initDVCASVV_AGGR(s[599]);
initDVCAVAL_AGGR(s[600]);
initDVCACRVAL_AGGR(s[601]);
initDVCAODVAL_AGGR(s[602]);
initDVSAVAL_AGGR(s[603]);
initTOTCC_AGGR(s[604]);
initTOTSC_AGGR(s[605]);
initTOTLOS_AGGR(s[606]);
initTOTMO_AGGR(s[607]);
initTOTNLOS_AGGR(s[608]);
initTOTNSLBNK_AGGR(s[609]);
initTOTNSLC_AGGR(s[610]);
initTOTOSLBNK_AGGR(s[611]);
initTOTOSLC_AGGR(s[612]);
initTOTFLNS_AGGR(s[613]);
initTOTHP_AGGR(s[614]);
initTOTLNS_AGGR(s[615]);
initTOTSLBNK_AGGR(s[616]);
initTOTSLC_AGGR(s[617]);
initTOTBILLARR_AGGR(s[618]);
initTOTHPARR_AGGR(s[619]);
initTOTMOARR_AGGR(s[620]);
initTOTLNARR_AGGR(s[621]);
initTOTDVNWFLN_AGGR(s[622]);
initTOTDVNWHP_AGGR(s[623]);
initTOTDVNWILN_AGGR(s[624]);
initTOTARR_EXCMORT_AGGR(s[625]);
initHFINW_EXCENDW_AGGR(s[626]);
initHFINL_AGGR(s[627]);
initHFINW_SUM(s[628]);
initHFINWNT_SUM(s[629]);
initHOUSGDST_SUM(s[630]);
initBUYLGDST_SUM(s[631]);
initHOUSGDSOST_SUM(s[632]);
initALLGD(s[633]);
initTOTWLTH(s[634]);
initEREC_I(s[635]);
initEREC_IFLAG(s[636]);
initERECMPD_I(s[637]);
initERECMPD_IFLAG(s[638]);
initERECMBM_I(s[639]);
initERECMBM_IFLAG(s[640]);
initERECMBY_I(s[641]);
initERECMBY_IFLAG(s[642]);
initERECM_I(s[643]);
initERECM_IFLAG(s[644]);
initERECTAX_I(s[645]);
initERECTAX_IFLAG(s[646]);
initERVREG1_I(s[647]);
initERVREG1_IFLAG(s[648]);
initERVRECPD_I(s[649]);
initERVRECPD_IFLAG(s[650]);
initERVREC_I(s[651]);
initERVREC_IFLAG(s[652]);
initERVRECBM_I(s[653]);
initERVRECBM_IFLAG(s[654]);
initERVRECBY_I(s[655]);
initERVRECBY_IFLAG(s[656]);
initERVTAX_I(s[657]);
initERVTAX_IFLAG(s[658]);
initEPRVPAY_I(s[659]);
initEPRVPAY_IFLAG(s[660]);
initEPRVAL_I(s[661]);
initEPRVAL_IFLAG(s[662]);
initEPRPER_I(s[663]);
initEPRPER_IFLAG(s[664]);
initVESVB3(s[665]);
initHRPDVAGE15(s[666]);
initHBEDRM(s[667]);
initCASEW3(s[668]);
initCASEW2(s[669]);
initCASEW1(s[670]);
initDVTOTNIR(s[671]);
initDVTOTGIR(s[672]);
initDVGISE_AGGR(s[673]);
initDVGIPPEN_AGGR(s[674]);
initDVGIEMP_AGGR(s[675]);
initDVTOTALLBENANNUAL_AGGR(s[676]);
initDVGIINV_AGGR(s[677]);
initDVGRSRENTAMTANNUAL_AGGR(s[678]);
initDVNISE_AGGR(s[679]);
initDVNIPPEN_AGGR(s[680]);
initDVNIEMP_AGGR(s[681]);
initDVNIINV_AGGR(s[682]);
initDVNETRENTAMTANNUAL_AGGR(s[683]);
initDVOINRRANNUAL_AGGR(s[684]);
initDVOINGTANNUAL_AGGR(s[685]);
initDVOINEGANNUAL_AGGR(s[686]);
initDVOINFRANNUAL_AGGR(s[687]);
initDVOINMAANNUAL_AGGR(s[688]);
initDVOINROANNUAL_AGGR(s[689]);
initDVOINOPANNUAL_AGGR(s[690]);
initDVOIGRRANNUAL_AGGR(s[691]);
initDVOIGGTANNUAL_AGGR(s[692]);
initDVOIGEGANNUAL_AGGR(s[693]);
initDVOIGFRANNUAL_AGGR(s[694]);
initDVOIGMAANNUAL_AGGR(s[695]);
initDVOIGROANNUAL_AGGR(s[696]);
initDVOIGOPANNUAL_AGGR(s[697]);
initDVGIOTHR_AGGR(s[698]);
initDVNIOTHR_AGGR(s[699]);
initDVERECNETANNUAL(s[700]);
initDVERVRECNETANNUAL(s[701]);
initDVERECGROSSANNUAL(s[702]);
initDVERVRECGROSSANNUAL(s[703]);
initDVERECANNUAL(s[704]);
initDVERVRECANNUAL(s[705]);
initHRPDVAGEW3BAND(s[706]);
initGOR(s[707]);
initYEAR(s[708]);
initMONTH(s[709]);
}
}
