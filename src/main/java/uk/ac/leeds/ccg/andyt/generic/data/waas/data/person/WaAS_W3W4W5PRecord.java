/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.waas.process.WaAS_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.andyt.generic.data.waas.data.person;
public class WaAS_W3W4W5PRecord extends WaAS_W1W2W3W4W5PRecord {
protected double ACCFRAC1;
protected double ACCFRAC2;
protected byte ALLRET;
protected byte ALLRET_I;
protected byte ANXIOUS;
protected double ASAF1T;
protected double ASAF2T;
protected String BACCBEG1;
protected byte BACCSA1;
protected byte BACCSB1;
protected int BBEFORE1;
protected byte BCARRY1;
protected boolean BCARRY3;
protected int BDEBTS1;
protected byte BDIRNI1;
protected byte BDIRNI1_I;
protected boolean BDIRNI1_IFLAG;
protected byte BDOCS1;
protected byte BEMPN1;
protected byte BNATINS1;
protected byte BONTAX_I;
protected boolean BONTAX_IFLAG;
protected double BOTDVDBOPEN1T;
protected double BOTDVDBOPEN2T;
protected int BOWED1;
protected byte BOWN1;
protected byte BPART1;
protected byte BPAYNUM;
protected byte BPRFLOSS1;
protected byte BPRFLOSS2;
protected byte BPRFLOSS3;
protected int BPROFIT1;
protected byte BPROPN1;
protected byte BRETIRE1;
protected byte BSEPPD01;
protected byte BSEPPD02;
protected byte BSEPPD03;
protected byte BSEPPD04;
protected byte BSEPPD05;
protected byte BSEPPD06;
protected byte BSEPPD07;
protected boolean BSEPPD08;
protected byte BSIZE1;
protected byte BSTART1;
protected byte BTAX1;
protected byte BTOGPD;
protected byte BTOGSEP;
protected byte BTYPE1;
protected byte BTYPE1_I;
protected boolean BTYPE1_IFLAG;
protected int BUYLGDST;
protected int BVAL1;
protected byte BVALB1;
protected byte BVALB3;
protected short BYEAR1;
protected byte CACONTR1;
protected byte CACONTR2;
protected byte CACONTR3;
protected byte CACONTR4;
protected boolean CACONTR5;
protected boolean CACONTR6;
protected short CACONTRAM1;
protected int CACONTRAM2;
protected int CACONTRAM3;
protected int CACONTRAM4;
protected short CACONTRAM5;
protected short CACONTRAM6;
protected byte CACONTRAMB1;
protected byte CACONTRAMB2;
protected byte CACONTRAMB3;
protected byte CACONTRAMB4;
protected byte CACONTRAMB5;
protected byte CACONTRAMB6;
protected byte CACRNUM;
protected byte CACTVB;
protected byte CAJISA_I;
protected boolean CAJISA_IFLAG;
protected byte CAODNUM;
protected byte CAOPEN;
protected short CASEW2;
protected short CASEW3;
protected byte CCAC1_I;
protected boolean CCAC1_IFLAG;
protected byte CCAC2_I;
protected boolean CCAC2_IFLAG;
protected byte CCAC3_I;
protected boolean CCAC3_IFLAG;
protected byte CHOICP;
protected byte COMMI;
protected byte COUPLENUM;
protected byte CURSTAT;
protected boolean CUTDOWN;
protected byte DADVACT1;
protected byte DADVACT2;
protected byte DADVACT3;
protected byte DADVMTH;
protected byte DBURDW1;
protected byte DBURDW2;
protected byte DC12BEH1;
protected byte DC12BEH2;
protected byte DC12BEH3;
protected short DC12OWE1;
protected short DC12OWE2;
protected short DC12OWE3;
protected int DCAMC1;
protected short DCAMD1;
protected int DCAMOS1_I;
protected boolean DCAMOS1_IFLAG;
protected int DCAMOS2_I;
protected boolean DCAMOS2_IFLAG;
protected short DCAMOS3_I;
protected boolean DCAMOS3_IFLAG;
protected short DCAMP1;
protected byte DCCOS1;
protected byte DCCSP1;
protected byte DCESB1;
protected byte DCINZ1;
protected byte DCNAM1;
protected byte DCNUM1;
protected byte DCNUM2;
protected int DCOINV1;
protected int DCOINV1_I;
protected boolean DCOINV1_IFLAG;
protected short DCOINV3_I;
protected byte DCOINV3_IFLAG;
protected short DCOINV4;
protected short DCOINV4_I;
protected boolean DCOINV4_IFLAG;
protected short DCOINV5;
protected short DCOINV5_I;
protected boolean DCOINV5_IFLAG;
protected byte DCOINVB1;
protected boolean DCOINVB4;
protected boolean DCOINVB5;
protected int DCOSHV1;
protected int DCOSHV1_I;
protected boolean DCOSHV1_IFLAG;
protected short DCOSHV3_I;
protected boolean DCOSHV3_IFLAG;
protected boolean DCOSHV4;
protected boolean DCOSHV5;
protected byte DCOSHVB1;
protected boolean DCOSHVB3;
protected boolean DCOSHVB4;
protected boolean DCOSHVB5;
protected byte DCPER1;
protected byte DCREC1;
protected byte DCRSP1;
protected boolean DHBANY08;
protected boolean DHBANY09;
protected boolean DHBANY10;
protected boolean DHBANY11;
protected byte DHPBEH1;
protected byte DHPBEH1_I;
protected boolean DHPBEH1_IFLAG;
protected byte DHPEST1;
protected short DHPINS1;
protected short DHPINS1_I;
protected boolean DHPINS1_IFLAG;
protected byte DHPINT1;
protected byte DHPOFT1;
protected byte DHPOFT1_I;
protected boolean DHPOFT1_IFLAG;
protected short DHPOWE1;
protected short DHPOWE1_I;
protected boolean DHPOWE1_IFLAG;
protected byte DHPWEST1;
protected byte DHPWHNM1;
protected byte DHPWHNM1_I;
protected boolean DHPWHNM1_IFLAG;
protected short DHPWHNY1;
protected short DHPWHNY1_I;
protected boolean DHPWHNY1_IFLAG;
protected byte DLBEH1;
protected byte DLBEH1_I;
protected boolean DLBEH1_IFLAG;
protected byte DLEST1;
protected byte DLEST5;
protected short DLINS1;
protected short DLINS1_I;
protected boolean DLINS1_IFLAG;
protected byte DLINT1;
protected byte DLNNM;
protected byte DLOFT1;
protected byte DLOFT1_I;
protected boolean DLOFT1_IFLAG;
protected byte DLOLD1;
protected byte DLOLD2;
protected byte DLOLD3;
protected byte DLOLD4;
protected byte DLOLD5;
protected byte DLONM;
protected short DLOWE1;
protected short DLOWE1_I;
protected boolean DLOWE1_IFLAG;
protected byte DLSEC1;
protected byte DLTYPE1;
protected byte DLTYPE1_I;
protected boolean DLTYPE1_IFLAG;
protected byte DLWEST1;
protected byte DLWHNM1;
protected byte DLWHNM1_I;
protected boolean DLWHNM1_IFLAG;
protected short DLWHNY1;
protected short DLWHNY1_I;
protected boolean DLWHNY1_IFLAG;
protected boolean DLWHY30;
protected boolean DLWHY6;
protected boolean DLWHY7;
protected byte DMOBEH1;
protected byte DMOBEH1_I;
protected boolean DMOBEH1_IFLAG;
protected byte DMOEST1;
protected short DMOINS1;
protected short DMOINS1_I;
protected boolean DMOINS1_IFLAG;
protected byte DMOINT1;
protected byte DMOOFT1;
protected byte DMOOFT1_I;
protected boolean DMOOFT1_IFLAG;
protected short DMOOWE1;
protected short DMOOWE1_I;
protected boolean DMOOWE1_IFLAG;
protected byte DMOWEST1;
protected byte DMOWHNM1;
protected byte DMOWHNM1_I;
protected boolean DMOWHNM1_IFLAG;
protected short DMOWHNY1;
protected short DMOWHNY1_I;
protected boolean DMOWHNY1_IFLAG;
protected byte DS12BEH1;
protected byte DS12BEH2;
protected byte DS12BEH3;
protected short DS12OWE1;
protected short DS12OWE2;
protected byte DS12OWE3;
protected short DSAMC1;
protected short DSAMD1;
protected short DSAMOS1_I;
protected boolean DSAMOS1_IFLAG;
protected short DSAMOS2_I;
protected boolean DSAMOS2_IFLAG;
protected short DSAMOS3_I;
protected boolean DSAMOS3_IFLAG;
protected short DSAMP1;
protected byte DSCOS1;
protected byte DSCSP1;
protected byte DSESB1;
protected int DSLAMT1;
protected int DSLAMT1_I;
protected boolean DSLAMT1_IFLAG;
protected byte DSLEST1;
protected byte DSLPAY1;
protected byte DSNAM1;
protected byte DSNUM2;
protected byte DSPER1;
protected boolean DSPER3;
protected byte DSREC1;
protected int DVACCINANNUAL;
protected byte DVAGE4;
protected byte DVAGE5;
protected byte DVAGE6;
protected byte DVAGE7;
protected byte DVAGE9;
protected int DVBLDDEBT;
protected int DVBLDVAL;
protected int DVBLTDEBT;
protected int DVBLTVAL;
protected double DVBTOGANNUAL;
protected double DVCACRVAL_SUM;
protected double DVCAODVAL_SUM;
protected double DVCAVAL_SUM;
protected byte DVCCARDNUM_I;
protected boolean DVCCARDNUM_IFLAG;
protected byte DVCCARDYN_I;
protected boolean DVCCARDYN_IFLAG;
protected short DVCOINV4;
protected short DVCOINV5;
protected int DVDBINC4;
protected short DVDBINC5;
protected short DVDBINC6;
protected double DVDBLUMP4;
protected double DVDBLUMP5;
protected int DVDBLUMP6;
protected double DVDBOPEN1T;
protected double DVDBOPEN2T;
protected short DVDHPOWE1;
protected short DVDLOWE1;
protected short DVDMOOWE1;
protected byte DVEMPNO;
protected int DVFESHARES_SUM;
protected double DVFFASSETS_SUM;
protected int DVFINFVAL_SUM;
protected int DVGIEMP;
protected int DVGIFTANNUAL;
protected int DVGIINV;
protected int DVGIPPEN;
protected int DVGISE;
protected int DVGRSBONAMT;
protected double DVGRSBONAMT_I;
protected byte DVGRSBONAMT_IFLAG;
protected int DVGRSEMPSECJOB;
protected int DVGRSEMPSECJOB_I;
protected boolean DVGRSEMPSECJOB_IFLAG;
protected int DVGRSRENTAMTANNUAL;
protected int DVGRSSESECJOB;
protected int DVGRSSESECJOB_I;
protected boolean DVGRSSESECJOB_IFLAG;
protected boolean DVHASHP;
protected boolean DVHASLF;
protected boolean DVHASLNAR;
protected boolean DVHASMOAR;
protected boolean DVHASNLF;
protected boolean DVHASNLI;
protected boolean DVHASPFGRP;
protected boolean DVHASPFOCC;
protected boolean DVHASPFPRIV;
protected boolean DVHASPFRAC;
protected boolean DVHASPFSIPP;
protected boolean DVHASPLINF;
protected boolean DVHASSLBNK;
protected boolean DVHASSLC;
protected byte DVHRPNUM;
protected int DVHSEDEBT;
protected int DVHSEVAL;
protected byte DVHSIZE;
protected byte DVILO3A_I;
protected boolean DVILO3A_IFLAG;
protected int DVINHERITANNUAL;
protected int DVINSV_SUM;
protected int DVIRREGOTHANNUAL;
protected int DVISAVAL_SUM;
protected int DVLIFEANNUAL;
protected int DVLOSDEBT;
protected int DVLOSVAL;
protected int DVLUKDEBT;
protected int DVLUKVAL;
protected int DVLUMPPENANNUAL;
protected int DVNETBONAMT;
protected double DVNETBONAMT_I;
protected byte DVNETBONAMT_IFLAG;
protected int DVNETEMPSECJOB;
protected int DVNETEMPSECJOB_I;
protected boolean DVNETEMPSECJOB_IFLAG;
protected int DVNETRENTAMTANNUAL;
protected double DVNETSESECJOB;
protected double DVNIEMP;
protected int DVNIINV;
protected int DVNIOTHI;
protected int DVNIPPEN;
protected double DVNISE;
protected byte DVNUMBU;
protected int DVNWFLN_SUM;
protected int DVNWILN_SUM;
protected int DVOIGEGANNUAL_I;
protected int DVOIGFRANNUAL_I;
protected short DVOIGGTANNUAL_I;
protected int DVOIGMAANNUAL_I;
protected boolean DVOIGOEANNUAL_IFLAG;
protected int DVOIGOPANNUAL_I;
protected boolean DVOIGOSANNUAL_IFLAG;
protected boolean DVOIGPPANNUAL_IFLAG;
protected int DVOIGROANNUAL_I;
protected int DVOIGRRANNUAL_I;
protected int DVOINEGANNUAL_I;
protected boolean DVOINEGANNUAL_IFLAG;
protected int DVOINFRANNUAL_I;
protected boolean DVOINFRANNUAL_IFLAG;
protected short DVOINGTANNUAL_I;
protected boolean DVOINGTANNUAL_IFLAG;
protected int DVOINMAANNUAL_I;
protected boolean DVOINMAANNUAL_IFLAG;
protected int DVOINOPANNUAL_I;
protected boolean DVOINOPANNUAL_IFLAG;
protected int DVOINROANNUAL_I;
protected boolean DVOINROANNUAL_IFLAG;
protected int DVOINRRANNUAL_I;
protected boolean DVOINRRANNUAL_IFLAG;
protected int DVOPRDEBT;
protected int DVOPRVAL;
protected int DVOTHINSANNUAL;
protected double DVPENINC1;
protected double DVPENINC2;
protected int DVREDUNANNUAL;
protected int DVRENTAMTANNUAL_I;
protected boolean DVRENTAMTANNUAL_IFLAG;
protected byte DVSAME;
protected double DVSAVAL_SUM;
protected byte DVSCARDNUM_I;
protected boolean DVSCARDNUM_IFLAG;
protected byte DVSCARDYN_I;
protected boolean DVSCARDYN_IFLAG;
protected int DVSEGRSPAY;
protected int DVSEGRSPAY_I;
protected boolean DVSEGRSPAY_IFLAG;
protected int DVSENETPAY;
protected int DVSENETPAY_I;
protected boolean DVSENETPAY_IFLAG;
protected byte DVSENO;
protected double DVSEPANNUAL01;
protected double DVSEPANNUAL02;
protected double DVSEPANNUAL03;
protected short DVSEPANNUAL04;
protected short DVSEPANNUAL05;
protected short DVSEPANNUAL06;
protected short DVSEPANNUAL07;
protected short DVSEPANNUAL08;
protected double DVSPS;
protected double DVWID;
protected int DVWINANNUAL;
protected byte DWELLTYP;
protected boolean EMPNO;
protected byte ES2000;
protected byte EVERWK_I;
protected boolean EVERWK_IFLAG;
protected byte EYE1;
protected byte EYE2;
protected byte EYE3;
protected byte EYE4;
protected byte EYE5;
protected byte EYE6;
protected byte EYE7;
protected byte EYE8;
protected byte FBFAED;
protected byte FBMOED;
protected byte FBSIBS;
protected byte FBSITU;
protected byte FBTEN;
protected byte FCISAWD;
protected byte FCISCE;
protected byte FCIWDAB;
protected byte FCIWNUM;
protected boolean FINCV_IFLAG;
protected byte FINVTY11_I;
protected byte FNDCASH1;
protected byte FNDCASH2;
protected byte FNDCASH3;
protected byte FNDCASH4;
protected byte FNDCASH5;
protected boolean FRSTSCH;
protected byte FSAVAB;
protected byte FSAVED;
protected boolean FSTYPIN4;
protected byte FTHECST;
protected byte FTSTUD;
protected byte FWITHD;
protected byte GROSSPER;
protected byte GRSAMK;
protected byte GRSEESM;
protected byte GRSEESW;
protected int GRSPAYEMPORSE;
protected byte GSTDNW;
protected byte HAPPY;
protected byte HASSHAC;
protected double HFINL_SUM;
protected double HFINW_EXCENDW_SUM;
protected byte HHLDR;
protected byte HIHNUM;
protected int HOUSGDSOST;
protected short HOUT;
protected short HPARR_SUM;
protected double HPLFT1;
protected byte HPNMN1;
protected byte HPNMN2;
protected byte HPNYR1;
protected byte HPNYR2;
protected boolean HPROX;
protected byte HRPPART;
protected byte IFBANKACC;
protected boolean IGIFVAL_IFLAG;
protected byte IHRCNUM_I;
protected boolean IHRCNUM_IFLAG;
protected byte IHRECNT_I;
protected boolean IHRECNT_IFLAG;
protected boolean IHSE10;
protected boolean IHSE11;
protected boolean IHSE12;
protected boolean IHSE3;
protected boolean IHSE8;
protected boolean IHSE9;
protected boolean ILACC_IFLAG;
protected byte ILGIFT_I;
protected boolean ILGIFT_IFLAG;
protected byte ILIFB_I;
protected boolean ILIFB_IFLAG;
protected boolean ILIFE_IFLAG;
protected boolean ILINS_IFLAG;
protected short ILNPBAM;
protected byte ILNPBK;
protected byte ILNUSE01;
protected byte ILNUSE02;
protected byte ILNUSE03;
protected byte ILNUSE04;
protected byte ILNUSE05;
protected int ILNVAL;
protected byte ILNVALB;
protected byte ILOAN;
protected boolean ILOTH_IFLAG;
protected boolean ILRED_IFLAG;
protected byte ILUMP_I;
protected boolean ILUMP_IFLAG;
protected byte ILUMTY1_I;
protected boolean ILUMTY1_IFLAG;
protected int ILUPP_I;
protected boolean ILUPP_IFLAG;
protected boolean ILWIN_IFLAG;
protected byte INCDROP;
protected byte INDFREQ;
protected boolean IVAL1_IFLAG;
protected boolean IVAL2_IFLAG;
protected boolean IVAL3_IFLAG;
protected byte IVALB1;
protected boolean IWAT6;
protected byte JBAWAY_I;
protected boolean JBAWAY_IFLAG;
protected byte KNOHOWMUCH;
protected byte KNOWBALANCE;
protected short LNARR_SUM;
protected double LNLFT1;
protected byte LOOKED_I;
protected boolean LOOKED_IFLAG;
protected byte MARBEF_I;
protected boolean MARBEF_IFLAG;
protected byte MARST;
protected double MNTHSCAPE;
protected short MOARR_SUM;
protected double MOLFT1;
protected byte MRECJB;
protected byte MTHECST;
protected byte NEWFCMX;
protected byte NEWGIFT;
protected byte NOUNITS;
protected int NSLBNK1;
protected short NSLBNK2;
protected boolean NSLBNK3;
protected int NSLC1;
protected int NSLC2;
protected short NSLC3;
protected byte NUMADULT;
protected byte NUMCH18;
protected byte NUMCHILD;
protected byte NUMCHSAV;
protected byte NUMCIVPTR;
protected byte NUMCOUPLES;
protected byte NUMCPART;
protected byte NUMDEPCH;
protected byte NUMJOB;
protected boolean NUMSSEX;
protected int NWFLNVAL1;
protected int NWFLNVAL2;
protected short NWFLNVAL3;
protected int NWILNVAL1;
protected short NWILNVAL2;
protected short NWILNVAL3;
protected byte NWLN;
protected byte NWLNNO;
protected byte NWLNNO_I;
protected byte NWLNNO_IFLAG;
protected byte NWLN_I;
protected byte NWLN_IFLAG;
protected byte OEXPINC01;
protected byte OEXPINC02;
protected byte OEXPINC03;
protected byte OEXPINC04;
protected byte OEXPINC05;
protected byte OEXPINC06;
protected byte OEXPINC07;
protected byte OEXPINC08;
protected byte OEXPINC09;
protected byte OEXPINC10;
protected byte OEXPINC11;
protected byte OEXPINC12;
protected byte OEXPINC13;
protected boolean OEXPINC14;
protected boolean OEXPINC15;
protected byte OFTCHECKED;
protected byte OIMPRS1;
protected byte OIMPRS2;
protected byte OIMPRS3;
protected byte OIMPRS4;
protected byte OIMPRS5;
protected byte OIMPRS6;
protected byte ONOSAVE1;
protected byte ONOSAVE2;
protected byte ONOSAVE3;
protected byte ONOSAVE4;
protected byte ONOSAVE5;
protected boolean ONOSAVE6;
protected byte OPENS09;
protected boolean OPENS10;
protected boolean OPENS11;
protected boolean OPENS12;
protected boolean OPENS13;
protected boolean OPENS14;
protected boolean OPENS15;
protected byte ORGNSED;
protected byte ORISKS;
protected byte OSAFESAV;
protected byte OSAV2Y;
protected byte OSAVEXT;
protected byte OSITCH;
protected int OSLBNK1;
protected short OSLBNK2;
protected short OSLBNK3;
protected int OSLC1;
protected int OSLC2;
protected short OSLC3;
protected byte OTHASCH;
protected byte OTHASVB;
protected int OTHASVL;
protected int OTHMORT;
protected boolean OTHSRC4_I;
protected boolean OTHSRC4_IFLAG;
protected boolean OTRUST15;
protected byte OWAIT;
protected byte OWNBUS_I;
protected boolean OWNBUS_IFLAG;
protected byte OWRSRS01;
protected byte OWRSRS02;
protected byte OWRSRS03;
protected byte OWRSRS04;
protected byte OWRSRS05;
protected byte OWRSRS06;
protected byte OWRSRS07;
protected byte PAGESTP;
protected byte PANYO;
protected byte PANYO_I;
protected boolean PANYO_IFLAG;
protected int PARTGRSPAY;
protected double PARTNSSEC;
protected byte PARTNSSEC3;
protected byte PARTNSSEC5;
protected double PARTNSSEC8;
protected double PARTNSSECB;
protected byte PASTMN1;
protected boolean PASTMN2;
protected short PASTYR1;
protected short PASTYR2;
protected int PAVCUV1;
protected int PAVCUV1_I;
protected boolean PAVCUV1_IFLAG;
protected int PAVCUV2;
protected int PAVCUV2_I;
protected boolean PAVCUV2_IFLAG;
protected byte PAVCVB1;
protected byte PAVCVB2;
protected byte PAVDOC1;
protected byte PAVDOC2;
protected byte PAYBON_I;
protected boolean PAYBON_IFLAG;
protected boolean PAYINC7;
protected byte PBDOCS1;
protected byte PBDOCS2;
protected byte PBFRAC1;
protected byte PBFRAC1_I;
protected boolean PBFRAC1_IFLAG;
protected byte PBFRAC2;
protected byte PBFRAC2_I;
protected boolean PBFRAC2_IFLAG;
protected int PBINCA1;
protected int PBINCA2;
protected double PBINCF1;
protected double PBINCF2;
protected byte PBINCH1;
protected byte PBINCH2;
protected byte PBLMVB1;
protected byte PBLMVB2;
protected int PBLUMV1;
protected int PBLUMV1_I;
protected boolean PBLUMV1_IFLAG;
protected int PBLUMV2;
protected int PBLUMV2_I;
protected boolean PBLUMV2_IFLAG;
protected byte PBQUAL1;
protected byte PBQUAL1_I;
protected boolean PBQUAL1_IFLAG;
protected byte PBQUAL2;
protected byte PBQUAL2_I;
protected boolean PBQUAL2_IFLAG;
protected byte PBSTMN1;
protected byte PBSTMN2;
protected short PBSTYR1;
protected short PBSTYR2;
protected byte PCDOCS1;
protected byte PCDOCS2;
protected byte PCONT;
protected byte PCONT_I;
protected boolean PCONT_IFLAG;
protected byte PCSTMN1;
protected byte PCSTMN2;
protected short PCSTYR1;
protected short PCSTYR2;
protected byte PDBCAL1;
protected byte PDBCAL2;
protected int PDCVAL1;
protected double PDCVAL1_I;
protected boolean PDCVAL1_IFLAG;
protected int PDCVAL2;
protected int PDCVAL2_I;
protected boolean PDCVAL2_IFLAG;
protected byte PDCVB1;
protected byte PDCVB2;
protected boolean PENFLAG;
protected byte PENIND1;
protected byte PENIND2;
protected byte PENIND3;
protected byte PENIND4;
protected byte PENIND5;
protected byte PENIND6;
protected byte PERMJB;
protected byte PERNOWK;
protected byte PERSONW2;
protected byte PERSONW3;
protected byte PESAME;
protected byte PFANEH1;
protected byte PFANEH2;
protected boolean PFANEH4;
protected byte PFANGA1;
protected byte PFANGA2;
protected boolean PFANGA4;
protected byte PFANIF1;
protected byte PFANIF2;
protected boolean PFANIF4;
protected byte PFANJT1;
protected byte PFANJT2;
protected boolean PFANJT4;
protected byte PFANN1;
protected boolean PFANN16;
protected byte PFANN6;
protected byte PFCASH1;
protected byte PFCASH1_I;
protected boolean PFCASH1_IFLAG;
protected byte PFCASH2;
protected byte PFCASH2_I;
protected boolean PFCASH2_IFLAG;
protected byte PFCASH3;
protected byte PFCASH3_I;
protected boolean PFCASH3_IFLAG;
protected byte PFCASH4;
protected byte PFCASH4_I;
protected boolean PFCASH4_IFLAG;
protected int PFCURV1;
protected int PFCURV1_I;
protected boolean PFCURV1_IFLAG;
protected int PFCURV2;
protected double PFCURV2_I;
protected byte PFCURV2_IFLAG;
protected int PFCURV3;
protected double PFCURV3_I;
protected byte PFCURV3_IFLAG;
protected int PFCURV4;
protected int PFCURV4_I;
protected byte PFCURV4_IFLAG;
protected int PFCURV5;
protected double PFCURV5_I;
protected byte PFCURV5_IFLAG;
protected int PFCURV6;
protected double PFCURV6_I;
protected boolean PFCURV6_IFLAG;
protected byte PFCUVB1;
protected byte PFCUVB2;
protected byte PFCUVB3;
protected byte PFCUVB4;
protected byte PFCUVB5;
protected boolean PFCUVB6;
protected int PFDDV1;
protected int PFDDV1_I;
protected boolean PFDDV1_IFLAG;
protected int PFDDV2;
protected int PFDDV2_I;
protected byte PFDDV2_IFLAG;
protected int PFDDV3;
protected int PFDDV3_I;
protected byte PFDDV3_IFLAG;
protected int PFDDV4_I;
protected byte PFDDV4_IFLAG;
protected byte PFDDVB1;
protected byte PFDDVB2;
protected byte PFDDVB3;
protected byte PFDOCS1;
protected byte PFDOCS2;
protected byte PFDOCS3;
protected byte PFDOCS4;
protected byte PFDOCS5;
protected byte PFDOCS6;
protected byte PFDRAW1;
protected byte PFDRAW1_I;
protected boolean PFDRAW1_IFLAG;
protected byte PFDRAW2;
protected byte PFDRAW2_I;
protected byte PFDRAW2_IFLAG;
protected byte PFDRAW3_I;
protected byte PFDRAW3_IFLAG;
protected short PFDRINC1;
protected byte PFDRVB1;
protected int PFDRVI1;
protected byte PFEN;
protected byte PFENNUM;
protected byte PFENNUM_I;
protected boolean PFENNUM_IFLAG;
protected byte PFEN_I;
protected boolean PFEN_IFLAG;
protected byte PFFAAG1;
protected byte PFFAAG2;
protected byte PFFAN1;
protected byte PFFAN11;
protected byte PFFAN16;
protected byte PFFAN2;
protected byte PFFAN6;
protected byte PFFAWH1;
protected boolean PFFAWH16;
protected byte PFFAWH6;
protected int PFINCA1;
protected int PFINCA1_I;
protected boolean PFINCA1_IFLAG;
protected int PFINCA2;
protected double PFINCA2_I;
protected boolean PFINCA2_IFLAG;
protected double PFINCA3;
protected double PFINCA3_I;
protected boolean PFINCA3_IFLAG;
protected double PFINCA4;
protected short PFINCA4_I;
protected boolean PFINCA4_IFLAG;
protected short PFINCA5;
protected short PFINCA5_I;
protected boolean PFINCA5_IFLAG;
protected short PFINCA6;
protected short PFINCA6_I;
protected byte PFINCP1;
protected byte PFINCP1_I;
protected boolean PFINCP1_IFLAG;
protected byte PFINCP2;
protected byte PFINCP2_I;
protected boolean PFINCP2_IFLAG;
protected byte PFINCP3;
protected byte PFINCP3_I;
protected boolean PFINCP3_IFLAG;
protected byte PFINCP4;
protected byte PFINCP4_I;
protected boolean PFINCP4_IFLAG;
protected byte PFINCP5;
protected byte PFINCP5_I;
protected boolean PFINCP5_IFLAG;
protected byte PFINCP6;
protected byte PFINCP6_I;
protected boolean PFINCP6_IFLAG;
protected byte PFLMUS1;
protected byte PFLMUS2;
protected byte PFLMUS3;
protected byte PFLMUS4;
protected int PFLMV1;
protected int PFLMV1_I;
protected boolean PFLMV1_IFLAG;
protected int PFLMV2;
protected int PFLMV2_I;
protected boolean PFLMV2_IFLAG;
protected int PFLMV3;
protected int PFLMV3_I;
protected boolean PFLMV3_IFLAG;
protected int PFLMV4;
protected int PFLMV4_I;
protected boolean PFLMV4_IFLAG;
protected boolean PFLMV6;
protected byte PFLMVB1;
protected byte PFLMVB2;
protected byte PFLMVB3;
protected byte PFLUM1;
protected byte PFLUM1_I;
protected boolean PFLUM1_IFLAG;
protected byte PFLUM2;
protected byte PFLUM2_I;
protected byte PFLUM2_IFLAG;
protected byte PFLUM3;
protected byte PFLUM3_I;
protected byte PFLUM3_IFLAG;
protected byte PFLUM4;
protected byte PFLUM4_I;
protected byte PFLUM4_IFLAG;
protected byte PFLUM5;
protected boolean PFLUM5_I;
protected byte PFLUM5_IFLAG;
protected byte PFLUM6;
protected boolean PFLUM6_I;
protected byte PFLUM6_IFLAG;
protected byte PFLUMALL1;
protected byte PFLUMALL1_I;
protected boolean PFLUMALL1_IFLAG;
protected byte PFLUMALL2;
protected byte PFLUMALL2_I;
protected byte PFLUMALL2_IFLAG;
protected byte PFLUMALL3;
protected byte PFLUMALL3_I;
protected byte PFLUMALL3_IFLAG;
protected byte PFLUMALL4;
protected byte PFLUMALL4_I;
protected byte PFLUMALL4_IFLAG;
protected int PFLUMV1;
protected int PFLUMV1_I;
protected boolean PFLUMV1_IFLAG;
protected int PFLUMV2;
protected double PFLUMV2_I;
protected boolean PFLUMV2_IFLAG;
protected int PFLUMV3;
protected int PFLUMV3_I;
protected boolean PFLUMV3_IFLAG;
protected int PFLUMV4;
protected int PFLUMV4_I;
protected boolean PFLUMV4_IFLAG;
protected int PFLUMV5;
protected int PFLUMV5_I;
protected byte PFLUMV5_IFLAG;
protected int PFLUMV6;
protected int PFLUMV6_I;
protected boolean PFLUMV6_IFLAG;
protected byte PFLUVB1;
protected byte PFLUVB2;
protected byte PFLUVB3;
protected byte PFLUVB4;
protected byte PFLUVB5;
protected boolean PFLUVB6;
protected byte PFNEW;
protected byte PFNEWNO;
protected byte PFNEWNO_I;
protected boolean PFNEWNO_IFLAG;
protected byte PFNEW_I;
protected boolean PFNEW_IFLAG;
protected byte PFOCTY1;
protected byte PFOCTY1_I;
protected boolean PFOCTY1_IFLAG;
protected byte PFOCTY2;
protected byte PFOCTY2_I;
protected boolean PFOCTY2_IFLAG;
protected byte PFOCTY3;
protected byte PFOCTY3_I;
protected boolean PFOCTY3_IFLAG;
protected byte PFOCTY4;
protected byte PFOCTY4_I;
protected boolean PFOCTY4_IFLAG;
protected byte PFOCTY5;
protected byte PFOCTY5_I;
protected byte PFOCTY5_IFLAG;
protected byte PFOCTY6;
protected byte PFOCTY6_I;
protected byte PFOCTY6_IFLAG;
protected byte PFREC1;
protected byte PFREC1_I;
protected boolean PFREC1_IFLAG;
protected byte PFREC2;
protected byte PFREC2_I;
protected boolean PFREC2_IFLAG;
protected byte PFREC3;
protected byte PFREC3_I;
protected boolean PFREC3_IFLAG;
protected byte PFREC4;
protected byte PFREC4_I;
protected boolean PFREC4_IFLAG;
protected byte PFREC5;
protected byte PFREC5_I;
protected boolean PFREC5_IFLAG;
protected byte PFREC6;
protected byte PFREC6_I;
protected boolean PFREC6_IFLAG;
protected byte PFREM1;
protected byte PFREM1_I;
protected boolean PFREM1_IFLAG;
protected byte PFREM2;
protected byte PFREM2_I;
protected byte PFREM2_IFLAG;
protected byte PFREM3;
protected byte PFREM3_I;
protected byte PFREM3_IFLAG;
protected byte PFREM4;
protected byte PFREM4_I;
protected byte PFREM4_IFLAG;
protected byte PFSTAT1;
protected byte PFSTAT2;
protected byte PFSTAT3;
protected byte PFSTAT4;
protected byte PFSTAT5;
protected byte PFSTAT6;
protected byte PFSTMM1;
protected byte PFSTMM2;
protected byte PFSTMM3;
protected byte PFSTMM4;
protected byte PFSTMM5;
protected byte PFSTMM6;
protected short PFSTMY1;
protected short PFSTMY2;
protected short PFSTMY3;
protected short PFSTMY4;
protected short PFSTMY5;
protected short PFSTMY6;
protected byte PFTYP1;
protected byte PFTYP1_I;
protected boolean PFTYP1_IFLAG;
protected byte PFTYP2;
protected byte PFTYP2_I;
protected boolean PFTYP2_IFLAG;
protected byte PFTYP3;
protected byte PFTYP3_I;
protected boolean PFTYP3_IFLAG;
protected byte PFTYP4;
protected byte PFTYP4_I;
protected boolean PFTYP4_IFLAG;
protected byte PFTYP5;
protected byte PFTYP5_I;
protected boolean PFTYP5_IFLAG;
protected byte PFTYP6;
protected byte PFTYP6_I;
protected boolean PFTYP6_IFLAG;
protected boolean PHYSBUYLGDST;
protected boolean PHYSHOUSGDSOST;
protected boolean PHYSHOUSGDST;
protected byte PINC;
protected byte PMORTC2;
protected byte PMORTC3;
protected byte PNOWK;
protected byte PNOWKLN;
protected byte PNOWKRS;
protected byte PNUMOS;
protected byte PNUMOS_I;
protected boolean PNUMOS_IFLAG;
protected byte POADD1;
protected byte POADD1_I;
protected boolean POADD1_IFLAG;
protected byte POADD2;
protected byte POADD2_I;
protected boolean POADD2_IFLAG;
protected boolean POADD3;
protected boolean POADD3_I;
protected boolean POADD3_IFLAG;
protected byte POADD4;
protected byte POADD4_I;
protected boolean POADD4_IFLAG;
protected boolean POADD5_I;
protected boolean POADD5_IFLAG;
protected boolean POADD6_I;
protected boolean POADD6_IFLAG;
protected byte POANEH1;
protected byte POANGA1;
protected byte POANIF1;
protected byte POANJT1;
protected byte POANN1;
protected byte POANN5;
protected byte POCASH1;
protected byte POCASH2;
protected byte POCNFG1;
protected byte POCNFG2;
protected double POCNFR1;
protected double POCNFR2;
protected byte POCNPR1;
protected byte POCNPR2;
protected byte POCONH1;
protected byte POCONH2;
protected byte POCTYP1;
protected byte POCTYP1_I;
protected boolean POCTYP1_IFLAG;
protected byte POCTYP2;
protected byte POCTYP2_I;
protected boolean POCTYP2_IFLAG;
protected short PODRINC1;
protected int PODRINC2;
protected byte PODRINCB1;
protected boolean PODRINCB2;
protected byte PODRVB1;
protected boolean PODRVB2;
protected short PODRVI1;
protected int PODRVI2;
protected double POEMAM1;
protected int POEMAM2;
protected byte POEMFG1;
protected byte POEMFG2;
protected double POEMFR1;
protected double POEMFR2;
protected byte POEMP1;
protected byte POEMP2;
protected byte POEMPH1;
protected byte POEMPH2;
protected byte POEMPR1;
protected byte POEMPR2;
protected byte POFAAG1;
protected byte POFAAG2;
protected byte POFAN1;
protected byte POFAN2;
protected byte POFAN3;
protected byte POFAN4;
protected boolean POFAN5;
protected byte POFAN6;
protected byte POFAN7;
protected boolean POFAN8;
protected byte POFAWH1;
protected boolean POFAWH2;
protected byte POFAWH6;
protected short POJOIN1;
protected short POJOIN2;
protected byte POLMUS1;
protected byte POLMUS2;
protected byte POLMUS3;
protected byte POLMUS4;
protected boolean POLMUS5;
protected boolean POLMUS6;
protected byte POLMUS7;
protected boolean POLMUS8;
protected int POLMV1;
protected int POLMV1_I;
protected boolean POLMV1_IFLAG;
protected int POLMV2;
protected int POLMV2_I;
protected boolean POLMV2_IFLAG;
protected byte POLMVB1;
protected byte POLSYR1;
protected byte POLSYR2;
protected byte POLUM1;
protected byte POLUM1_I;
protected boolean POLUM1_IFLAG;
protected byte POLUM2;
protected byte POLUM2_I;
protected boolean POLUM2_IFLAG;
protected byte POMETH1;
protected byte POMETH2;
protected byte POPYCH2;
protected byte PORAGE1;
protected byte PORAGE2;
protected byte POWER1T;
protected byte POWER2T;
protected int POYRAM1;
protected int POYRAM2;
protected byte PPACCU1;
protected byte PPACCU2;
protected byte PPACCU3;
protected byte PPANEH1;
protected byte PPANEH2;
protected boolean PPANEH3;
protected byte PPANGA1;
protected byte PPANGA2;
protected byte PPANGA3;
protected byte PPANIF1;
protected byte PPANIF2;
protected byte PPANIF3;
protected byte PPANJT1;
protected byte PPANJT2;
protected byte PPANJT3;
protected byte PPANN1;
protected boolean PPANN10;
protected boolean PPANN11;
protected boolean PPANN12;
protected boolean PPANN2;
protected byte PPANN5;
protected byte PPANN9;
protected byte PPCASH1;
protected byte PPCASH2;
protected byte PPCASH3;
protected byte PPCNDRS1;
protected byte PPCNDRS10;
protected byte PPCNDRS11;
protected boolean PPCNDRS19;
protected byte PPCNDRS2;
protected byte PPCNHOW1;
protected byte PPCNHOW2;
protected byte PPCNLRS1;
protected byte PPCNLRS2;
protected byte PPCNLRS3;
protected byte PPCNLRS5;
protected byte PPCONCH2;
protected byte PPCONCH3;
protected byte PPDOCS1;
protected byte PPDOCS2;
protected byte PPDOCS3;
protected int PPDRINC1;
protected short PPDRINC2;
protected boolean PPDRINCB2;
protected byte PPDRVB1;
protected boolean PPDRVB2;
protected int PPDRVI1;
protected int PPDRVI2;
protected int PPEIRA1;
protected short PPEIRA2;
protected boolean PPEIRA3;
protected double PPEIRF1;
protected boolean PPEIRF2;
protected boolean PPEIRF3;
protected byte PPEIRH1;
protected byte PPEIRH2;
protected byte PPEIRH3;
protected short PPEMAM1;
protected short PPEMAM2;
protected short PPEMAM3;
protected double PPEMFR1;
protected byte PPEMFR2;
protected byte PPEMFR3;
protected byte PPEMP1;
protected byte PPEMP2;
protected byte PPEMP3;
protected byte PPEMPH1;
protected byte PPEMPH2;
protected byte PPEMPH3;
protected byte PPEMPR1;
protected byte PPEMPR2;
protected byte PPEMPR3;
protected byte PPEVRG1;
protected byte PPEVRG2;
protected byte PPEVRG3;
protected boolean PPFAAG1;
protected byte PPFAN1;
protected byte PPFAN11;
protected byte PPFAN2;
protected byte PPFAN6;
protected byte PPFAWH1;
protected boolean PPFAWH15;
protected boolean PPFAWH2;
protected boolean PPFAWH3;
protected boolean PPFAWH6;
protected byte PPLMUS1;
protected byte PPLMUS2;
protected boolean PPLMUS3;
protected int PPLMV1;
protected int PPLMV1_I;
protected boolean PPLMV1_IFLAG;
protected int PPLMV2;
protected int PPLMV2_I;
protected boolean PPLMV2_IFLAG;
protected short PPLMV3;
protected short PPLMV3_I;
protected boolean PPLMV3_IFLAG;
protected boolean PPLMVB1;
protected boolean PPLMVB2;
protected boolean PPLMVB3;
protected int PPLSTA1;
protected int PPLSTA2;
protected int PPLSTA3;
protected byte PPLSTP1;
protected byte PPLSTP2;
protected byte PPLSTP3;
protected byte PPLUM1;
protected byte PPLUM1_I;
protected boolean PPLUM1_IFLAG;
protected byte PPLUM2;
protected byte PPLUM2_I;
protected boolean PPLUM2_IFLAG;
protected byte PPLUM3;
protected byte PPLUM3_I;
protected boolean PPLUM3_IFLAG;
protected byte PPORG1;
protected byte PPORG2;
protected byte PPORG3;
protected byte PPPAY1;
protected byte PPPAY2;
protected byte PPPAY3;
protected int PPRGAM2;
protected int PPRGAM3;
protected byte PPRGFG1;
protected byte PPRGFG2;
protected double PPRGFR1;
protected byte PPRGFR2;
protected byte PPRGH1;
protected byte PPRGH2;
protected byte PPRGH3;
protected byte PPRGPE1;
protected byte PPRGPE2;
protected byte PPRGPE3;
protected byte PPSIPP1;
protected byte PPSIPP2;
protected byte PPSIPP3;
protected byte PPSTMN1;
protected byte PPSTMN2;
protected byte PPSTMN3;
protected short PPSTYR1;
protected short PPSTYR2;
protected short PPSTYR3;
protected byte PPTYP1;
protected byte PPTYP2;
protected byte PPTYP3;
protected int PPVAL1;
protected int PPVAL1_I;
protected boolean PPVAL1_IFLAG;
protected int PPVAL2;
protected double PPVAL2_I;
protected byte PPVAL2_IFLAG;
protected int PPVAL3;
protected double PPVAL3_I;
protected boolean PPVAL3_IFLAG;
protected byte PPVALB1;
protected byte PPVALB2;
protected byte PPVALB3;
protected byte PPVINT1;
protected byte PPVINT2;
protected boolean PPVINT3;
protected short PPYRST1;
protected short PPYRST2;
protected short PPYRST3;
protected byte PPYSTP1;
protected byte PPYSTP11;
protected byte PPYSTP12;
protected boolean PPYSTP13;
protected boolean PPYSTP14;
protected byte PPYSTP19;
protected byte PPYSTP2;
protected byte PPYSTP8;
protected byte PPYSTP9;
protected byte PRESMON;
protected short PRESYR;
protected byte PRODTS;
protected byte PROXYNUM;
protected int PSPEXPA;
protected int PSPEXPA_I;
protected boolean PSPEXPA_IFLAG;
protected byte PSPEXPH;
protected byte PSPEXPH_I;
protected boolean PSPEXPH_IFLAG;
protected byte PSPLUM;
protected int PSPLUVAL;
protected byte PSPSE;
protected byte PSPSE_I;
protected boolean PSPSE_IFLAG;
protected boolean PWACCU;
protected byte PWLUM;
protected int PWLUVAL;
protected byte R01;
protected byte R02;
protected byte R03;
protected byte R04;
protected byte R05;
protected byte R06;
protected byte R07;
protected byte R08;
protected byte R09;
protected boolean R10;
protected boolean R11;
protected byte REGLRPY1_I;
protected boolean REGLRPY1_IFLAG;
protected byte REGLRPY2_I;
protected boolean REGLRPY2_IFLAG;
protected byte RELBUS_I;
protected boolean RELBUS_IFLAG;
protected byte RENTPAY_I;
protected boolean RENTPAY_IFLAG;
protected byte RESPDNT;
protected double RETFRAC;
protected byte RNYDAY;
protected byte RPFCRET1;
protected byte RPFCRET2;
protected boolean RPFCRET3;
protected boolean RPFCRET4;
protected boolean RPFCRET5;
protected boolean RPFCRET6;
protected byte SAMEJOB1;
protected byte SAMEJOB2;
protected byte SAMEJOB3;
protected byte SAMEJOB4;
protected byte SAMEJOB5;
protected byte SAMEJOB6;
protected byte SAMEMP;
protected byte SAMJOB;
protected byte SATIS;
protected byte SAVNUM;
protected byte SCAC1_I;
protected boolean SCAC1_IFLAG;
protected byte SCAC2_I;
protected boolean SCAC2_IFLAG;
protected byte SCAC3_I;
protected boolean SCAC3_IFLAG;
protected byte SCHEMEET_I;
protected boolean SCHEMEET_IFLAG;
protected boolean SCNDSCH;
protected byte SECTOR;
protected byte SECTR2;
protected int SICCODE;
protected byte SJEMP1_I;
protected byte SJEMP1_IFLAG;
protected byte SJOB2_I;
protected byte SJOB2_IFLAG;
protected byte SMTPEN;
protected double SOC2010;
protected byte SOURC2P;
protected byte STARTJ_I;
protected boolean STARTJ_IFLAG;
protected boolean STAT_IFLAG;
protected byte TACC1;
protected byte TACC2;
protected byte TADDVB1;
protected boolean TADDVB2;
protected int TADDVL2;
protected byte TBCAP1;
protected byte TBCAP2;
protected short TBCAPY1;
protected short TBCAPY2;
protected byte TBCKNO1;
protected byte TBCKNO2;
protected byte TBEN1;
protected byte TBEN10;
protected byte TBEN11;
protected boolean TBEN12;
protected byte TBEN2;
protected byte TBEN3;
protected byte TBEN4;
protected boolean TBEN5;
protected byte TBEN9;
protected byte TBINC1;
protected byte TBINC2;
protected int TBREC1;
protected int TBREC2;
protected byte TBRECB1;
protected byte TBRECB2;
protected byte TBVALB1;
protected byte TBVALB2;
protected byte TDUP1;
protected byte TDUP2;
protected byte TDUPA1;
protected byte TDUPA2;
protected byte TJNT1;
protected byte TJNT2;
protected byte TJNT3;
protected boolean TJNT4;
protected double TOPDVDBOPEN1T;
protected double TOPDVDBOPEN2T;
protected short TOTARR_EXCMORT_SUM;
protected short TOTBILLARR_SUM;
protected int TOTCC_SUM;
protected double TOTFLNS_SUM;
protected double TOTHP_SUM;
protected double TOTLNS_SUM;
protected double TOTLOS_SUM;
protected double TOTMO_SUM;
protected int TOTNLOS_SUM;
protected int TOTNSLBNK_SUM;
protected int TOTNSLC_SUM;
protected int TOTOSLBNK_SUM;
protected int TOTOSLC_SUM;
protected int TOTPARTGRSPAY;
protected short TOTSC_SUM;
protected int TOTSLBNK_SUM;
protected int TOTSLC_SUM;
protected byte TRUST;
protected byte TSNEW;
protected byte TSNUM1;
protected byte TSNUM2;
protected int TVAL1;
protected int TVAL2;
protected byte TVALB1;
protected byte TVALB2;
protected byte TWHO1;
protected byte TWHO2;
protected byte TWHO7;
protected boolean TWHO8;
protected byte UBUYLET;
protected byte UBUYLET_I;
protected boolean UBUYLET_IFLAG;
protected byte UDEBTBL;
protected byte UDEBTBLU;
protected byte UDEBTBO;
protected byte UDEBTBOR;
protected byte UDEBTBOS;
protected byte UDEBTBS;
protected int UDEBTL;
protected int UDEBTLU;
protected int UDEBTLU_I;
protected boolean UDEBTLU_IFLAG;
protected int UDEBTL_I;
protected boolean UDEBTL_IFLAG;
protected int UDEBTO;
protected int UDEBTOR;
protected int UDEBTOR_I;
protected boolean UDEBTOR_IFLAG;
protected int UDEBTOS;
protected int UDEBTOS_I;
protected boolean UDEBTOS_IFLAG;
protected int UDEBTO_I;
protected boolean UDEBTO_IFLAG;
protected int UDEBTS;
protected int UDEBTS_I;
protected boolean UDEBTS_IFLAG;
protected byte UGDVBL;
protected byte UGDVBL_I;
protected boolean UGDVBL_IFLAG;
protected byte UGDVBOS;
protected byte UGDVBOS_I;
protected boolean UGDVBOS_IFLAG;
protected byte UGDVBS;
protected byte UGDVBS_I;
protected boolean UGDVBS_IFLAG;
protected boolean UPROP5_I;
protected boolean UPROP6_I;
protected boolean UPRTYP10;
protected boolean UPRTYP11;
protected boolean UPRTYP12;
protected byte UPRTYP13;
protected boolean UPRTYP14;
protected boolean UPRTYP15;
protected byte UPRTYP16;
protected boolean UPRTYP17;
protected boolean UPRTYP18;
protected boolean UPRTYP2;
protected boolean UPRTYP3;
protected boolean UPRTYP4;
protected boolean UPRTYP5;
protected byte UPRTYP6;
protected boolean UPRTYP7;
protected boolean UPRTYP8;
protected boolean UPRTYP9;
protected byte UVALBL;
protected byte UVALBLU;
protected byte UVALBO;
protected byte UVALBOR;
protected byte UVALBOS;
protected byte UVALBS;
protected int UVALL;
protected int UVALLU;
protected int UVALLU_I;
protected boolean UVALLU_IFLAG;
protected int UVALL_I;
protected boolean UVALL_IFLAG;
protected int UVALO;
protected int UVALOR;
protected int UVALOR_I;
protected boolean UVALOR_IFLAG;
protected int UVALOS;
protected int UVALOS_I;
protected boolean UVALOS_IFLAG;
protected int UVALO_I;
protected boolean UVALO_IFLAG;
protected int UVALS;
protected int UVALS_I;
protected boolean UVALS_IFLAG;
protected int VALPBLUM1;
protected int VALPBLUM2;
protected byte WKBETW;
protected byte WKHRS;
protected byte WKHRSIR;
protected byte WORTH;
protected byte WRKING_I;
protected boolean WRKING_IFLAG;
protected byte XINCSE;
protected byte XMARSTA;
protected byte XMARSTA_I;
protected boolean XMARSTA_IFLAG;
protected final void initACCFRAC1(String s) {
if (!s.trim().isEmpty()) {
ACCFRAC1 = Double.parseDouble(s);
} else {
ACCFRAC1 = Double.NaN;
}
}

protected final void initACCFRAC2(String s) {
if (!s.trim().isEmpty()) {
ACCFRAC2 = Double.parseDouble(s);
} else {
ACCFRAC2 = Double.NaN;
}
}

protected final void initALLRET(String s) {
if (!s.trim().isEmpty()) {
ALLRET = Byte.parseByte(s);
} else {
ALLRET = Byte.MIN_VALUE;
}
}

protected final void initALLRET_I(String s) {
if (!s.trim().isEmpty()) {
ALLRET_I = Byte.parseByte(s);
} else {
ALLRET_I = Byte.MIN_VALUE;
}
}

protected final void initANXIOUS(String s) {
if (!s.trim().isEmpty()) {
ANXIOUS = Byte.parseByte(s);
} else {
ANXIOUS = Byte.MIN_VALUE;
}
}

protected final void initASAF1T(String s) {
if (!s.trim().isEmpty()) {
ASAF1T = Double.parseDouble(s);
} else {
ASAF1T = Double.NaN;
}
}

protected final void initASAF2T(String s) {
if (!s.trim().isEmpty()) {
ASAF2T = Double.parseDouble(s);
} else {
ASAF2T = Double.NaN;
}
}

protected final void initBACCBEG1(String s) {
if (!s.trim().isEmpty()) {
BACCBEG1 = s;
}
}

protected final void initBACCSA1(String s) {
if (!s.trim().isEmpty()) {
BACCSA1 = Byte.parseByte(s);
} else {
BACCSA1 = Byte.MIN_VALUE;
}
}

protected final void initBACCSB1(String s) {
if (!s.trim().isEmpty()) {
BACCSB1 = Byte.parseByte(s);
} else {
BACCSB1 = Byte.MIN_VALUE;
}
}

protected final void initBBEFORE1(String s) {
if (!s.trim().isEmpty()) {
BBEFORE1 = Integer.parseInt(s);
} else {
BBEFORE1 = Integer.MIN_VALUE;
}
}

protected final void initBCARRY1(String s) {
if (!s.trim().isEmpty()) {
BCARRY1 = Byte.parseByte(s);
} else {
BCARRY1 = Byte.MIN_VALUE;
}
}

protected final void initBCARRY3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
BCARRY3 = false;
}
}

protected final void initBDEBTS1(String s) {
if (!s.trim().isEmpty()) {
BDEBTS1 = Integer.parseInt(s);
} else {
BDEBTS1 = Integer.MIN_VALUE;
}
}

protected final void initBDIRNI1(String s) {
if (!s.trim().isEmpty()) {
BDIRNI1 = Byte.parseByte(s);
} else {
BDIRNI1 = Byte.MIN_VALUE;
}
}

protected final void initBDIRNI1_I(String s) {
if (!s.trim().isEmpty()) {
BDIRNI1_I = Byte.parseByte(s);
} else {
BDIRNI1_I = Byte.MIN_VALUE;
}
}

protected final void initBDIRNI1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
BDIRNI1_IFLAG = false;
}
}

protected final void initBDOCS1(String s) {
if (!s.trim().isEmpty()) {
BDOCS1 = Byte.parseByte(s);
} else {
BDOCS1 = Byte.MIN_VALUE;
}
}

protected final void initBEMPN1(String s) {
if (!s.trim().isEmpty()) {
BEMPN1 = Byte.parseByte(s);
} else {
BEMPN1 = Byte.MIN_VALUE;
}
}

protected final void initBNATINS1(String s) {
if (!s.trim().isEmpty()) {
BNATINS1 = Byte.parseByte(s);
} else {
BNATINS1 = Byte.MIN_VALUE;
}
}

protected final void initBONTAX_I(String s) {
if (!s.trim().isEmpty()) {
BONTAX_I = Byte.parseByte(s);
} else {
BONTAX_I = Byte.MIN_VALUE;
}
}

protected final void initBONTAX_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
BONTAX_IFLAG = false;
}
}

protected final void initBOTDVDBOPEN1T(String s) {
if (!s.trim().isEmpty()) {
BOTDVDBOPEN1T = Double.parseDouble(s);
} else {
BOTDVDBOPEN1T = Double.NaN;
}
}

protected final void initBOTDVDBOPEN2T(String s) {
if (!s.trim().isEmpty()) {
BOTDVDBOPEN2T = Double.parseDouble(s);
} else {
BOTDVDBOPEN2T = Double.NaN;
}
}

protected final void initBOWED1(String s) {
if (!s.trim().isEmpty()) {
BOWED1 = Integer.parseInt(s);
} else {
BOWED1 = Integer.MIN_VALUE;
}
}

protected final void initBOWN1(String s) {
if (!s.trim().isEmpty()) {
BOWN1 = Byte.parseByte(s);
} else {
BOWN1 = Byte.MIN_VALUE;
}
}

protected final void initBPART1(String s) {
if (!s.trim().isEmpty()) {
BPART1 = Byte.parseByte(s);
} else {
BPART1 = Byte.MIN_VALUE;
}
}

protected final void initBPAYNUM(String s) {
if (!s.trim().isEmpty()) {
BPAYNUM = Byte.parseByte(s);
} else {
BPAYNUM = Byte.MIN_VALUE;
}
}

protected final void initBPRFLOSS1(String s) {
if (!s.trim().isEmpty()) {
BPRFLOSS1 = Byte.parseByte(s);
} else {
BPRFLOSS1 = Byte.MIN_VALUE;
}
}

protected final void initBPRFLOSS2(String s) {
if (!s.trim().isEmpty()) {
BPRFLOSS2 = Byte.parseByte(s);
} else {
BPRFLOSS2 = Byte.MIN_VALUE;
}
}

protected final void initBPRFLOSS3(String s) {
if (!s.trim().isEmpty()) {
BPRFLOSS3 = Byte.parseByte(s);
} else {
BPRFLOSS3 = Byte.MIN_VALUE;
}
}

protected final void initBPROFIT1(String s) {
if (!s.trim().isEmpty()) {
BPROFIT1 = Integer.parseInt(s);
} else {
BPROFIT1 = Integer.MIN_VALUE;
}
}

protected final void initBPROPN1(String s) {
if (!s.trim().isEmpty()) {
BPROPN1 = Byte.parseByte(s);
} else {
BPROPN1 = Byte.MIN_VALUE;
}
}

protected final void initBRETIRE1(String s) {
if (!s.trim().isEmpty()) {
BRETIRE1 = Byte.parseByte(s);
} else {
BRETIRE1 = Byte.MIN_VALUE;
}
}

protected final void initBSEPPD01(String s) {
if (!s.trim().isEmpty()) {
BSEPPD01 = Byte.parseByte(s);
} else {
BSEPPD01 = Byte.MIN_VALUE;
}
}

protected final void initBSEPPD02(String s) {
if (!s.trim().isEmpty()) {
BSEPPD02 = Byte.parseByte(s);
} else {
BSEPPD02 = Byte.MIN_VALUE;
}
}

protected final void initBSEPPD03(String s) {
if (!s.trim().isEmpty()) {
BSEPPD03 = Byte.parseByte(s);
} else {
BSEPPD03 = Byte.MIN_VALUE;
}
}

protected final void initBSEPPD04(String s) {
if (!s.trim().isEmpty()) {
BSEPPD04 = Byte.parseByte(s);
} else {
BSEPPD04 = Byte.MIN_VALUE;
}
}

protected final void initBSEPPD05(String s) {
if (!s.trim().isEmpty()) {
BSEPPD05 = Byte.parseByte(s);
} else {
BSEPPD05 = Byte.MIN_VALUE;
}
}

protected final void initBSEPPD06(String s) {
if (!s.trim().isEmpty()) {
BSEPPD06 = Byte.parseByte(s);
} else {
BSEPPD06 = Byte.MIN_VALUE;
}
}

protected final void initBSEPPD07(String s) {
if (!s.trim().isEmpty()) {
BSEPPD07 = Byte.parseByte(s);
} else {
BSEPPD07 = Byte.MIN_VALUE;
}
}

protected final void initBSEPPD08(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
BSEPPD08 = false;
}
}

protected final void initBSIZE1(String s) {
if (!s.trim().isEmpty()) {
BSIZE1 = Byte.parseByte(s);
} else {
BSIZE1 = Byte.MIN_VALUE;
}
}

protected final void initBSTART1(String s) {
if (!s.trim().isEmpty()) {
BSTART1 = Byte.parseByte(s);
} else {
BSTART1 = Byte.MIN_VALUE;
}
}

protected final void initBTAX1(String s) {
if (!s.trim().isEmpty()) {
BTAX1 = Byte.parseByte(s);
} else {
BTAX1 = Byte.MIN_VALUE;
}
}

protected final void initBTOGPD(String s) {
if (!s.trim().isEmpty()) {
BTOGPD = Byte.parseByte(s);
} else {
BTOGPD = Byte.MIN_VALUE;
}
}

protected final void initBTOGSEP(String s) {
if (!s.trim().isEmpty()) {
BTOGSEP = Byte.parseByte(s);
} else {
BTOGSEP = Byte.MIN_VALUE;
}
}

protected final void initBTYPE1(String s) {
if (!s.trim().isEmpty()) {
BTYPE1 = Byte.parseByte(s);
} else {
BTYPE1 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE1_I(String s) {
if (!s.trim().isEmpty()) {
BTYPE1_I = Byte.parseByte(s);
} else {
BTYPE1_I = Byte.MIN_VALUE;
}
}

protected final void initBTYPE1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
BTYPE1_IFLAG = false;
}
}

protected final void initBUYLGDST(String s) {
if (!s.trim().isEmpty()) {
BUYLGDST = Integer.parseInt(s);
} else {
BUYLGDST = Integer.MIN_VALUE;
}
}

protected final void initBVAL1(String s) {
if (!s.trim().isEmpty()) {
BVAL1 = Integer.parseInt(s);
} else {
BVAL1 = Integer.MIN_VALUE;
}
}

protected final void initBVALB1(String s) {
if (!s.trim().isEmpty()) {
BVALB1 = Byte.parseByte(s);
} else {
BVALB1 = Byte.MIN_VALUE;
}
}

protected final void initBVALB3(String s) {
if (!s.trim().isEmpty()) {
BVALB3 = Byte.parseByte(s);
} else {
BVALB3 = Byte.MIN_VALUE;
}
}

protected final void initBYEAR1(String s) {
if (!s.trim().isEmpty()) {
BYEAR1 = Short.parseShort(s);
} else {
BYEAR1 = Short.MIN_VALUE;
}
}

protected final void initCACONTR1(String s) {
if (!s.trim().isEmpty()) {
CACONTR1 = Byte.parseByte(s);
} else {
CACONTR1 = Byte.MIN_VALUE;
}
}

protected final void initCACONTR2(String s) {
if (!s.trim().isEmpty()) {
CACONTR2 = Byte.parseByte(s);
} else {
CACONTR2 = Byte.MIN_VALUE;
}
}

protected final void initCACONTR3(String s) {
if (!s.trim().isEmpty()) {
CACONTR3 = Byte.parseByte(s);
} else {
CACONTR3 = Byte.MIN_VALUE;
}
}

protected final void initCACONTR4(String s) {
if (!s.trim().isEmpty()) {
CACONTR4 = Byte.parseByte(s);
} else {
CACONTR4 = Byte.MIN_VALUE;
}
}

protected final void initCACONTR5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CACONTR5 = false;
}
}

protected final void initCACONTR6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CACONTR6 = false;
}
}

protected final void initCACONTRAM1(String s) {
if (!s.trim().isEmpty()) {
CACONTRAM1 = Short.parseShort(s);
} else {
CACONTRAM1 = Short.MIN_VALUE;
}
}

protected final void initCACONTRAM2(String s) {
if (!s.trim().isEmpty()) {
CACONTRAM2 = Integer.parseInt(s);
} else {
CACONTRAM2 = Integer.MIN_VALUE;
}
}

protected final void initCACONTRAM3(String s) {
if (!s.trim().isEmpty()) {
CACONTRAM3 = Integer.parseInt(s);
} else {
CACONTRAM3 = Integer.MIN_VALUE;
}
}

protected final void initCACONTRAM4(String s) {
if (!s.trim().isEmpty()) {
CACONTRAM4 = Integer.parseInt(s);
} else {
CACONTRAM4 = Integer.MIN_VALUE;
}
}

protected final void initCACONTRAM5(String s) {
if (!s.trim().isEmpty()) {
CACONTRAM5 = Short.parseShort(s);
} else {
CACONTRAM5 = Short.MIN_VALUE;
}
}

protected final void initCACONTRAM6(String s) {
if (!s.trim().isEmpty()) {
CACONTRAM6 = Short.parseShort(s);
} else {
CACONTRAM6 = Short.MIN_VALUE;
}
}

protected final void initCACONTRAMB1(String s) {
if (!s.trim().isEmpty()) {
CACONTRAMB1 = Byte.parseByte(s);
} else {
CACONTRAMB1 = Byte.MIN_VALUE;
}
}

protected final void initCACONTRAMB2(String s) {
if (!s.trim().isEmpty()) {
CACONTRAMB2 = Byte.parseByte(s);
} else {
CACONTRAMB2 = Byte.MIN_VALUE;
}
}

protected final void initCACONTRAMB3(String s) {
if (!s.trim().isEmpty()) {
CACONTRAMB3 = Byte.parseByte(s);
} else {
CACONTRAMB3 = Byte.MIN_VALUE;
}
}

protected final void initCACONTRAMB4(String s) {
if (!s.trim().isEmpty()) {
CACONTRAMB4 = Byte.parseByte(s);
} else {
CACONTRAMB4 = Byte.MIN_VALUE;
}
}

protected final void initCACONTRAMB5(String s) {
if (!s.trim().isEmpty()) {
CACONTRAMB5 = Byte.parseByte(s);
} else {
CACONTRAMB5 = Byte.MIN_VALUE;
}
}

protected final void initCACONTRAMB6(String s) {
if (!s.trim().isEmpty()) {
CACONTRAMB6 = Byte.parseByte(s);
} else {
CACONTRAMB6 = Byte.MIN_VALUE;
}
}

protected final void initCACRNUM(String s) {
if (!s.trim().isEmpty()) {
CACRNUM = Byte.parseByte(s);
} else {
CACRNUM = Byte.MIN_VALUE;
}
}

protected final void initCACTVB(String s) {
if (!s.trim().isEmpty()) {
CACTVB = Byte.parseByte(s);
} else {
CACTVB = Byte.MIN_VALUE;
}
}

protected final void initCAJISA_I(String s) {
if (!s.trim().isEmpty()) {
CAJISA_I = Byte.parseByte(s);
} else {
CAJISA_I = Byte.MIN_VALUE;
}
}

protected final void initCAJISA_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CAJISA_IFLAG = false;
}
}

protected final void initCAODNUM(String s) {
if (!s.trim().isEmpty()) {
CAODNUM = Byte.parseByte(s);
} else {
CAODNUM = Byte.MIN_VALUE;
}
}

protected final void initCAOPEN(String s) {
if (!s.trim().isEmpty()) {
CAOPEN = Byte.parseByte(s);
} else {
CAOPEN = Byte.MIN_VALUE;
}
}

protected final void initCASEW2(String s) {
if (!s.trim().isEmpty()) {
CASEW2 = Short.parseShort(s);
} else {
CASEW2 = Short.MIN_VALUE;
}
}

protected final void initCASEW3(String s) {
if (!s.trim().isEmpty()) {
CASEW3 = Short.parseShort(s);
} else {
CASEW3 = Short.MIN_VALUE;
}
}

protected final void initCCAC1_I(String s) {
if (!s.trim().isEmpty()) {
CCAC1_I = Byte.parseByte(s);
} else {
CCAC1_I = Byte.MIN_VALUE;
}
}

protected final void initCCAC1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CCAC1_IFLAG = false;
}
}

protected final void initCCAC2_I(String s) {
if (!s.trim().isEmpty()) {
CCAC2_I = Byte.parseByte(s);
} else {
CCAC2_I = Byte.MIN_VALUE;
}
}

protected final void initCCAC2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CCAC2_IFLAG = false;
}
}

protected final void initCCAC3_I(String s) {
if (!s.trim().isEmpty()) {
CCAC3_I = Byte.parseByte(s);
} else {
CCAC3_I = Byte.MIN_VALUE;
}
}

protected final void initCCAC3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CCAC3_IFLAG = false;
}
}

protected final void initCHOICP(String s) {
if (!s.trim().isEmpty()) {
CHOICP = Byte.parseByte(s);
} else {
CHOICP = Byte.MIN_VALUE;
}
}

protected final void initCOMMI(String s) {
if (!s.trim().isEmpty()) {
COMMI = Byte.parseByte(s);
} else {
COMMI = Byte.MIN_VALUE;
}
}

protected final void initCOUPLENUM(String s) {
if (!s.trim().isEmpty()) {
COUPLENUM = Byte.parseByte(s);
} else {
COUPLENUM = Byte.MIN_VALUE;
}
}

protected final void initCURSTAT(String s) {
if (!s.trim().isEmpty()) {
CURSTAT = Byte.parseByte(s);
} else {
CURSTAT = Byte.MIN_VALUE;
}
}

protected final void initCUTDOWN(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CUTDOWN = false;
}
}

protected final void initDADVACT1(String s) {
if (!s.trim().isEmpty()) {
DADVACT1 = Byte.parseByte(s);
} else {
DADVACT1 = Byte.MIN_VALUE;
}
}

protected final void initDADVACT2(String s) {
if (!s.trim().isEmpty()) {
DADVACT2 = Byte.parseByte(s);
} else {
DADVACT2 = Byte.MIN_VALUE;
}
}

protected final void initDADVACT3(String s) {
if (!s.trim().isEmpty()) {
DADVACT3 = Byte.parseByte(s);
} else {
DADVACT3 = Byte.MIN_VALUE;
}
}

protected final void initDADVMTH(String s) {
if (!s.trim().isEmpty()) {
DADVMTH = Byte.parseByte(s);
} else {
DADVMTH = Byte.MIN_VALUE;
}
}

protected final void initDBURDW1(String s) {
if (!s.trim().isEmpty()) {
DBURDW1 = Byte.parseByte(s);
} else {
DBURDW1 = Byte.MIN_VALUE;
}
}

protected final void initDBURDW2(String s) {
if (!s.trim().isEmpty()) {
DBURDW2 = Byte.parseByte(s);
} else {
DBURDW2 = Byte.MIN_VALUE;
}
}

protected final void initDC12BEH1(String s) {
if (!s.trim().isEmpty()) {
DC12BEH1 = Byte.parseByte(s);
} else {
DC12BEH1 = Byte.MIN_VALUE;
}
}

protected final void initDC12BEH2(String s) {
if (!s.trim().isEmpty()) {
DC12BEH2 = Byte.parseByte(s);
} else {
DC12BEH2 = Byte.MIN_VALUE;
}
}

protected final void initDC12BEH3(String s) {
if (!s.trim().isEmpty()) {
DC12BEH3 = Byte.parseByte(s);
} else {
DC12BEH3 = Byte.MIN_VALUE;
}
}

protected final void initDC12OWE1(String s) {
if (!s.trim().isEmpty()) {
DC12OWE1 = Short.parseShort(s);
} else {
DC12OWE1 = Short.MIN_VALUE;
}
}

protected final void initDC12OWE2(String s) {
if (!s.trim().isEmpty()) {
DC12OWE2 = Short.parseShort(s);
} else {
DC12OWE2 = Short.MIN_VALUE;
}
}

protected final void initDC12OWE3(String s) {
if (!s.trim().isEmpty()) {
DC12OWE3 = Short.parseShort(s);
} else {
DC12OWE3 = Short.MIN_VALUE;
}
}

protected final void initDCAMC1(String s) {
if (!s.trim().isEmpty()) {
DCAMC1 = Integer.parseInt(s);
} else {
DCAMC1 = Integer.MIN_VALUE;
}
}

protected final void initDCAMD1(String s) {
if (!s.trim().isEmpty()) {
DCAMD1 = Short.parseShort(s);
} else {
DCAMD1 = Short.MIN_VALUE;
}
}

protected final void initDCAMOS1_I(String s) {
if (!s.trim().isEmpty()) {
DCAMOS1_I = Integer.parseInt(s);
} else {
DCAMOS1_I = Integer.MIN_VALUE;
}
}

protected final void initDCAMOS1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DCAMOS1_IFLAG = false;
}
}

protected final void initDCAMOS2_I(String s) {
if (!s.trim().isEmpty()) {
DCAMOS2_I = Integer.parseInt(s);
} else {
DCAMOS2_I = Integer.MIN_VALUE;
}
}

protected final void initDCAMOS2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DCAMOS2_IFLAG = false;
}
}

protected final void initDCAMOS3_I(String s) {
if (!s.trim().isEmpty()) {
DCAMOS3_I = Short.parseShort(s);
} else {
DCAMOS3_I = Short.MIN_VALUE;
}
}

protected final void initDCAMOS3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DCAMOS3_IFLAG = false;
}
}

protected final void initDCAMP1(String s) {
if (!s.trim().isEmpty()) {
DCAMP1 = Short.parseShort(s);
} else {
DCAMP1 = Short.MIN_VALUE;
}
}

protected final void initDCCOS1(String s) {
if (!s.trim().isEmpty()) {
DCCOS1 = Byte.parseByte(s);
} else {
DCCOS1 = Byte.MIN_VALUE;
}
}

protected final void initDCCSP1(String s) {
if (!s.trim().isEmpty()) {
DCCSP1 = Byte.parseByte(s);
} else {
DCCSP1 = Byte.MIN_VALUE;
}
}

protected final void initDCESB1(String s) {
if (!s.trim().isEmpty()) {
DCESB1 = Byte.parseByte(s);
} else {
DCESB1 = Byte.MIN_VALUE;
}
}

protected final void initDCINZ1(String s) {
if (!s.trim().isEmpty()) {
DCINZ1 = Byte.parseByte(s);
} else {
DCINZ1 = Byte.MIN_VALUE;
}
}

protected final void initDCNAM1(String s) {
if (!s.trim().isEmpty()) {
DCNAM1 = Byte.parseByte(s);
} else {
DCNAM1 = Byte.MIN_VALUE;
}
}

protected final void initDCNUM1(String s) {
if (!s.trim().isEmpty()) {
DCNUM1 = Byte.parseByte(s);
} else {
DCNUM1 = Byte.MIN_VALUE;
}
}

protected final void initDCNUM2(String s) {
if (!s.trim().isEmpty()) {
DCNUM2 = Byte.parseByte(s);
} else {
DCNUM2 = Byte.MIN_VALUE;
}
}

protected final void initDCOINV1(String s) {
if (!s.trim().isEmpty()) {
DCOINV1 = Integer.parseInt(s);
} else {
DCOINV1 = Integer.MIN_VALUE;
}
}

protected final void initDCOINV1_I(String s) {
if (!s.trim().isEmpty()) {
DCOINV1_I = Integer.parseInt(s);
} else {
DCOINV1_I = Integer.MIN_VALUE;
}
}

protected final void initDCOINV1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DCOINV1_IFLAG = false;
}
}

protected final void initDCOINV3_I(String s) {
if (!s.trim().isEmpty()) {
DCOINV3_I = Short.parseShort(s);
} else {
DCOINV3_I = Short.MIN_VALUE;
}
}

protected final void initDCOINV3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
DCOINV3_IFLAG = Byte.parseByte(s);
} else {
DCOINV3_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initDCOINV4(String s) {
if (!s.trim().isEmpty()) {
DCOINV4 = Short.parseShort(s);
} else {
DCOINV4 = Short.MIN_VALUE;
}
}

protected final void initDCOINV4_I(String s) {
if (!s.trim().isEmpty()) {
DCOINV4_I = Short.parseShort(s);
} else {
DCOINV4_I = Short.MIN_VALUE;
}
}

protected final void initDCOINV4_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DCOINV4_IFLAG = false;
}
}

protected final void initDCOINV5(String s) {
if (!s.trim().isEmpty()) {
DCOINV5 = Short.parseShort(s);
} else {
DCOINV5 = Short.MIN_VALUE;
}
}

protected final void initDCOINV5_I(String s) {
if (!s.trim().isEmpty()) {
DCOINV5_I = Short.parseShort(s);
} else {
DCOINV5_I = Short.MIN_VALUE;
}
}

protected final void initDCOINV5_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DCOINV5_IFLAG = false;
}
}

protected final void initDCOINVB1(String s) {
if (!s.trim().isEmpty()) {
DCOINVB1 = Byte.parseByte(s);
} else {
DCOINVB1 = Byte.MIN_VALUE;
}
}

protected final void initDCOINVB4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DCOINVB4 = false;
}
}

protected final void initDCOINVB5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DCOINVB5 = false;
}
}

protected final void initDCOSHV1(String s) {
if (!s.trim().isEmpty()) {
DCOSHV1 = Integer.parseInt(s);
} else {
DCOSHV1 = Integer.MIN_VALUE;
}
}

protected final void initDCOSHV1_I(String s) {
if (!s.trim().isEmpty()) {
DCOSHV1_I = Integer.parseInt(s);
} else {
DCOSHV1_I = Integer.MIN_VALUE;
}
}

protected final void initDCOSHV1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DCOSHV1_IFLAG = false;
}
}

protected final void initDCOSHV3_I(String s) {
if (!s.trim().isEmpty()) {
DCOSHV3_I = Short.parseShort(s);
} else {
DCOSHV3_I = Short.MIN_VALUE;
}
}

protected final void initDCOSHV3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DCOSHV3_IFLAG = false;
}
}

protected final void initDCOSHV4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DCOSHV4 = false;
}
}

protected final void initDCOSHV5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DCOSHV5 = false;
}
}

protected final void initDCOSHVB1(String s) {
if (!s.trim().isEmpty()) {
DCOSHVB1 = Byte.parseByte(s);
} else {
DCOSHVB1 = Byte.MIN_VALUE;
}
}

protected final void initDCOSHVB3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DCOSHVB3 = false;
}
}

protected final void initDCOSHVB4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DCOSHVB4 = false;
}
}

protected final void initDCOSHVB5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DCOSHVB5 = false;
}
}

protected final void initDCPER1(String s) {
if (!s.trim().isEmpty()) {
DCPER1 = Byte.parseByte(s);
} else {
DCPER1 = Byte.MIN_VALUE;
}
}

protected final void initDCREC1(String s) {
if (!s.trim().isEmpty()) {
DCREC1 = Byte.parseByte(s);
} else {
DCREC1 = Byte.MIN_VALUE;
}
}

protected final void initDCRSP1(String s) {
if (!s.trim().isEmpty()) {
DCRSP1 = Byte.parseByte(s);
} else {
DCRSP1 = Byte.MIN_VALUE;
}
}

protected final void initDHBANY08(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DHBANY08 = false;
}
}

protected final void initDHBANY09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DHBANY09 = false;
}
}

protected final void initDHBANY10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DHBANY10 = false;
}
}

protected final void initDHBANY11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DHBANY11 = false;
}
}

protected final void initDHPBEH1(String s) {
if (!s.trim().isEmpty()) {
DHPBEH1 = Byte.parseByte(s);
} else {
DHPBEH1 = Byte.MIN_VALUE;
}
}

protected final void initDHPBEH1_I(String s) {
if (!s.trim().isEmpty()) {
DHPBEH1_I = Byte.parseByte(s);
} else {
DHPBEH1_I = Byte.MIN_VALUE;
}
}

protected final void initDHPBEH1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DHPBEH1_IFLAG = false;
}
}

protected final void initDHPEST1(String s) {
if (!s.trim().isEmpty()) {
DHPEST1 = Byte.parseByte(s);
} else {
DHPEST1 = Byte.MIN_VALUE;
}
}

protected final void initDHPINS1(String s) {
if (!s.trim().isEmpty()) {
DHPINS1 = Short.parseShort(s);
} else {
DHPINS1 = Short.MIN_VALUE;
}
}

protected final void initDHPINS1_I(String s) {
if (!s.trim().isEmpty()) {
DHPINS1_I = Short.parseShort(s);
} else {
DHPINS1_I = Short.MIN_VALUE;
}
}

protected final void initDHPINS1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DHPINS1_IFLAG = false;
}
}

protected final void initDHPINT1(String s) {
if (!s.trim().isEmpty()) {
DHPINT1 = Byte.parseByte(s);
} else {
DHPINT1 = Byte.MIN_VALUE;
}
}

protected final void initDHPOFT1(String s) {
if (!s.trim().isEmpty()) {
DHPOFT1 = Byte.parseByte(s);
} else {
DHPOFT1 = Byte.MIN_VALUE;
}
}

protected final void initDHPOFT1_I(String s) {
if (!s.trim().isEmpty()) {
DHPOFT1_I = Byte.parseByte(s);
} else {
DHPOFT1_I = Byte.MIN_VALUE;
}
}

protected final void initDHPOFT1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DHPOFT1_IFLAG = false;
}
}

protected final void initDHPOWE1(String s) {
if (!s.trim().isEmpty()) {
DHPOWE1 = Short.parseShort(s);
} else {
DHPOWE1 = Short.MIN_VALUE;
}
}

protected final void initDHPOWE1_I(String s) {
if (!s.trim().isEmpty()) {
DHPOWE1_I = Short.parseShort(s);
} else {
DHPOWE1_I = Short.MIN_VALUE;
}
}

protected final void initDHPOWE1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DHPOWE1_IFLAG = false;
}
}

protected final void initDHPWEST1(String s) {
if (!s.trim().isEmpty()) {
DHPWEST1 = Byte.parseByte(s);
} else {
DHPWEST1 = Byte.MIN_VALUE;
}
}

protected final void initDHPWHNM1(String s) {
if (!s.trim().isEmpty()) {
DHPWHNM1 = Byte.parseByte(s);
} else {
DHPWHNM1 = Byte.MIN_VALUE;
}
}

protected final void initDHPWHNM1_I(String s) {
if (!s.trim().isEmpty()) {
DHPWHNM1_I = Byte.parseByte(s);
} else {
DHPWHNM1_I = Byte.MIN_VALUE;
}
}

protected final void initDHPWHNM1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DHPWHNM1_IFLAG = false;
}
}

protected final void initDHPWHNY1(String s) {
if (!s.trim().isEmpty()) {
DHPWHNY1 = Short.parseShort(s);
} else {
DHPWHNY1 = Short.MIN_VALUE;
}
}

protected final void initDHPWHNY1_I(String s) {
if (!s.trim().isEmpty()) {
DHPWHNY1_I = Short.parseShort(s);
} else {
DHPWHNY1_I = Short.MIN_VALUE;
}
}

protected final void initDHPWHNY1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DHPWHNY1_IFLAG = false;
}
}

protected final void initDLBEH1(String s) {
if (!s.trim().isEmpty()) {
DLBEH1 = Byte.parseByte(s);
} else {
DLBEH1 = Byte.MIN_VALUE;
}
}

protected final void initDLBEH1_I(String s) {
if (!s.trim().isEmpty()) {
DLBEH1_I = Byte.parseByte(s);
} else {
DLBEH1_I = Byte.MIN_VALUE;
}
}

protected final void initDLBEH1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DLBEH1_IFLAG = false;
}
}

protected final void initDLEST1(String s) {
if (!s.trim().isEmpty()) {
DLEST1 = Byte.parseByte(s);
} else {
DLEST1 = Byte.MIN_VALUE;
}
}

protected final void initDLEST5(String s) {
if (!s.trim().isEmpty()) {
DLEST5 = Byte.parseByte(s);
} else {
DLEST5 = Byte.MIN_VALUE;
}
}

protected final void initDLINS1(String s) {
if (!s.trim().isEmpty()) {
DLINS1 = Short.parseShort(s);
} else {
DLINS1 = Short.MIN_VALUE;
}
}

protected final void initDLINS1_I(String s) {
if (!s.trim().isEmpty()) {
DLINS1_I = Short.parseShort(s);
} else {
DLINS1_I = Short.MIN_VALUE;
}
}

protected final void initDLINS1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DLINS1_IFLAG = false;
}
}

protected final void initDLINT1(String s) {
if (!s.trim().isEmpty()) {
DLINT1 = Byte.parseByte(s);
} else {
DLINT1 = Byte.MIN_VALUE;
}
}

protected final void initDLNNM(String s) {
if (!s.trim().isEmpty()) {
DLNNM = Byte.parseByte(s);
} else {
DLNNM = Byte.MIN_VALUE;
}
}

protected final void initDLOFT1(String s) {
if (!s.trim().isEmpty()) {
DLOFT1 = Byte.parseByte(s);
} else {
DLOFT1 = Byte.MIN_VALUE;
}
}

protected final void initDLOFT1_I(String s) {
if (!s.trim().isEmpty()) {
DLOFT1_I = Byte.parseByte(s);
} else {
DLOFT1_I = Byte.MIN_VALUE;
}
}

protected final void initDLOFT1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DLOFT1_IFLAG = false;
}
}

protected final void initDLOLD1(String s) {
if (!s.trim().isEmpty()) {
DLOLD1 = Byte.parseByte(s);
} else {
DLOLD1 = Byte.MIN_VALUE;
}
}

protected final void initDLOLD2(String s) {
if (!s.trim().isEmpty()) {
DLOLD2 = Byte.parseByte(s);
} else {
DLOLD2 = Byte.MIN_VALUE;
}
}

protected final void initDLOLD3(String s) {
if (!s.trim().isEmpty()) {
DLOLD3 = Byte.parseByte(s);
} else {
DLOLD3 = Byte.MIN_VALUE;
}
}

protected final void initDLOLD4(String s) {
if (!s.trim().isEmpty()) {
DLOLD4 = Byte.parseByte(s);
} else {
DLOLD4 = Byte.MIN_VALUE;
}
}

protected final void initDLOLD5(String s) {
if (!s.trim().isEmpty()) {
DLOLD5 = Byte.parseByte(s);
} else {
DLOLD5 = Byte.MIN_VALUE;
}
}

protected final void initDLONM(String s) {
if (!s.trim().isEmpty()) {
DLONM = Byte.parseByte(s);
} else {
DLONM = Byte.MIN_VALUE;
}
}

protected final void initDLOWE1(String s) {
if (!s.trim().isEmpty()) {
DLOWE1 = Short.parseShort(s);
} else {
DLOWE1 = Short.MIN_VALUE;
}
}

protected final void initDLOWE1_I(String s) {
if (!s.trim().isEmpty()) {
DLOWE1_I = Short.parseShort(s);
} else {
DLOWE1_I = Short.MIN_VALUE;
}
}

protected final void initDLOWE1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DLOWE1_IFLAG = false;
}
}

protected final void initDLSEC1(String s) {
if (!s.trim().isEmpty()) {
DLSEC1 = Byte.parseByte(s);
} else {
DLSEC1 = Byte.MIN_VALUE;
}
}

protected final void initDLTYPE1(String s) {
if (!s.trim().isEmpty()) {
DLTYPE1 = Byte.parseByte(s);
} else {
DLTYPE1 = Byte.MIN_VALUE;
}
}

protected final void initDLTYPE1_I(String s) {
if (!s.trim().isEmpty()) {
DLTYPE1_I = Byte.parseByte(s);
} else {
DLTYPE1_I = Byte.MIN_VALUE;
}
}

protected final void initDLTYPE1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DLTYPE1_IFLAG = false;
}
}

protected final void initDLWEST1(String s) {
if (!s.trim().isEmpty()) {
DLWEST1 = Byte.parseByte(s);
} else {
DLWEST1 = Byte.MIN_VALUE;
}
}

protected final void initDLWHNM1(String s) {
if (!s.trim().isEmpty()) {
DLWHNM1 = Byte.parseByte(s);
} else {
DLWHNM1 = Byte.MIN_VALUE;
}
}

protected final void initDLWHNM1_I(String s) {
if (!s.trim().isEmpty()) {
DLWHNM1_I = Byte.parseByte(s);
} else {
DLWHNM1_I = Byte.MIN_VALUE;
}
}

protected final void initDLWHNM1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DLWHNM1_IFLAG = false;
}
}

protected final void initDLWHNY1(String s) {
if (!s.trim().isEmpty()) {
DLWHNY1 = Short.parseShort(s);
} else {
DLWHNY1 = Short.MIN_VALUE;
}
}

protected final void initDLWHNY1_I(String s) {
if (!s.trim().isEmpty()) {
DLWHNY1_I = Short.parseShort(s);
} else {
DLWHNY1_I = Short.MIN_VALUE;
}
}

protected final void initDLWHNY1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DLWHNY1_IFLAG = false;
}
}

protected final void initDLWHY30(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DLWHY30 = false;
}
}

protected final void initDLWHY6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DLWHY6 = false;
}
}

protected final void initDLWHY7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DLWHY7 = false;
}
}

protected final void initDMOBEH1(String s) {
if (!s.trim().isEmpty()) {
DMOBEH1 = Byte.parseByte(s);
} else {
DMOBEH1 = Byte.MIN_VALUE;
}
}

protected final void initDMOBEH1_I(String s) {
if (!s.trim().isEmpty()) {
DMOBEH1_I = Byte.parseByte(s);
} else {
DMOBEH1_I = Byte.MIN_VALUE;
}
}

protected final void initDMOBEH1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DMOBEH1_IFLAG = false;
}
}

protected final void initDMOEST1(String s) {
if (!s.trim().isEmpty()) {
DMOEST1 = Byte.parseByte(s);
} else {
DMOEST1 = Byte.MIN_VALUE;
}
}

protected final void initDMOINS1(String s) {
if (!s.trim().isEmpty()) {
DMOINS1 = Short.parseShort(s);
} else {
DMOINS1 = Short.MIN_VALUE;
}
}

protected final void initDMOINS1_I(String s) {
if (!s.trim().isEmpty()) {
DMOINS1_I = Short.parseShort(s);
} else {
DMOINS1_I = Short.MIN_VALUE;
}
}

protected final void initDMOINS1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DMOINS1_IFLAG = false;
}
}

protected final void initDMOINT1(String s) {
if (!s.trim().isEmpty()) {
DMOINT1 = Byte.parseByte(s);
} else {
DMOINT1 = Byte.MIN_VALUE;
}
}

protected final void initDMOOFT1(String s) {
if (!s.trim().isEmpty()) {
DMOOFT1 = Byte.parseByte(s);
} else {
DMOOFT1 = Byte.MIN_VALUE;
}
}

protected final void initDMOOFT1_I(String s) {
if (!s.trim().isEmpty()) {
DMOOFT1_I = Byte.parseByte(s);
} else {
DMOOFT1_I = Byte.MIN_VALUE;
}
}

protected final void initDMOOFT1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DMOOFT1_IFLAG = false;
}
}

protected final void initDMOOWE1(String s) {
if (!s.trim().isEmpty()) {
DMOOWE1 = Short.parseShort(s);
} else {
DMOOWE1 = Short.MIN_VALUE;
}
}

protected final void initDMOOWE1_I(String s) {
if (!s.trim().isEmpty()) {
DMOOWE1_I = Short.parseShort(s);
} else {
DMOOWE1_I = Short.MIN_VALUE;
}
}

protected final void initDMOOWE1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DMOOWE1_IFLAG = false;
}
}

protected final void initDMOWEST1(String s) {
if (!s.trim().isEmpty()) {
DMOWEST1 = Byte.parseByte(s);
} else {
DMOWEST1 = Byte.MIN_VALUE;
}
}

protected final void initDMOWHNM1(String s) {
if (!s.trim().isEmpty()) {
DMOWHNM1 = Byte.parseByte(s);
} else {
DMOWHNM1 = Byte.MIN_VALUE;
}
}

protected final void initDMOWHNM1_I(String s) {
if (!s.trim().isEmpty()) {
DMOWHNM1_I = Byte.parseByte(s);
} else {
DMOWHNM1_I = Byte.MIN_VALUE;
}
}

protected final void initDMOWHNM1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DMOWHNM1_IFLAG = false;
}
}

protected final void initDMOWHNY1(String s) {
if (!s.trim().isEmpty()) {
DMOWHNY1 = Short.parseShort(s);
} else {
DMOWHNY1 = Short.MIN_VALUE;
}
}

protected final void initDMOWHNY1_I(String s) {
if (!s.trim().isEmpty()) {
DMOWHNY1_I = Short.parseShort(s);
} else {
DMOWHNY1_I = Short.MIN_VALUE;
}
}

protected final void initDMOWHNY1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DMOWHNY1_IFLAG = false;
}
}

protected final void initDS12BEH1(String s) {
if (!s.trim().isEmpty()) {
DS12BEH1 = Byte.parseByte(s);
} else {
DS12BEH1 = Byte.MIN_VALUE;
}
}

protected final void initDS12BEH2(String s) {
if (!s.trim().isEmpty()) {
DS12BEH2 = Byte.parseByte(s);
} else {
DS12BEH2 = Byte.MIN_VALUE;
}
}

protected final void initDS12BEH3(String s) {
if (!s.trim().isEmpty()) {
DS12BEH3 = Byte.parseByte(s);
} else {
DS12BEH3 = Byte.MIN_VALUE;
}
}

protected final void initDS12OWE1(String s) {
if (!s.trim().isEmpty()) {
DS12OWE1 = Short.parseShort(s);
} else {
DS12OWE1 = Short.MIN_VALUE;
}
}

protected final void initDS12OWE2(String s) {
if (!s.trim().isEmpty()) {
DS12OWE2 = Short.parseShort(s);
} else {
DS12OWE2 = Short.MIN_VALUE;
}
}

protected final void initDS12OWE3(String s) {
if (!s.trim().isEmpty()) {
DS12OWE3 = Byte.parseByte(s);
} else {
DS12OWE3 = Byte.MIN_VALUE;
}
}

protected final void initDSAMC1(String s) {
if (!s.trim().isEmpty()) {
DSAMC1 = Short.parseShort(s);
} else {
DSAMC1 = Short.MIN_VALUE;
}
}

protected final void initDSAMD1(String s) {
if (!s.trim().isEmpty()) {
DSAMD1 = Short.parseShort(s);
} else {
DSAMD1 = Short.MIN_VALUE;
}
}

protected final void initDSAMOS1_I(String s) {
if (!s.trim().isEmpty()) {
DSAMOS1_I = Short.parseShort(s);
} else {
DSAMOS1_I = Short.MIN_VALUE;
}
}

protected final void initDSAMOS1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DSAMOS1_IFLAG = false;
}
}

protected final void initDSAMOS2_I(String s) {
if (!s.trim().isEmpty()) {
DSAMOS2_I = Short.parseShort(s);
} else {
DSAMOS2_I = Short.MIN_VALUE;
}
}

protected final void initDSAMOS2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DSAMOS2_IFLAG = false;
}
}

protected final void initDSAMOS3_I(String s) {
if (!s.trim().isEmpty()) {
DSAMOS3_I = Short.parseShort(s);
} else {
DSAMOS3_I = Short.MIN_VALUE;
}
}

protected final void initDSAMOS3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DSAMOS3_IFLAG = false;
}
}

protected final void initDSAMP1(String s) {
if (!s.trim().isEmpty()) {
DSAMP1 = Short.parseShort(s);
} else {
DSAMP1 = Short.MIN_VALUE;
}
}

protected final void initDSCOS1(String s) {
if (!s.trim().isEmpty()) {
DSCOS1 = Byte.parseByte(s);
} else {
DSCOS1 = Byte.MIN_VALUE;
}
}

protected final void initDSCSP1(String s) {
if (!s.trim().isEmpty()) {
DSCSP1 = Byte.parseByte(s);
} else {
DSCSP1 = Byte.MIN_VALUE;
}
}

protected final void initDSESB1(String s) {
if (!s.trim().isEmpty()) {
DSESB1 = Byte.parseByte(s);
} else {
DSESB1 = Byte.MIN_VALUE;
}
}

protected final void initDSLAMT1(String s) {
if (!s.trim().isEmpty()) {
DSLAMT1 = Integer.parseInt(s);
} else {
DSLAMT1 = Integer.MIN_VALUE;
}
}

protected final void initDSLAMT1_I(String s) {
if (!s.trim().isEmpty()) {
DSLAMT1_I = Integer.parseInt(s);
} else {
DSLAMT1_I = Integer.MIN_VALUE;
}
}

protected final void initDSLAMT1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DSLAMT1_IFLAG = false;
}
}

protected final void initDSLEST1(String s) {
if (!s.trim().isEmpty()) {
DSLEST1 = Byte.parseByte(s);
} else {
DSLEST1 = Byte.MIN_VALUE;
}
}

protected final void initDSLPAY1(String s) {
if (!s.trim().isEmpty()) {
DSLPAY1 = Byte.parseByte(s);
} else {
DSLPAY1 = Byte.MIN_VALUE;
}
}

protected final void initDSNAM1(String s) {
if (!s.trim().isEmpty()) {
DSNAM1 = Byte.parseByte(s);
} else {
DSNAM1 = Byte.MIN_VALUE;
}
}

protected final void initDSNUM2(String s) {
if (!s.trim().isEmpty()) {
DSNUM2 = Byte.parseByte(s);
} else {
DSNUM2 = Byte.MIN_VALUE;
}
}

protected final void initDSPER1(String s) {
if (!s.trim().isEmpty()) {
DSPER1 = Byte.parseByte(s);
} else {
DSPER1 = Byte.MIN_VALUE;
}
}

protected final void initDSPER3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DSPER3 = false;
}
}

protected final void initDSREC1(String s) {
if (!s.trim().isEmpty()) {
DSREC1 = Byte.parseByte(s);
} else {
DSREC1 = Byte.MIN_VALUE;
}
}

protected final void initDVACCINANNUAL(String s) {
if (!s.trim().isEmpty()) {
DVACCINANNUAL = Integer.parseInt(s);
} else {
DVACCINANNUAL = Integer.MIN_VALUE;
}
}

protected final void initDVAGE4(String s) {
if (!s.trim().isEmpty()) {
DVAGE4 = Byte.parseByte(s);
} else {
DVAGE4 = Byte.MIN_VALUE;
}
}

protected final void initDVAGE5(String s) {
if (!s.trim().isEmpty()) {
DVAGE5 = Byte.parseByte(s);
} else {
DVAGE5 = Byte.MIN_VALUE;
}
}

protected final void initDVAGE6(String s) {
if (!s.trim().isEmpty()) {
DVAGE6 = Byte.parseByte(s);
} else {
DVAGE6 = Byte.MIN_VALUE;
}
}

protected final void initDVAGE7(String s) {
if (!s.trim().isEmpty()) {
DVAGE7 = Byte.parseByte(s);
} else {
DVAGE7 = Byte.MIN_VALUE;
}
}

protected final void initDVAGE9(String s) {
if (!s.trim().isEmpty()) {
DVAGE9 = Byte.parseByte(s);
} else {
DVAGE9 = Byte.MIN_VALUE;
}
}

protected final void initDVBLDDEBT(String s) {
if (!s.trim().isEmpty()) {
DVBLDDEBT = Integer.parseInt(s);
} else {
DVBLDDEBT = Integer.MIN_VALUE;
}
}

protected final void initDVBLDVAL(String s) {
if (!s.trim().isEmpty()) {
DVBLDVAL = Integer.parseInt(s);
} else {
DVBLDVAL = Integer.MIN_VALUE;
}
}

protected final void initDVBLTDEBT(String s) {
if (!s.trim().isEmpty()) {
DVBLTDEBT = Integer.parseInt(s);
} else {
DVBLTDEBT = Integer.MIN_VALUE;
}
}

protected final void initDVBLTVAL(String s) {
if (!s.trim().isEmpty()) {
DVBLTVAL = Integer.parseInt(s);
} else {
DVBLTVAL = Integer.MIN_VALUE;
}
}

protected final void initDVBTOGANNUAL(String s) {
if (!s.trim().isEmpty()) {
DVBTOGANNUAL = Double.parseDouble(s);
} else {
DVBTOGANNUAL = Double.NaN;
}
}

protected final void initDVCACRVAL_SUM(String s) {
if (!s.trim().isEmpty()) {
DVCACRVAL_SUM = Double.parseDouble(s);
} else {
DVCACRVAL_SUM = Double.NaN;
}
}

protected final void initDVCAODVAL_SUM(String s) {
if (!s.trim().isEmpty()) {
DVCAODVAL_SUM = Double.parseDouble(s);
} else {
DVCAODVAL_SUM = Double.NaN;
}
}

protected final void initDVCAVAL_SUM(String s) {
if (!s.trim().isEmpty()) {
DVCAVAL_SUM = Double.parseDouble(s);
} else {
DVCAVAL_SUM = Double.NaN;
}
}

protected final void initDVCCARDNUM_I(String s) {
if (!s.trim().isEmpty()) {
DVCCARDNUM_I = Byte.parseByte(s);
} else {
DVCCARDNUM_I = Byte.MIN_VALUE;
}
}

protected final void initDVCCARDNUM_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVCCARDNUM_IFLAG = false;
}
}

protected final void initDVCCARDYN_I(String s) {
if (!s.trim().isEmpty()) {
DVCCARDYN_I = Byte.parseByte(s);
} else {
DVCCARDYN_I = Byte.MIN_VALUE;
}
}

protected final void initDVCCARDYN_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVCCARDYN_IFLAG = false;
}
}

protected final void initDVCOINV4(String s) {
if (!s.trim().isEmpty()) {
DVCOINV4 = Short.parseShort(s);
} else {
DVCOINV4 = Short.MIN_VALUE;
}
}

protected final void initDVCOINV5(String s) {
if (!s.trim().isEmpty()) {
DVCOINV5 = Short.parseShort(s);
} else {
DVCOINV5 = Short.MIN_VALUE;
}
}

protected final void initDVDBINC4(String s) {
if (!s.trim().isEmpty()) {
DVDBINC4 = Integer.parseInt(s);
} else {
DVDBINC4 = Integer.MIN_VALUE;
}
}

protected final void initDVDBINC5(String s) {
if (!s.trim().isEmpty()) {
DVDBINC5 = Short.parseShort(s);
} else {
DVDBINC5 = Short.MIN_VALUE;
}
}

protected final void initDVDBINC6(String s) {
if (!s.trim().isEmpty()) {
DVDBINC6 = Short.parseShort(s);
} else {
DVDBINC6 = Short.MIN_VALUE;
}
}

protected final void initDVDBLUMP4(String s) {
if (!s.trim().isEmpty()) {
DVDBLUMP4 = Double.parseDouble(s);
} else {
DVDBLUMP4 = Double.NaN;
}
}

protected final void initDVDBLUMP5(String s) {
if (!s.trim().isEmpty()) {
DVDBLUMP5 = Double.parseDouble(s);
} else {
DVDBLUMP5 = Double.NaN;
}
}

protected final void initDVDBLUMP6(String s) {
if (!s.trim().isEmpty()) {
DVDBLUMP6 = Integer.parseInt(s);
} else {
DVDBLUMP6 = Integer.MIN_VALUE;
}
}

protected final void initDVDBOPEN1T(String s) {
if (!s.trim().isEmpty()) {
DVDBOPEN1T = Double.parseDouble(s);
} else {
DVDBOPEN1T = Double.NaN;
}
}

protected final void initDVDBOPEN2T(String s) {
if (!s.trim().isEmpty()) {
DVDBOPEN2T = Double.parseDouble(s);
} else {
DVDBOPEN2T = Double.NaN;
}
}

protected final void initDVDHPOWE1(String s) {
if (!s.trim().isEmpty()) {
DVDHPOWE1 = Short.parseShort(s);
} else {
DVDHPOWE1 = Short.MIN_VALUE;
}
}

protected final void initDVDLOWE1(String s) {
if (!s.trim().isEmpty()) {
DVDLOWE1 = Short.parseShort(s);
} else {
DVDLOWE1 = Short.MIN_VALUE;
}
}

protected final void initDVDMOOWE1(String s) {
if (!s.trim().isEmpty()) {
DVDMOOWE1 = Short.parseShort(s);
} else {
DVDMOOWE1 = Short.MIN_VALUE;
}
}

protected final void initDVEMPNO(String s) {
if (!s.trim().isEmpty()) {
DVEMPNO = Byte.parseByte(s);
} else {
DVEMPNO = Byte.MIN_VALUE;
}
}

protected final void initDVFESHARES_SUM(String s) {
if (!s.trim().isEmpty()) {
DVFESHARES_SUM = Integer.parseInt(s);
} else {
DVFESHARES_SUM = Integer.MIN_VALUE;
}
}

protected final void initDVFFASSETS_SUM(String s) {
if (!s.trim().isEmpty()) {
DVFFASSETS_SUM = Double.parseDouble(s);
} else {
DVFFASSETS_SUM = Double.NaN;
}
}

protected final void initDVFINFVAL_SUM(String s) {
if (!s.trim().isEmpty()) {
DVFINFVAL_SUM = Integer.parseInt(s);
} else {
DVFINFVAL_SUM = Integer.MIN_VALUE;
}
}

protected final void initDVGIEMP(String s) {
if (!s.trim().isEmpty()) {
DVGIEMP = Integer.parseInt(s);
} else {
DVGIEMP = Integer.MIN_VALUE;
}
}

protected final void initDVGIFTANNUAL(String s) {
if (!s.trim().isEmpty()) {
DVGIFTANNUAL = Integer.parseInt(s);
} else {
DVGIFTANNUAL = Integer.MIN_VALUE;
}
}

protected final void initDVGIINV(String s) {
if (!s.trim().isEmpty()) {
DVGIINV = Integer.parseInt(s);
} else {
DVGIINV = Integer.MIN_VALUE;
}
}

protected final void initDVGIPPEN(String s) {
if (!s.trim().isEmpty()) {
DVGIPPEN = Integer.parseInt(s);
} else {
DVGIPPEN = Integer.MIN_VALUE;
}
}

protected final void initDVGISE(String s) {
if (!s.trim().isEmpty()) {
DVGISE = Integer.parseInt(s);
} else {
DVGISE = Integer.MIN_VALUE;
}
}

protected final void initDVGRSBONAMT(String s) {
if (!s.trim().isEmpty()) {
DVGRSBONAMT = Integer.parseInt(s);
} else {
DVGRSBONAMT = Integer.MIN_VALUE;
}
}

protected final void initDVGRSBONAMT_I(String s) {
if (!s.trim().isEmpty()) {
DVGRSBONAMT_I = Double.parseDouble(s);
} else {
DVGRSBONAMT_I = Double.NaN;
}
}

protected final void initDVGRSBONAMT_IFLAG(String s) {
if (!s.trim().isEmpty()) {
DVGRSBONAMT_IFLAG = Byte.parseByte(s);
} else {
DVGRSBONAMT_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initDVGRSEMPSECJOB(String s) {
if (!s.trim().isEmpty()) {
DVGRSEMPSECJOB = Integer.parseInt(s);
} else {
DVGRSEMPSECJOB = Integer.MIN_VALUE;
}
}

protected final void initDVGRSEMPSECJOB_I(String s) {
if (!s.trim().isEmpty()) {
DVGRSEMPSECJOB_I = Integer.parseInt(s);
} else {
DVGRSEMPSECJOB_I = Integer.MIN_VALUE;
}
}

protected final void initDVGRSEMPSECJOB_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVGRSEMPSECJOB_IFLAG = false;
}
}

protected final void initDVGRSRENTAMTANNUAL(String s) {
if (!s.trim().isEmpty()) {
DVGRSRENTAMTANNUAL = Integer.parseInt(s);
} else {
DVGRSRENTAMTANNUAL = Integer.MIN_VALUE;
}
}

protected final void initDVGRSSESECJOB(String s) {
if (!s.trim().isEmpty()) {
DVGRSSESECJOB = Integer.parseInt(s);
} else {
DVGRSSESECJOB = Integer.MIN_VALUE;
}
}

protected final void initDVGRSSESECJOB_I(String s) {
if (!s.trim().isEmpty()) {
DVGRSSESECJOB_I = Integer.parseInt(s);
} else {
DVGRSSESECJOB_I = Integer.MIN_VALUE;
}
}

protected final void initDVGRSSESECJOB_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVGRSSESECJOB_IFLAG = false;
}
}

protected final void initDVHASHP(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVHASHP = false;
}
}

protected final void initDVHASLF(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVHASLF = false;
}
}

protected final void initDVHASLNAR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVHASLNAR = false;
}
}

protected final void initDVHASMOAR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVHASMOAR = false;
}
}

protected final void initDVHASNLF(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVHASNLF = false;
}
}

protected final void initDVHASNLI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVHASNLI = false;
}
}

protected final void initDVHASPFGRP(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVHASPFGRP = false;
}
}

protected final void initDVHASPFOCC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVHASPFOCC = false;
}
}

protected final void initDVHASPFPRIV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVHASPFPRIV = false;
}
}

protected final void initDVHASPFRAC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVHASPFRAC = false;
}
}

protected final void initDVHASPFSIPP(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVHASPFSIPP = false;
}
}

protected final void initDVHASPLINF(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVHASPLINF = false;
}
}

protected final void initDVHASSLBNK(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVHASSLBNK = false;
}
}

protected final void initDVHASSLC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVHASSLC = false;
}
}

protected final void initDVHRPNUM(String s) {
if (!s.trim().isEmpty()) {
DVHRPNUM = Byte.parseByte(s);
} else {
DVHRPNUM = Byte.MIN_VALUE;
}
}

protected final void initDVHSEDEBT(String s) {
if (!s.trim().isEmpty()) {
DVHSEDEBT = Integer.parseInt(s);
} else {
DVHSEDEBT = Integer.MIN_VALUE;
}
}

protected final void initDVHSEVAL(String s) {
if (!s.trim().isEmpty()) {
DVHSEVAL = Integer.parseInt(s);
} else {
DVHSEVAL = Integer.MIN_VALUE;
}
}

protected final void initDVHSIZE(String s) {
if (!s.trim().isEmpty()) {
DVHSIZE = Byte.parseByte(s);
} else {
DVHSIZE = Byte.MIN_VALUE;
}
}

protected final void initDVILO3A_I(String s) {
if (!s.trim().isEmpty()) {
DVILO3A_I = Byte.parseByte(s);
} else {
DVILO3A_I = Byte.MIN_VALUE;
}
}

protected final void initDVILO3A_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVILO3A_IFLAG = false;
}
}

protected final void initDVINHERITANNUAL(String s) {
if (!s.trim().isEmpty()) {
DVINHERITANNUAL = Integer.parseInt(s);
} else {
DVINHERITANNUAL = Integer.MIN_VALUE;
}
}

protected final void initDVINSV_SUM(String s) {
if (!s.trim().isEmpty()) {
DVINSV_SUM = Integer.parseInt(s);
} else {
DVINSV_SUM = Integer.MIN_VALUE;
}
}

protected final void initDVIRREGOTHANNUAL(String s) {
if (!s.trim().isEmpty()) {
DVIRREGOTHANNUAL = Integer.parseInt(s);
} else {
DVIRREGOTHANNUAL = Integer.MIN_VALUE;
}
}

protected final void initDVISAVAL_SUM(String s) {
if (!s.trim().isEmpty()) {
DVISAVAL_SUM = Integer.parseInt(s);
} else {
DVISAVAL_SUM = Integer.MIN_VALUE;
}
}

protected final void initDVLIFEANNUAL(String s) {
if (!s.trim().isEmpty()) {
DVLIFEANNUAL = Integer.parseInt(s);
} else {
DVLIFEANNUAL = Integer.MIN_VALUE;
}
}

protected final void initDVLOSDEBT(String s) {
if (!s.trim().isEmpty()) {
DVLOSDEBT = Integer.parseInt(s);
} else {
DVLOSDEBT = Integer.MIN_VALUE;
}
}

protected final void initDVLOSVAL(String s) {
if (!s.trim().isEmpty()) {
DVLOSVAL = Integer.parseInt(s);
} else {
DVLOSVAL = Integer.MIN_VALUE;
}
}

protected final void initDVLUKDEBT(String s) {
if (!s.trim().isEmpty()) {
DVLUKDEBT = Integer.parseInt(s);
} else {
DVLUKDEBT = Integer.MIN_VALUE;
}
}

protected final void initDVLUKVAL(String s) {
if (!s.trim().isEmpty()) {
DVLUKVAL = Integer.parseInt(s);
} else {
DVLUKVAL = Integer.MIN_VALUE;
}
}

protected final void initDVLUMPPENANNUAL(String s) {
if (!s.trim().isEmpty()) {
DVLUMPPENANNUAL = Integer.parseInt(s);
} else {
DVLUMPPENANNUAL = Integer.MIN_VALUE;
}
}

protected final void initDVNETBONAMT(String s) {
if (!s.trim().isEmpty()) {
DVNETBONAMT = Integer.parseInt(s);
} else {
DVNETBONAMT = Integer.MIN_VALUE;
}
}

protected final void initDVNETBONAMT_I(String s) {
if (!s.trim().isEmpty()) {
DVNETBONAMT_I = Double.parseDouble(s);
} else {
DVNETBONAMT_I = Double.NaN;
}
}

protected final void initDVNETBONAMT_IFLAG(String s) {
if (!s.trim().isEmpty()) {
DVNETBONAMT_IFLAG = Byte.parseByte(s);
} else {
DVNETBONAMT_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initDVNETEMPSECJOB(String s) {
if (!s.trim().isEmpty()) {
DVNETEMPSECJOB = Integer.parseInt(s);
} else {
DVNETEMPSECJOB = Integer.MIN_VALUE;
}
}

protected final void initDVNETEMPSECJOB_I(String s) {
if (!s.trim().isEmpty()) {
DVNETEMPSECJOB_I = Integer.parseInt(s);
} else {
DVNETEMPSECJOB_I = Integer.MIN_VALUE;
}
}

protected final void initDVNETEMPSECJOB_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVNETEMPSECJOB_IFLAG = false;
}
}

protected final void initDVNETRENTAMTANNUAL(String s) {
if (!s.trim().isEmpty()) {
DVNETRENTAMTANNUAL = Integer.parseInt(s);
} else {
DVNETRENTAMTANNUAL = Integer.MIN_VALUE;
}
}

protected final void initDVNETSESECJOB(String s) {
if (!s.trim().isEmpty()) {
DVNETSESECJOB = Double.parseDouble(s);
} else {
DVNETSESECJOB = Double.NaN;
}
}

protected final void initDVNIEMP(String s) {
if (!s.trim().isEmpty()) {
DVNIEMP = Double.parseDouble(s);
} else {
DVNIEMP = Double.NaN;
}
}

protected final void initDVNIINV(String s) {
if (!s.trim().isEmpty()) {
DVNIINV = Integer.parseInt(s);
} else {
DVNIINV = Integer.MIN_VALUE;
}
}

protected final void initDVNIOTHI(String s) {
if (!s.trim().isEmpty()) {
DVNIOTHI = Integer.parseInt(s);
} else {
DVNIOTHI = Integer.MIN_VALUE;
}
}

protected final void initDVNIPPEN(String s) {
if (!s.trim().isEmpty()) {
DVNIPPEN = Integer.parseInt(s);
} else {
DVNIPPEN = Integer.MIN_VALUE;
}
}

protected final void initDVNISE(String s) {
if (!s.trim().isEmpty()) {
DVNISE = Double.parseDouble(s);
} else {
DVNISE = Double.NaN;
}
}

protected final void initDVNUMBU(String s) {
if (!s.trim().isEmpty()) {
DVNUMBU = Byte.parseByte(s);
} else {
DVNUMBU = Byte.MIN_VALUE;
}
}

protected final void initDVNWFLN_SUM(String s) {
if (!s.trim().isEmpty()) {
DVNWFLN_SUM = Integer.parseInt(s);
} else {
DVNWFLN_SUM = Integer.MIN_VALUE;
}
}

protected final void initDVNWILN_SUM(String s) {
if (!s.trim().isEmpty()) {
DVNWILN_SUM = Integer.parseInt(s);
} else {
DVNWILN_SUM = Integer.MIN_VALUE;
}
}

protected final void initDVOIGEGANNUAL_I(String s) {
if (!s.trim().isEmpty()) {
DVOIGEGANNUAL_I = Integer.parseInt(s);
} else {
DVOIGEGANNUAL_I = Integer.MIN_VALUE;
}
}

protected final void initDVOIGFRANNUAL_I(String s) {
if (!s.trim().isEmpty()) {
DVOIGFRANNUAL_I = Integer.parseInt(s);
} else {
DVOIGFRANNUAL_I = Integer.MIN_VALUE;
}
}

protected final void initDVOIGGTANNUAL_I(String s) {
if (!s.trim().isEmpty()) {
DVOIGGTANNUAL_I = Short.parseShort(s);
} else {
DVOIGGTANNUAL_I = Short.MIN_VALUE;
}
}

protected final void initDVOIGMAANNUAL_I(String s) {
if (!s.trim().isEmpty()) {
DVOIGMAANNUAL_I = Integer.parseInt(s);
} else {
DVOIGMAANNUAL_I = Integer.MIN_VALUE;
}
}

protected final void initDVOIGOEANNUAL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVOIGOEANNUAL_IFLAG = false;
}
}

protected final void initDVOIGOPANNUAL_I(String s) {
if (!s.trim().isEmpty()) {
DVOIGOPANNUAL_I = Integer.parseInt(s);
} else {
DVOIGOPANNUAL_I = Integer.MIN_VALUE;
}
}

protected final void initDVOIGOSANNUAL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVOIGOSANNUAL_IFLAG = false;
}
}

protected final void initDVOIGPPANNUAL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVOIGPPANNUAL_IFLAG = false;
}
}

protected final void initDVOIGROANNUAL_I(String s) {
if (!s.trim().isEmpty()) {
DVOIGROANNUAL_I = Integer.parseInt(s);
} else {
DVOIGROANNUAL_I = Integer.MIN_VALUE;
}
}

protected final void initDVOIGRRANNUAL_I(String s) {
if (!s.trim().isEmpty()) {
DVOIGRRANNUAL_I = Integer.parseInt(s);
} else {
DVOIGRRANNUAL_I = Integer.MIN_VALUE;
}
}

protected final void initDVOINEGANNUAL_I(String s) {
if (!s.trim().isEmpty()) {
DVOINEGANNUAL_I = Integer.parseInt(s);
} else {
DVOINEGANNUAL_I = Integer.MIN_VALUE;
}
}

protected final void initDVOINEGANNUAL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVOINEGANNUAL_IFLAG = false;
}
}

protected final void initDVOINFRANNUAL_I(String s) {
if (!s.trim().isEmpty()) {
DVOINFRANNUAL_I = Integer.parseInt(s);
} else {
DVOINFRANNUAL_I = Integer.MIN_VALUE;
}
}

protected final void initDVOINFRANNUAL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVOINFRANNUAL_IFLAG = false;
}
}

protected final void initDVOINGTANNUAL_I(String s) {
if (!s.trim().isEmpty()) {
DVOINGTANNUAL_I = Short.parseShort(s);
} else {
DVOINGTANNUAL_I = Short.MIN_VALUE;
}
}

protected final void initDVOINGTANNUAL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVOINGTANNUAL_IFLAG = false;
}
}

protected final void initDVOINMAANNUAL_I(String s) {
if (!s.trim().isEmpty()) {
DVOINMAANNUAL_I = Integer.parseInt(s);
} else {
DVOINMAANNUAL_I = Integer.MIN_VALUE;
}
}

protected final void initDVOINMAANNUAL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVOINMAANNUAL_IFLAG = false;
}
}

protected final void initDVOINOPANNUAL_I(String s) {
if (!s.trim().isEmpty()) {
DVOINOPANNUAL_I = Integer.parseInt(s);
} else {
DVOINOPANNUAL_I = Integer.MIN_VALUE;
}
}

protected final void initDVOINOPANNUAL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVOINOPANNUAL_IFLAG = false;
}
}

protected final void initDVOINROANNUAL_I(String s) {
if (!s.trim().isEmpty()) {
DVOINROANNUAL_I = Integer.parseInt(s);
} else {
DVOINROANNUAL_I = Integer.MIN_VALUE;
}
}

protected final void initDVOINROANNUAL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVOINROANNUAL_IFLAG = false;
}
}

protected final void initDVOINRRANNUAL_I(String s) {
if (!s.trim().isEmpty()) {
DVOINRRANNUAL_I = Integer.parseInt(s);
} else {
DVOINRRANNUAL_I = Integer.MIN_VALUE;
}
}

protected final void initDVOINRRANNUAL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVOINRRANNUAL_IFLAG = false;
}
}

protected final void initDVOPRDEBT(String s) {
if (!s.trim().isEmpty()) {
DVOPRDEBT = Integer.parseInt(s);
} else {
DVOPRDEBT = Integer.MIN_VALUE;
}
}

protected final void initDVOPRVAL(String s) {
if (!s.trim().isEmpty()) {
DVOPRVAL = Integer.parseInt(s);
} else {
DVOPRVAL = Integer.MIN_VALUE;
}
}

protected final void initDVOTHINSANNUAL(String s) {
if (!s.trim().isEmpty()) {
DVOTHINSANNUAL = Integer.parseInt(s);
} else {
DVOTHINSANNUAL = Integer.MIN_VALUE;
}
}

protected final void initDVPENINC1(String s) {
if (!s.trim().isEmpty()) {
DVPENINC1 = Double.parseDouble(s);
} else {
DVPENINC1 = Double.NaN;
}
}

protected final void initDVPENINC2(String s) {
if (!s.trim().isEmpty()) {
DVPENINC2 = Double.parseDouble(s);
} else {
DVPENINC2 = Double.NaN;
}
}

protected final void initDVREDUNANNUAL(String s) {
if (!s.trim().isEmpty()) {
DVREDUNANNUAL = Integer.parseInt(s);
} else {
DVREDUNANNUAL = Integer.MIN_VALUE;
}
}

protected final void initDVRENTAMTANNUAL_I(String s) {
if (!s.trim().isEmpty()) {
DVRENTAMTANNUAL_I = Integer.parseInt(s);
} else {
DVRENTAMTANNUAL_I = Integer.MIN_VALUE;
}
}

protected final void initDVRENTAMTANNUAL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVRENTAMTANNUAL_IFLAG = false;
}
}

protected final void initDVSAME(String s) {
if (!s.trim().isEmpty()) {
DVSAME = Byte.parseByte(s);
} else {
DVSAME = Byte.MIN_VALUE;
}
}

protected final void initDVSAVAL_SUM(String s) {
if (!s.trim().isEmpty()) {
DVSAVAL_SUM = Double.parseDouble(s);
} else {
DVSAVAL_SUM = Double.NaN;
}
}

protected final void initDVSCARDNUM_I(String s) {
if (!s.trim().isEmpty()) {
DVSCARDNUM_I = Byte.parseByte(s);
} else {
DVSCARDNUM_I = Byte.MIN_VALUE;
}
}

protected final void initDVSCARDNUM_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVSCARDNUM_IFLAG = false;
}
}

protected final void initDVSCARDYN_I(String s) {
if (!s.trim().isEmpty()) {
DVSCARDYN_I = Byte.parseByte(s);
} else {
DVSCARDYN_I = Byte.MIN_VALUE;
}
}

protected final void initDVSCARDYN_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVSCARDYN_IFLAG = false;
}
}

protected final void initDVSEGRSPAY(String s) {
if (!s.trim().isEmpty()) {
DVSEGRSPAY = Integer.parseInt(s);
} else {
DVSEGRSPAY = Integer.MIN_VALUE;
}
}

protected final void initDVSEGRSPAY_I(String s) {
if (!s.trim().isEmpty()) {
DVSEGRSPAY_I = Integer.parseInt(s);
} else {
DVSEGRSPAY_I = Integer.MIN_VALUE;
}
}

protected final void initDVSEGRSPAY_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVSEGRSPAY_IFLAG = false;
}
}

protected final void initDVSENETPAY(String s) {
if (!s.trim().isEmpty()) {
DVSENETPAY = Integer.parseInt(s);
} else {
DVSENETPAY = Integer.MIN_VALUE;
}
}

protected final void initDVSENETPAY_I(String s) {
if (!s.trim().isEmpty()) {
DVSENETPAY_I = Integer.parseInt(s);
} else {
DVSENETPAY_I = Integer.MIN_VALUE;
}
}

protected final void initDVSENETPAY_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVSENETPAY_IFLAG = false;
}
}

protected final void initDVSENO(String s) {
if (!s.trim().isEmpty()) {
DVSENO = Byte.parseByte(s);
} else {
DVSENO = Byte.MIN_VALUE;
}
}

protected final void initDVSEPANNUAL01(String s) {
if (!s.trim().isEmpty()) {
DVSEPANNUAL01 = Double.parseDouble(s);
} else {
DVSEPANNUAL01 = Double.NaN;
}
}

protected final void initDVSEPANNUAL02(String s) {
if (!s.trim().isEmpty()) {
DVSEPANNUAL02 = Double.parseDouble(s);
} else {
DVSEPANNUAL02 = Double.NaN;
}
}

protected final void initDVSEPANNUAL03(String s) {
if (!s.trim().isEmpty()) {
DVSEPANNUAL03 = Double.parseDouble(s);
} else {
DVSEPANNUAL03 = Double.NaN;
}
}

protected final void initDVSEPANNUAL04(String s) {
if (!s.trim().isEmpty()) {
DVSEPANNUAL04 = Short.parseShort(s);
} else {
DVSEPANNUAL04 = Short.MIN_VALUE;
}
}

protected final void initDVSEPANNUAL05(String s) {
if (!s.trim().isEmpty()) {
DVSEPANNUAL05 = Short.parseShort(s);
} else {
DVSEPANNUAL05 = Short.MIN_VALUE;
}
}

protected final void initDVSEPANNUAL06(String s) {
if (!s.trim().isEmpty()) {
DVSEPANNUAL06 = Short.parseShort(s);
} else {
DVSEPANNUAL06 = Short.MIN_VALUE;
}
}

protected final void initDVSEPANNUAL07(String s) {
if (!s.trim().isEmpty()) {
DVSEPANNUAL07 = Short.parseShort(s);
} else {
DVSEPANNUAL07 = Short.MIN_VALUE;
}
}

protected final void initDVSEPANNUAL08(String s) {
if (!s.trim().isEmpty()) {
DVSEPANNUAL08 = Short.parseShort(s);
} else {
DVSEPANNUAL08 = Short.MIN_VALUE;
}
}

protected final void initDVSPS(String s) {
if (!s.trim().isEmpty()) {
DVSPS = Double.parseDouble(s);
} else {
DVSPS = Double.NaN;
}
}

protected final void initDVWID(String s) {
if (!s.trim().isEmpty()) {
DVWID = Double.parseDouble(s);
} else {
DVWID = Double.NaN;
}
}

protected final void initDVWINANNUAL(String s) {
if (!s.trim().isEmpty()) {
DVWINANNUAL = Integer.parseInt(s);
} else {
DVWINANNUAL = Integer.MIN_VALUE;
}
}

protected final void initDWELLTYP(String s) {
if (!s.trim().isEmpty()) {
DWELLTYP = Byte.parseByte(s);
} else {
DWELLTYP = Byte.MIN_VALUE;
}
}

protected final void initEMPNO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
EMPNO = false;
}
}

protected final void initES2000(String s) {
if (!s.trim().isEmpty()) {
ES2000 = Byte.parseByte(s);
} else {
ES2000 = Byte.MIN_VALUE;
}
}

protected final void initEVERWK_I(String s) {
if (!s.trim().isEmpty()) {
EVERWK_I = Byte.parseByte(s);
} else {
EVERWK_I = Byte.MIN_VALUE;
}
}

protected final void initEVERWK_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
EVERWK_IFLAG = false;
}
}

protected final void initEYE1(String s) {
if (!s.trim().isEmpty()) {
EYE1 = Byte.parseByte(s);
} else {
EYE1 = Byte.MIN_VALUE;
}
}

protected final void initEYE2(String s) {
if (!s.trim().isEmpty()) {
EYE2 = Byte.parseByte(s);
} else {
EYE2 = Byte.MIN_VALUE;
}
}

protected final void initEYE3(String s) {
if (!s.trim().isEmpty()) {
EYE3 = Byte.parseByte(s);
} else {
EYE3 = Byte.MIN_VALUE;
}
}

protected final void initEYE4(String s) {
if (!s.trim().isEmpty()) {
EYE4 = Byte.parseByte(s);
} else {
EYE4 = Byte.MIN_VALUE;
}
}

protected final void initEYE5(String s) {
if (!s.trim().isEmpty()) {
EYE5 = Byte.parseByte(s);
} else {
EYE5 = Byte.MIN_VALUE;
}
}

protected final void initEYE6(String s) {
if (!s.trim().isEmpty()) {
EYE6 = Byte.parseByte(s);
} else {
EYE6 = Byte.MIN_VALUE;
}
}

protected final void initEYE7(String s) {
if (!s.trim().isEmpty()) {
EYE7 = Byte.parseByte(s);
} else {
EYE7 = Byte.MIN_VALUE;
}
}

protected final void initEYE8(String s) {
if (!s.trim().isEmpty()) {
EYE8 = Byte.parseByte(s);
} else {
EYE8 = Byte.MIN_VALUE;
}
}

protected final void initFBFAED(String s) {
if (!s.trim().isEmpty()) {
FBFAED = Byte.parseByte(s);
} else {
FBFAED = Byte.MIN_VALUE;
}
}

protected final void initFBMOED(String s) {
if (!s.trim().isEmpty()) {
FBMOED = Byte.parseByte(s);
} else {
FBMOED = Byte.MIN_VALUE;
}
}

protected final void initFBSIBS(String s) {
if (!s.trim().isEmpty()) {
FBSIBS = Byte.parseByte(s);
} else {
FBSIBS = Byte.MIN_VALUE;
}
}

protected final void initFBSITU(String s) {
if (!s.trim().isEmpty()) {
FBSITU = Byte.parseByte(s);
} else {
FBSITU = Byte.MIN_VALUE;
}
}

protected final void initFBTEN(String s) {
if (!s.trim().isEmpty()) {
FBTEN = Byte.parseByte(s);
} else {
FBTEN = Byte.MIN_VALUE;
}
}

protected final void initFCISAWD(String s) {
if (!s.trim().isEmpty()) {
FCISAWD = Byte.parseByte(s);
} else {
FCISAWD = Byte.MIN_VALUE;
}
}

protected final void initFCISCE(String s) {
if (!s.trim().isEmpty()) {
FCISCE = Byte.parseByte(s);
} else {
FCISCE = Byte.MIN_VALUE;
}
}

protected final void initFCIWDAB(String s) {
if (!s.trim().isEmpty()) {
FCIWDAB = Byte.parseByte(s);
} else {
FCIWDAB = Byte.MIN_VALUE;
}
}

protected final void initFCIWNUM(String s) {
if (!s.trim().isEmpty()) {
FCIWNUM = Byte.parseByte(s);
} else {
FCIWNUM = Byte.MIN_VALUE;
}
}

protected final void initFINCV_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
FINCV_IFLAG = false;
}
}

protected final void initFINVTY11_I(String s) {
if (!s.trim().isEmpty()) {
FINVTY11_I = Byte.parseByte(s);
} else {
FINVTY11_I = Byte.MIN_VALUE;
}
}

protected final void initFNDCASH1(String s) {
if (!s.trim().isEmpty()) {
FNDCASH1 = Byte.parseByte(s);
} else {
FNDCASH1 = Byte.MIN_VALUE;
}
}

protected final void initFNDCASH2(String s) {
if (!s.trim().isEmpty()) {
FNDCASH2 = Byte.parseByte(s);
} else {
FNDCASH2 = Byte.MIN_VALUE;
}
}

protected final void initFNDCASH3(String s) {
if (!s.trim().isEmpty()) {
FNDCASH3 = Byte.parseByte(s);
} else {
FNDCASH3 = Byte.MIN_VALUE;
}
}

protected final void initFNDCASH4(String s) {
if (!s.trim().isEmpty()) {
FNDCASH4 = Byte.parseByte(s);
} else {
FNDCASH4 = Byte.MIN_VALUE;
}
}

protected final void initFNDCASH5(String s) {
if (!s.trim().isEmpty()) {
FNDCASH5 = Byte.parseByte(s);
} else {
FNDCASH5 = Byte.MIN_VALUE;
}
}

protected final void initFRSTSCH(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
FRSTSCH = false;
}
}

protected final void initFSAVAB(String s) {
if (!s.trim().isEmpty()) {
FSAVAB = Byte.parseByte(s);
} else {
FSAVAB = Byte.MIN_VALUE;
}
}

protected final void initFSAVED(String s) {
if (!s.trim().isEmpty()) {
FSAVED = Byte.parseByte(s);
} else {
FSAVED = Byte.MIN_VALUE;
}
}

protected final void initFSTYPIN4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
FSTYPIN4 = false;
}
}

protected final void initFTHECST(String s) {
if (!s.trim().isEmpty()) {
FTHECST = Byte.parseByte(s);
} else {
FTHECST = Byte.MIN_VALUE;
}
}

protected final void initFTSTUD(String s) {
if (!s.trim().isEmpty()) {
FTSTUD = Byte.parseByte(s);
} else {
FTSTUD = Byte.MIN_VALUE;
}
}

protected final void initFWITHD(String s) {
if (!s.trim().isEmpty()) {
FWITHD = Byte.parseByte(s);
} else {
FWITHD = Byte.MIN_VALUE;
}
}

protected final void initGROSSPER(String s) {
if (!s.trim().isEmpty()) {
GROSSPER = Byte.parseByte(s);
} else {
GROSSPER = Byte.MIN_VALUE;
}
}

protected final void initGRSAMK(String s) {
if (!s.trim().isEmpty()) {
GRSAMK = Byte.parseByte(s);
} else {
GRSAMK = Byte.MIN_VALUE;
}
}

protected final void initGRSEESM(String s) {
if (!s.trim().isEmpty()) {
GRSEESM = Byte.parseByte(s);
} else {
GRSEESM = Byte.MIN_VALUE;
}
}

protected final void initGRSEESW(String s) {
if (!s.trim().isEmpty()) {
GRSEESW = Byte.parseByte(s);
} else {
GRSEESW = Byte.MIN_VALUE;
}
}

protected final void initGRSPAYEMPORSE(String s) {
if (!s.trim().isEmpty()) {
GRSPAYEMPORSE = Integer.parseInt(s);
} else {
GRSPAYEMPORSE = Integer.MIN_VALUE;
}
}

protected final void initGSTDNW(String s) {
if (!s.trim().isEmpty()) {
GSTDNW = Byte.parseByte(s);
} else {
GSTDNW = Byte.MIN_VALUE;
}
}

protected final void initHAPPY(String s) {
if (!s.trim().isEmpty()) {
HAPPY = Byte.parseByte(s);
} else {
HAPPY = Byte.MIN_VALUE;
}
}

protected final void initHASSHAC(String s) {
if (!s.trim().isEmpty()) {
HASSHAC = Byte.parseByte(s);
} else {
HASSHAC = Byte.MIN_VALUE;
}
}

protected final void initHFINL_SUM(String s) {
if (!s.trim().isEmpty()) {
HFINL_SUM = Double.parseDouble(s);
} else {
HFINL_SUM = Double.NaN;
}
}

protected final void initHFINW_EXCENDW_SUM(String s) {
if (!s.trim().isEmpty()) {
HFINW_EXCENDW_SUM = Double.parseDouble(s);
} else {
HFINW_EXCENDW_SUM = Double.NaN;
}
}

protected final void initHHLDR(String s) {
if (!s.trim().isEmpty()) {
HHLDR = Byte.parseByte(s);
} else {
HHLDR = Byte.MIN_VALUE;
}
}

protected final void initHIHNUM(String s) {
if (!s.trim().isEmpty()) {
HIHNUM = Byte.parseByte(s);
} else {
HIHNUM = Byte.MIN_VALUE;
}
}

protected final void initHOUSGDSOST(String s) {
if (!s.trim().isEmpty()) {
HOUSGDSOST = Integer.parseInt(s);
} else {
HOUSGDSOST = Integer.MIN_VALUE;
}
}

protected final void initHOUT(String s) {
if (!s.trim().isEmpty()) {
HOUT = Short.parseShort(s);
} else {
HOUT = Short.MIN_VALUE;
}
}

protected final void initHPARR_SUM(String s) {
if (!s.trim().isEmpty()) {
HPARR_SUM = Short.parseShort(s);
} else {
HPARR_SUM = Short.MIN_VALUE;
}
}

protected final void initHPLFT1(String s) {
if (!s.trim().isEmpty()) {
HPLFT1 = Double.parseDouble(s);
} else {
HPLFT1 = Double.NaN;
}
}

protected final void initHPNMN1(String s) {
if (!s.trim().isEmpty()) {
HPNMN1 = Byte.parseByte(s);
} else {
HPNMN1 = Byte.MIN_VALUE;
}
}

protected final void initHPNMN2(String s) {
if (!s.trim().isEmpty()) {
HPNMN2 = Byte.parseByte(s);
} else {
HPNMN2 = Byte.MIN_VALUE;
}
}

protected final void initHPNYR1(String s) {
if (!s.trim().isEmpty()) {
HPNYR1 = Byte.parseByte(s);
} else {
HPNYR1 = Byte.MIN_VALUE;
}
}

protected final void initHPNYR2(String s) {
if (!s.trim().isEmpty()) {
HPNYR2 = Byte.parseByte(s);
} else {
HPNYR2 = Byte.MIN_VALUE;
}
}

protected final void initHPROX(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HPROX = false;
}
}

protected final void initHRPPART(String s) {
if (!s.trim().isEmpty()) {
HRPPART = Byte.parseByte(s);
} else {
HRPPART = Byte.MIN_VALUE;
}
}

protected final void initIFBANKACC(String s) {
if (!s.trim().isEmpty()) {
IFBANKACC = Byte.parseByte(s);
} else {
IFBANKACC = Byte.MIN_VALUE;
}
}

protected final void initIGIFVAL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IGIFVAL_IFLAG = false;
}
}

protected final void initIHRCNUM_I(String s) {
if (!s.trim().isEmpty()) {
IHRCNUM_I = Byte.parseByte(s);
} else {
IHRCNUM_I = Byte.MIN_VALUE;
}
}

protected final void initIHRCNUM_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IHRCNUM_IFLAG = false;
}
}

protected final void initIHRECNT_I(String s) {
if (!s.trim().isEmpty()) {
IHRECNT_I = Byte.parseByte(s);
} else {
IHRECNT_I = Byte.MIN_VALUE;
}
}

protected final void initIHRECNT_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IHRECNT_IFLAG = false;
}
}

protected final void initIHSE10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IHSE10 = false;
}
}

protected final void initIHSE11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IHSE11 = false;
}
}

protected final void initIHSE12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IHSE12 = false;
}
}

protected final void initIHSE3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IHSE3 = false;
}
}

protected final void initIHSE8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IHSE8 = false;
}
}

protected final void initIHSE9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IHSE9 = false;
}
}

protected final void initILACC_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
ILACC_IFLAG = false;
}
}

protected final void initILGIFT_I(String s) {
if (!s.trim().isEmpty()) {
ILGIFT_I = Byte.parseByte(s);
} else {
ILGIFT_I = Byte.MIN_VALUE;
}
}

protected final void initILGIFT_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
ILGIFT_IFLAG = false;
}
}

protected final void initILIFB_I(String s) {
if (!s.trim().isEmpty()) {
ILIFB_I = Byte.parseByte(s);
} else {
ILIFB_I = Byte.MIN_VALUE;
}
}

protected final void initILIFB_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
ILIFB_IFLAG = false;
}
}

protected final void initILIFE_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
ILIFE_IFLAG = false;
}
}

protected final void initILINS_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
ILINS_IFLAG = false;
}
}

protected final void initILNPBAM(String s) {
if (!s.trim().isEmpty()) {
ILNPBAM = Short.parseShort(s);
} else {
ILNPBAM = Short.MIN_VALUE;
}
}

protected final void initILNPBK(String s) {
if (!s.trim().isEmpty()) {
ILNPBK = Byte.parseByte(s);
} else {
ILNPBK = Byte.MIN_VALUE;
}
}

protected final void initILNUSE01(String s) {
if (!s.trim().isEmpty()) {
ILNUSE01 = Byte.parseByte(s);
} else {
ILNUSE01 = Byte.MIN_VALUE;
}
}

protected final void initILNUSE02(String s) {
if (!s.trim().isEmpty()) {
ILNUSE02 = Byte.parseByte(s);
} else {
ILNUSE02 = Byte.MIN_VALUE;
}
}

protected final void initILNUSE03(String s) {
if (!s.trim().isEmpty()) {
ILNUSE03 = Byte.parseByte(s);
} else {
ILNUSE03 = Byte.MIN_VALUE;
}
}

protected final void initILNUSE04(String s) {
if (!s.trim().isEmpty()) {
ILNUSE04 = Byte.parseByte(s);
} else {
ILNUSE04 = Byte.MIN_VALUE;
}
}

protected final void initILNUSE05(String s) {
if (!s.trim().isEmpty()) {
ILNUSE05 = Byte.parseByte(s);
} else {
ILNUSE05 = Byte.MIN_VALUE;
}
}

protected final void initILNVAL(String s) {
if (!s.trim().isEmpty()) {
ILNVAL = Integer.parseInt(s);
} else {
ILNVAL = Integer.MIN_VALUE;
}
}

protected final void initILNVALB(String s) {
if (!s.trim().isEmpty()) {
ILNVALB = Byte.parseByte(s);
} else {
ILNVALB = Byte.MIN_VALUE;
}
}

protected final void initILOAN(String s) {
if (!s.trim().isEmpty()) {
ILOAN = Byte.parseByte(s);
} else {
ILOAN = Byte.MIN_VALUE;
}
}

protected final void initILOTH_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
ILOTH_IFLAG = false;
}
}

protected final void initILRED_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
ILRED_IFLAG = false;
}
}

protected final void initILUMP_I(String s) {
if (!s.trim().isEmpty()) {
ILUMP_I = Byte.parseByte(s);
} else {
ILUMP_I = Byte.MIN_VALUE;
}
}

protected final void initILUMP_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
ILUMP_IFLAG = false;
}
}

protected final void initILUMTY1_I(String s) {
if (!s.trim().isEmpty()) {
ILUMTY1_I = Byte.parseByte(s);
} else {
ILUMTY1_I = Byte.MIN_VALUE;
}
}

protected final void initILUMTY1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
ILUMTY1_IFLAG = false;
}
}

protected final void initILUPP_I(String s) {
if (!s.trim().isEmpty()) {
ILUPP_I = Integer.parseInt(s);
} else {
ILUPP_I = Integer.MIN_VALUE;
}
}

protected final void initILUPP_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
ILUPP_IFLAG = false;
}
}

protected final void initILWIN_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
ILWIN_IFLAG = false;
}
}

protected final void initINCDROP(String s) {
if (!s.trim().isEmpty()) {
INCDROP = Byte.parseByte(s);
} else {
INCDROP = Byte.MIN_VALUE;
}
}

protected final void initINDFREQ(String s) {
if (!s.trim().isEmpty()) {
INDFREQ = Byte.parseByte(s);
} else {
INDFREQ = Byte.MIN_VALUE;
}
}

protected final void initIVAL1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IVAL1_IFLAG = false;
}
}

protected final void initIVAL2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IVAL2_IFLAG = false;
}
}

protected final void initIVAL3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IVAL3_IFLAG = false;
}
}

protected final void initIVALB1(String s) {
if (!s.trim().isEmpty()) {
IVALB1 = Byte.parseByte(s);
} else {
IVALB1 = Byte.MIN_VALUE;
}
}

protected final void initIWAT6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IWAT6 = false;
}
}

protected final void initJBAWAY_I(String s) {
if (!s.trim().isEmpty()) {
JBAWAY_I = Byte.parseByte(s);
} else {
JBAWAY_I = Byte.MIN_VALUE;
}
}

protected final void initJBAWAY_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
JBAWAY_IFLAG = false;
}
}

protected final void initKNOHOWMUCH(String s) {
if (!s.trim().isEmpty()) {
KNOHOWMUCH = Byte.parseByte(s);
} else {
KNOHOWMUCH = Byte.MIN_VALUE;
}
}

protected final void initKNOWBALANCE(String s) {
if (!s.trim().isEmpty()) {
KNOWBALANCE = Byte.parseByte(s);
} else {
KNOWBALANCE = Byte.MIN_VALUE;
}
}

protected final void initLNARR_SUM(String s) {
if (!s.trim().isEmpty()) {
LNARR_SUM = Short.parseShort(s);
} else {
LNARR_SUM = Short.MIN_VALUE;
}
}

protected final void initLNLFT1(String s) {
if (!s.trim().isEmpty()) {
LNLFT1 = Double.parseDouble(s);
} else {
LNLFT1 = Double.NaN;
}
}

protected final void initLOOKED_I(String s) {
if (!s.trim().isEmpty()) {
LOOKED_I = Byte.parseByte(s);
} else {
LOOKED_I = Byte.MIN_VALUE;
}
}

protected final void initLOOKED_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
LOOKED_IFLAG = false;
}
}

protected final void initMARBEF_I(String s) {
if (!s.trim().isEmpty()) {
MARBEF_I = Byte.parseByte(s);
} else {
MARBEF_I = Byte.MIN_VALUE;
}
}

protected final void initMARBEF_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
MARBEF_IFLAG = false;
}
}

protected final void initMARST(String s) {
if (!s.trim().isEmpty()) {
MARST = Byte.parseByte(s);
} else {
MARST = Byte.MIN_VALUE;
}
}

protected final void initMNTHSCAPE(String s) {
if (!s.trim().isEmpty()) {
MNTHSCAPE = Double.parseDouble(s);
} else {
MNTHSCAPE = Double.NaN;
}
}

protected final void initMOARR_SUM(String s) {
if (!s.trim().isEmpty()) {
MOARR_SUM = Short.parseShort(s);
} else {
MOARR_SUM = Short.MIN_VALUE;
}
}

protected final void initMOLFT1(String s) {
if (!s.trim().isEmpty()) {
MOLFT1 = Double.parseDouble(s);
} else {
MOLFT1 = Double.NaN;
}
}

protected final void initMRECJB(String s) {
if (!s.trim().isEmpty()) {
MRECJB = Byte.parseByte(s);
} else {
MRECJB = Byte.MIN_VALUE;
}
}

protected final void initMTHECST(String s) {
if (!s.trim().isEmpty()) {
MTHECST = Byte.parseByte(s);
} else {
MTHECST = Byte.MIN_VALUE;
}
}

protected final void initNEWFCMX(String s) {
if (!s.trim().isEmpty()) {
NEWFCMX = Byte.parseByte(s);
} else {
NEWFCMX = Byte.MIN_VALUE;
}
}

protected final void initNEWGIFT(String s) {
if (!s.trim().isEmpty()) {
NEWGIFT = Byte.parseByte(s);
} else {
NEWGIFT = Byte.MIN_VALUE;
}
}

protected final void initNOUNITS(String s) {
if (!s.trim().isEmpty()) {
NOUNITS = Byte.parseByte(s);
} else {
NOUNITS = Byte.MIN_VALUE;
}
}

protected final void initNSLBNK1(String s) {
if (!s.trim().isEmpty()) {
NSLBNK1 = Integer.parseInt(s);
} else {
NSLBNK1 = Integer.MIN_VALUE;
}
}

protected final void initNSLBNK2(String s) {
if (!s.trim().isEmpty()) {
NSLBNK2 = Short.parseShort(s);
} else {
NSLBNK2 = Short.MIN_VALUE;
}
}

protected final void initNSLBNK3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
NSLBNK3 = false;
}
}

protected final void initNSLC1(String s) {
if (!s.trim().isEmpty()) {
NSLC1 = Integer.parseInt(s);
} else {
NSLC1 = Integer.MIN_VALUE;
}
}

protected final void initNSLC2(String s) {
if (!s.trim().isEmpty()) {
NSLC2 = Integer.parseInt(s);
} else {
NSLC2 = Integer.MIN_VALUE;
}
}

protected final void initNSLC3(String s) {
if (!s.trim().isEmpty()) {
NSLC3 = Short.parseShort(s);
} else {
NSLC3 = Short.MIN_VALUE;
}
}

protected final void initNUMADULT(String s) {
if (!s.trim().isEmpty()) {
NUMADULT = Byte.parseByte(s);
} else {
NUMADULT = Byte.MIN_VALUE;
}
}

protected final void initNUMCH18(String s) {
if (!s.trim().isEmpty()) {
NUMCH18 = Byte.parseByte(s);
} else {
NUMCH18 = Byte.MIN_VALUE;
}
}

protected final void initNUMCHILD(String s) {
if (!s.trim().isEmpty()) {
NUMCHILD = Byte.parseByte(s);
} else {
NUMCHILD = Byte.MIN_VALUE;
}
}

protected final void initNUMCHSAV(String s) {
if (!s.trim().isEmpty()) {
NUMCHSAV = Byte.parseByte(s);
} else {
NUMCHSAV = Byte.MIN_VALUE;
}
}

protected final void initNUMCIVPTR(String s) {
if (!s.trim().isEmpty()) {
NUMCIVPTR = Byte.parseByte(s);
} else {
NUMCIVPTR = Byte.MIN_VALUE;
}
}

protected final void initNUMCOUPLES(String s) {
if (!s.trim().isEmpty()) {
NUMCOUPLES = Byte.parseByte(s);
} else {
NUMCOUPLES = Byte.MIN_VALUE;
}
}

protected final void initNUMCPART(String s) {
if (!s.trim().isEmpty()) {
NUMCPART = Byte.parseByte(s);
} else {
NUMCPART = Byte.MIN_VALUE;
}
}

protected final void initNUMDEPCH(String s) {
if (!s.trim().isEmpty()) {
NUMDEPCH = Byte.parseByte(s);
} else {
NUMDEPCH = Byte.MIN_VALUE;
}
}

protected final void initNUMJOB(String s) {
if (!s.trim().isEmpty()) {
NUMJOB = Byte.parseByte(s);
} else {
NUMJOB = Byte.MIN_VALUE;
}
}

protected final void initNUMSSEX(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
NUMSSEX = false;
}
}

protected final void initNWFLNVAL1(String s) {
if (!s.trim().isEmpty()) {
NWFLNVAL1 = Integer.parseInt(s);
} else {
NWFLNVAL1 = Integer.MIN_VALUE;
}
}

protected final void initNWFLNVAL2(String s) {
if (!s.trim().isEmpty()) {
NWFLNVAL2 = Integer.parseInt(s);
} else {
NWFLNVAL2 = Integer.MIN_VALUE;
}
}

protected final void initNWFLNVAL3(String s) {
if (!s.trim().isEmpty()) {
NWFLNVAL3 = Short.parseShort(s);
} else {
NWFLNVAL3 = Short.MIN_VALUE;
}
}

protected final void initNWILNVAL1(String s) {
if (!s.trim().isEmpty()) {
NWILNVAL1 = Integer.parseInt(s);
} else {
NWILNVAL1 = Integer.MIN_VALUE;
}
}

protected final void initNWILNVAL2(String s) {
if (!s.trim().isEmpty()) {
NWILNVAL2 = Short.parseShort(s);
} else {
NWILNVAL2 = Short.MIN_VALUE;
}
}

protected final void initNWILNVAL3(String s) {
if (!s.trim().isEmpty()) {
NWILNVAL3 = Short.parseShort(s);
} else {
NWILNVAL3 = Short.MIN_VALUE;
}
}

protected final void initNWLN(String s) {
if (!s.trim().isEmpty()) {
NWLN = Byte.parseByte(s);
} else {
NWLN = Byte.MIN_VALUE;
}
}

protected final void initNWLNNO(String s) {
if (!s.trim().isEmpty()) {
NWLNNO = Byte.parseByte(s);
} else {
NWLNNO = Byte.MIN_VALUE;
}
}

protected final void initNWLNNO_I(String s) {
if (!s.trim().isEmpty()) {
NWLNNO_I = Byte.parseByte(s);
} else {
NWLNNO_I = Byte.MIN_VALUE;
}
}

protected final void initNWLNNO_IFLAG(String s) {
if (!s.trim().isEmpty()) {
NWLNNO_IFLAG = Byte.parseByte(s);
} else {
NWLNNO_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initNWLN_I(String s) {
if (!s.trim().isEmpty()) {
NWLN_I = Byte.parseByte(s);
} else {
NWLN_I = Byte.MIN_VALUE;
}
}

protected final void initNWLN_IFLAG(String s) {
if (!s.trim().isEmpty()) {
NWLN_IFLAG = Byte.parseByte(s);
} else {
NWLN_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initOEXPINC01(String s) {
if (!s.trim().isEmpty()) {
OEXPINC01 = Byte.parseByte(s);
} else {
OEXPINC01 = Byte.MIN_VALUE;
}
}

protected final void initOEXPINC02(String s) {
if (!s.trim().isEmpty()) {
OEXPINC02 = Byte.parseByte(s);
} else {
OEXPINC02 = Byte.MIN_VALUE;
}
}

protected final void initOEXPINC03(String s) {
if (!s.trim().isEmpty()) {
OEXPINC03 = Byte.parseByte(s);
} else {
OEXPINC03 = Byte.MIN_VALUE;
}
}

protected final void initOEXPINC04(String s) {
if (!s.trim().isEmpty()) {
OEXPINC04 = Byte.parseByte(s);
} else {
OEXPINC04 = Byte.MIN_VALUE;
}
}

protected final void initOEXPINC05(String s) {
if (!s.trim().isEmpty()) {
OEXPINC05 = Byte.parseByte(s);
} else {
OEXPINC05 = Byte.MIN_VALUE;
}
}

protected final void initOEXPINC06(String s) {
if (!s.trim().isEmpty()) {
OEXPINC06 = Byte.parseByte(s);
} else {
OEXPINC06 = Byte.MIN_VALUE;
}
}

protected final void initOEXPINC07(String s) {
if (!s.trim().isEmpty()) {
OEXPINC07 = Byte.parseByte(s);
} else {
OEXPINC07 = Byte.MIN_VALUE;
}
}

protected final void initOEXPINC08(String s) {
if (!s.trim().isEmpty()) {
OEXPINC08 = Byte.parseByte(s);
} else {
OEXPINC08 = Byte.MIN_VALUE;
}
}

protected final void initOEXPINC09(String s) {
if (!s.trim().isEmpty()) {
OEXPINC09 = Byte.parseByte(s);
} else {
OEXPINC09 = Byte.MIN_VALUE;
}
}

protected final void initOEXPINC10(String s) {
if (!s.trim().isEmpty()) {
OEXPINC10 = Byte.parseByte(s);
} else {
OEXPINC10 = Byte.MIN_VALUE;
}
}

protected final void initOEXPINC11(String s) {
if (!s.trim().isEmpty()) {
OEXPINC11 = Byte.parseByte(s);
} else {
OEXPINC11 = Byte.MIN_VALUE;
}
}

protected final void initOEXPINC12(String s) {
if (!s.trim().isEmpty()) {
OEXPINC12 = Byte.parseByte(s);
} else {
OEXPINC12 = Byte.MIN_VALUE;
}
}

protected final void initOEXPINC13(String s) {
if (!s.trim().isEmpty()) {
OEXPINC13 = Byte.parseByte(s);
} else {
OEXPINC13 = Byte.MIN_VALUE;
}
}

protected final void initOEXPINC14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
OEXPINC14 = false;
}
}

protected final void initOEXPINC15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
OEXPINC15 = false;
}
}

protected final void initOFTCHECKED(String s) {
if (!s.trim().isEmpty()) {
OFTCHECKED = Byte.parseByte(s);
} else {
OFTCHECKED = Byte.MIN_VALUE;
}
}

protected final void initOIMPRS1(String s) {
if (!s.trim().isEmpty()) {
OIMPRS1 = Byte.parseByte(s);
} else {
OIMPRS1 = Byte.MIN_VALUE;
}
}

protected final void initOIMPRS2(String s) {
if (!s.trim().isEmpty()) {
OIMPRS2 = Byte.parseByte(s);
} else {
OIMPRS2 = Byte.MIN_VALUE;
}
}

protected final void initOIMPRS3(String s) {
if (!s.trim().isEmpty()) {
OIMPRS3 = Byte.parseByte(s);
} else {
OIMPRS3 = Byte.MIN_VALUE;
}
}

protected final void initOIMPRS4(String s) {
if (!s.trim().isEmpty()) {
OIMPRS4 = Byte.parseByte(s);
} else {
OIMPRS4 = Byte.MIN_VALUE;
}
}

protected final void initOIMPRS5(String s) {
if (!s.trim().isEmpty()) {
OIMPRS5 = Byte.parseByte(s);
} else {
OIMPRS5 = Byte.MIN_VALUE;
}
}

protected final void initOIMPRS6(String s) {
if (!s.trim().isEmpty()) {
OIMPRS6 = Byte.parseByte(s);
} else {
OIMPRS6 = Byte.MIN_VALUE;
}
}

protected final void initONOSAVE1(String s) {
if (!s.trim().isEmpty()) {
ONOSAVE1 = Byte.parseByte(s);
} else {
ONOSAVE1 = Byte.MIN_VALUE;
}
}

protected final void initONOSAVE2(String s) {
if (!s.trim().isEmpty()) {
ONOSAVE2 = Byte.parseByte(s);
} else {
ONOSAVE2 = Byte.MIN_VALUE;
}
}

protected final void initONOSAVE3(String s) {
if (!s.trim().isEmpty()) {
ONOSAVE3 = Byte.parseByte(s);
} else {
ONOSAVE3 = Byte.MIN_VALUE;
}
}

protected final void initONOSAVE4(String s) {
if (!s.trim().isEmpty()) {
ONOSAVE4 = Byte.parseByte(s);
} else {
ONOSAVE4 = Byte.MIN_VALUE;
}
}

protected final void initONOSAVE5(String s) {
if (!s.trim().isEmpty()) {
ONOSAVE5 = Byte.parseByte(s);
} else {
ONOSAVE5 = Byte.MIN_VALUE;
}
}

protected final void initONOSAVE6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
ONOSAVE6 = false;
}
}

protected final void initOPENS09(String s) {
if (!s.trim().isEmpty()) {
OPENS09 = Byte.parseByte(s);
} else {
OPENS09 = Byte.MIN_VALUE;
}
}

protected final void initOPENS10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
OPENS10 = false;
}
}

protected final void initOPENS11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
OPENS11 = false;
}
}

protected final void initOPENS12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
OPENS12 = false;
}
}

protected final void initOPENS13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
OPENS13 = false;
}
}

protected final void initOPENS14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
OPENS14 = false;
}
}

protected final void initOPENS15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
OPENS15 = false;
}
}

protected final void initORGNSED(String s) {
if (!s.trim().isEmpty()) {
ORGNSED = Byte.parseByte(s);
} else {
ORGNSED = Byte.MIN_VALUE;
}
}

protected final void initORISKS(String s) {
if (!s.trim().isEmpty()) {
ORISKS = Byte.parseByte(s);
} else {
ORISKS = Byte.MIN_VALUE;
}
}

protected final void initOSAFESAV(String s) {
if (!s.trim().isEmpty()) {
OSAFESAV = Byte.parseByte(s);
} else {
OSAFESAV = Byte.MIN_VALUE;
}
}

protected final void initOSAV2Y(String s) {
if (!s.trim().isEmpty()) {
OSAV2Y = Byte.parseByte(s);
} else {
OSAV2Y = Byte.MIN_VALUE;
}
}

protected final void initOSAVEXT(String s) {
if (!s.trim().isEmpty()) {
OSAVEXT = Byte.parseByte(s);
} else {
OSAVEXT = Byte.MIN_VALUE;
}
}

protected final void initOSITCH(String s) {
if (!s.trim().isEmpty()) {
OSITCH = Byte.parseByte(s);
} else {
OSITCH = Byte.MIN_VALUE;
}
}

protected final void initOSLBNK1(String s) {
if (!s.trim().isEmpty()) {
OSLBNK1 = Integer.parseInt(s);
} else {
OSLBNK1 = Integer.MIN_VALUE;
}
}

protected final void initOSLBNK2(String s) {
if (!s.trim().isEmpty()) {
OSLBNK2 = Short.parseShort(s);
} else {
OSLBNK2 = Short.MIN_VALUE;
}
}

protected final void initOSLBNK3(String s) {
if (!s.trim().isEmpty()) {
OSLBNK3 = Short.parseShort(s);
} else {
OSLBNK3 = Short.MIN_VALUE;
}
}

protected final void initOSLC1(String s) {
if (!s.trim().isEmpty()) {
OSLC1 = Integer.parseInt(s);
} else {
OSLC1 = Integer.MIN_VALUE;
}
}

protected final void initOSLC2(String s) {
if (!s.trim().isEmpty()) {
OSLC2 = Integer.parseInt(s);
} else {
OSLC2 = Integer.MIN_VALUE;
}
}

protected final void initOSLC3(String s) {
if (!s.trim().isEmpty()) {
OSLC3 = Short.parseShort(s);
} else {
OSLC3 = Short.MIN_VALUE;
}
}

protected final void initOTHASCH(String s) {
if (!s.trim().isEmpty()) {
OTHASCH = Byte.parseByte(s);
} else {
OTHASCH = Byte.MIN_VALUE;
}
}

protected final void initOTHASVB(String s) {
if (!s.trim().isEmpty()) {
OTHASVB = Byte.parseByte(s);
} else {
OTHASVB = Byte.MIN_VALUE;
}
}

protected final void initOTHASVL(String s) {
if (!s.trim().isEmpty()) {
OTHASVL = Integer.parseInt(s);
} else {
OTHASVL = Integer.MIN_VALUE;
}
}

protected final void initOTHMORT(String s) {
if (!s.trim().isEmpty()) {
OTHMORT = Integer.parseInt(s);
} else {
OTHMORT = Integer.MIN_VALUE;
}
}

protected final void initOTHSRC4_I(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
OTHSRC4_I = false;
}
}

protected final void initOTHSRC4_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
OTHSRC4_IFLAG = false;
}
}

protected final void initOTRUST15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
OTRUST15 = false;
}
}

protected final void initOWAIT(String s) {
if (!s.trim().isEmpty()) {
OWAIT = Byte.parseByte(s);
} else {
OWAIT = Byte.MIN_VALUE;
}
}

protected final void initOWNBUS_I(String s) {
if (!s.trim().isEmpty()) {
OWNBUS_I = Byte.parseByte(s);
} else {
OWNBUS_I = Byte.MIN_VALUE;
}
}

protected final void initOWNBUS_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
OWNBUS_IFLAG = false;
}
}

protected final void initOWRSRS01(String s) {
if (!s.trim().isEmpty()) {
OWRSRS01 = Byte.parseByte(s);
} else {
OWRSRS01 = Byte.MIN_VALUE;
}
}

protected final void initOWRSRS02(String s) {
if (!s.trim().isEmpty()) {
OWRSRS02 = Byte.parseByte(s);
} else {
OWRSRS02 = Byte.MIN_VALUE;
}
}

protected final void initOWRSRS03(String s) {
if (!s.trim().isEmpty()) {
OWRSRS03 = Byte.parseByte(s);
} else {
OWRSRS03 = Byte.MIN_VALUE;
}
}

protected final void initOWRSRS04(String s) {
if (!s.trim().isEmpty()) {
OWRSRS04 = Byte.parseByte(s);
} else {
OWRSRS04 = Byte.MIN_VALUE;
}
}

protected final void initOWRSRS05(String s) {
if (!s.trim().isEmpty()) {
OWRSRS05 = Byte.parseByte(s);
} else {
OWRSRS05 = Byte.MIN_VALUE;
}
}

protected final void initOWRSRS06(String s) {
if (!s.trim().isEmpty()) {
OWRSRS06 = Byte.parseByte(s);
} else {
OWRSRS06 = Byte.MIN_VALUE;
}
}

protected final void initOWRSRS07(String s) {
if (!s.trim().isEmpty()) {
OWRSRS07 = Byte.parseByte(s);
} else {
OWRSRS07 = Byte.MIN_VALUE;
}
}

protected final void initPAGESTP(String s) {
if (!s.trim().isEmpty()) {
PAGESTP = Byte.parseByte(s);
} else {
PAGESTP = Byte.MIN_VALUE;
}
}

protected final void initPANYO(String s) {
if (!s.trim().isEmpty()) {
PANYO = Byte.parseByte(s);
} else {
PANYO = Byte.MIN_VALUE;
}
}

protected final void initPANYO_I(String s) {
if (!s.trim().isEmpty()) {
PANYO_I = Byte.parseByte(s);
} else {
PANYO_I = Byte.MIN_VALUE;
}
}

protected final void initPANYO_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PANYO_IFLAG = false;
}
}

protected final void initPARTGRSPAY(String s) {
if (!s.trim().isEmpty()) {
PARTGRSPAY = Integer.parseInt(s);
} else {
PARTGRSPAY = Integer.MIN_VALUE;
}
}

protected final void initPARTNSSEC(String s) {
if (!s.trim().isEmpty()) {
PARTNSSEC = Double.parseDouble(s);
} else {
PARTNSSEC = Double.NaN;
}
}

protected final void initPARTNSSEC3(String s) {
if (!s.trim().isEmpty()) {
PARTNSSEC3 = Byte.parseByte(s);
} else {
PARTNSSEC3 = Byte.MIN_VALUE;
}
}

protected final void initPARTNSSEC5(String s) {
if (!s.trim().isEmpty()) {
PARTNSSEC5 = Byte.parseByte(s);
} else {
PARTNSSEC5 = Byte.MIN_VALUE;
}
}

protected final void initPARTNSSEC8(String s) {
if (!s.trim().isEmpty()) {
PARTNSSEC8 = Double.parseDouble(s);
} else {
PARTNSSEC8 = Double.NaN;
}
}

protected final void initPARTNSSECB(String s) {
if (!s.trim().isEmpty()) {
PARTNSSECB = Double.parseDouble(s);
} else {
PARTNSSECB = Double.NaN;
}
}

protected final void initPASTMN1(String s) {
if (!s.trim().isEmpty()) {
PASTMN1 = Byte.parseByte(s);
} else {
PASTMN1 = Byte.MIN_VALUE;
}
}

protected final void initPASTMN2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PASTMN2 = false;
}
}

protected final void initPASTYR1(String s) {
if (!s.trim().isEmpty()) {
PASTYR1 = Short.parseShort(s);
} else {
PASTYR1 = Short.MIN_VALUE;
}
}

protected final void initPASTYR2(String s) {
if (!s.trim().isEmpty()) {
PASTYR2 = Short.parseShort(s);
} else {
PASTYR2 = Short.MIN_VALUE;
}
}

protected final void initPAVCUV1(String s) {
if (!s.trim().isEmpty()) {
PAVCUV1 = Integer.parseInt(s);
} else {
PAVCUV1 = Integer.MIN_VALUE;
}
}

protected final void initPAVCUV1_I(String s) {
if (!s.trim().isEmpty()) {
PAVCUV1_I = Integer.parseInt(s);
} else {
PAVCUV1_I = Integer.MIN_VALUE;
}
}

protected final void initPAVCUV1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PAVCUV1_IFLAG = false;
}
}

protected final void initPAVCUV2(String s) {
if (!s.trim().isEmpty()) {
PAVCUV2 = Integer.parseInt(s);
} else {
PAVCUV2 = Integer.MIN_VALUE;
}
}

protected final void initPAVCUV2_I(String s) {
if (!s.trim().isEmpty()) {
PAVCUV2_I = Integer.parseInt(s);
} else {
PAVCUV2_I = Integer.MIN_VALUE;
}
}

protected final void initPAVCUV2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PAVCUV2_IFLAG = false;
}
}

protected final void initPAVCVB1(String s) {
if (!s.trim().isEmpty()) {
PAVCVB1 = Byte.parseByte(s);
} else {
PAVCVB1 = Byte.MIN_VALUE;
}
}

protected final void initPAVCVB2(String s) {
if (!s.trim().isEmpty()) {
PAVCVB2 = Byte.parseByte(s);
} else {
PAVCVB2 = Byte.MIN_VALUE;
}
}

protected final void initPAVDOC1(String s) {
if (!s.trim().isEmpty()) {
PAVDOC1 = Byte.parseByte(s);
} else {
PAVDOC1 = Byte.MIN_VALUE;
}
}

protected final void initPAVDOC2(String s) {
if (!s.trim().isEmpty()) {
PAVDOC2 = Byte.parseByte(s);
} else {
PAVDOC2 = Byte.MIN_VALUE;
}
}

protected final void initPAYBON_I(String s) {
if (!s.trim().isEmpty()) {
PAYBON_I = Byte.parseByte(s);
} else {
PAYBON_I = Byte.MIN_VALUE;
}
}

protected final void initPAYBON_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PAYBON_IFLAG = false;
}
}

protected final void initPAYINC7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PAYINC7 = false;
}
}

protected final void initPBDOCS1(String s) {
if (!s.trim().isEmpty()) {
PBDOCS1 = Byte.parseByte(s);
} else {
PBDOCS1 = Byte.MIN_VALUE;
}
}

protected final void initPBDOCS2(String s) {
if (!s.trim().isEmpty()) {
PBDOCS2 = Byte.parseByte(s);
} else {
PBDOCS2 = Byte.MIN_VALUE;
}
}

protected final void initPBFRAC1(String s) {
if (!s.trim().isEmpty()) {
PBFRAC1 = Byte.parseByte(s);
} else {
PBFRAC1 = Byte.MIN_VALUE;
}
}

protected final void initPBFRAC1_I(String s) {
if (!s.trim().isEmpty()) {
PBFRAC1_I = Byte.parseByte(s);
} else {
PBFRAC1_I = Byte.MIN_VALUE;
}
}

protected final void initPBFRAC1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PBFRAC1_IFLAG = false;
}
}

protected final void initPBFRAC2(String s) {
if (!s.trim().isEmpty()) {
PBFRAC2 = Byte.parseByte(s);
} else {
PBFRAC2 = Byte.MIN_VALUE;
}
}

protected final void initPBFRAC2_I(String s) {
if (!s.trim().isEmpty()) {
PBFRAC2_I = Byte.parseByte(s);
} else {
PBFRAC2_I = Byte.MIN_VALUE;
}
}

protected final void initPBFRAC2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PBFRAC2_IFLAG = false;
}
}

protected final void initPBINCA1(String s) {
if (!s.trim().isEmpty()) {
PBINCA1 = Integer.parseInt(s);
} else {
PBINCA1 = Integer.MIN_VALUE;
}
}

protected final void initPBINCA2(String s) {
if (!s.trim().isEmpty()) {
PBINCA2 = Integer.parseInt(s);
} else {
PBINCA2 = Integer.MIN_VALUE;
}
}

protected final void initPBINCF1(String s) {
if (!s.trim().isEmpty()) {
PBINCF1 = Double.parseDouble(s);
} else {
PBINCF1 = Double.NaN;
}
}

protected final void initPBINCF2(String s) {
if (!s.trim().isEmpty()) {
PBINCF2 = Double.parseDouble(s);
} else {
PBINCF2 = Double.NaN;
}
}

protected final void initPBINCH1(String s) {
if (!s.trim().isEmpty()) {
PBINCH1 = Byte.parseByte(s);
} else {
PBINCH1 = Byte.MIN_VALUE;
}
}

protected final void initPBINCH2(String s) {
if (!s.trim().isEmpty()) {
PBINCH2 = Byte.parseByte(s);
} else {
PBINCH2 = Byte.MIN_VALUE;
}
}

protected final void initPBLMVB1(String s) {
if (!s.trim().isEmpty()) {
PBLMVB1 = Byte.parseByte(s);
} else {
PBLMVB1 = Byte.MIN_VALUE;
}
}

protected final void initPBLMVB2(String s) {
if (!s.trim().isEmpty()) {
PBLMVB2 = Byte.parseByte(s);
} else {
PBLMVB2 = Byte.MIN_VALUE;
}
}

protected final void initPBLUMV1(String s) {
if (!s.trim().isEmpty()) {
PBLUMV1 = Integer.parseInt(s);
} else {
PBLUMV1 = Integer.MIN_VALUE;
}
}

protected final void initPBLUMV1_I(String s) {
if (!s.trim().isEmpty()) {
PBLUMV1_I = Integer.parseInt(s);
} else {
PBLUMV1_I = Integer.MIN_VALUE;
}
}

protected final void initPBLUMV1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PBLUMV1_IFLAG = false;
}
}

protected final void initPBLUMV2(String s) {
if (!s.trim().isEmpty()) {
PBLUMV2 = Integer.parseInt(s);
} else {
PBLUMV2 = Integer.MIN_VALUE;
}
}

protected final void initPBLUMV2_I(String s) {
if (!s.trim().isEmpty()) {
PBLUMV2_I = Integer.parseInt(s);
} else {
PBLUMV2_I = Integer.MIN_VALUE;
}
}

protected final void initPBLUMV2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PBLUMV2_IFLAG = false;
}
}

protected final void initPBQUAL1(String s) {
if (!s.trim().isEmpty()) {
PBQUAL1 = Byte.parseByte(s);
} else {
PBQUAL1 = Byte.MIN_VALUE;
}
}

protected final void initPBQUAL1_I(String s) {
if (!s.trim().isEmpty()) {
PBQUAL1_I = Byte.parseByte(s);
} else {
PBQUAL1_I = Byte.MIN_VALUE;
}
}

protected final void initPBQUAL1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PBQUAL1_IFLAG = false;
}
}

protected final void initPBQUAL2(String s) {
if (!s.trim().isEmpty()) {
PBQUAL2 = Byte.parseByte(s);
} else {
PBQUAL2 = Byte.MIN_VALUE;
}
}

protected final void initPBQUAL2_I(String s) {
if (!s.trim().isEmpty()) {
PBQUAL2_I = Byte.parseByte(s);
} else {
PBQUAL2_I = Byte.MIN_VALUE;
}
}

protected final void initPBQUAL2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PBQUAL2_IFLAG = false;
}
}

protected final void initPBSTMN1(String s) {
if (!s.trim().isEmpty()) {
PBSTMN1 = Byte.parseByte(s);
} else {
PBSTMN1 = Byte.MIN_VALUE;
}
}

protected final void initPBSTMN2(String s) {
if (!s.trim().isEmpty()) {
PBSTMN2 = Byte.parseByte(s);
} else {
PBSTMN2 = Byte.MIN_VALUE;
}
}

protected final void initPBSTYR1(String s) {
if (!s.trim().isEmpty()) {
PBSTYR1 = Short.parseShort(s);
} else {
PBSTYR1 = Short.MIN_VALUE;
}
}

protected final void initPBSTYR2(String s) {
if (!s.trim().isEmpty()) {
PBSTYR2 = Short.parseShort(s);
} else {
PBSTYR2 = Short.MIN_VALUE;
}
}

protected final void initPCDOCS1(String s) {
if (!s.trim().isEmpty()) {
PCDOCS1 = Byte.parseByte(s);
} else {
PCDOCS1 = Byte.MIN_VALUE;
}
}

protected final void initPCDOCS2(String s) {
if (!s.trim().isEmpty()) {
PCDOCS2 = Byte.parseByte(s);
} else {
PCDOCS2 = Byte.MIN_VALUE;
}
}

protected final void initPCONT(String s) {
if (!s.trim().isEmpty()) {
PCONT = Byte.parseByte(s);
} else {
PCONT = Byte.MIN_VALUE;
}
}

protected final void initPCONT_I(String s) {
if (!s.trim().isEmpty()) {
PCONT_I = Byte.parseByte(s);
} else {
PCONT_I = Byte.MIN_VALUE;
}
}

protected final void initPCONT_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PCONT_IFLAG = false;
}
}

protected final void initPCSTMN1(String s) {
if (!s.trim().isEmpty()) {
PCSTMN1 = Byte.parseByte(s);
} else {
PCSTMN1 = Byte.MIN_VALUE;
}
}

protected final void initPCSTMN2(String s) {
if (!s.trim().isEmpty()) {
PCSTMN2 = Byte.parseByte(s);
} else {
PCSTMN2 = Byte.MIN_VALUE;
}
}

protected final void initPCSTYR1(String s) {
if (!s.trim().isEmpty()) {
PCSTYR1 = Short.parseShort(s);
} else {
PCSTYR1 = Short.MIN_VALUE;
}
}

protected final void initPCSTYR2(String s) {
if (!s.trim().isEmpty()) {
PCSTYR2 = Short.parseShort(s);
} else {
PCSTYR2 = Short.MIN_VALUE;
}
}

protected final void initPDBCAL1(String s) {
if (!s.trim().isEmpty()) {
PDBCAL1 = Byte.parseByte(s);
} else {
PDBCAL1 = Byte.MIN_VALUE;
}
}

protected final void initPDBCAL2(String s) {
if (!s.trim().isEmpty()) {
PDBCAL2 = Byte.parseByte(s);
} else {
PDBCAL2 = Byte.MIN_VALUE;
}
}

protected final void initPDCVAL1(String s) {
if (!s.trim().isEmpty()) {
PDCVAL1 = Integer.parseInt(s);
} else {
PDCVAL1 = Integer.MIN_VALUE;
}
}

protected final void initPDCVAL1_I(String s) {
if (!s.trim().isEmpty()) {
PDCVAL1_I = Double.parseDouble(s);
} else {
PDCVAL1_I = Double.NaN;
}
}

protected final void initPDCVAL1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PDCVAL1_IFLAG = false;
}
}

protected final void initPDCVAL2(String s) {
if (!s.trim().isEmpty()) {
PDCVAL2 = Integer.parseInt(s);
} else {
PDCVAL2 = Integer.MIN_VALUE;
}
}

protected final void initPDCVAL2_I(String s) {
if (!s.trim().isEmpty()) {
PDCVAL2_I = Integer.parseInt(s);
} else {
PDCVAL2_I = Integer.MIN_VALUE;
}
}

protected final void initPDCVAL2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PDCVAL2_IFLAG = false;
}
}

protected final void initPDCVB1(String s) {
if (!s.trim().isEmpty()) {
PDCVB1 = Byte.parseByte(s);
} else {
PDCVB1 = Byte.MIN_VALUE;
}
}

protected final void initPDCVB2(String s) {
if (!s.trim().isEmpty()) {
PDCVB2 = Byte.parseByte(s);
} else {
PDCVB2 = Byte.MIN_VALUE;
}
}

protected final void initPENFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PENFLAG = false;
}
}

protected final void initPENIND1(String s) {
if (!s.trim().isEmpty()) {
PENIND1 = Byte.parseByte(s);
} else {
PENIND1 = Byte.MIN_VALUE;
}
}

protected final void initPENIND2(String s) {
if (!s.trim().isEmpty()) {
PENIND2 = Byte.parseByte(s);
} else {
PENIND2 = Byte.MIN_VALUE;
}
}

protected final void initPENIND3(String s) {
if (!s.trim().isEmpty()) {
PENIND3 = Byte.parseByte(s);
} else {
PENIND3 = Byte.MIN_VALUE;
}
}

protected final void initPENIND4(String s) {
if (!s.trim().isEmpty()) {
PENIND4 = Byte.parseByte(s);
} else {
PENIND4 = Byte.MIN_VALUE;
}
}

protected final void initPENIND5(String s) {
if (!s.trim().isEmpty()) {
PENIND5 = Byte.parseByte(s);
} else {
PENIND5 = Byte.MIN_VALUE;
}
}

protected final void initPENIND6(String s) {
if (!s.trim().isEmpty()) {
PENIND6 = Byte.parseByte(s);
} else {
PENIND6 = Byte.MIN_VALUE;
}
}

protected final void initPERMJB(String s) {
if (!s.trim().isEmpty()) {
PERMJB = Byte.parseByte(s);
} else {
PERMJB = Byte.MIN_VALUE;
}
}

protected final void initPERNOWK(String s) {
if (!s.trim().isEmpty()) {
PERNOWK = Byte.parseByte(s);
} else {
PERNOWK = Byte.MIN_VALUE;
}
}

protected final void initPERSONW2(String s) {
if (!s.trim().isEmpty()) {
PERSONW2 = Byte.parseByte(s);
} else {
PERSONW2 = Byte.MIN_VALUE;
}
}

protected final void initPERSONW3(String s) {
if (!s.trim().isEmpty()) {
PERSONW3 = Byte.parseByte(s);
} else {
PERSONW3 = Byte.MIN_VALUE;
}
}

protected final void initPESAME(String s) {
if (!s.trim().isEmpty()) {
PESAME = Byte.parseByte(s);
} else {
PESAME = Byte.MIN_VALUE;
}
}

protected final void initPFANEH1(String s) {
if (!s.trim().isEmpty()) {
PFANEH1 = Byte.parseByte(s);
} else {
PFANEH1 = Byte.MIN_VALUE;
}
}

protected final void initPFANEH2(String s) {
if (!s.trim().isEmpty()) {
PFANEH2 = Byte.parseByte(s);
} else {
PFANEH2 = Byte.MIN_VALUE;
}
}

protected final void initPFANEH4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFANEH4 = false;
}
}

protected final void initPFANGA1(String s) {
if (!s.trim().isEmpty()) {
PFANGA1 = Byte.parseByte(s);
} else {
PFANGA1 = Byte.MIN_VALUE;
}
}

protected final void initPFANGA2(String s) {
if (!s.trim().isEmpty()) {
PFANGA2 = Byte.parseByte(s);
} else {
PFANGA2 = Byte.MIN_VALUE;
}
}

protected final void initPFANGA4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFANGA4 = false;
}
}

protected final void initPFANIF1(String s) {
if (!s.trim().isEmpty()) {
PFANIF1 = Byte.parseByte(s);
} else {
PFANIF1 = Byte.MIN_VALUE;
}
}

protected final void initPFANIF2(String s) {
if (!s.trim().isEmpty()) {
PFANIF2 = Byte.parseByte(s);
} else {
PFANIF2 = Byte.MIN_VALUE;
}
}

protected final void initPFANIF4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFANIF4 = false;
}
}

protected final void initPFANJT1(String s) {
if (!s.trim().isEmpty()) {
PFANJT1 = Byte.parseByte(s);
} else {
PFANJT1 = Byte.MIN_VALUE;
}
}

protected final void initPFANJT2(String s) {
if (!s.trim().isEmpty()) {
PFANJT2 = Byte.parseByte(s);
} else {
PFANJT2 = Byte.MIN_VALUE;
}
}

protected final void initPFANJT4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFANJT4 = false;
}
}

protected final void initPFANN1(String s) {
if (!s.trim().isEmpty()) {
PFANN1 = Byte.parseByte(s);
} else {
PFANN1 = Byte.MIN_VALUE;
}
}

protected final void initPFANN16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFANN16 = false;
}
}

protected final void initPFANN6(String s) {
if (!s.trim().isEmpty()) {
PFANN6 = Byte.parseByte(s);
} else {
PFANN6 = Byte.MIN_VALUE;
}
}

protected final void initPFCASH1(String s) {
if (!s.trim().isEmpty()) {
PFCASH1 = Byte.parseByte(s);
} else {
PFCASH1 = Byte.MIN_VALUE;
}
}

protected final void initPFCASH1_I(String s) {
if (!s.trim().isEmpty()) {
PFCASH1_I = Byte.parseByte(s);
} else {
PFCASH1_I = Byte.MIN_VALUE;
}
}

protected final void initPFCASH1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFCASH1_IFLAG = false;
}
}

protected final void initPFCASH2(String s) {
if (!s.trim().isEmpty()) {
PFCASH2 = Byte.parseByte(s);
} else {
PFCASH2 = Byte.MIN_VALUE;
}
}

protected final void initPFCASH2_I(String s) {
if (!s.trim().isEmpty()) {
PFCASH2_I = Byte.parseByte(s);
} else {
PFCASH2_I = Byte.MIN_VALUE;
}
}

protected final void initPFCASH2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFCASH2_IFLAG = false;
}
}

protected final void initPFCASH3(String s) {
if (!s.trim().isEmpty()) {
PFCASH3 = Byte.parseByte(s);
} else {
PFCASH3 = Byte.MIN_VALUE;
}
}

protected final void initPFCASH3_I(String s) {
if (!s.trim().isEmpty()) {
PFCASH3_I = Byte.parseByte(s);
} else {
PFCASH3_I = Byte.MIN_VALUE;
}
}

protected final void initPFCASH3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFCASH3_IFLAG = false;
}
}

protected final void initPFCASH4(String s) {
if (!s.trim().isEmpty()) {
PFCASH4 = Byte.parseByte(s);
} else {
PFCASH4 = Byte.MIN_VALUE;
}
}

protected final void initPFCASH4_I(String s) {
if (!s.trim().isEmpty()) {
PFCASH4_I = Byte.parseByte(s);
} else {
PFCASH4_I = Byte.MIN_VALUE;
}
}

protected final void initPFCASH4_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFCASH4_IFLAG = false;
}
}

protected final void initPFCURV1(String s) {
if (!s.trim().isEmpty()) {
PFCURV1 = Integer.parseInt(s);
} else {
PFCURV1 = Integer.MIN_VALUE;
}
}

protected final void initPFCURV1_I(String s) {
if (!s.trim().isEmpty()) {
PFCURV1_I = Integer.parseInt(s);
} else {
PFCURV1_I = Integer.MIN_VALUE;
}
}

protected final void initPFCURV1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFCURV1_IFLAG = false;
}
}

protected final void initPFCURV2(String s) {
if (!s.trim().isEmpty()) {
PFCURV2 = Integer.parseInt(s);
} else {
PFCURV2 = Integer.MIN_VALUE;
}
}

protected final void initPFCURV2_I(String s) {
if (!s.trim().isEmpty()) {
PFCURV2_I = Double.parseDouble(s);
} else {
PFCURV2_I = Double.NaN;
}
}

protected final void initPFCURV2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFCURV2_IFLAG = Byte.parseByte(s);
} else {
PFCURV2_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFCURV3(String s) {
if (!s.trim().isEmpty()) {
PFCURV3 = Integer.parseInt(s);
} else {
PFCURV3 = Integer.MIN_VALUE;
}
}

protected final void initPFCURV3_I(String s) {
if (!s.trim().isEmpty()) {
PFCURV3_I = Double.parseDouble(s);
} else {
PFCURV3_I = Double.NaN;
}
}

protected final void initPFCURV3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFCURV3_IFLAG = Byte.parseByte(s);
} else {
PFCURV3_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFCURV4(String s) {
if (!s.trim().isEmpty()) {
PFCURV4 = Integer.parseInt(s);
} else {
PFCURV4 = Integer.MIN_VALUE;
}
}

protected final void initPFCURV4_I(String s) {
if (!s.trim().isEmpty()) {
PFCURV4_I = Integer.parseInt(s);
} else {
PFCURV4_I = Integer.MIN_VALUE;
}
}

protected final void initPFCURV4_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFCURV4_IFLAG = Byte.parseByte(s);
} else {
PFCURV4_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFCURV5(String s) {
if (!s.trim().isEmpty()) {
PFCURV5 = Integer.parseInt(s);
} else {
PFCURV5 = Integer.MIN_VALUE;
}
}

protected final void initPFCURV5_I(String s) {
if (!s.trim().isEmpty()) {
PFCURV5_I = Double.parseDouble(s);
} else {
PFCURV5_I = Double.NaN;
}
}

protected final void initPFCURV5_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFCURV5_IFLAG = Byte.parseByte(s);
} else {
PFCURV5_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFCURV6(String s) {
if (!s.trim().isEmpty()) {
PFCURV6 = Integer.parseInt(s);
} else {
PFCURV6 = Integer.MIN_VALUE;
}
}

protected final void initPFCURV6_I(String s) {
if (!s.trim().isEmpty()) {
PFCURV6_I = Double.parseDouble(s);
} else {
PFCURV6_I = Double.NaN;
}
}

protected final void initPFCURV6_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFCURV6_IFLAG = false;
}
}

protected final void initPFCUVB1(String s) {
if (!s.trim().isEmpty()) {
PFCUVB1 = Byte.parseByte(s);
} else {
PFCUVB1 = Byte.MIN_VALUE;
}
}

protected final void initPFCUVB2(String s) {
if (!s.trim().isEmpty()) {
PFCUVB2 = Byte.parseByte(s);
} else {
PFCUVB2 = Byte.MIN_VALUE;
}
}

protected final void initPFCUVB3(String s) {
if (!s.trim().isEmpty()) {
PFCUVB3 = Byte.parseByte(s);
} else {
PFCUVB3 = Byte.MIN_VALUE;
}
}

protected final void initPFCUVB4(String s) {
if (!s.trim().isEmpty()) {
PFCUVB4 = Byte.parseByte(s);
} else {
PFCUVB4 = Byte.MIN_VALUE;
}
}

protected final void initPFCUVB5(String s) {
if (!s.trim().isEmpty()) {
PFCUVB5 = Byte.parseByte(s);
} else {
PFCUVB5 = Byte.MIN_VALUE;
}
}

protected final void initPFCUVB6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFCUVB6 = false;
}
}

protected final void initPFDDV1(String s) {
if (!s.trim().isEmpty()) {
PFDDV1 = Integer.parseInt(s);
} else {
PFDDV1 = Integer.MIN_VALUE;
}
}

protected final void initPFDDV1_I(String s) {
if (!s.trim().isEmpty()) {
PFDDV1_I = Integer.parseInt(s);
} else {
PFDDV1_I = Integer.MIN_VALUE;
}
}

protected final void initPFDDV1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFDDV1_IFLAG = false;
}
}

protected final void initPFDDV2(String s) {
if (!s.trim().isEmpty()) {
PFDDV2 = Integer.parseInt(s);
} else {
PFDDV2 = Integer.MIN_VALUE;
}
}

protected final void initPFDDV2_I(String s) {
if (!s.trim().isEmpty()) {
PFDDV2_I = Integer.parseInt(s);
} else {
PFDDV2_I = Integer.MIN_VALUE;
}
}

protected final void initPFDDV2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFDDV2_IFLAG = Byte.parseByte(s);
} else {
PFDDV2_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFDDV3(String s) {
if (!s.trim().isEmpty()) {
PFDDV3 = Integer.parseInt(s);
} else {
PFDDV3 = Integer.MIN_VALUE;
}
}

protected final void initPFDDV3_I(String s) {
if (!s.trim().isEmpty()) {
PFDDV3_I = Integer.parseInt(s);
} else {
PFDDV3_I = Integer.MIN_VALUE;
}
}

protected final void initPFDDV3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFDDV3_IFLAG = Byte.parseByte(s);
} else {
PFDDV3_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFDDV4_I(String s) {
if (!s.trim().isEmpty()) {
PFDDV4_I = Integer.parseInt(s);
} else {
PFDDV4_I = Integer.MIN_VALUE;
}
}

protected final void initPFDDV4_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFDDV4_IFLAG = Byte.parseByte(s);
} else {
PFDDV4_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFDDVB1(String s) {
if (!s.trim().isEmpty()) {
PFDDVB1 = Byte.parseByte(s);
} else {
PFDDVB1 = Byte.MIN_VALUE;
}
}

protected final void initPFDDVB2(String s) {
if (!s.trim().isEmpty()) {
PFDDVB2 = Byte.parseByte(s);
} else {
PFDDVB2 = Byte.MIN_VALUE;
}
}

protected final void initPFDDVB3(String s) {
if (!s.trim().isEmpty()) {
PFDDVB3 = Byte.parseByte(s);
} else {
PFDDVB3 = Byte.MIN_VALUE;
}
}

protected final void initPFDOCS1(String s) {
if (!s.trim().isEmpty()) {
PFDOCS1 = Byte.parseByte(s);
} else {
PFDOCS1 = Byte.MIN_VALUE;
}
}

protected final void initPFDOCS2(String s) {
if (!s.trim().isEmpty()) {
PFDOCS2 = Byte.parseByte(s);
} else {
PFDOCS2 = Byte.MIN_VALUE;
}
}

protected final void initPFDOCS3(String s) {
if (!s.trim().isEmpty()) {
PFDOCS3 = Byte.parseByte(s);
} else {
PFDOCS3 = Byte.MIN_VALUE;
}
}

protected final void initPFDOCS4(String s) {
if (!s.trim().isEmpty()) {
PFDOCS4 = Byte.parseByte(s);
} else {
PFDOCS4 = Byte.MIN_VALUE;
}
}

protected final void initPFDOCS5(String s) {
if (!s.trim().isEmpty()) {
PFDOCS5 = Byte.parseByte(s);
} else {
PFDOCS5 = Byte.MIN_VALUE;
}
}

protected final void initPFDOCS6(String s) {
if (!s.trim().isEmpty()) {
PFDOCS6 = Byte.parseByte(s);
} else {
PFDOCS6 = Byte.MIN_VALUE;
}
}

protected final void initPFDRAW1(String s) {
if (!s.trim().isEmpty()) {
PFDRAW1 = Byte.parseByte(s);
} else {
PFDRAW1 = Byte.MIN_VALUE;
}
}

protected final void initPFDRAW1_I(String s) {
if (!s.trim().isEmpty()) {
PFDRAW1_I = Byte.parseByte(s);
} else {
PFDRAW1_I = Byte.MIN_VALUE;
}
}

protected final void initPFDRAW1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFDRAW1_IFLAG = false;
}
}

protected final void initPFDRAW2(String s) {
if (!s.trim().isEmpty()) {
PFDRAW2 = Byte.parseByte(s);
} else {
PFDRAW2 = Byte.MIN_VALUE;
}
}

protected final void initPFDRAW2_I(String s) {
if (!s.trim().isEmpty()) {
PFDRAW2_I = Byte.parseByte(s);
} else {
PFDRAW2_I = Byte.MIN_VALUE;
}
}

protected final void initPFDRAW2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFDRAW2_IFLAG = Byte.parseByte(s);
} else {
PFDRAW2_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFDRAW3_I(String s) {
if (!s.trim().isEmpty()) {
PFDRAW3_I = Byte.parseByte(s);
} else {
PFDRAW3_I = Byte.MIN_VALUE;
}
}

protected final void initPFDRAW3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFDRAW3_IFLAG = Byte.parseByte(s);
} else {
PFDRAW3_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFDRINC1(String s) {
if (!s.trim().isEmpty()) {
PFDRINC1 = Short.parseShort(s);
} else {
PFDRINC1 = Short.MIN_VALUE;
}
}

protected final void initPFDRVB1(String s) {
if (!s.trim().isEmpty()) {
PFDRVB1 = Byte.parseByte(s);
} else {
PFDRVB1 = Byte.MIN_VALUE;
}
}

protected final void initPFDRVI1(String s) {
if (!s.trim().isEmpty()) {
PFDRVI1 = Integer.parseInt(s);
} else {
PFDRVI1 = Integer.MIN_VALUE;
}
}

protected final void initPFEN(String s) {
if (!s.trim().isEmpty()) {
PFEN = Byte.parseByte(s);
} else {
PFEN = Byte.MIN_VALUE;
}
}

protected final void initPFENNUM(String s) {
if (!s.trim().isEmpty()) {
PFENNUM = Byte.parseByte(s);
} else {
PFENNUM = Byte.MIN_VALUE;
}
}

protected final void initPFENNUM_I(String s) {
if (!s.trim().isEmpty()) {
PFENNUM_I = Byte.parseByte(s);
} else {
PFENNUM_I = Byte.MIN_VALUE;
}
}

protected final void initPFENNUM_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFENNUM_IFLAG = false;
}
}

protected final void initPFEN_I(String s) {
if (!s.trim().isEmpty()) {
PFEN_I = Byte.parseByte(s);
} else {
PFEN_I = Byte.MIN_VALUE;
}
}

protected final void initPFEN_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFEN_IFLAG = false;
}
}

protected final void initPFFAAG1(String s) {
if (!s.trim().isEmpty()) {
PFFAAG1 = Byte.parseByte(s);
} else {
PFFAAG1 = Byte.MIN_VALUE;
}
}

protected final void initPFFAAG2(String s) {
if (!s.trim().isEmpty()) {
PFFAAG2 = Byte.parseByte(s);
} else {
PFFAAG2 = Byte.MIN_VALUE;
}
}

protected final void initPFFAN1(String s) {
if (!s.trim().isEmpty()) {
PFFAN1 = Byte.parseByte(s);
} else {
PFFAN1 = Byte.MIN_VALUE;
}
}

protected final void initPFFAN11(String s) {
if (!s.trim().isEmpty()) {
PFFAN11 = Byte.parseByte(s);
} else {
PFFAN11 = Byte.MIN_VALUE;
}
}

protected final void initPFFAN16(String s) {
if (!s.trim().isEmpty()) {
PFFAN16 = Byte.parseByte(s);
} else {
PFFAN16 = Byte.MIN_VALUE;
}
}

protected final void initPFFAN2(String s) {
if (!s.trim().isEmpty()) {
PFFAN2 = Byte.parseByte(s);
} else {
PFFAN2 = Byte.MIN_VALUE;
}
}

protected final void initPFFAN6(String s) {
if (!s.trim().isEmpty()) {
PFFAN6 = Byte.parseByte(s);
} else {
PFFAN6 = Byte.MIN_VALUE;
}
}

protected final void initPFFAWH1(String s) {
if (!s.trim().isEmpty()) {
PFFAWH1 = Byte.parseByte(s);
} else {
PFFAWH1 = Byte.MIN_VALUE;
}
}

protected final void initPFFAWH16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFFAWH16 = false;
}
}

protected final void initPFFAWH6(String s) {
if (!s.trim().isEmpty()) {
PFFAWH6 = Byte.parseByte(s);
} else {
PFFAWH6 = Byte.MIN_VALUE;
}
}

protected final void initPFINCA1(String s) {
if (!s.trim().isEmpty()) {
PFINCA1 = Integer.parseInt(s);
} else {
PFINCA1 = Integer.MIN_VALUE;
}
}

protected final void initPFINCA1_I(String s) {
if (!s.trim().isEmpty()) {
PFINCA1_I = Integer.parseInt(s);
} else {
PFINCA1_I = Integer.MIN_VALUE;
}
}

protected final void initPFINCA1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFINCA1_IFLAG = false;
}
}

protected final void initPFINCA2(String s) {
if (!s.trim().isEmpty()) {
PFINCA2 = Integer.parseInt(s);
} else {
PFINCA2 = Integer.MIN_VALUE;
}
}

protected final void initPFINCA2_I(String s) {
if (!s.trim().isEmpty()) {
PFINCA2_I = Double.parseDouble(s);
} else {
PFINCA2_I = Double.NaN;
}
}

protected final void initPFINCA2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFINCA2_IFLAG = false;
}
}

protected final void initPFINCA3(String s) {
if (!s.trim().isEmpty()) {
PFINCA3 = Double.parseDouble(s);
} else {
PFINCA3 = Double.NaN;
}
}

protected final void initPFINCA3_I(String s) {
if (!s.trim().isEmpty()) {
PFINCA3_I = Double.parseDouble(s);
} else {
PFINCA3_I = Double.NaN;
}
}

protected final void initPFINCA3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFINCA3_IFLAG = false;
}
}

protected final void initPFINCA4(String s) {
if (!s.trim().isEmpty()) {
PFINCA4 = Double.parseDouble(s);
} else {
PFINCA4 = Double.NaN;
}
}

protected final void initPFINCA4_I(String s) {
if (!s.trim().isEmpty()) {
PFINCA4_I = Short.parseShort(s);
} else {
PFINCA4_I = Short.MIN_VALUE;
}
}

protected final void initPFINCA4_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFINCA4_IFLAG = false;
}
}

protected final void initPFINCA5(String s) {
if (!s.trim().isEmpty()) {
PFINCA5 = Short.parseShort(s);
} else {
PFINCA5 = Short.MIN_VALUE;
}
}

protected final void initPFINCA5_I(String s) {
if (!s.trim().isEmpty()) {
PFINCA5_I = Short.parseShort(s);
} else {
PFINCA5_I = Short.MIN_VALUE;
}
}

protected final void initPFINCA5_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFINCA5_IFLAG = false;
}
}

protected final void initPFINCA6(String s) {
if (!s.trim().isEmpty()) {
PFINCA6 = Short.parseShort(s);
} else {
PFINCA6 = Short.MIN_VALUE;
}
}

protected final void initPFINCA6_I(String s) {
if (!s.trim().isEmpty()) {
PFINCA6_I = Short.parseShort(s);
} else {
PFINCA6_I = Short.MIN_VALUE;
}
}

protected final void initPFINCP1(String s) {
if (!s.trim().isEmpty()) {
PFINCP1 = Byte.parseByte(s);
} else {
PFINCP1 = Byte.MIN_VALUE;
}
}

protected final void initPFINCP1_I(String s) {
if (!s.trim().isEmpty()) {
PFINCP1_I = Byte.parseByte(s);
} else {
PFINCP1_I = Byte.MIN_VALUE;
}
}

protected final void initPFINCP1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFINCP1_IFLAG = false;
}
}

protected final void initPFINCP2(String s) {
if (!s.trim().isEmpty()) {
PFINCP2 = Byte.parseByte(s);
} else {
PFINCP2 = Byte.MIN_VALUE;
}
}

protected final void initPFINCP2_I(String s) {
if (!s.trim().isEmpty()) {
PFINCP2_I = Byte.parseByte(s);
} else {
PFINCP2_I = Byte.MIN_VALUE;
}
}

protected final void initPFINCP2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFINCP2_IFLAG = false;
}
}

protected final void initPFINCP3(String s) {
if (!s.trim().isEmpty()) {
PFINCP3 = Byte.parseByte(s);
} else {
PFINCP3 = Byte.MIN_VALUE;
}
}

protected final void initPFINCP3_I(String s) {
if (!s.trim().isEmpty()) {
PFINCP3_I = Byte.parseByte(s);
} else {
PFINCP3_I = Byte.MIN_VALUE;
}
}

protected final void initPFINCP3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFINCP3_IFLAG = false;
}
}

protected final void initPFINCP4(String s) {
if (!s.trim().isEmpty()) {
PFINCP4 = Byte.parseByte(s);
} else {
PFINCP4 = Byte.MIN_VALUE;
}
}

protected final void initPFINCP4_I(String s) {
if (!s.trim().isEmpty()) {
PFINCP4_I = Byte.parseByte(s);
} else {
PFINCP4_I = Byte.MIN_VALUE;
}
}

protected final void initPFINCP4_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFINCP4_IFLAG = false;
}
}

protected final void initPFINCP5(String s) {
if (!s.trim().isEmpty()) {
PFINCP5 = Byte.parseByte(s);
} else {
PFINCP5 = Byte.MIN_VALUE;
}
}

protected final void initPFINCP5_I(String s) {
if (!s.trim().isEmpty()) {
PFINCP5_I = Byte.parseByte(s);
} else {
PFINCP5_I = Byte.MIN_VALUE;
}
}

protected final void initPFINCP5_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFINCP5_IFLAG = false;
}
}

protected final void initPFINCP6(String s) {
if (!s.trim().isEmpty()) {
PFINCP6 = Byte.parseByte(s);
} else {
PFINCP6 = Byte.MIN_VALUE;
}
}

protected final void initPFINCP6_I(String s) {
if (!s.trim().isEmpty()) {
PFINCP6_I = Byte.parseByte(s);
} else {
PFINCP6_I = Byte.MIN_VALUE;
}
}

protected final void initPFINCP6_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFINCP6_IFLAG = false;
}
}

protected final void initPFLMUS1(String s) {
if (!s.trim().isEmpty()) {
PFLMUS1 = Byte.parseByte(s);
} else {
PFLMUS1 = Byte.MIN_VALUE;
}
}

protected final void initPFLMUS2(String s) {
if (!s.trim().isEmpty()) {
PFLMUS2 = Byte.parseByte(s);
} else {
PFLMUS2 = Byte.MIN_VALUE;
}
}

protected final void initPFLMUS3(String s) {
if (!s.trim().isEmpty()) {
PFLMUS3 = Byte.parseByte(s);
} else {
PFLMUS3 = Byte.MIN_VALUE;
}
}

protected final void initPFLMUS4(String s) {
if (!s.trim().isEmpty()) {
PFLMUS4 = Byte.parseByte(s);
} else {
PFLMUS4 = Byte.MIN_VALUE;
}
}

protected final void initPFLMV1(String s) {
if (!s.trim().isEmpty()) {
PFLMV1 = Integer.parseInt(s);
} else {
PFLMV1 = Integer.MIN_VALUE;
}
}

protected final void initPFLMV1_I(String s) {
if (!s.trim().isEmpty()) {
PFLMV1_I = Integer.parseInt(s);
} else {
PFLMV1_I = Integer.MIN_VALUE;
}
}

protected final void initPFLMV1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFLMV1_IFLAG = false;
}
}

protected final void initPFLMV2(String s) {
if (!s.trim().isEmpty()) {
PFLMV2 = Integer.parseInt(s);
} else {
PFLMV2 = Integer.MIN_VALUE;
}
}

protected final void initPFLMV2_I(String s) {
if (!s.trim().isEmpty()) {
PFLMV2_I = Integer.parseInt(s);
} else {
PFLMV2_I = Integer.MIN_VALUE;
}
}

protected final void initPFLMV2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFLMV2_IFLAG = false;
}
}

protected final void initPFLMV3(String s) {
if (!s.trim().isEmpty()) {
PFLMV3 = Integer.parseInt(s);
} else {
PFLMV3 = Integer.MIN_VALUE;
}
}

protected final void initPFLMV3_I(String s) {
if (!s.trim().isEmpty()) {
PFLMV3_I = Integer.parseInt(s);
} else {
PFLMV3_I = Integer.MIN_VALUE;
}
}

protected final void initPFLMV3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFLMV3_IFLAG = false;
}
}

protected final void initPFLMV4(String s) {
if (!s.trim().isEmpty()) {
PFLMV4 = Integer.parseInt(s);
} else {
PFLMV4 = Integer.MIN_VALUE;
}
}

protected final void initPFLMV4_I(String s) {
if (!s.trim().isEmpty()) {
PFLMV4_I = Integer.parseInt(s);
} else {
PFLMV4_I = Integer.MIN_VALUE;
}
}

protected final void initPFLMV4_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFLMV4_IFLAG = false;
}
}

protected final void initPFLMV6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFLMV6 = false;
}
}

protected final void initPFLMVB1(String s) {
if (!s.trim().isEmpty()) {
PFLMVB1 = Byte.parseByte(s);
} else {
PFLMVB1 = Byte.MIN_VALUE;
}
}

protected final void initPFLMVB2(String s) {
if (!s.trim().isEmpty()) {
PFLMVB2 = Byte.parseByte(s);
} else {
PFLMVB2 = Byte.MIN_VALUE;
}
}

protected final void initPFLMVB3(String s) {
if (!s.trim().isEmpty()) {
PFLMVB3 = Byte.parseByte(s);
} else {
PFLMVB3 = Byte.MIN_VALUE;
}
}

protected final void initPFLUM1(String s) {
if (!s.trim().isEmpty()) {
PFLUM1 = Byte.parseByte(s);
} else {
PFLUM1 = Byte.MIN_VALUE;
}
}

protected final void initPFLUM1_I(String s) {
if (!s.trim().isEmpty()) {
PFLUM1_I = Byte.parseByte(s);
} else {
PFLUM1_I = Byte.MIN_VALUE;
}
}

protected final void initPFLUM1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFLUM1_IFLAG = false;
}
}

protected final void initPFLUM2(String s) {
if (!s.trim().isEmpty()) {
PFLUM2 = Byte.parseByte(s);
} else {
PFLUM2 = Byte.MIN_VALUE;
}
}

protected final void initPFLUM2_I(String s) {
if (!s.trim().isEmpty()) {
PFLUM2_I = Byte.parseByte(s);
} else {
PFLUM2_I = Byte.MIN_VALUE;
}
}

protected final void initPFLUM2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFLUM2_IFLAG = Byte.parseByte(s);
} else {
PFLUM2_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFLUM3(String s) {
if (!s.trim().isEmpty()) {
PFLUM3 = Byte.parseByte(s);
} else {
PFLUM3 = Byte.MIN_VALUE;
}
}

protected final void initPFLUM3_I(String s) {
if (!s.trim().isEmpty()) {
PFLUM3_I = Byte.parseByte(s);
} else {
PFLUM3_I = Byte.MIN_VALUE;
}
}

protected final void initPFLUM3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFLUM3_IFLAG = Byte.parseByte(s);
} else {
PFLUM3_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFLUM4(String s) {
if (!s.trim().isEmpty()) {
PFLUM4 = Byte.parseByte(s);
} else {
PFLUM4 = Byte.MIN_VALUE;
}
}

protected final void initPFLUM4_I(String s) {
if (!s.trim().isEmpty()) {
PFLUM4_I = Byte.parseByte(s);
} else {
PFLUM4_I = Byte.MIN_VALUE;
}
}

protected final void initPFLUM4_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFLUM4_IFLAG = Byte.parseByte(s);
} else {
PFLUM4_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFLUM5(String s) {
if (!s.trim().isEmpty()) {
PFLUM5 = Byte.parseByte(s);
} else {
PFLUM5 = Byte.MIN_VALUE;
}
}

protected final void initPFLUM5_I(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFLUM5_I = false;
}
}

protected final void initPFLUM5_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFLUM5_IFLAG = Byte.parseByte(s);
} else {
PFLUM5_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFLUM6(String s) {
if (!s.trim().isEmpty()) {
PFLUM6 = Byte.parseByte(s);
} else {
PFLUM6 = Byte.MIN_VALUE;
}
}

protected final void initPFLUM6_I(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFLUM6_I = false;
}
}

protected final void initPFLUM6_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFLUM6_IFLAG = Byte.parseByte(s);
} else {
PFLUM6_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFLUMALL1(String s) {
if (!s.trim().isEmpty()) {
PFLUMALL1 = Byte.parseByte(s);
} else {
PFLUMALL1 = Byte.MIN_VALUE;
}
}

protected final void initPFLUMALL1_I(String s) {
if (!s.trim().isEmpty()) {
PFLUMALL1_I = Byte.parseByte(s);
} else {
PFLUMALL1_I = Byte.MIN_VALUE;
}
}

protected final void initPFLUMALL1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFLUMALL1_IFLAG = false;
}
}

protected final void initPFLUMALL2(String s) {
if (!s.trim().isEmpty()) {
PFLUMALL2 = Byte.parseByte(s);
} else {
PFLUMALL2 = Byte.MIN_VALUE;
}
}

protected final void initPFLUMALL2_I(String s) {
if (!s.trim().isEmpty()) {
PFLUMALL2_I = Byte.parseByte(s);
} else {
PFLUMALL2_I = Byte.MIN_VALUE;
}
}

protected final void initPFLUMALL2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFLUMALL2_IFLAG = Byte.parseByte(s);
} else {
PFLUMALL2_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFLUMALL3(String s) {
if (!s.trim().isEmpty()) {
PFLUMALL3 = Byte.parseByte(s);
} else {
PFLUMALL3 = Byte.MIN_VALUE;
}
}

protected final void initPFLUMALL3_I(String s) {
if (!s.trim().isEmpty()) {
PFLUMALL3_I = Byte.parseByte(s);
} else {
PFLUMALL3_I = Byte.MIN_VALUE;
}
}

protected final void initPFLUMALL3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFLUMALL3_IFLAG = Byte.parseByte(s);
} else {
PFLUMALL3_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFLUMALL4(String s) {
if (!s.trim().isEmpty()) {
PFLUMALL4 = Byte.parseByte(s);
} else {
PFLUMALL4 = Byte.MIN_VALUE;
}
}

protected final void initPFLUMALL4_I(String s) {
if (!s.trim().isEmpty()) {
PFLUMALL4_I = Byte.parseByte(s);
} else {
PFLUMALL4_I = Byte.MIN_VALUE;
}
}

protected final void initPFLUMALL4_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFLUMALL4_IFLAG = Byte.parseByte(s);
} else {
PFLUMALL4_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFLUMV1(String s) {
if (!s.trim().isEmpty()) {
PFLUMV1 = Integer.parseInt(s);
} else {
PFLUMV1 = Integer.MIN_VALUE;
}
}

protected final void initPFLUMV1_I(String s) {
if (!s.trim().isEmpty()) {
PFLUMV1_I = Integer.parseInt(s);
} else {
PFLUMV1_I = Integer.MIN_VALUE;
}
}

protected final void initPFLUMV1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFLUMV1_IFLAG = false;
}
}

protected final void initPFLUMV2(String s) {
if (!s.trim().isEmpty()) {
PFLUMV2 = Integer.parseInt(s);
} else {
PFLUMV2 = Integer.MIN_VALUE;
}
}

protected final void initPFLUMV2_I(String s) {
if (!s.trim().isEmpty()) {
PFLUMV2_I = Double.parseDouble(s);
} else {
PFLUMV2_I = Double.NaN;
}
}

protected final void initPFLUMV2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFLUMV2_IFLAG = false;
}
}

protected final void initPFLUMV3(String s) {
if (!s.trim().isEmpty()) {
PFLUMV3 = Integer.parseInt(s);
} else {
PFLUMV3 = Integer.MIN_VALUE;
}
}

protected final void initPFLUMV3_I(String s) {
if (!s.trim().isEmpty()) {
PFLUMV3_I = Integer.parseInt(s);
} else {
PFLUMV3_I = Integer.MIN_VALUE;
}
}

protected final void initPFLUMV3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFLUMV3_IFLAG = false;
}
}

protected final void initPFLUMV4(String s) {
if (!s.trim().isEmpty()) {
PFLUMV4 = Integer.parseInt(s);
} else {
PFLUMV4 = Integer.MIN_VALUE;
}
}

protected final void initPFLUMV4_I(String s) {
if (!s.trim().isEmpty()) {
PFLUMV4_I = Integer.parseInt(s);
} else {
PFLUMV4_I = Integer.MIN_VALUE;
}
}

protected final void initPFLUMV4_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFLUMV4_IFLAG = false;
}
}

protected final void initPFLUMV5(String s) {
if (!s.trim().isEmpty()) {
PFLUMV5 = Integer.parseInt(s);
} else {
PFLUMV5 = Integer.MIN_VALUE;
}
}

protected final void initPFLUMV5_I(String s) {
if (!s.trim().isEmpty()) {
PFLUMV5_I = Integer.parseInt(s);
} else {
PFLUMV5_I = Integer.MIN_VALUE;
}
}

protected final void initPFLUMV5_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFLUMV5_IFLAG = Byte.parseByte(s);
} else {
PFLUMV5_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFLUMV6(String s) {
if (!s.trim().isEmpty()) {
PFLUMV6 = Integer.parseInt(s);
} else {
PFLUMV6 = Integer.MIN_VALUE;
}
}

protected final void initPFLUMV6_I(String s) {
if (!s.trim().isEmpty()) {
PFLUMV6_I = Integer.parseInt(s);
} else {
PFLUMV6_I = Integer.MIN_VALUE;
}
}

protected final void initPFLUMV6_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFLUMV6_IFLAG = false;
}
}

protected final void initPFLUVB1(String s) {
if (!s.trim().isEmpty()) {
PFLUVB1 = Byte.parseByte(s);
} else {
PFLUVB1 = Byte.MIN_VALUE;
}
}

protected final void initPFLUVB2(String s) {
if (!s.trim().isEmpty()) {
PFLUVB2 = Byte.parseByte(s);
} else {
PFLUVB2 = Byte.MIN_VALUE;
}
}

protected final void initPFLUVB3(String s) {
if (!s.trim().isEmpty()) {
PFLUVB3 = Byte.parseByte(s);
} else {
PFLUVB3 = Byte.MIN_VALUE;
}
}

protected final void initPFLUVB4(String s) {
if (!s.trim().isEmpty()) {
PFLUVB4 = Byte.parseByte(s);
} else {
PFLUVB4 = Byte.MIN_VALUE;
}
}

protected final void initPFLUVB5(String s) {
if (!s.trim().isEmpty()) {
PFLUVB5 = Byte.parseByte(s);
} else {
PFLUVB5 = Byte.MIN_VALUE;
}
}

protected final void initPFLUVB6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFLUVB6 = false;
}
}

protected final void initPFNEW(String s) {
if (!s.trim().isEmpty()) {
PFNEW = Byte.parseByte(s);
} else {
PFNEW = Byte.MIN_VALUE;
}
}

protected final void initPFNEWNO(String s) {
if (!s.trim().isEmpty()) {
PFNEWNO = Byte.parseByte(s);
} else {
PFNEWNO = Byte.MIN_VALUE;
}
}

protected final void initPFNEWNO_I(String s) {
if (!s.trim().isEmpty()) {
PFNEWNO_I = Byte.parseByte(s);
} else {
PFNEWNO_I = Byte.MIN_VALUE;
}
}

protected final void initPFNEWNO_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFNEWNO_IFLAG = false;
}
}

protected final void initPFNEW_I(String s) {
if (!s.trim().isEmpty()) {
PFNEW_I = Byte.parseByte(s);
} else {
PFNEW_I = Byte.MIN_VALUE;
}
}

protected final void initPFNEW_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFNEW_IFLAG = false;
}
}

protected final void initPFOCTY1(String s) {
if (!s.trim().isEmpty()) {
PFOCTY1 = Byte.parseByte(s);
} else {
PFOCTY1 = Byte.MIN_VALUE;
}
}

protected final void initPFOCTY1_I(String s) {
if (!s.trim().isEmpty()) {
PFOCTY1_I = Byte.parseByte(s);
} else {
PFOCTY1_I = Byte.MIN_VALUE;
}
}

protected final void initPFOCTY1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFOCTY1_IFLAG = false;
}
}

protected final void initPFOCTY2(String s) {
if (!s.trim().isEmpty()) {
PFOCTY2 = Byte.parseByte(s);
} else {
PFOCTY2 = Byte.MIN_VALUE;
}
}

protected final void initPFOCTY2_I(String s) {
if (!s.trim().isEmpty()) {
PFOCTY2_I = Byte.parseByte(s);
} else {
PFOCTY2_I = Byte.MIN_VALUE;
}
}

protected final void initPFOCTY2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFOCTY2_IFLAG = false;
}
}

protected final void initPFOCTY3(String s) {
if (!s.trim().isEmpty()) {
PFOCTY3 = Byte.parseByte(s);
} else {
PFOCTY3 = Byte.MIN_VALUE;
}
}

protected final void initPFOCTY3_I(String s) {
if (!s.trim().isEmpty()) {
PFOCTY3_I = Byte.parseByte(s);
} else {
PFOCTY3_I = Byte.MIN_VALUE;
}
}

protected final void initPFOCTY3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFOCTY3_IFLAG = false;
}
}

protected final void initPFOCTY4(String s) {
if (!s.trim().isEmpty()) {
PFOCTY4 = Byte.parseByte(s);
} else {
PFOCTY4 = Byte.MIN_VALUE;
}
}

protected final void initPFOCTY4_I(String s) {
if (!s.trim().isEmpty()) {
PFOCTY4_I = Byte.parseByte(s);
} else {
PFOCTY4_I = Byte.MIN_VALUE;
}
}

protected final void initPFOCTY4_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFOCTY4_IFLAG = false;
}
}

protected final void initPFOCTY5(String s) {
if (!s.trim().isEmpty()) {
PFOCTY5 = Byte.parseByte(s);
} else {
PFOCTY5 = Byte.MIN_VALUE;
}
}

protected final void initPFOCTY5_I(String s) {
if (!s.trim().isEmpty()) {
PFOCTY5_I = Byte.parseByte(s);
} else {
PFOCTY5_I = Byte.MIN_VALUE;
}
}

protected final void initPFOCTY5_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFOCTY5_IFLAG = Byte.parseByte(s);
} else {
PFOCTY5_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFOCTY6(String s) {
if (!s.trim().isEmpty()) {
PFOCTY6 = Byte.parseByte(s);
} else {
PFOCTY6 = Byte.MIN_VALUE;
}
}

protected final void initPFOCTY6_I(String s) {
if (!s.trim().isEmpty()) {
PFOCTY6_I = Byte.parseByte(s);
} else {
PFOCTY6_I = Byte.MIN_VALUE;
}
}

protected final void initPFOCTY6_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFOCTY6_IFLAG = Byte.parseByte(s);
} else {
PFOCTY6_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFREC1(String s) {
if (!s.trim().isEmpty()) {
PFREC1 = Byte.parseByte(s);
} else {
PFREC1 = Byte.MIN_VALUE;
}
}

protected final void initPFREC1_I(String s) {
if (!s.trim().isEmpty()) {
PFREC1_I = Byte.parseByte(s);
} else {
PFREC1_I = Byte.MIN_VALUE;
}
}

protected final void initPFREC1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFREC1_IFLAG = false;
}
}

protected final void initPFREC2(String s) {
if (!s.trim().isEmpty()) {
PFREC2 = Byte.parseByte(s);
} else {
PFREC2 = Byte.MIN_VALUE;
}
}

protected final void initPFREC2_I(String s) {
if (!s.trim().isEmpty()) {
PFREC2_I = Byte.parseByte(s);
} else {
PFREC2_I = Byte.MIN_VALUE;
}
}

protected final void initPFREC2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFREC2_IFLAG = false;
}
}

protected final void initPFREC3(String s) {
if (!s.trim().isEmpty()) {
PFREC3 = Byte.parseByte(s);
} else {
PFREC3 = Byte.MIN_VALUE;
}
}

protected final void initPFREC3_I(String s) {
if (!s.trim().isEmpty()) {
PFREC3_I = Byte.parseByte(s);
} else {
PFREC3_I = Byte.MIN_VALUE;
}
}

protected final void initPFREC3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFREC3_IFLAG = false;
}
}

protected final void initPFREC4(String s) {
if (!s.trim().isEmpty()) {
PFREC4 = Byte.parseByte(s);
} else {
PFREC4 = Byte.MIN_VALUE;
}
}

protected final void initPFREC4_I(String s) {
if (!s.trim().isEmpty()) {
PFREC4_I = Byte.parseByte(s);
} else {
PFREC4_I = Byte.MIN_VALUE;
}
}

protected final void initPFREC4_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFREC4_IFLAG = false;
}
}

protected final void initPFREC5(String s) {
if (!s.trim().isEmpty()) {
PFREC5 = Byte.parseByte(s);
} else {
PFREC5 = Byte.MIN_VALUE;
}
}

protected final void initPFREC5_I(String s) {
if (!s.trim().isEmpty()) {
PFREC5_I = Byte.parseByte(s);
} else {
PFREC5_I = Byte.MIN_VALUE;
}
}

protected final void initPFREC5_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFREC5_IFLAG = false;
}
}

protected final void initPFREC6(String s) {
if (!s.trim().isEmpty()) {
PFREC6 = Byte.parseByte(s);
} else {
PFREC6 = Byte.MIN_VALUE;
}
}

protected final void initPFREC6_I(String s) {
if (!s.trim().isEmpty()) {
PFREC6_I = Byte.parseByte(s);
} else {
PFREC6_I = Byte.MIN_VALUE;
}
}

protected final void initPFREC6_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFREC6_IFLAG = false;
}
}

protected final void initPFREM1(String s) {
if (!s.trim().isEmpty()) {
PFREM1 = Byte.parseByte(s);
} else {
PFREM1 = Byte.MIN_VALUE;
}
}

protected final void initPFREM1_I(String s) {
if (!s.trim().isEmpty()) {
PFREM1_I = Byte.parseByte(s);
} else {
PFREM1_I = Byte.MIN_VALUE;
}
}

protected final void initPFREM1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFREM1_IFLAG = false;
}
}

protected final void initPFREM2(String s) {
if (!s.trim().isEmpty()) {
PFREM2 = Byte.parseByte(s);
} else {
PFREM2 = Byte.MIN_VALUE;
}
}

protected final void initPFREM2_I(String s) {
if (!s.trim().isEmpty()) {
PFREM2_I = Byte.parseByte(s);
} else {
PFREM2_I = Byte.MIN_VALUE;
}
}

protected final void initPFREM2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFREM2_IFLAG = Byte.parseByte(s);
} else {
PFREM2_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFREM3(String s) {
if (!s.trim().isEmpty()) {
PFREM3 = Byte.parseByte(s);
} else {
PFREM3 = Byte.MIN_VALUE;
}
}

protected final void initPFREM3_I(String s) {
if (!s.trim().isEmpty()) {
PFREM3_I = Byte.parseByte(s);
} else {
PFREM3_I = Byte.MIN_VALUE;
}
}

protected final void initPFREM3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFREM3_IFLAG = Byte.parseByte(s);
} else {
PFREM3_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFREM4(String s) {
if (!s.trim().isEmpty()) {
PFREM4 = Byte.parseByte(s);
} else {
PFREM4 = Byte.MIN_VALUE;
}
}

protected final void initPFREM4_I(String s) {
if (!s.trim().isEmpty()) {
PFREM4_I = Byte.parseByte(s);
} else {
PFREM4_I = Byte.MIN_VALUE;
}
}

protected final void initPFREM4_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PFREM4_IFLAG = Byte.parseByte(s);
} else {
PFREM4_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPFSTAT1(String s) {
if (!s.trim().isEmpty()) {
PFSTAT1 = Byte.parseByte(s);
} else {
PFSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initPFSTAT2(String s) {
if (!s.trim().isEmpty()) {
PFSTAT2 = Byte.parseByte(s);
} else {
PFSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initPFSTAT3(String s) {
if (!s.trim().isEmpty()) {
PFSTAT3 = Byte.parseByte(s);
} else {
PFSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initPFSTAT4(String s) {
if (!s.trim().isEmpty()) {
PFSTAT4 = Byte.parseByte(s);
} else {
PFSTAT4 = Byte.MIN_VALUE;
}
}

protected final void initPFSTAT5(String s) {
if (!s.trim().isEmpty()) {
PFSTAT5 = Byte.parseByte(s);
} else {
PFSTAT5 = Byte.MIN_VALUE;
}
}

protected final void initPFSTAT6(String s) {
if (!s.trim().isEmpty()) {
PFSTAT6 = Byte.parseByte(s);
} else {
PFSTAT6 = Byte.MIN_VALUE;
}
}

protected final void initPFSTMM1(String s) {
if (!s.trim().isEmpty()) {
PFSTMM1 = Byte.parseByte(s);
} else {
PFSTMM1 = Byte.MIN_VALUE;
}
}

protected final void initPFSTMM2(String s) {
if (!s.trim().isEmpty()) {
PFSTMM2 = Byte.parseByte(s);
} else {
PFSTMM2 = Byte.MIN_VALUE;
}
}

protected final void initPFSTMM3(String s) {
if (!s.trim().isEmpty()) {
PFSTMM3 = Byte.parseByte(s);
} else {
PFSTMM3 = Byte.MIN_VALUE;
}
}

protected final void initPFSTMM4(String s) {
if (!s.trim().isEmpty()) {
PFSTMM4 = Byte.parseByte(s);
} else {
PFSTMM4 = Byte.MIN_VALUE;
}
}

protected final void initPFSTMM5(String s) {
if (!s.trim().isEmpty()) {
PFSTMM5 = Byte.parseByte(s);
} else {
PFSTMM5 = Byte.MIN_VALUE;
}
}

protected final void initPFSTMM6(String s) {
if (!s.trim().isEmpty()) {
PFSTMM6 = Byte.parseByte(s);
} else {
PFSTMM6 = Byte.MIN_VALUE;
}
}

protected final void initPFSTMY1(String s) {
if (!s.trim().isEmpty()) {
PFSTMY1 = Short.parseShort(s);
} else {
PFSTMY1 = Short.MIN_VALUE;
}
}

protected final void initPFSTMY2(String s) {
if (!s.trim().isEmpty()) {
PFSTMY2 = Short.parseShort(s);
} else {
PFSTMY2 = Short.MIN_VALUE;
}
}

protected final void initPFSTMY3(String s) {
if (!s.trim().isEmpty()) {
PFSTMY3 = Short.parseShort(s);
} else {
PFSTMY3 = Short.MIN_VALUE;
}
}

protected final void initPFSTMY4(String s) {
if (!s.trim().isEmpty()) {
PFSTMY4 = Short.parseShort(s);
} else {
PFSTMY4 = Short.MIN_VALUE;
}
}

protected final void initPFSTMY5(String s) {
if (!s.trim().isEmpty()) {
PFSTMY5 = Short.parseShort(s);
} else {
PFSTMY5 = Short.MIN_VALUE;
}
}

protected final void initPFSTMY6(String s) {
if (!s.trim().isEmpty()) {
PFSTMY6 = Short.parseShort(s);
} else {
PFSTMY6 = Short.MIN_VALUE;
}
}

protected final void initPFTYP1(String s) {
if (!s.trim().isEmpty()) {
PFTYP1 = Byte.parseByte(s);
} else {
PFTYP1 = Byte.MIN_VALUE;
}
}

protected final void initPFTYP1_I(String s) {
if (!s.trim().isEmpty()) {
PFTYP1_I = Byte.parseByte(s);
} else {
PFTYP1_I = Byte.MIN_VALUE;
}
}

protected final void initPFTYP1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFTYP1_IFLAG = false;
}
}

protected final void initPFTYP2(String s) {
if (!s.trim().isEmpty()) {
PFTYP2 = Byte.parseByte(s);
} else {
PFTYP2 = Byte.MIN_VALUE;
}
}

protected final void initPFTYP2_I(String s) {
if (!s.trim().isEmpty()) {
PFTYP2_I = Byte.parseByte(s);
} else {
PFTYP2_I = Byte.MIN_VALUE;
}
}

protected final void initPFTYP2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFTYP2_IFLAG = false;
}
}

protected final void initPFTYP3(String s) {
if (!s.trim().isEmpty()) {
PFTYP3 = Byte.parseByte(s);
} else {
PFTYP3 = Byte.MIN_VALUE;
}
}

protected final void initPFTYP3_I(String s) {
if (!s.trim().isEmpty()) {
PFTYP3_I = Byte.parseByte(s);
} else {
PFTYP3_I = Byte.MIN_VALUE;
}
}

protected final void initPFTYP3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFTYP3_IFLAG = false;
}
}

protected final void initPFTYP4(String s) {
if (!s.trim().isEmpty()) {
PFTYP4 = Byte.parseByte(s);
} else {
PFTYP4 = Byte.MIN_VALUE;
}
}

protected final void initPFTYP4_I(String s) {
if (!s.trim().isEmpty()) {
PFTYP4_I = Byte.parseByte(s);
} else {
PFTYP4_I = Byte.MIN_VALUE;
}
}

protected final void initPFTYP4_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFTYP4_IFLAG = false;
}
}

protected final void initPFTYP5(String s) {
if (!s.trim().isEmpty()) {
PFTYP5 = Byte.parseByte(s);
} else {
PFTYP5 = Byte.MIN_VALUE;
}
}

protected final void initPFTYP5_I(String s) {
if (!s.trim().isEmpty()) {
PFTYP5_I = Byte.parseByte(s);
} else {
PFTYP5_I = Byte.MIN_VALUE;
}
}

protected final void initPFTYP5_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFTYP5_IFLAG = false;
}
}

protected final void initPFTYP6(String s) {
if (!s.trim().isEmpty()) {
PFTYP6 = Byte.parseByte(s);
} else {
PFTYP6 = Byte.MIN_VALUE;
}
}

protected final void initPFTYP6_I(String s) {
if (!s.trim().isEmpty()) {
PFTYP6_I = Byte.parseByte(s);
} else {
PFTYP6_I = Byte.MIN_VALUE;
}
}

protected final void initPFTYP6_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PFTYP6_IFLAG = false;
}
}

protected final void initPHYSBUYLGDST(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PHYSBUYLGDST = false;
}
}

protected final void initPHYSHOUSGDSOST(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PHYSHOUSGDSOST = false;
}
}

protected final void initPHYSHOUSGDST(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PHYSHOUSGDST = false;
}
}

protected final void initPINC(String s) {
if (!s.trim().isEmpty()) {
PINC = Byte.parseByte(s);
} else {
PINC = Byte.MIN_VALUE;
}
}

protected final void initPMORTC2(String s) {
if (!s.trim().isEmpty()) {
PMORTC2 = Byte.parseByte(s);
} else {
PMORTC2 = Byte.MIN_VALUE;
}
}

protected final void initPMORTC3(String s) {
if (!s.trim().isEmpty()) {
PMORTC3 = Byte.parseByte(s);
} else {
PMORTC3 = Byte.MIN_VALUE;
}
}

protected final void initPNOWK(String s) {
if (!s.trim().isEmpty()) {
PNOWK = Byte.parseByte(s);
} else {
PNOWK = Byte.MIN_VALUE;
}
}

protected final void initPNOWKLN(String s) {
if (!s.trim().isEmpty()) {
PNOWKLN = Byte.parseByte(s);
} else {
PNOWKLN = Byte.MIN_VALUE;
}
}

protected final void initPNOWKRS(String s) {
if (!s.trim().isEmpty()) {
PNOWKRS = Byte.parseByte(s);
} else {
PNOWKRS = Byte.MIN_VALUE;
}
}

protected final void initPNUMOS(String s) {
if (!s.trim().isEmpty()) {
PNUMOS = Byte.parseByte(s);
} else {
PNUMOS = Byte.MIN_VALUE;
}
}

protected final void initPNUMOS_I(String s) {
if (!s.trim().isEmpty()) {
PNUMOS_I = Byte.parseByte(s);
} else {
PNUMOS_I = Byte.MIN_VALUE;
}
}

protected final void initPNUMOS_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PNUMOS_IFLAG = false;
}
}

protected final void initPOADD1(String s) {
if (!s.trim().isEmpty()) {
POADD1 = Byte.parseByte(s);
} else {
POADD1 = Byte.MIN_VALUE;
}
}

protected final void initPOADD1_I(String s) {
if (!s.trim().isEmpty()) {
POADD1_I = Byte.parseByte(s);
} else {
POADD1_I = Byte.MIN_VALUE;
}
}

protected final void initPOADD1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POADD1_IFLAG = false;
}
}

protected final void initPOADD2(String s) {
if (!s.trim().isEmpty()) {
POADD2 = Byte.parseByte(s);
} else {
POADD2 = Byte.MIN_VALUE;
}
}

protected final void initPOADD2_I(String s) {
if (!s.trim().isEmpty()) {
POADD2_I = Byte.parseByte(s);
} else {
POADD2_I = Byte.MIN_VALUE;
}
}

protected final void initPOADD2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POADD2_IFLAG = false;
}
}

protected final void initPOADD3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POADD3 = false;
}
}

protected final void initPOADD3_I(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POADD3_I = false;
}
}

protected final void initPOADD3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POADD3_IFLAG = false;
}
}

protected final void initPOADD4(String s) {
if (!s.trim().isEmpty()) {
POADD4 = Byte.parseByte(s);
} else {
POADD4 = Byte.MIN_VALUE;
}
}

protected final void initPOADD4_I(String s) {
if (!s.trim().isEmpty()) {
POADD4_I = Byte.parseByte(s);
} else {
POADD4_I = Byte.MIN_VALUE;
}
}

protected final void initPOADD4_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POADD4_IFLAG = false;
}
}

protected final void initPOADD5_I(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POADD5_I = false;
}
}

protected final void initPOADD5_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POADD5_IFLAG = false;
}
}

protected final void initPOADD6_I(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POADD6_I = false;
}
}

protected final void initPOADD6_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POADD6_IFLAG = false;
}
}

protected final void initPOANEH1(String s) {
if (!s.trim().isEmpty()) {
POANEH1 = Byte.parseByte(s);
} else {
POANEH1 = Byte.MIN_VALUE;
}
}

protected final void initPOANGA1(String s) {
if (!s.trim().isEmpty()) {
POANGA1 = Byte.parseByte(s);
} else {
POANGA1 = Byte.MIN_VALUE;
}
}

protected final void initPOANIF1(String s) {
if (!s.trim().isEmpty()) {
POANIF1 = Byte.parseByte(s);
} else {
POANIF1 = Byte.MIN_VALUE;
}
}

protected final void initPOANJT1(String s) {
if (!s.trim().isEmpty()) {
POANJT1 = Byte.parseByte(s);
} else {
POANJT1 = Byte.MIN_VALUE;
}
}

protected final void initPOANN1(String s) {
if (!s.trim().isEmpty()) {
POANN1 = Byte.parseByte(s);
} else {
POANN1 = Byte.MIN_VALUE;
}
}

protected final void initPOANN5(String s) {
if (!s.trim().isEmpty()) {
POANN5 = Byte.parseByte(s);
} else {
POANN5 = Byte.MIN_VALUE;
}
}

protected final void initPOCASH1(String s) {
if (!s.trim().isEmpty()) {
POCASH1 = Byte.parseByte(s);
} else {
POCASH1 = Byte.MIN_VALUE;
}
}

protected final void initPOCASH2(String s) {
if (!s.trim().isEmpty()) {
POCASH2 = Byte.parseByte(s);
} else {
POCASH2 = Byte.MIN_VALUE;
}
}

protected final void initPOCNFG1(String s) {
if (!s.trim().isEmpty()) {
POCNFG1 = Byte.parseByte(s);
} else {
POCNFG1 = Byte.MIN_VALUE;
}
}

protected final void initPOCNFG2(String s) {
if (!s.trim().isEmpty()) {
POCNFG2 = Byte.parseByte(s);
} else {
POCNFG2 = Byte.MIN_VALUE;
}
}

protected final void initPOCNFR1(String s) {
if (!s.trim().isEmpty()) {
POCNFR1 = Double.parseDouble(s);
} else {
POCNFR1 = Double.NaN;
}
}

protected final void initPOCNFR2(String s) {
if (!s.trim().isEmpty()) {
POCNFR2 = Double.parseDouble(s);
} else {
POCNFR2 = Double.NaN;
}
}

protected final void initPOCNPR1(String s) {
if (!s.trim().isEmpty()) {
POCNPR1 = Byte.parseByte(s);
} else {
POCNPR1 = Byte.MIN_VALUE;
}
}

protected final void initPOCNPR2(String s) {
if (!s.trim().isEmpty()) {
POCNPR2 = Byte.parseByte(s);
} else {
POCNPR2 = Byte.MIN_VALUE;
}
}

protected final void initPOCONH1(String s) {
if (!s.trim().isEmpty()) {
POCONH1 = Byte.parseByte(s);
} else {
POCONH1 = Byte.MIN_VALUE;
}
}

protected final void initPOCONH2(String s) {
if (!s.trim().isEmpty()) {
POCONH2 = Byte.parseByte(s);
} else {
POCONH2 = Byte.MIN_VALUE;
}
}

protected final void initPOCTYP1(String s) {
if (!s.trim().isEmpty()) {
POCTYP1 = Byte.parseByte(s);
} else {
POCTYP1 = Byte.MIN_VALUE;
}
}

protected final void initPOCTYP1_I(String s) {
if (!s.trim().isEmpty()) {
POCTYP1_I = Byte.parseByte(s);
} else {
POCTYP1_I = Byte.MIN_VALUE;
}
}

protected final void initPOCTYP1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POCTYP1_IFLAG = false;
}
}

protected final void initPOCTYP2(String s) {
if (!s.trim().isEmpty()) {
POCTYP2 = Byte.parseByte(s);
} else {
POCTYP2 = Byte.MIN_VALUE;
}
}

protected final void initPOCTYP2_I(String s) {
if (!s.trim().isEmpty()) {
POCTYP2_I = Byte.parseByte(s);
} else {
POCTYP2_I = Byte.MIN_VALUE;
}
}

protected final void initPOCTYP2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POCTYP2_IFLAG = false;
}
}

protected final void initPODRINC1(String s) {
if (!s.trim().isEmpty()) {
PODRINC1 = Short.parseShort(s);
} else {
PODRINC1 = Short.MIN_VALUE;
}
}

protected final void initPODRINC2(String s) {
if (!s.trim().isEmpty()) {
PODRINC2 = Integer.parseInt(s);
} else {
PODRINC2 = Integer.MIN_VALUE;
}
}

protected final void initPODRINCB1(String s) {
if (!s.trim().isEmpty()) {
PODRINCB1 = Byte.parseByte(s);
} else {
PODRINCB1 = Byte.MIN_VALUE;
}
}

protected final void initPODRINCB2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PODRINCB2 = false;
}
}

protected final void initPODRVB1(String s) {
if (!s.trim().isEmpty()) {
PODRVB1 = Byte.parseByte(s);
} else {
PODRVB1 = Byte.MIN_VALUE;
}
}

protected final void initPODRVB2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PODRVB2 = false;
}
}

protected final void initPODRVI1(String s) {
if (!s.trim().isEmpty()) {
PODRVI1 = Short.parseShort(s);
} else {
PODRVI1 = Short.MIN_VALUE;
}
}

protected final void initPODRVI2(String s) {
if (!s.trim().isEmpty()) {
PODRVI2 = Integer.parseInt(s);
} else {
PODRVI2 = Integer.MIN_VALUE;
}
}

protected final void initPOEMAM1(String s) {
if (!s.trim().isEmpty()) {
POEMAM1 = Double.parseDouble(s);
} else {
POEMAM1 = Double.NaN;
}
}

protected final void initPOEMAM2(String s) {
if (!s.trim().isEmpty()) {
POEMAM2 = Integer.parseInt(s);
} else {
POEMAM2 = Integer.MIN_VALUE;
}
}

protected final void initPOEMFG1(String s) {
if (!s.trim().isEmpty()) {
POEMFG1 = Byte.parseByte(s);
} else {
POEMFG1 = Byte.MIN_VALUE;
}
}

protected final void initPOEMFG2(String s) {
if (!s.trim().isEmpty()) {
POEMFG2 = Byte.parseByte(s);
} else {
POEMFG2 = Byte.MIN_VALUE;
}
}

protected final void initPOEMFR1(String s) {
if (!s.trim().isEmpty()) {
POEMFR1 = Double.parseDouble(s);
} else {
POEMFR1 = Double.NaN;
}
}

protected final void initPOEMFR2(String s) {
if (!s.trim().isEmpty()) {
POEMFR2 = Double.parseDouble(s);
} else {
POEMFR2 = Double.NaN;
}
}

protected final void initPOEMP1(String s) {
if (!s.trim().isEmpty()) {
POEMP1 = Byte.parseByte(s);
} else {
POEMP1 = Byte.MIN_VALUE;
}
}

protected final void initPOEMP2(String s) {
if (!s.trim().isEmpty()) {
POEMP2 = Byte.parseByte(s);
} else {
POEMP2 = Byte.MIN_VALUE;
}
}

protected final void initPOEMPH1(String s) {
if (!s.trim().isEmpty()) {
POEMPH1 = Byte.parseByte(s);
} else {
POEMPH1 = Byte.MIN_VALUE;
}
}

protected final void initPOEMPH2(String s) {
if (!s.trim().isEmpty()) {
POEMPH2 = Byte.parseByte(s);
} else {
POEMPH2 = Byte.MIN_VALUE;
}
}

protected final void initPOEMPR1(String s) {
if (!s.trim().isEmpty()) {
POEMPR1 = Byte.parseByte(s);
} else {
POEMPR1 = Byte.MIN_VALUE;
}
}

protected final void initPOEMPR2(String s) {
if (!s.trim().isEmpty()) {
POEMPR2 = Byte.parseByte(s);
} else {
POEMPR2 = Byte.MIN_VALUE;
}
}

protected final void initPOFAAG1(String s) {
if (!s.trim().isEmpty()) {
POFAAG1 = Byte.parseByte(s);
} else {
POFAAG1 = Byte.MIN_VALUE;
}
}

protected final void initPOFAAG2(String s) {
if (!s.trim().isEmpty()) {
POFAAG2 = Byte.parseByte(s);
} else {
POFAAG2 = Byte.MIN_VALUE;
}
}

protected final void initPOFAN1(String s) {
if (!s.trim().isEmpty()) {
POFAN1 = Byte.parseByte(s);
} else {
POFAN1 = Byte.MIN_VALUE;
}
}

protected final void initPOFAN2(String s) {
if (!s.trim().isEmpty()) {
POFAN2 = Byte.parseByte(s);
} else {
POFAN2 = Byte.MIN_VALUE;
}
}

protected final void initPOFAN3(String s) {
if (!s.trim().isEmpty()) {
POFAN3 = Byte.parseByte(s);
} else {
POFAN3 = Byte.MIN_VALUE;
}
}

protected final void initPOFAN4(String s) {
if (!s.trim().isEmpty()) {
POFAN4 = Byte.parseByte(s);
} else {
POFAN4 = Byte.MIN_VALUE;
}
}

protected final void initPOFAN5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POFAN5 = false;
}
}

protected final void initPOFAN6(String s) {
if (!s.trim().isEmpty()) {
POFAN6 = Byte.parseByte(s);
} else {
POFAN6 = Byte.MIN_VALUE;
}
}

protected final void initPOFAN7(String s) {
if (!s.trim().isEmpty()) {
POFAN7 = Byte.parseByte(s);
} else {
POFAN7 = Byte.MIN_VALUE;
}
}

protected final void initPOFAN8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POFAN8 = false;
}
}

protected final void initPOFAWH1(String s) {
if (!s.trim().isEmpty()) {
POFAWH1 = Byte.parseByte(s);
} else {
POFAWH1 = Byte.MIN_VALUE;
}
}

protected final void initPOFAWH2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POFAWH2 = false;
}
}

protected final void initPOFAWH6(String s) {
if (!s.trim().isEmpty()) {
POFAWH6 = Byte.parseByte(s);
} else {
POFAWH6 = Byte.MIN_VALUE;
}
}

protected final void initPOJOIN1(String s) {
if (!s.trim().isEmpty()) {
POJOIN1 = Short.parseShort(s);
} else {
POJOIN1 = Short.MIN_VALUE;
}
}

protected final void initPOJOIN2(String s) {
if (!s.trim().isEmpty()) {
POJOIN2 = Short.parseShort(s);
} else {
POJOIN2 = Short.MIN_VALUE;
}
}

protected final void initPOLMUS1(String s) {
if (!s.trim().isEmpty()) {
POLMUS1 = Byte.parseByte(s);
} else {
POLMUS1 = Byte.MIN_VALUE;
}
}

protected final void initPOLMUS2(String s) {
if (!s.trim().isEmpty()) {
POLMUS2 = Byte.parseByte(s);
} else {
POLMUS2 = Byte.MIN_VALUE;
}
}

protected final void initPOLMUS3(String s) {
if (!s.trim().isEmpty()) {
POLMUS3 = Byte.parseByte(s);
} else {
POLMUS3 = Byte.MIN_VALUE;
}
}

protected final void initPOLMUS4(String s) {
if (!s.trim().isEmpty()) {
POLMUS4 = Byte.parseByte(s);
} else {
POLMUS4 = Byte.MIN_VALUE;
}
}

protected final void initPOLMUS5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POLMUS5 = false;
}
}

protected final void initPOLMUS6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POLMUS6 = false;
}
}

protected final void initPOLMUS7(String s) {
if (!s.trim().isEmpty()) {
POLMUS7 = Byte.parseByte(s);
} else {
POLMUS7 = Byte.MIN_VALUE;
}
}

protected final void initPOLMUS8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POLMUS8 = false;
}
}

protected final void initPOLMV1(String s) {
if (!s.trim().isEmpty()) {
POLMV1 = Integer.parseInt(s);
} else {
POLMV1 = Integer.MIN_VALUE;
}
}

protected final void initPOLMV1_I(String s) {
if (!s.trim().isEmpty()) {
POLMV1_I = Integer.parseInt(s);
} else {
POLMV1_I = Integer.MIN_VALUE;
}
}

protected final void initPOLMV1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POLMV1_IFLAG = false;
}
}

protected final void initPOLMV2(String s) {
if (!s.trim().isEmpty()) {
POLMV2 = Integer.parseInt(s);
} else {
POLMV2 = Integer.MIN_VALUE;
}
}

protected final void initPOLMV2_I(String s) {
if (!s.trim().isEmpty()) {
POLMV2_I = Integer.parseInt(s);
} else {
POLMV2_I = Integer.MIN_VALUE;
}
}

protected final void initPOLMV2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POLMV2_IFLAG = false;
}
}

protected final void initPOLMVB1(String s) {
if (!s.trim().isEmpty()) {
POLMVB1 = Byte.parseByte(s);
} else {
POLMVB1 = Byte.MIN_VALUE;
}
}

protected final void initPOLSYR1(String s) {
if (!s.trim().isEmpty()) {
POLSYR1 = Byte.parseByte(s);
} else {
POLSYR1 = Byte.MIN_VALUE;
}
}

protected final void initPOLSYR2(String s) {
if (!s.trim().isEmpty()) {
POLSYR2 = Byte.parseByte(s);
} else {
POLSYR2 = Byte.MIN_VALUE;
}
}

protected final void initPOLUM1(String s) {
if (!s.trim().isEmpty()) {
POLUM1 = Byte.parseByte(s);
} else {
POLUM1 = Byte.MIN_VALUE;
}
}

protected final void initPOLUM1_I(String s) {
if (!s.trim().isEmpty()) {
POLUM1_I = Byte.parseByte(s);
} else {
POLUM1_I = Byte.MIN_VALUE;
}
}

protected final void initPOLUM1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POLUM1_IFLAG = false;
}
}

protected final void initPOLUM2(String s) {
if (!s.trim().isEmpty()) {
POLUM2 = Byte.parseByte(s);
} else {
POLUM2 = Byte.MIN_VALUE;
}
}

protected final void initPOLUM2_I(String s) {
if (!s.trim().isEmpty()) {
POLUM2_I = Byte.parseByte(s);
} else {
POLUM2_I = Byte.MIN_VALUE;
}
}

protected final void initPOLUM2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
POLUM2_IFLAG = false;
}
}

protected final void initPOMETH1(String s) {
if (!s.trim().isEmpty()) {
POMETH1 = Byte.parseByte(s);
} else {
POMETH1 = Byte.MIN_VALUE;
}
}

protected final void initPOMETH2(String s) {
if (!s.trim().isEmpty()) {
POMETH2 = Byte.parseByte(s);
} else {
POMETH2 = Byte.MIN_VALUE;
}
}

protected final void initPOPYCH2(String s) {
if (!s.trim().isEmpty()) {
POPYCH2 = Byte.parseByte(s);
} else {
POPYCH2 = Byte.MIN_VALUE;
}
}

protected final void initPORAGE1(String s) {
if (!s.trim().isEmpty()) {
PORAGE1 = Byte.parseByte(s);
} else {
PORAGE1 = Byte.MIN_VALUE;
}
}

protected final void initPORAGE2(String s) {
if (!s.trim().isEmpty()) {
PORAGE2 = Byte.parseByte(s);
} else {
PORAGE2 = Byte.MIN_VALUE;
}
}

protected final void initPOWER1T(String s) {
if (!s.trim().isEmpty()) {
POWER1T = Byte.parseByte(s);
} else {
POWER1T = Byte.MIN_VALUE;
}
}

protected final void initPOWER2T(String s) {
if (!s.trim().isEmpty()) {
POWER2T = Byte.parseByte(s);
} else {
POWER2T = Byte.MIN_VALUE;
}
}

protected final void initPOYRAM1(String s) {
if (!s.trim().isEmpty()) {
POYRAM1 = Integer.parseInt(s);
} else {
POYRAM1 = Integer.MIN_VALUE;
}
}

protected final void initPOYRAM2(String s) {
if (!s.trim().isEmpty()) {
POYRAM2 = Integer.parseInt(s);
} else {
POYRAM2 = Integer.MIN_VALUE;
}
}

protected final void initPPACCU1(String s) {
if (!s.trim().isEmpty()) {
PPACCU1 = Byte.parseByte(s);
} else {
PPACCU1 = Byte.MIN_VALUE;
}
}

protected final void initPPACCU2(String s) {
if (!s.trim().isEmpty()) {
PPACCU2 = Byte.parseByte(s);
} else {
PPACCU2 = Byte.MIN_VALUE;
}
}

protected final void initPPACCU3(String s) {
if (!s.trim().isEmpty()) {
PPACCU3 = Byte.parseByte(s);
} else {
PPACCU3 = Byte.MIN_VALUE;
}
}

protected final void initPPANEH1(String s) {
if (!s.trim().isEmpty()) {
PPANEH1 = Byte.parseByte(s);
} else {
PPANEH1 = Byte.MIN_VALUE;
}
}

protected final void initPPANEH2(String s) {
if (!s.trim().isEmpty()) {
PPANEH2 = Byte.parseByte(s);
} else {
PPANEH2 = Byte.MIN_VALUE;
}
}

protected final void initPPANEH3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPANEH3 = false;
}
}

protected final void initPPANGA1(String s) {
if (!s.trim().isEmpty()) {
PPANGA1 = Byte.parseByte(s);
} else {
PPANGA1 = Byte.MIN_VALUE;
}
}

protected final void initPPANGA2(String s) {
if (!s.trim().isEmpty()) {
PPANGA2 = Byte.parseByte(s);
} else {
PPANGA2 = Byte.MIN_VALUE;
}
}

protected final void initPPANGA3(String s) {
if (!s.trim().isEmpty()) {
PPANGA3 = Byte.parseByte(s);
} else {
PPANGA3 = Byte.MIN_VALUE;
}
}

protected final void initPPANIF1(String s) {
if (!s.trim().isEmpty()) {
PPANIF1 = Byte.parseByte(s);
} else {
PPANIF1 = Byte.MIN_VALUE;
}
}

protected final void initPPANIF2(String s) {
if (!s.trim().isEmpty()) {
PPANIF2 = Byte.parseByte(s);
} else {
PPANIF2 = Byte.MIN_VALUE;
}
}

protected final void initPPANIF3(String s) {
if (!s.trim().isEmpty()) {
PPANIF3 = Byte.parseByte(s);
} else {
PPANIF3 = Byte.MIN_VALUE;
}
}

protected final void initPPANJT1(String s) {
if (!s.trim().isEmpty()) {
PPANJT1 = Byte.parseByte(s);
} else {
PPANJT1 = Byte.MIN_VALUE;
}
}

protected final void initPPANJT2(String s) {
if (!s.trim().isEmpty()) {
PPANJT2 = Byte.parseByte(s);
} else {
PPANJT2 = Byte.MIN_VALUE;
}
}

protected final void initPPANJT3(String s) {
if (!s.trim().isEmpty()) {
PPANJT3 = Byte.parseByte(s);
} else {
PPANJT3 = Byte.MIN_VALUE;
}
}

protected final void initPPANN1(String s) {
if (!s.trim().isEmpty()) {
PPANN1 = Byte.parseByte(s);
} else {
PPANN1 = Byte.MIN_VALUE;
}
}

protected final void initPPANN10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPANN10 = false;
}
}

protected final void initPPANN11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPANN11 = false;
}
}

protected final void initPPANN12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPANN12 = false;
}
}

protected final void initPPANN2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPANN2 = false;
}
}

protected final void initPPANN5(String s) {
if (!s.trim().isEmpty()) {
PPANN5 = Byte.parseByte(s);
} else {
PPANN5 = Byte.MIN_VALUE;
}
}

protected final void initPPANN9(String s) {
if (!s.trim().isEmpty()) {
PPANN9 = Byte.parseByte(s);
} else {
PPANN9 = Byte.MIN_VALUE;
}
}

protected final void initPPCASH1(String s) {
if (!s.trim().isEmpty()) {
PPCASH1 = Byte.parseByte(s);
} else {
PPCASH1 = Byte.MIN_VALUE;
}
}

protected final void initPPCASH2(String s) {
if (!s.trim().isEmpty()) {
PPCASH2 = Byte.parseByte(s);
} else {
PPCASH2 = Byte.MIN_VALUE;
}
}

protected final void initPPCASH3(String s) {
if (!s.trim().isEmpty()) {
PPCASH3 = Byte.parseByte(s);
} else {
PPCASH3 = Byte.MIN_VALUE;
}
}

protected final void initPPCNDRS1(String s) {
if (!s.trim().isEmpty()) {
PPCNDRS1 = Byte.parseByte(s);
} else {
PPCNDRS1 = Byte.MIN_VALUE;
}
}

protected final void initPPCNDRS10(String s) {
if (!s.trim().isEmpty()) {
PPCNDRS10 = Byte.parseByte(s);
} else {
PPCNDRS10 = Byte.MIN_VALUE;
}
}

protected final void initPPCNDRS11(String s) {
if (!s.trim().isEmpty()) {
PPCNDRS11 = Byte.parseByte(s);
} else {
PPCNDRS11 = Byte.MIN_VALUE;
}
}

protected final void initPPCNDRS19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPCNDRS19 = false;
}
}

protected final void initPPCNDRS2(String s) {
if (!s.trim().isEmpty()) {
PPCNDRS2 = Byte.parseByte(s);
} else {
PPCNDRS2 = Byte.MIN_VALUE;
}
}

protected final void initPPCNHOW1(String s) {
if (!s.trim().isEmpty()) {
PPCNHOW1 = Byte.parseByte(s);
} else {
PPCNHOW1 = Byte.MIN_VALUE;
}
}

protected final void initPPCNHOW2(String s) {
if (!s.trim().isEmpty()) {
PPCNHOW2 = Byte.parseByte(s);
} else {
PPCNHOW2 = Byte.MIN_VALUE;
}
}

protected final void initPPCNLRS1(String s) {
if (!s.trim().isEmpty()) {
PPCNLRS1 = Byte.parseByte(s);
} else {
PPCNLRS1 = Byte.MIN_VALUE;
}
}

protected final void initPPCNLRS2(String s) {
if (!s.trim().isEmpty()) {
PPCNLRS2 = Byte.parseByte(s);
} else {
PPCNLRS2 = Byte.MIN_VALUE;
}
}

protected final void initPPCNLRS3(String s) {
if (!s.trim().isEmpty()) {
PPCNLRS3 = Byte.parseByte(s);
} else {
PPCNLRS3 = Byte.MIN_VALUE;
}
}

protected final void initPPCNLRS5(String s) {
if (!s.trim().isEmpty()) {
PPCNLRS5 = Byte.parseByte(s);
} else {
PPCNLRS5 = Byte.MIN_VALUE;
}
}

protected final void initPPCONCH2(String s) {
if (!s.trim().isEmpty()) {
PPCONCH2 = Byte.parseByte(s);
} else {
PPCONCH2 = Byte.MIN_VALUE;
}
}

protected final void initPPCONCH3(String s) {
if (!s.trim().isEmpty()) {
PPCONCH3 = Byte.parseByte(s);
} else {
PPCONCH3 = Byte.MIN_VALUE;
}
}

protected final void initPPDOCS1(String s) {
if (!s.trim().isEmpty()) {
PPDOCS1 = Byte.parseByte(s);
} else {
PPDOCS1 = Byte.MIN_VALUE;
}
}

protected final void initPPDOCS2(String s) {
if (!s.trim().isEmpty()) {
PPDOCS2 = Byte.parseByte(s);
} else {
PPDOCS2 = Byte.MIN_VALUE;
}
}

protected final void initPPDOCS3(String s) {
if (!s.trim().isEmpty()) {
PPDOCS3 = Byte.parseByte(s);
} else {
PPDOCS3 = Byte.MIN_VALUE;
}
}

protected final void initPPDRINC1(String s) {
if (!s.trim().isEmpty()) {
PPDRINC1 = Integer.parseInt(s);
} else {
PPDRINC1 = Integer.MIN_VALUE;
}
}

protected final void initPPDRINC2(String s) {
if (!s.trim().isEmpty()) {
PPDRINC2 = Short.parseShort(s);
} else {
PPDRINC2 = Short.MIN_VALUE;
}
}

protected final void initPPDRINCB2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPDRINCB2 = false;
}
}

protected final void initPPDRVB1(String s) {
if (!s.trim().isEmpty()) {
PPDRVB1 = Byte.parseByte(s);
} else {
PPDRVB1 = Byte.MIN_VALUE;
}
}

protected final void initPPDRVB2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPDRVB2 = false;
}
}

protected final void initPPDRVI1(String s) {
if (!s.trim().isEmpty()) {
PPDRVI1 = Integer.parseInt(s);
} else {
PPDRVI1 = Integer.MIN_VALUE;
}
}

protected final void initPPDRVI2(String s) {
if (!s.trim().isEmpty()) {
PPDRVI2 = Integer.parseInt(s);
} else {
PPDRVI2 = Integer.MIN_VALUE;
}
}

protected final void initPPEIRA1(String s) {
if (!s.trim().isEmpty()) {
PPEIRA1 = Integer.parseInt(s);
} else {
PPEIRA1 = Integer.MIN_VALUE;
}
}

protected final void initPPEIRA2(String s) {
if (!s.trim().isEmpty()) {
PPEIRA2 = Short.parseShort(s);
} else {
PPEIRA2 = Short.MIN_VALUE;
}
}

protected final void initPPEIRA3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPEIRA3 = false;
}
}

protected final void initPPEIRF1(String s) {
if (!s.trim().isEmpty()) {
PPEIRF1 = Double.parseDouble(s);
} else {
PPEIRF1 = Double.NaN;
}
}

protected final void initPPEIRF2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPEIRF2 = false;
}
}

protected final void initPPEIRF3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPEIRF3 = false;
}
}

protected final void initPPEIRH1(String s) {
if (!s.trim().isEmpty()) {
PPEIRH1 = Byte.parseByte(s);
} else {
PPEIRH1 = Byte.MIN_VALUE;
}
}

protected final void initPPEIRH2(String s) {
if (!s.trim().isEmpty()) {
PPEIRH2 = Byte.parseByte(s);
} else {
PPEIRH2 = Byte.MIN_VALUE;
}
}

protected final void initPPEIRH3(String s) {
if (!s.trim().isEmpty()) {
PPEIRH3 = Byte.parseByte(s);
} else {
PPEIRH3 = Byte.MIN_VALUE;
}
}

protected final void initPPEMAM1(String s) {
if (!s.trim().isEmpty()) {
PPEMAM1 = Short.parseShort(s);
} else {
PPEMAM1 = Short.MIN_VALUE;
}
}

protected final void initPPEMAM2(String s) {
if (!s.trim().isEmpty()) {
PPEMAM2 = Short.parseShort(s);
} else {
PPEMAM2 = Short.MIN_VALUE;
}
}

protected final void initPPEMAM3(String s) {
if (!s.trim().isEmpty()) {
PPEMAM3 = Short.parseShort(s);
} else {
PPEMAM3 = Short.MIN_VALUE;
}
}

protected final void initPPEMFR1(String s) {
if (!s.trim().isEmpty()) {
PPEMFR1 = Double.parseDouble(s);
} else {
PPEMFR1 = Double.NaN;
}
}

protected final void initPPEMFR2(String s) {
if (!s.trim().isEmpty()) {
PPEMFR2 = Byte.parseByte(s);
} else {
PPEMFR2 = Byte.MIN_VALUE;
}
}

protected final void initPPEMFR3(String s) {
if (!s.trim().isEmpty()) {
PPEMFR3 = Byte.parseByte(s);
} else {
PPEMFR3 = Byte.MIN_VALUE;
}
}

protected final void initPPEMP1(String s) {
if (!s.trim().isEmpty()) {
PPEMP1 = Byte.parseByte(s);
} else {
PPEMP1 = Byte.MIN_VALUE;
}
}

protected final void initPPEMP2(String s) {
if (!s.trim().isEmpty()) {
PPEMP2 = Byte.parseByte(s);
} else {
PPEMP2 = Byte.MIN_VALUE;
}
}

protected final void initPPEMP3(String s) {
if (!s.trim().isEmpty()) {
PPEMP3 = Byte.parseByte(s);
} else {
PPEMP3 = Byte.MIN_VALUE;
}
}

protected final void initPPEMPH1(String s) {
if (!s.trim().isEmpty()) {
PPEMPH1 = Byte.parseByte(s);
} else {
PPEMPH1 = Byte.MIN_VALUE;
}
}

protected final void initPPEMPH2(String s) {
if (!s.trim().isEmpty()) {
PPEMPH2 = Byte.parseByte(s);
} else {
PPEMPH2 = Byte.MIN_VALUE;
}
}

protected final void initPPEMPH3(String s) {
if (!s.trim().isEmpty()) {
PPEMPH3 = Byte.parseByte(s);
} else {
PPEMPH3 = Byte.MIN_VALUE;
}
}

protected final void initPPEMPR1(String s) {
if (!s.trim().isEmpty()) {
PPEMPR1 = Byte.parseByte(s);
} else {
PPEMPR1 = Byte.MIN_VALUE;
}
}

protected final void initPPEMPR2(String s) {
if (!s.trim().isEmpty()) {
PPEMPR2 = Byte.parseByte(s);
} else {
PPEMPR2 = Byte.MIN_VALUE;
}
}

protected final void initPPEMPR3(String s) {
if (!s.trim().isEmpty()) {
PPEMPR3 = Byte.parseByte(s);
} else {
PPEMPR3 = Byte.MIN_VALUE;
}
}

protected final void initPPEVRG1(String s) {
if (!s.trim().isEmpty()) {
PPEVRG1 = Byte.parseByte(s);
} else {
PPEVRG1 = Byte.MIN_VALUE;
}
}

protected final void initPPEVRG2(String s) {
if (!s.trim().isEmpty()) {
PPEVRG2 = Byte.parseByte(s);
} else {
PPEVRG2 = Byte.MIN_VALUE;
}
}

protected final void initPPEVRG3(String s) {
if (!s.trim().isEmpty()) {
PPEVRG3 = Byte.parseByte(s);
} else {
PPEVRG3 = Byte.MIN_VALUE;
}
}

protected final void initPPFAAG1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPFAAG1 = false;
}
}

protected final void initPPFAN1(String s) {
if (!s.trim().isEmpty()) {
PPFAN1 = Byte.parseByte(s);
} else {
PPFAN1 = Byte.MIN_VALUE;
}
}

protected final void initPPFAN11(String s) {
if (!s.trim().isEmpty()) {
PPFAN11 = Byte.parseByte(s);
} else {
PPFAN11 = Byte.MIN_VALUE;
}
}

protected final void initPPFAN2(String s) {
if (!s.trim().isEmpty()) {
PPFAN2 = Byte.parseByte(s);
} else {
PPFAN2 = Byte.MIN_VALUE;
}
}

protected final void initPPFAN6(String s) {
if (!s.trim().isEmpty()) {
PPFAN6 = Byte.parseByte(s);
} else {
PPFAN6 = Byte.MIN_VALUE;
}
}

protected final void initPPFAWH1(String s) {
if (!s.trim().isEmpty()) {
PPFAWH1 = Byte.parseByte(s);
} else {
PPFAWH1 = Byte.MIN_VALUE;
}
}

protected final void initPPFAWH15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPFAWH15 = false;
}
}

protected final void initPPFAWH2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPFAWH2 = false;
}
}

protected final void initPPFAWH3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPFAWH3 = false;
}
}

protected final void initPPFAWH6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPFAWH6 = false;
}
}

protected final void initPPLMUS1(String s) {
if (!s.trim().isEmpty()) {
PPLMUS1 = Byte.parseByte(s);
} else {
PPLMUS1 = Byte.MIN_VALUE;
}
}

protected final void initPPLMUS2(String s) {
if (!s.trim().isEmpty()) {
PPLMUS2 = Byte.parseByte(s);
} else {
PPLMUS2 = Byte.MIN_VALUE;
}
}

protected final void initPPLMUS3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPLMUS3 = false;
}
}

protected final void initPPLMV1(String s) {
if (!s.trim().isEmpty()) {
PPLMV1 = Integer.parseInt(s);
} else {
PPLMV1 = Integer.MIN_VALUE;
}
}

protected final void initPPLMV1_I(String s) {
if (!s.trim().isEmpty()) {
PPLMV1_I = Integer.parseInt(s);
} else {
PPLMV1_I = Integer.MIN_VALUE;
}
}

protected final void initPPLMV1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPLMV1_IFLAG = false;
}
}

protected final void initPPLMV2(String s) {
if (!s.trim().isEmpty()) {
PPLMV2 = Integer.parseInt(s);
} else {
PPLMV2 = Integer.MIN_VALUE;
}
}

protected final void initPPLMV2_I(String s) {
if (!s.trim().isEmpty()) {
PPLMV2_I = Integer.parseInt(s);
} else {
PPLMV2_I = Integer.MIN_VALUE;
}
}

protected final void initPPLMV2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPLMV2_IFLAG = false;
}
}

protected final void initPPLMV3(String s) {
if (!s.trim().isEmpty()) {
PPLMV3 = Short.parseShort(s);
} else {
PPLMV3 = Short.MIN_VALUE;
}
}

protected final void initPPLMV3_I(String s) {
if (!s.trim().isEmpty()) {
PPLMV3_I = Short.parseShort(s);
} else {
PPLMV3_I = Short.MIN_VALUE;
}
}

protected final void initPPLMV3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPLMV3_IFLAG = false;
}
}

protected final void initPPLMVB1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPLMVB1 = false;
}
}

protected final void initPPLMVB2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPLMVB2 = false;
}
}

protected final void initPPLMVB3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPLMVB3 = false;
}
}

protected final void initPPLSTA1(String s) {
if (!s.trim().isEmpty()) {
PPLSTA1 = Integer.parseInt(s);
} else {
PPLSTA1 = Integer.MIN_VALUE;
}
}

protected final void initPPLSTA2(String s) {
if (!s.trim().isEmpty()) {
PPLSTA2 = Integer.parseInt(s);
} else {
PPLSTA2 = Integer.MIN_VALUE;
}
}

protected final void initPPLSTA3(String s) {
if (!s.trim().isEmpty()) {
PPLSTA3 = Integer.parseInt(s);
} else {
PPLSTA3 = Integer.MIN_VALUE;
}
}

protected final void initPPLSTP1(String s) {
if (!s.trim().isEmpty()) {
PPLSTP1 = Byte.parseByte(s);
} else {
PPLSTP1 = Byte.MIN_VALUE;
}
}

protected final void initPPLSTP2(String s) {
if (!s.trim().isEmpty()) {
PPLSTP2 = Byte.parseByte(s);
} else {
PPLSTP2 = Byte.MIN_VALUE;
}
}

protected final void initPPLSTP3(String s) {
if (!s.trim().isEmpty()) {
PPLSTP3 = Byte.parseByte(s);
} else {
PPLSTP3 = Byte.MIN_VALUE;
}
}

protected final void initPPLUM1(String s) {
if (!s.trim().isEmpty()) {
PPLUM1 = Byte.parseByte(s);
} else {
PPLUM1 = Byte.MIN_VALUE;
}
}

protected final void initPPLUM1_I(String s) {
if (!s.trim().isEmpty()) {
PPLUM1_I = Byte.parseByte(s);
} else {
PPLUM1_I = Byte.MIN_VALUE;
}
}

protected final void initPPLUM1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPLUM1_IFLAG = false;
}
}

protected final void initPPLUM2(String s) {
if (!s.trim().isEmpty()) {
PPLUM2 = Byte.parseByte(s);
} else {
PPLUM2 = Byte.MIN_VALUE;
}
}

protected final void initPPLUM2_I(String s) {
if (!s.trim().isEmpty()) {
PPLUM2_I = Byte.parseByte(s);
} else {
PPLUM2_I = Byte.MIN_VALUE;
}
}

protected final void initPPLUM2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPLUM2_IFLAG = false;
}
}

protected final void initPPLUM3(String s) {
if (!s.trim().isEmpty()) {
PPLUM3 = Byte.parseByte(s);
} else {
PPLUM3 = Byte.MIN_VALUE;
}
}

protected final void initPPLUM3_I(String s) {
if (!s.trim().isEmpty()) {
PPLUM3_I = Byte.parseByte(s);
} else {
PPLUM3_I = Byte.MIN_VALUE;
}
}

protected final void initPPLUM3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPLUM3_IFLAG = false;
}
}

protected final void initPPORG1(String s) {
if (!s.trim().isEmpty()) {
PPORG1 = Byte.parseByte(s);
} else {
PPORG1 = Byte.MIN_VALUE;
}
}

protected final void initPPORG2(String s) {
if (!s.trim().isEmpty()) {
PPORG2 = Byte.parseByte(s);
} else {
PPORG2 = Byte.MIN_VALUE;
}
}

protected final void initPPORG3(String s) {
if (!s.trim().isEmpty()) {
PPORG3 = Byte.parseByte(s);
} else {
PPORG3 = Byte.MIN_VALUE;
}
}

protected final void initPPPAY1(String s) {
if (!s.trim().isEmpty()) {
PPPAY1 = Byte.parseByte(s);
} else {
PPPAY1 = Byte.MIN_VALUE;
}
}

protected final void initPPPAY2(String s) {
if (!s.trim().isEmpty()) {
PPPAY2 = Byte.parseByte(s);
} else {
PPPAY2 = Byte.MIN_VALUE;
}
}

protected final void initPPPAY3(String s) {
if (!s.trim().isEmpty()) {
PPPAY3 = Byte.parseByte(s);
} else {
PPPAY3 = Byte.MIN_VALUE;
}
}

protected final void initPPRGAM2(String s) {
if (!s.trim().isEmpty()) {
PPRGAM2 = Integer.parseInt(s);
} else {
PPRGAM2 = Integer.MIN_VALUE;
}
}

protected final void initPPRGAM3(String s) {
if (!s.trim().isEmpty()) {
PPRGAM3 = Integer.parseInt(s);
} else {
PPRGAM3 = Integer.MIN_VALUE;
}
}

protected final void initPPRGFG1(String s) {
if (!s.trim().isEmpty()) {
PPRGFG1 = Byte.parseByte(s);
} else {
PPRGFG1 = Byte.MIN_VALUE;
}
}

protected final void initPPRGFG2(String s) {
if (!s.trim().isEmpty()) {
PPRGFG2 = Byte.parseByte(s);
} else {
PPRGFG2 = Byte.MIN_VALUE;
}
}

protected final void initPPRGFR1(String s) {
if (!s.trim().isEmpty()) {
PPRGFR1 = Double.parseDouble(s);
} else {
PPRGFR1 = Double.NaN;
}
}

protected final void initPPRGFR2(String s) {
if (!s.trim().isEmpty()) {
PPRGFR2 = Byte.parseByte(s);
} else {
PPRGFR2 = Byte.MIN_VALUE;
}
}

protected final void initPPRGH1(String s) {
if (!s.trim().isEmpty()) {
PPRGH1 = Byte.parseByte(s);
} else {
PPRGH1 = Byte.MIN_VALUE;
}
}

protected final void initPPRGH2(String s) {
if (!s.trim().isEmpty()) {
PPRGH2 = Byte.parseByte(s);
} else {
PPRGH2 = Byte.MIN_VALUE;
}
}

protected final void initPPRGH3(String s) {
if (!s.trim().isEmpty()) {
PPRGH3 = Byte.parseByte(s);
} else {
PPRGH3 = Byte.MIN_VALUE;
}
}

protected final void initPPRGPE1(String s) {
if (!s.trim().isEmpty()) {
PPRGPE1 = Byte.parseByte(s);
} else {
PPRGPE1 = Byte.MIN_VALUE;
}
}

protected final void initPPRGPE2(String s) {
if (!s.trim().isEmpty()) {
PPRGPE2 = Byte.parseByte(s);
} else {
PPRGPE2 = Byte.MIN_VALUE;
}
}

protected final void initPPRGPE3(String s) {
if (!s.trim().isEmpty()) {
PPRGPE3 = Byte.parseByte(s);
} else {
PPRGPE3 = Byte.MIN_VALUE;
}
}

protected final void initPPSIPP1(String s) {
if (!s.trim().isEmpty()) {
PPSIPP1 = Byte.parseByte(s);
} else {
PPSIPP1 = Byte.MIN_VALUE;
}
}

protected final void initPPSIPP2(String s) {
if (!s.trim().isEmpty()) {
PPSIPP2 = Byte.parseByte(s);
} else {
PPSIPP2 = Byte.MIN_VALUE;
}
}

protected final void initPPSIPP3(String s) {
if (!s.trim().isEmpty()) {
PPSIPP3 = Byte.parseByte(s);
} else {
PPSIPP3 = Byte.MIN_VALUE;
}
}

protected final void initPPSTMN1(String s) {
if (!s.trim().isEmpty()) {
PPSTMN1 = Byte.parseByte(s);
} else {
PPSTMN1 = Byte.MIN_VALUE;
}
}

protected final void initPPSTMN2(String s) {
if (!s.trim().isEmpty()) {
PPSTMN2 = Byte.parseByte(s);
} else {
PPSTMN2 = Byte.MIN_VALUE;
}
}

protected final void initPPSTMN3(String s) {
if (!s.trim().isEmpty()) {
PPSTMN3 = Byte.parseByte(s);
} else {
PPSTMN3 = Byte.MIN_VALUE;
}
}

protected final void initPPSTYR1(String s) {
if (!s.trim().isEmpty()) {
PPSTYR1 = Short.parseShort(s);
} else {
PPSTYR1 = Short.MIN_VALUE;
}
}

protected final void initPPSTYR2(String s) {
if (!s.trim().isEmpty()) {
PPSTYR2 = Short.parseShort(s);
} else {
PPSTYR2 = Short.MIN_VALUE;
}
}

protected final void initPPSTYR3(String s) {
if (!s.trim().isEmpty()) {
PPSTYR3 = Short.parseShort(s);
} else {
PPSTYR3 = Short.MIN_VALUE;
}
}

protected final void initPPTYP1(String s) {
if (!s.trim().isEmpty()) {
PPTYP1 = Byte.parseByte(s);
} else {
PPTYP1 = Byte.MIN_VALUE;
}
}

protected final void initPPTYP2(String s) {
if (!s.trim().isEmpty()) {
PPTYP2 = Byte.parseByte(s);
} else {
PPTYP2 = Byte.MIN_VALUE;
}
}

protected final void initPPTYP3(String s) {
if (!s.trim().isEmpty()) {
PPTYP3 = Byte.parseByte(s);
} else {
PPTYP3 = Byte.MIN_VALUE;
}
}

protected final void initPPVAL1(String s) {
if (!s.trim().isEmpty()) {
PPVAL1 = Integer.parseInt(s);
} else {
PPVAL1 = Integer.MIN_VALUE;
}
}

protected final void initPPVAL1_I(String s) {
if (!s.trim().isEmpty()) {
PPVAL1_I = Integer.parseInt(s);
} else {
PPVAL1_I = Integer.MIN_VALUE;
}
}

protected final void initPPVAL1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPVAL1_IFLAG = false;
}
}

protected final void initPPVAL2(String s) {
if (!s.trim().isEmpty()) {
PPVAL2 = Integer.parseInt(s);
} else {
PPVAL2 = Integer.MIN_VALUE;
}
}

protected final void initPPVAL2_I(String s) {
if (!s.trim().isEmpty()) {
PPVAL2_I = Double.parseDouble(s);
} else {
PPVAL2_I = Double.NaN;
}
}

protected final void initPPVAL2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
PPVAL2_IFLAG = Byte.parseByte(s);
} else {
PPVAL2_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initPPVAL3(String s) {
if (!s.trim().isEmpty()) {
PPVAL3 = Integer.parseInt(s);
} else {
PPVAL3 = Integer.MIN_VALUE;
}
}

protected final void initPPVAL3_I(String s) {
if (!s.trim().isEmpty()) {
PPVAL3_I = Double.parseDouble(s);
} else {
PPVAL3_I = Double.NaN;
}
}

protected final void initPPVAL3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPVAL3_IFLAG = false;
}
}

protected final void initPPVALB1(String s) {
if (!s.trim().isEmpty()) {
PPVALB1 = Byte.parseByte(s);
} else {
PPVALB1 = Byte.MIN_VALUE;
}
}

protected final void initPPVALB2(String s) {
if (!s.trim().isEmpty()) {
PPVALB2 = Byte.parseByte(s);
} else {
PPVALB2 = Byte.MIN_VALUE;
}
}

protected final void initPPVALB3(String s) {
if (!s.trim().isEmpty()) {
PPVALB3 = Byte.parseByte(s);
} else {
PPVALB3 = Byte.MIN_VALUE;
}
}

protected final void initPPVINT1(String s) {
if (!s.trim().isEmpty()) {
PPVINT1 = Byte.parseByte(s);
} else {
PPVINT1 = Byte.MIN_VALUE;
}
}

protected final void initPPVINT2(String s) {
if (!s.trim().isEmpty()) {
PPVINT2 = Byte.parseByte(s);
} else {
PPVINT2 = Byte.MIN_VALUE;
}
}

protected final void initPPVINT3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPVINT3 = false;
}
}

protected final void initPPYRST1(String s) {
if (!s.trim().isEmpty()) {
PPYRST1 = Short.parseShort(s);
} else {
PPYRST1 = Short.MIN_VALUE;
}
}

protected final void initPPYRST2(String s) {
if (!s.trim().isEmpty()) {
PPYRST2 = Short.parseShort(s);
} else {
PPYRST2 = Short.MIN_VALUE;
}
}

protected final void initPPYRST3(String s) {
if (!s.trim().isEmpty()) {
PPYRST3 = Short.parseShort(s);
} else {
PPYRST3 = Short.MIN_VALUE;
}
}

protected final void initPPYSTP1(String s) {
if (!s.trim().isEmpty()) {
PPYSTP1 = Byte.parseByte(s);
} else {
PPYSTP1 = Byte.MIN_VALUE;
}
}

protected final void initPPYSTP11(String s) {
if (!s.trim().isEmpty()) {
PPYSTP11 = Byte.parseByte(s);
} else {
PPYSTP11 = Byte.MIN_VALUE;
}
}

protected final void initPPYSTP12(String s) {
if (!s.trim().isEmpty()) {
PPYSTP12 = Byte.parseByte(s);
} else {
PPYSTP12 = Byte.MIN_VALUE;
}
}

protected final void initPPYSTP13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPYSTP13 = false;
}
}

protected final void initPPYSTP14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PPYSTP14 = false;
}
}

protected final void initPPYSTP19(String s) {
if (!s.trim().isEmpty()) {
PPYSTP19 = Byte.parseByte(s);
} else {
PPYSTP19 = Byte.MIN_VALUE;
}
}

protected final void initPPYSTP2(String s) {
if (!s.trim().isEmpty()) {
PPYSTP2 = Byte.parseByte(s);
} else {
PPYSTP2 = Byte.MIN_VALUE;
}
}

protected final void initPPYSTP8(String s) {
if (!s.trim().isEmpty()) {
PPYSTP8 = Byte.parseByte(s);
} else {
PPYSTP8 = Byte.MIN_VALUE;
}
}

protected final void initPPYSTP9(String s) {
if (!s.trim().isEmpty()) {
PPYSTP9 = Byte.parseByte(s);
} else {
PPYSTP9 = Byte.MIN_VALUE;
}
}

protected final void initPRESMON(String s) {
if (!s.trim().isEmpty()) {
PRESMON = Byte.parseByte(s);
} else {
PRESMON = Byte.MIN_VALUE;
}
}

protected final void initPRESYR(String s) {
if (!s.trim().isEmpty()) {
PRESYR = Short.parseShort(s);
} else {
PRESYR = Short.MIN_VALUE;
}
}

protected final void initPRODTS(String s) {
if (!s.trim().isEmpty()) {
PRODTS = Byte.parseByte(s);
} else {
PRODTS = Byte.MIN_VALUE;
}
}

protected final void initPROXYNUM(String s) {
if (!s.trim().isEmpty()) {
PROXYNUM = Byte.parseByte(s);
} else {
PROXYNUM = Byte.MIN_VALUE;
}
}

protected final void initPSPEXPA(String s) {
if (!s.trim().isEmpty()) {
PSPEXPA = Integer.parseInt(s);
} else {
PSPEXPA = Integer.MIN_VALUE;
}
}

protected final void initPSPEXPA_I(String s) {
if (!s.trim().isEmpty()) {
PSPEXPA_I = Integer.parseInt(s);
} else {
PSPEXPA_I = Integer.MIN_VALUE;
}
}

protected final void initPSPEXPA_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PSPEXPA_IFLAG = false;
}
}

protected final void initPSPEXPH(String s) {
if (!s.trim().isEmpty()) {
PSPEXPH = Byte.parseByte(s);
} else {
PSPEXPH = Byte.MIN_VALUE;
}
}

protected final void initPSPEXPH_I(String s) {
if (!s.trim().isEmpty()) {
PSPEXPH_I = Byte.parseByte(s);
} else {
PSPEXPH_I = Byte.MIN_VALUE;
}
}

protected final void initPSPEXPH_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PSPEXPH_IFLAG = false;
}
}

protected final void initPSPLUM(String s) {
if (!s.trim().isEmpty()) {
PSPLUM = Byte.parseByte(s);
} else {
PSPLUM = Byte.MIN_VALUE;
}
}

protected final void initPSPLUVAL(String s) {
if (!s.trim().isEmpty()) {
PSPLUVAL = Integer.parseInt(s);
} else {
PSPLUVAL = Integer.MIN_VALUE;
}
}

protected final void initPSPSE(String s) {
if (!s.trim().isEmpty()) {
PSPSE = Byte.parseByte(s);
} else {
PSPSE = Byte.MIN_VALUE;
}
}

protected final void initPSPSE_I(String s) {
if (!s.trim().isEmpty()) {
PSPSE_I = Byte.parseByte(s);
} else {
PSPSE_I = Byte.MIN_VALUE;
}
}

protected final void initPSPSE_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PSPSE_IFLAG = false;
}
}

protected final void initPWACCU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PWACCU = false;
}
}

protected final void initPWLUM(String s) {
if (!s.trim().isEmpty()) {
PWLUM = Byte.parseByte(s);
} else {
PWLUM = Byte.MIN_VALUE;
}
}

protected final void initPWLUVAL(String s) {
if (!s.trim().isEmpty()) {
PWLUVAL = Integer.parseInt(s);
} else {
PWLUVAL = Integer.MIN_VALUE;
}
}

protected final void initR01(String s) {
if (!s.trim().isEmpty()) {
R01 = Byte.parseByte(s);
} else {
R01 = Byte.MIN_VALUE;
}
}

protected final void initR02(String s) {
if (!s.trim().isEmpty()) {
R02 = Byte.parseByte(s);
} else {
R02 = Byte.MIN_VALUE;
}
}

protected final void initR03(String s) {
if (!s.trim().isEmpty()) {
R03 = Byte.parseByte(s);
} else {
R03 = Byte.MIN_VALUE;
}
}

protected final void initR04(String s) {
if (!s.trim().isEmpty()) {
R04 = Byte.parseByte(s);
} else {
R04 = Byte.MIN_VALUE;
}
}

protected final void initR05(String s) {
if (!s.trim().isEmpty()) {
R05 = Byte.parseByte(s);
} else {
R05 = Byte.MIN_VALUE;
}
}

protected final void initR06(String s) {
if (!s.trim().isEmpty()) {
R06 = Byte.parseByte(s);
} else {
R06 = Byte.MIN_VALUE;
}
}

protected final void initR07(String s) {
if (!s.trim().isEmpty()) {
R07 = Byte.parseByte(s);
} else {
R07 = Byte.MIN_VALUE;
}
}

protected final void initR08(String s) {
if (!s.trim().isEmpty()) {
R08 = Byte.parseByte(s);
} else {
R08 = Byte.MIN_VALUE;
}
}

protected final void initR09(String s) {
if (!s.trim().isEmpty()) {
R09 = Byte.parseByte(s);
} else {
R09 = Byte.MIN_VALUE;
}
}

protected final void initR10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
R10 = false;
}
}

protected final void initR11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
R11 = false;
}
}

protected final void initREGLRPY1_I(String s) {
if (!s.trim().isEmpty()) {
REGLRPY1_I = Byte.parseByte(s);
} else {
REGLRPY1_I = Byte.MIN_VALUE;
}
}

protected final void initREGLRPY1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
REGLRPY1_IFLAG = false;
}
}

protected final void initREGLRPY2_I(String s) {
if (!s.trim().isEmpty()) {
REGLRPY2_I = Byte.parseByte(s);
} else {
REGLRPY2_I = Byte.MIN_VALUE;
}
}

protected final void initREGLRPY2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
REGLRPY2_IFLAG = false;
}
}

protected final void initRELBUS_I(String s) {
if (!s.trim().isEmpty()) {
RELBUS_I = Byte.parseByte(s);
} else {
RELBUS_I = Byte.MIN_VALUE;
}
}

protected final void initRELBUS_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
RELBUS_IFLAG = false;
}
}

protected final void initRENTPAY_I(String s) {
if (!s.trim().isEmpty()) {
RENTPAY_I = Byte.parseByte(s);
} else {
RENTPAY_I = Byte.MIN_VALUE;
}
}

protected final void initRENTPAY_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
RENTPAY_IFLAG = false;
}
}

protected final void initRESPDNT(String s) {
if (!s.trim().isEmpty()) {
RESPDNT = Byte.parseByte(s);
} else {
RESPDNT = Byte.MIN_VALUE;
}
}

protected final void initRETFRAC(String s) {
if (!s.trim().isEmpty()) {
RETFRAC = Double.parseDouble(s);
} else {
RETFRAC = Double.NaN;
}
}

protected final void initRNYDAY(String s) {
if (!s.trim().isEmpty()) {
RNYDAY = Byte.parseByte(s);
} else {
RNYDAY = Byte.MIN_VALUE;
}
}

protected final void initRPFCRET1(String s) {
if (!s.trim().isEmpty()) {
RPFCRET1 = Byte.parseByte(s);
} else {
RPFCRET1 = Byte.MIN_VALUE;
}
}

protected final void initRPFCRET2(String s) {
if (!s.trim().isEmpty()) {
RPFCRET2 = Byte.parseByte(s);
} else {
RPFCRET2 = Byte.MIN_VALUE;
}
}

protected final void initRPFCRET3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
RPFCRET3 = false;
}
}

protected final void initRPFCRET4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
RPFCRET4 = false;
}
}

protected final void initRPFCRET5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
RPFCRET5 = false;
}
}

protected final void initRPFCRET6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
RPFCRET6 = false;
}
}

protected final void initSAMEJOB1(String s) {
if (!s.trim().isEmpty()) {
SAMEJOB1 = Byte.parseByte(s);
} else {
SAMEJOB1 = Byte.MIN_VALUE;
}
}

protected final void initSAMEJOB2(String s) {
if (!s.trim().isEmpty()) {
SAMEJOB2 = Byte.parseByte(s);
} else {
SAMEJOB2 = Byte.MIN_VALUE;
}
}

protected final void initSAMEJOB3(String s) {
if (!s.trim().isEmpty()) {
SAMEJOB3 = Byte.parseByte(s);
} else {
SAMEJOB3 = Byte.MIN_VALUE;
}
}

protected final void initSAMEJOB4(String s) {
if (!s.trim().isEmpty()) {
SAMEJOB4 = Byte.parseByte(s);
} else {
SAMEJOB4 = Byte.MIN_VALUE;
}
}

protected final void initSAMEJOB5(String s) {
if (!s.trim().isEmpty()) {
SAMEJOB5 = Byte.parseByte(s);
} else {
SAMEJOB5 = Byte.MIN_VALUE;
}
}

protected final void initSAMEJOB6(String s) {
if (!s.trim().isEmpty()) {
SAMEJOB6 = Byte.parseByte(s);
} else {
SAMEJOB6 = Byte.MIN_VALUE;
}
}

protected final void initSAMEMP(String s) {
if (!s.trim().isEmpty()) {
SAMEMP = Byte.parseByte(s);
} else {
SAMEMP = Byte.MIN_VALUE;
}
}

protected final void initSAMJOB(String s) {
if (!s.trim().isEmpty()) {
SAMJOB = Byte.parseByte(s);
} else {
SAMJOB = Byte.MIN_VALUE;
}
}

protected final void initSATIS(String s) {
if (!s.trim().isEmpty()) {
SATIS = Byte.parseByte(s);
} else {
SATIS = Byte.MIN_VALUE;
}
}

protected final void initSAVNUM(String s) {
if (!s.trim().isEmpty()) {
SAVNUM = Byte.parseByte(s);
} else {
SAVNUM = Byte.MIN_VALUE;
}
}

protected final void initSCAC1_I(String s) {
if (!s.trim().isEmpty()) {
SCAC1_I = Byte.parseByte(s);
} else {
SCAC1_I = Byte.MIN_VALUE;
}
}

protected final void initSCAC1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
SCAC1_IFLAG = false;
}
}

protected final void initSCAC2_I(String s) {
if (!s.trim().isEmpty()) {
SCAC2_I = Byte.parseByte(s);
} else {
SCAC2_I = Byte.MIN_VALUE;
}
}

protected final void initSCAC2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
SCAC2_IFLAG = false;
}
}

protected final void initSCAC3_I(String s) {
if (!s.trim().isEmpty()) {
SCAC3_I = Byte.parseByte(s);
} else {
SCAC3_I = Byte.MIN_VALUE;
}
}

protected final void initSCAC3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
SCAC3_IFLAG = false;
}
}

protected final void initSCHEMEET_I(String s) {
if (!s.trim().isEmpty()) {
SCHEMEET_I = Byte.parseByte(s);
} else {
SCHEMEET_I = Byte.MIN_VALUE;
}
}

protected final void initSCHEMEET_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
SCHEMEET_IFLAG = false;
}
}

protected final void initSCNDSCH(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
SCNDSCH = false;
}
}

protected final void initSECTOR(String s) {
if (!s.trim().isEmpty()) {
SECTOR = Byte.parseByte(s);
} else {
SECTOR = Byte.MIN_VALUE;
}
}

protected final void initSECTR2(String s) {
if (!s.trim().isEmpty()) {
SECTR2 = Byte.parseByte(s);
} else {
SECTR2 = Byte.MIN_VALUE;
}
}

protected final void initSICCODE(String s) {
if (!s.trim().isEmpty()) {
SICCODE = Integer.parseInt(s);
} else {
SICCODE = Integer.MIN_VALUE;
}
}

protected final void initSJEMP1_I(String s) {
if (!s.trim().isEmpty()) {
SJEMP1_I = Byte.parseByte(s);
} else {
SJEMP1_I = Byte.MIN_VALUE;
}
}

protected final void initSJEMP1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
SJEMP1_IFLAG = Byte.parseByte(s);
} else {
SJEMP1_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initSJOB2_I(String s) {
if (!s.trim().isEmpty()) {
SJOB2_I = Byte.parseByte(s);
} else {
SJOB2_I = Byte.MIN_VALUE;
}
}

protected final void initSJOB2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
SJOB2_IFLAG = Byte.parseByte(s);
} else {
SJOB2_IFLAG = Byte.MIN_VALUE;
}
}

protected final void initSMTPEN(String s) {
if (!s.trim().isEmpty()) {
SMTPEN = Byte.parseByte(s);
} else {
SMTPEN = Byte.MIN_VALUE;
}
}

protected final void initSOC2010(String s) {
if (!s.trim().isEmpty()) {
SOC2010 = Double.parseDouble(s);
} else {
SOC2010 = Double.NaN;
}
}

protected final void initSOURC2P(String s) {
if (!s.trim().isEmpty()) {
SOURC2P = Byte.parseByte(s);
} else {
SOURC2P = Byte.MIN_VALUE;
}
}

protected final void initSTARTJ_I(String s) {
if (!s.trim().isEmpty()) {
STARTJ_I = Byte.parseByte(s);
} else {
STARTJ_I = Byte.MIN_VALUE;
}
}

protected final void initSTARTJ_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
STARTJ_IFLAG = false;
}
}

protected final void initSTAT_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
STAT_IFLAG = false;
}
}

protected final void initTACC1(String s) {
if (!s.trim().isEmpty()) {
TACC1 = Byte.parseByte(s);
} else {
TACC1 = Byte.MIN_VALUE;
}
}

protected final void initTACC2(String s) {
if (!s.trim().isEmpty()) {
TACC2 = Byte.parseByte(s);
} else {
TACC2 = Byte.MIN_VALUE;
}
}

protected final void initTADDVB1(String s) {
if (!s.trim().isEmpty()) {
TADDVB1 = Byte.parseByte(s);
} else {
TADDVB1 = Byte.MIN_VALUE;
}
}

protected final void initTADDVB2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
TADDVB2 = false;
}
}

protected final void initTADDVL2(String s) {
if (!s.trim().isEmpty()) {
TADDVL2 = Integer.parseInt(s);
} else {
TADDVL2 = Integer.MIN_VALUE;
}
}

protected final void initTBCAP1(String s) {
if (!s.trim().isEmpty()) {
TBCAP1 = Byte.parseByte(s);
} else {
TBCAP1 = Byte.MIN_VALUE;
}
}

protected final void initTBCAP2(String s) {
if (!s.trim().isEmpty()) {
TBCAP2 = Byte.parseByte(s);
} else {
TBCAP2 = Byte.MIN_VALUE;
}
}

protected final void initTBCAPY1(String s) {
if (!s.trim().isEmpty()) {
TBCAPY1 = Short.parseShort(s);
} else {
TBCAPY1 = Short.MIN_VALUE;
}
}

protected final void initTBCAPY2(String s) {
if (!s.trim().isEmpty()) {
TBCAPY2 = Short.parseShort(s);
} else {
TBCAPY2 = Short.MIN_VALUE;
}
}

protected final void initTBCKNO1(String s) {
if (!s.trim().isEmpty()) {
TBCKNO1 = Byte.parseByte(s);
} else {
TBCKNO1 = Byte.MIN_VALUE;
}
}

protected final void initTBCKNO2(String s) {
if (!s.trim().isEmpty()) {
TBCKNO2 = Byte.parseByte(s);
} else {
TBCKNO2 = Byte.MIN_VALUE;
}
}

protected final void initTBEN1(String s) {
if (!s.trim().isEmpty()) {
TBEN1 = Byte.parseByte(s);
} else {
TBEN1 = Byte.MIN_VALUE;
}
}

protected final void initTBEN10(String s) {
if (!s.trim().isEmpty()) {
TBEN10 = Byte.parseByte(s);
} else {
TBEN10 = Byte.MIN_VALUE;
}
}

protected final void initTBEN11(String s) {
if (!s.trim().isEmpty()) {
TBEN11 = Byte.parseByte(s);
} else {
TBEN11 = Byte.MIN_VALUE;
}
}

protected final void initTBEN12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
TBEN12 = false;
}
}

protected final void initTBEN2(String s) {
if (!s.trim().isEmpty()) {
TBEN2 = Byte.parseByte(s);
} else {
TBEN2 = Byte.MIN_VALUE;
}
}

protected final void initTBEN3(String s) {
if (!s.trim().isEmpty()) {
TBEN3 = Byte.parseByte(s);
} else {
TBEN3 = Byte.MIN_VALUE;
}
}

protected final void initTBEN4(String s) {
if (!s.trim().isEmpty()) {
TBEN4 = Byte.parseByte(s);
} else {
TBEN4 = Byte.MIN_VALUE;
}
}

protected final void initTBEN5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
TBEN5 = false;
}
}

protected final void initTBEN9(String s) {
if (!s.trim().isEmpty()) {
TBEN9 = Byte.parseByte(s);
} else {
TBEN9 = Byte.MIN_VALUE;
}
}

protected final void initTBINC1(String s) {
if (!s.trim().isEmpty()) {
TBINC1 = Byte.parseByte(s);
} else {
TBINC1 = Byte.MIN_VALUE;
}
}

protected final void initTBINC2(String s) {
if (!s.trim().isEmpty()) {
TBINC2 = Byte.parseByte(s);
} else {
TBINC2 = Byte.MIN_VALUE;
}
}

protected final void initTBREC1(String s) {
if (!s.trim().isEmpty()) {
TBREC1 = Integer.parseInt(s);
} else {
TBREC1 = Integer.MIN_VALUE;
}
}

protected final void initTBREC2(String s) {
if (!s.trim().isEmpty()) {
TBREC2 = Integer.parseInt(s);
} else {
TBREC2 = Integer.MIN_VALUE;
}
}

protected final void initTBRECB1(String s) {
if (!s.trim().isEmpty()) {
TBRECB1 = Byte.parseByte(s);
} else {
TBRECB1 = Byte.MIN_VALUE;
}
}

protected final void initTBRECB2(String s) {
if (!s.trim().isEmpty()) {
TBRECB2 = Byte.parseByte(s);
} else {
TBRECB2 = Byte.MIN_VALUE;
}
}

protected final void initTBVALB1(String s) {
if (!s.trim().isEmpty()) {
TBVALB1 = Byte.parseByte(s);
} else {
TBVALB1 = Byte.MIN_VALUE;
}
}

protected final void initTBVALB2(String s) {
if (!s.trim().isEmpty()) {
TBVALB2 = Byte.parseByte(s);
} else {
TBVALB2 = Byte.MIN_VALUE;
}
}

protected final void initTDUP1(String s) {
if (!s.trim().isEmpty()) {
TDUP1 = Byte.parseByte(s);
} else {
TDUP1 = Byte.MIN_VALUE;
}
}

protected final void initTDUP2(String s) {
if (!s.trim().isEmpty()) {
TDUP2 = Byte.parseByte(s);
} else {
TDUP2 = Byte.MIN_VALUE;
}
}

protected final void initTDUPA1(String s) {
if (!s.trim().isEmpty()) {
TDUPA1 = Byte.parseByte(s);
} else {
TDUPA1 = Byte.MIN_VALUE;
}
}

protected final void initTDUPA2(String s) {
if (!s.trim().isEmpty()) {
TDUPA2 = Byte.parseByte(s);
} else {
TDUPA2 = Byte.MIN_VALUE;
}
}

protected final void initTJNT1(String s) {
if (!s.trim().isEmpty()) {
TJNT1 = Byte.parseByte(s);
} else {
TJNT1 = Byte.MIN_VALUE;
}
}

protected final void initTJNT2(String s) {
if (!s.trim().isEmpty()) {
TJNT2 = Byte.parseByte(s);
} else {
TJNT2 = Byte.MIN_VALUE;
}
}

protected final void initTJNT3(String s) {
if (!s.trim().isEmpty()) {
TJNT3 = Byte.parseByte(s);
} else {
TJNT3 = Byte.MIN_VALUE;
}
}

protected final void initTJNT4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
TJNT4 = false;
}
}

protected final void initTOPDVDBOPEN1T(String s) {
if (!s.trim().isEmpty()) {
TOPDVDBOPEN1T = Double.parseDouble(s);
} else {
TOPDVDBOPEN1T = Double.NaN;
}
}

protected final void initTOPDVDBOPEN2T(String s) {
if (!s.trim().isEmpty()) {
TOPDVDBOPEN2T = Double.parseDouble(s);
} else {
TOPDVDBOPEN2T = Double.NaN;
}
}

protected final void initTOTARR_EXCMORT_SUM(String s) {
if (!s.trim().isEmpty()) {
TOTARR_EXCMORT_SUM = Short.parseShort(s);
} else {
TOTARR_EXCMORT_SUM = Short.MIN_VALUE;
}
}

protected final void initTOTBILLARR_SUM(String s) {
if (!s.trim().isEmpty()) {
TOTBILLARR_SUM = Short.parseShort(s);
} else {
TOTBILLARR_SUM = Short.MIN_VALUE;
}
}

protected final void initTOTCC_SUM(String s) {
if (!s.trim().isEmpty()) {
TOTCC_SUM = Integer.parseInt(s);
} else {
TOTCC_SUM = Integer.MIN_VALUE;
}
}

protected final void initTOTFLNS_SUM(String s) {
if (!s.trim().isEmpty()) {
TOTFLNS_SUM = Double.parseDouble(s);
} else {
TOTFLNS_SUM = Double.NaN;
}
}

protected final void initTOTHP_SUM(String s) {
if (!s.trim().isEmpty()) {
TOTHP_SUM = Double.parseDouble(s);
} else {
TOTHP_SUM = Double.NaN;
}
}

protected final void initTOTLNS_SUM(String s) {
if (!s.trim().isEmpty()) {
TOTLNS_SUM = Double.parseDouble(s);
} else {
TOTLNS_SUM = Double.NaN;
}
}

protected final void initTOTLOS_SUM(String s) {
if (!s.trim().isEmpty()) {
TOTLOS_SUM = Double.parseDouble(s);
} else {
TOTLOS_SUM = Double.NaN;
}
}

protected final void initTOTMO_SUM(String s) {
if (!s.trim().isEmpty()) {
TOTMO_SUM = Double.parseDouble(s);
} else {
TOTMO_SUM = Double.NaN;
}
}

protected final void initTOTNLOS_SUM(String s) {
if (!s.trim().isEmpty()) {
TOTNLOS_SUM = Integer.parseInt(s);
} else {
TOTNLOS_SUM = Integer.MIN_VALUE;
}
}

protected final void initTOTNSLBNK_SUM(String s) {
if (!s.trim().isEmpty()) {
TOTNSLBNK_SUM = Integer.parseInt(s);
} else {
TOTNSLBNK_SUM = Integer.MIN_VALUE;
}
}

protected final void initTOTNSLC_SUM(String s) {
if (!s.trim().isEmpty()) {
TOTNSLC_SUM = Integer.parseInt(s);
} else {
TOTNSLC_SUM = Integer.MIN_VALUE;
}
}

protected final void initTOTOSLBNK_SUM(String s) {
if (!s.trim().isEmpty()) {
TOTOSLBNK_SUM = Integer.parseInt(s);
} else {
TOTOSLBNK_SUM = Integer.MIN_VALUE;
}
}

protected final void initTOTOSLC_SUM(String s) {
if (!s.trim().isEmpty()) {
TOTOSLC_SUM = Integer.parseInt(s);
} else {
TOTOSLC_SUM = Integer.MIN_VALUE;
}
}

protected final void initTOTPARTGRSPAY(String s) {
if (!s.trim().isEmpty()) {
TOTPARTGRSPAY = Integer.parseInt(s);
} else {
TOTPARTGRSPAY = Integer.MIN_VALUE;
}
}

protected final void initTOTSC_SUM(String s) {
if (!s.trim().isEmpty()) {
TOTSC_SUM = Short.parseShort(s);
} else {
TOTSC_SUM = Short.MIN_VALUE;
}
}

protected final void initTOTSLBNK_SUM(String s) {
if (!s.trim().isEmpty()) {
TOTSLBNK_SUM = Integer.parseInt(s);
} else {
TOTSLBNK_SUM = Integer.MIN_VALUE;
}
}

protected final void initTOTSLC_SUM(String s) {
if (!s.trim().isEmpty()) {
TOTSLC_SUM = Integer.parseInt(s);
} else {
TOTSLC_SUM = Integer.MIN_VALUE;
}
}

protected final void initTRUST(String s) {
if (!s.trim().isEmpty()) {
TRUST = Byte.parseByte(s);
} else {
TRUST = Byte.MIN_VALUE;
}
}

protected final void initTSNEW(String s) {
if (!s.trim().isEmpty()) {
TSNEW = Byte.parseByte(s);
} else {
TSNEW = Byte.MIN_VALUE;
}
}

protected final void initTSNUM1(String s) {
if (!s.trim().isEmpty()) {
TSNUM1 = Byte.parseByte(s);
} else {
TSNUM1 = Byte.MIN_VALUE;
}
}

protected final void initTSNUM2(String s) {
if (!s.trim().isEmpty()) {
TSNUM2 = Byte.parseByte(s);
} else {
TSNUM2 = Byte.MIN_VALUE;
}
}

protected final void initTVAL1(String s) {
if (!s.trim().isEmpty()) {
TVAL1 = Integer.parseInt(s);
} else {
TVAL1 = Integer.MIN_VALUE;
}
}

protected final void initTVAL2(String s) {
if (!s.trim().isEmpty()) {
TVAL2 = Integer.parseInt(s);
} else {
TVAL2 = Integer.MIN_VALUE;
}
}

protected final void initTVALB1(String s) {
if (!s.trim().isEmpty()) {
TVALB1 = Byte.parseByte(s);
} else {
TVALB1 = Byte.MIN_VALUE;
}
}

protected final void initTVALB2(String s) {
if (!s.trim().isEmpty()) {
TVALB2 = Byte.parseByte(s);
} else {
TVALB2 = Byte.MIN_VALUE;
}
}

protected final void initTWHO1(String s) {
if (!s.trim().isEmpty()) {
TWHO1 = Byte.parseByte(s);
} else {
TWHO1 = Byte.MIN_VALUE;
}
}

protected final void initTWHO2(String s) {
if (!s.trim().isEmpty()) {
TWHO2 = Byte.parseByte(s);
} else {
TWHO2 = Byte.MIN_VALUE;
}
}

protected final void initTWHO7(String s) {
if (!s.trim().isEmpty()) {
TWHO7 = Byte.parseByte(s);
} else {
TWHO7 = Byte.MIN_VALUE;
}
}

protected final void initTWHO8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
TWHO8 = false;
}
}

protected final void initUBUYLET(String s) {
if (!s.trim().isEmpty()) {
UBUYLET = Byte.parseByte(s);
} else {
UBUYLET = Byte.MIN_VALUE;
}
}

protected final void initUBUYLET_I(String s) {
if (!s.trim().isEmpty()) {
UBUYLET_I = Byte.parseByte(s);
} else {
UBUYLET_I = Byte.MIN_VALUE;
}
}

protected final void initUBUYLET_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UBUYLET_IFLAG = false;
}
}

protected final void initUDEBTBL(String s) {
if (!s.trim().isEmpty()) {
UDEBTBL = Byte.parseByte(s);
} else {
UDEBTBL = Byte.MIN_VALUE;
}
}

protected final void initUDEBTBLU(String s) {
if (!s.trim().isEmpty()) {
UDEBTBLU = Byte.parseByte(s);
} else {
UDEBTBLU = Byte.MIN_VALUE;
}
}

protected final void initUDEBTBO(String s) {
if (!s.trim().isEmpty()) {
UDEBTBO = Byte.parseByte(s);
} else {
UDEBTBO = Byte.MIN_VALUE;
}
}

protected final void initUDEBTBOR(String s) {
if (!s.trim().isEmpty()) {
UDEBTBOR = Byte.parseByte(s);
} else {
UDEBTBOR = Byte.MIN_VALUE;
}
}

protected final void initUDEBTBOS(String s) {
if (!s.trim().isEmpty()) {
UDEBTBOS = Byte.parseByte(s);
} else {
UDEBTBOS = Byte.MIN_VALUE;
}
}

protected final void initUDEBTBS(String s) {
if (!s.trim().isEmpty()) {
UDEBTBS = Byte.parseByte(s);
} else {
UDEBTBS = Byte.MIN_VALUE;
}
}

protected final void initUDEBTL(String s) {
if (!s.trim().isEmpty()) {
UDEBTL = Integer.parseInt(s);
} else {
UDEBTL = Integer.MIN_VALUE;
}
}

protected final void initUDEBTLU(String s) {
if (!s.trim().isEmpty()) {
UDEBTLU = Integer.parseInt(s);
} else {
UDEBTLU = Integer.MIN_VALUE;
}
}

protected final void initUDEBTLU_I(String s) {
if (!s.trim().isEmpty()) {
UDEBTLU_I = Integer.parseInt(s);
} else {
UDEBTLU_I = Integer.MIN_VALUE;
}
}

protected final void initUDEBTLU_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UDEBTLU_IFLAG = false;
}
}

protected final void initUDEBTL_I(String s) {
if (!s.trim().isEmpty()) {
UDEBTL_I = Integer.parseInt(s);
} else {
UDEBTL_I = Integer.MIN_VALUE;
}
}

protected final void initUDEBTL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UDEBTL_IFLAG = false;
}
}

protected final void initUDEBTO(String s) {
if (!s.trim().isEmpty()) {
UDEBTO = Integer.parseInt(s);
} else {
UDEBTO = Integer.MIN_VALUE;
}
}

protected final void initUDEBTOR(String s) {
if (!s.trim().isEmpty()) {
UDEBTOR = Integer.parseInt(s);
} else {
UDEBTOR = Integer.MIN_VALUE;
}
}

protected final void initUDEBTOR_I(String s) {
if (!s.trim().isEmpty()) {
UDEBTOR_I = Integer.parseInt(s);
} else {
UDEBTOR_I = Integer.MIN_VALUE;
}
}

protected final void initUDEBTOR_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UDEBTOR_IFLAG = false;
}
}

protected final void initUDEBTOS(String s) {
if (!s.trim().isEmpty()) {
UDEBTOS = Integer.parseInt(s);
} else {
UDEBTOS = Integer.MIN_VALUE;
}
}

protected final void initUDEBTOS_I(String s) {
if (!s.trim().isEmpty()) {
UDEBTOS_I = Integer.parseInt(s);
} else {
UDEBTOS_I = Integer.MIN_VALUE;
}
}

protected final void initUDEBTOS_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UDEBTOS_IFLAG = false;
}
}

protected final void initUDEBTO_I(String s) {
if (!s.trim().isEmpty()) {
UDEBTO_I = Integer.parseInt(s);
} else {
UDEBTO_I = Integer.MIN_VALUE;
}
}

protected final void initUDEBTO_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UDEBTO_IFLAG = false;
}
}

protected final void initUDEBTS(String s) {
if (!s.trim().isEmpty()) {
UDEBTS = Integer.parseInt(s);
} else {
UDEBTS = Integer.MIN_VALUE;
}
}

protected final void initUDEBTS_I(String s) {
if (!s.trim().isEmpty()) {
UDEBTS_I = Integer.parseInt(s);
} else {
UDEBTS_I = Integer.MIN_VALUE;
}
}

protected final void initUDEBTS_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UDEBTS_IFLAG = false;
}
}

protected final void initUGDVBL(String s) {
if (!s.trim().isEmpty()) {
UGDVBL = Byte.parseByte(s);
} else {
UGDVBL = Byte.MIN_VALUE;
}
}

protected final void initUGDVBL_I(String s) {
if (!s.trim().isEmpty()) {
UGDVBL_I = Byte.parseByte(s);
} else {
UGDVBL_I = Byte.MIN_VALUE;
}
}

protected final void initUGDVBL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UGDVBL_IFLAG = false;
}
}

protected final void initUGDVBOS(String s) {
if (!s.trim().isEmpty()) {
UGDVBOS = Byte.parseByte(s);
} else {
UGDVBOS = Byte.MIN_VALUE;
}
}

protected final void initUGDVBOS_I(String s) {
if (!s.trim().isEmpty()) {
UGDVBOS_I = Byte.parseByte(s);
} else {
UGDVBOS_I = Byte.MIN_VALUE;
}
}

protected final void initUGDVBOS_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UGDVBOS_IFLAG = false;
}
}

protected final void initUGDVBS(String s) {
if (!s.trim().isEmpty()) {
UGDVBS = Byte.parseByte(s);
} else {
UGDVBS = Byte.MIN_VALUE;
}
}

protected final void initUGDVBS_I(String s) {
if (!s.trim().isEmpty()) {
UGDVBS_I = Byte.parseByte(s);
} else {
UGDVBS_I = Byte.MIN_VALUE;
}
}

protected final void initUGDVBS_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UGDVBS_IFLAG = false;
}
}

protected final void initUPROP5_I(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UPROP5_I = false;
}
}

protected final void initUPROP6_I(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UPROP6_I = false;
}
}

protected final void initUPRTYP10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UPRTYP10 = false;
}
}

protected final void initUPRTYP11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UPRTYP11 = false;
}
}

protected final void initUPRTYP12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UPRTYP12 = false;
}
}

protected final void initUPRTYP13(String s) {
if (!s.trim().isEmpty()) {
UPRTYP13 = Byte.parseByte(s);
} else {
UPRTYP13 = Byte.MIN_VALUE;
}
}

protected final void initUPRTYP14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UPRTYP14 = false;
}
}

protected final void initUPRTYP15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UPRTYP15 = false;
}
}

protected final void initUPRTYP16(String s) {
if (!s.trim().isEmpty()) {
UPRTYP16 = Byte.parseByte(s);
} else {
UPRTYP16 = Byte.MIN_VALUE;
}
}

protected final void initUPRTYP17(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UPRTYP17 = false;
}
}

protected final void initUPRTYP18(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UPRTYP18 = false;
}
}

protected final void initUPRTYP2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UPRTYP2 = false;
}
}

protected final void initUPRTYP3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UPRTYP3 = false;
}
}

protected final void initUPRTYP4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UPRTYP4 = false;
}
}

protected final void initUPRTYP5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UPRTYP5 = false;
}
}

protected final void initUPRTYP6(String s) {
if (!s.trim().isEmpty()) {
UPRTYP6 = Byte.parseByte(s);
} else {
UPRTYP6 = Byte.MIN_VALUE;
}
}

protected final void initUPRTYP7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UPRTYP7 = false;
}
}

protected final void initUPRTYP8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UPRTYP8 = false;
}
}

protected final void initUPRTYP9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UPRTYP9 = false;
}
}

protected final void initUVALBL(String s) {
if (!s.trim().isEmpty()) {
UVALBL = Byte.parseByte(s);
} else {
UVALBL = Byte.MIN_VALUE;
}
}

protected final void initUVALBLU(String s) {
if (!s.trim().isEmpty()) {
UVALBLU = Byte.parseByte(s);
} else {
UVALBLU = Byte.MIN_VALUE;
}
}

protected final void initUVALBO(String s) {
if (!s.trim().isEmpty()) {
UVALBO = Byte.parseByte(s);
} else {
UVALBO = Byte.MIN_VALUE;
}
}

protected final void initUVALBOR(String s) {
if (!s.trim().isEmpty()) {
UVALBOR = Byte.parseByte(s);
} else {
UVALBOR = Byte.MIN_VALUE;
}
}

protected final void initUVALBOS(String s) {
if (!s.trim().isEmpty()) {
UVALBOS = Byte.parseByte(s);
} else {
UVALBOS = Byte.MIN_VALUE;
}
}

protected final void initUVALBS(String s) {
if (!s.trim().isEmpty()) {
UVALBS = Byte.parseByte(s);
} else {
UVALBS = Byte.MIN_VALUE;
}
}

protected final void initUVALL(String s) {
if (!s.trim().isEmpty()) {
UVALL = Integer.parseInt(s);
} else {
UVALL = Integer.MIN_VALUE;
}
}

protected final void initUVALLU(String s) {
if (!s.trim().isEmpty()) {
UVALLU = Integer.parseInt(s);
} else {
UVALLU = Integer.MIN_VALUE;
}
}

protected final void initUVALLU_I(String s) {
if (!s.trim().isEmpty()) {
UVALLU_I = Integer.parseInt(s);
} else {
UVALLU_I = Integer.MIN_VALUE;
}
}

protected final void initUVALLU_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UVALLU_IFLAG = false;
}
}

protected final void initUVALL_I(String s) {
if (!s.trim().isEmpty()) {
UVALL_I = Integer.parseInt(s);
} else {
UVALL_I = Integer.MIN_VALUE;
}
}

protected final void initUVALL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UVALL_IFLAG = false;
}
}

protected final void initUVALO(String s) {
if (!s.trim().isEmpty()) {
UVALO = Integer.parseInt(s);
} else {
UVALO = Integer.MIN_VALUE;
}
}

protected final void initUVALOR(String s) {
if (!s.trim().isEmpty()) {
UVALOR = Integer.parseInt(s);
} else {
UVALOR = Integer.MIN_VALUE;
}
}

protected final void initUVALOR_I(String s) {
if (!s.trim().isEmpty()) {
UVALOR_I = Integer.parseInt(s);
} else {
UVALOR_I = Integer.MIN_VALUE;
}
}

protected final void initUVALOR_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UVALOR_IFLAG = false;
}
}

protected final void initUVALOS(String s) {
if (!s.trim().isEmpty()) {
UVALOS = Integer.parseInt(s);
} else {
UVALOS = Integer.MIN_VALUE;
}
}

protected final void initUVALOS_I(String s) {
if (!s.trim().isEmpty()) {
UVALOS_I = Integer.parseInt(s);
} else {
UVALOS_I = Integer.MIN_VALUE;
}
}

protected final void initUVALOS_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UVALOS_IFLAG = false;
}
}

protected final void initUVALO_I(String s) {
if (!s.trim().isEmpty()) {
UVALO_I = Integer.parseInt(s);
} else {
UVALO_I = Integer.MIN_VALUE;
}
}

protected final void initUVALO_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UVALO_IFLAG = false;
}
}

protected final void initUVALS(String s) {
if (!s.trim().isEmpty()) {
UVALS = Integer.parseInt(s);
} else {
UVALS = Integer.MIN_VALUE;
}
}

protected final void initUVALS_I(String s) {
if (!s.trim().isEmpty()) {
UVALS_I = Integer.parseInt(s);
} else {
UVALS_I = Integer.MIN_VALUE;
}
}

protected final void initUVALS_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
UVALS_IFLAG = false;
}
}

protected final void initVALPBLUM1(String s) {
if (!s.trim().isEmpty()) {
VALPBLUM1 = Integer.parseInt(s);
} else {
VALPBLUM1 = Integer.MIN_VALUE;
}
}

protected final void initVALPBLUM2(String s) {
if (!s.trim().isEmpty()) {
VALPBLUM2 = Integer.parseInt(s);
} else {
VALPBLUM2 = Integer.MIN_VALUE;
}
}

protected final void initWKBETW(String s) {
if (!s.trim().isEmpty()) {
WKBETW = Byte.parseByte(s);
} else {
WKBETW = Byte.MIN_VALUE;
}
}

protected final void initWKHRS(String s) {
if (!s.trim().isEmpty()) {
WKHRS = Byte.parseByte(s);
} else {
WKHRS = Byte.MIN_VALUE;
}
}

protected final void initWKHRSIR(String s) {
if (!s.trim().isEmpty()) {
WKHRSIR = Byte.parseByte(s);
} else {
WKHRSIR = Byte.MIN_VALUE;
}
}

protected final void initWORTH(String s) {
if (!s.trim().isEmpty()) {
WORTH = Byte.parseByte(s);
} else {
WORTH = Byte.MIN_VALUE;
}
}

protected final void initWRKING_I(String s) {
if (!s.trim().isEmpty()) {
WRKING_I = Byte.parseByte(s);
} else {
WRKING_I = Byte.MIN_VALUE;
}
}

protected final void initWRKING_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
WRKING_IFLAG = false;
}
}

protected final void initXINCSE(String s) {
if (!s.trim().isEmpty()) {
XINCSE = Byte.parseByte(s);
} else {
XINCSE = Byte.MIN_VALUE;
}
}

protected final void initXMARSTA(String s) {
if (!s.trim().isEmpty()) {
XMARSTA = Byte.parseByte(s);
} else {
XMARSTA = Byte.MIN_VALUE;
}
}

protected final void initXMARSTA_I(String s) {
if (!s.trim().isEmpty()) {
XMARSTA_I = Byte.parseByte(s);
} else {
XMARSTA_I = Byte.MIN_VALUE;
}
}

protected final void initXMARSTA_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
XMARSTA_IFLAG = false;
}
}

public double getACCFRAC1() {
return ACCFRAC1;
}

public double getACCFRAC2() {
return ACCFRAC2;
}

public byte getALLRET() {
return ALLRET;
}

public byte getALLRET_I() {
return ALLRET_I;
}

public byte getANXIOUS() {
return ANXIOUS;
}

public double getASAF1T() {
return ASAF1T;
}

public double getASAF2T() {
return ASAF2T;
}

public String getBACCBEG1() {
return BACCBEG1;
}

public byte getBACCSA1() {
return BACCSA1;
}

public byte getBACCSB1() {
return BACCSB1;
}

public int getBBEFORE1() {
return BBEFORE1;
}

public byte getBCARRY1() {
return BCARRY1;
}

public boolean getBCARRY3() {
return BCARRY3;
}

public int getBDEBTS1() {
return BDEBTS1;
}

public byte getBDIRNI1() {
return BDIRNI1;
}

public byte getBDIRNI1_I() {
return BDIRNI1_I;
}

public boolean getBDIRNI1_IFLAG() {
return BDIRNI1_IFLAG;
}

public byte getBDOCS1() {
return BDOCS1;
}

public byte getBEMPN1() {
return BEMPN1;
}

public byte getBNATINS1() {
return BNATINS1;
}

public byte getBONTAX_I() {
return BONTAX_I;
}

public boolean getBONTAX_IFLAG() {
return BONTAX_IFLAG;
}

public double getBOTDVDBOPEN1T() {
return BOTDVDBOPEN1T;
}

public double getBOTDVDBOPEN2T() {
return BOTDVDBOPEN2T;
}

public int getBOWED1() {
return BOWED1;
}

public byte getBOWN1() {
return BOWN1;
}

public byte getBPART1() {
return BPART1;
}

public byte getBPAYNUM() {
return BPAYNUM;
}

public byte getBPRFLOSS1() {
return BPRFLOSS1;
}

public byte getBPRFLOSS2() {
return BPRFLOSS2;
}

public byte getBPRFLOSS3() {
return BPRFLOSS3;
}

public int getBPROFIT1() {
return BPROFIT1;
}

public byte getBPROPN1() {
return BPROPN1;
}

public byte getBRETIRE1() {
return BRETIRE1;
}

public byte getBSEPPD01() {
return BSEPPD01;
}

public byte getBSEPPD02() {
return BSEPPD02;
}

public byte getBSEPPD03() {
return BSEPPD03;
}

public byte getBSEPPD04() {
return BSEPPD04;
}

public byte getBSEPPD05() {
return BSEPPD05;
}

public byte getBSEPPD06() {
return BSEPPD06;
}

public byte getBSEPPD07() {
return BSEPPD07;
}

public boolean getBSEPPD08() {
return BSEPPD08;
}

public byte getBSIZE1() {
return BSIZE1;
}

public byte getBSTART1() {
return BSTART1;
}

public byte getBTAX1() {
return BTAX1;
}

public byte getBTOGPD() {
return BTOGPD;
}

public byte getBTOGSEP() {
return BTOGSEP;
}

public byte getBTYPE1() {
return BTYPE1;
}

public byte getBTYPE1_I() {
return BTYPE1_I;
}

public boolean getBTYPE1_IFLAG() {
return BTYPE1_IFLAG;
}

public int getBUYLGDST() {
return BUYLGDST;
}

public int getBVAL1() {
return BVAL1;
}

public byte getBVALB1() {
return BVALB1;
}

public byte getBVALB3() {
return BVALB3;
}

public short getBYEAR1() {
return BYEAR1;
}

public byte getCACONTR1() {
return CACONTR1;
}

public byte getCACONTR2() {
return CACONTR2;
}

public byte getCACONTR3() {
return CACONTR3;
}

public byte getCACONTR4() {
return CACONTR4;
}

public boolean getCACONTR5() {
return CACONTR5;
}

public boolean getCACONTR6() {
return CACONTR6;
}

public short getCACONTRAM1() {
return CACONTRAM1;
}

public int getCACONTRAM2() {
return CACONTRAM2;
}

public int getCACONTRAM3() {
return CACONTRAM3;
}

public int getCACONTRAM4() {
return CACONTRAM4;
}

public short getCACONTRAM5() {
return CACONTRAM5;
}

public short getCACONTRAM6() {
return CACONTRAM6;
}

public byte getCACONTRAMB1() {
return CACONTRAMB1;
}

public byte getCACONTRAMB2() {
return CACONTRAMB2;
}

public byte getCACONTRAMB3() {
return CACONTRAMB3;
}

public byte getCACONTRAMB4() {
return CACONTRAMB4;
}

public byte getCACONTRAMB5() {
return CACONTRAMB5;
}

public byte getCACONTRAMB6() {
return CACONTRAMB6;
}

public byte getCACRNUM() {
return CACRNUM;
}

public byte getCACTVB() {
return CACTVB;
}

public byte getCAJISA_I() {
return CAJISA_I;
}

public boolean getCAJISA_IFLAG() {
return CAJISA_IFLAG;
}

public byte getCAODNUM() {
return CAODNUM;
}

public byte getCAOPEN() {
return CAOPEN;
}

public short getCASEW2() {
return CASEW2;
}

public short getCASEW3() {
return CASEW3;
}

public byte getCCAC1_I() {
return CCAC1_I;
}

public boolean getCCAC1_IFLAG() {
return CCAC1_IFLAG;
}

public byte getCCAC2_I() {
return CCAC2_I;
}

public boolean getCCAC2_IFLAG() {
return CCAC2_IFLAG;
}

public byte getCCAC3_I() {
return CCAC3_I;
}

public boolean getCCAC3_IFLAG() {
return CCAC3_IFLAG;
}

public byte getCHOICP() {
return CHOICP;
}

public byte getCOMMI() {
return COMMI;
}

public byte getCOUPLENUM() {
return COUPLENUM;
}

public byte getCURSTAT() {
return CURSTAT;
}

public boolean getCUTDOWN() {
return CUTDOWN;
}

public byte getDADVACT1() {
return DADVACT1;
}

public byte getDADVACT2() {
return DADVACT2;
}

public byte getDADVACT3() {
return DADVACT3;
}

public byte getDADVMTH() {
return DADVMTH;
}

public byte getDBURDW1() {
return DBURDW1;
}

public byte getDBURDW2() {
return DBURDW2;
}

public byte getDC12BEH1() {
return DC12BEH1;
}

public byte getDC12BEH2() {
return DC12BEH2;
}

public byte getDC12BEH3() {
return DC12BEH3;
}

public short getDC12OWE1() {
return DC12OWE1;
}

public short getDC12OWE2() {
return DC12OWE2;
}

public short getDC12OWE3() {
return DC12OWE3;
}

public int getDCAMC1() {
return DCAMC1;
}

public short getDCAMD1() {
return DCAMD1;
}

public int getDCAMOS1_I() {
return DCAMOS1_I;
}

public boolean getDCAMOS1_IFLAG() {
return DCAMOS1_IFLAG;
}

public int getDCAMOS2_I() {
return DCAMOS2_I;
}

public boolean getDCAMOS2_IFLAG() {
return DCAMOS2_IFLAG;
}

public short getDCAMOS3_I() {
return DCAMOS3_I;
}

public boolean getDCAMOS3_IFLAG() {
return DCAMOS3_IFLAG;
}

public short getDCAMP1() {
return DCAMP1;
}

public byte getDCCOS1() {
return DCCOS1;
}

public byte getDCCSP1() {
return DCCSP1;
}

public byte getDCESB1() {
return DCESB1;
}

public byte getDCINZ1() {
return DCINZ1;
}

public byte getDCNAM1() {
return DCNAM1;
}

public byte getDCNUM1() {
return DCNUM1;
}

public byte getDCNUM2() {
return DCNUM2;
}

public int getDCOINV1() {
return DCOINV1;
}

public int getDCOINV1_I() {
return DCOINV1_I;
}

public boolean getDCOINV1_IFLAG() {
return DCOINV1_IFLAG;
}

public short getDCOINV3_I() {
return DCOINV3_I;
}

public byte getDCOINV3_IFLAG() {
return DCOINV3_IFLAG;
}

public short getDCOINV4() {
return DCOINV4;
}

public short getDCOINV4_I() {
return DCOINV4_I;
}

public boolean getDCOINV4_IFLAG() {
return DCOINV4_IFLAG;
}

public short getDCOINV5() {
return DCOINV5;
}

public short getDCOINV5_I() {
return DCOINV5_I;
}

public boolean getDCOINV5_IFLAG() {
return DCOINV5_IFLAG;
}

public byte getDCOINVB1() {
return DCOINVB1;
}

public boolean getDCOINVB4() {
return DCOINVB4;
}

public boolean getDCOINVB5() {
return DCOINVB5;
}

public int getDCOSHV1() {
return DCOSHV1;
}

public int getDCOSHV1_I() {
return DCOSHV1_I;
}

public boolean getDCOSHV1_IFLAG() {
return DCOSHV1_IFLAG;
}

public short getDCOSHV3_I() {
return DCOSHV3_I;
}

public boolean getDCOSHV3_IFLAG() {
return DCOSHV3_IFLAG;
}

public boolean getDCOSHV4() {
return DCOSHV4;
}

public boolean getDCOSHV5() {
return DCOSHV5;
}

public byte getDCOSHVB1() {
return DCOSHVB1;
}

public boolean getDCOSHVB3() {
return DCOSHVB3;
}

public boolean getDCOSHVB4() {
return DCOSHVB4;
}

public boolean getDCOSHVB5() {
return DCOSHVB5;
}

public byte getDCPER1() {
return DCPER1;
}

public byte getDCREC1() {
return DCREC1;
}

public byte getDCRSP1() {
return DCRSP1;
}

public boolean getDHBANY08() {
return DHBANY08;
}

public boolean getDHBANY09() {
return DHBANY09;
}

public boolean getDHBANY10() {
return DHBANY10;
}

public boolean getDHBANY11() {
return DHBANY11;
}

public byte getDHPBEH1() {
return DHPBEH1;
}

public byte getDHPBEH1_I() {
return DHPBEH1_I;
}

public boolean getDHPBEH1_IFLAG() {
return DHPBEH1_IFLAG;
}

public byte getDHPEST1() {
return DHPEST1;
}

public short getDHPINS1() {
return DHPINS1;
}

public short getDHPINS1_I() {
return DHPINS1_I;
}

public boolean getDHPINS1_IFLAG() {
return DHPINS1_IFLAG;
}

public byte getDHPINT1() {
return DHPINT1;
}

public byte getDHPOFT1() {
return DHPOFT1;
}

public byte getDHPOFT1_I() {
return DHPOFT1_I;
}

public boolean getDHPOFT1_IFLAG() {
return DHPOFT1_IFLAG;
}

public short getDHPOWE1() {
return DHPOWE1;
}

public short getDHPOWE1_I() {
return DHPOWE1_I;
}

public boolean getDHPOWE1_IFLAG() {
return DHPOWE1_IFLAG;
}

public byte getDHPWEST1() {
return DHPWEST1;
}

public byte getDHPWHNM1() {
return DHPWHNM1;
}

public byte getDHPWHNM1_I() {
return DHPWHNM1_I;
}

public boolean getDHPWHNM1_IFLAG() {
return DHPWHNM1_IFLAG;
}

public short getDHPWHNY1() {
return DHPWHNY1;
}

public short getDHPWHNY1_I() {
return DHPWHNY1_I;
}

public boolean getDHPWHNY1_IFLAG() {
return DHPWHNY1_IFLAG;
}

public byte getDLBEH1() {
return DLBEH1;
}

public byte getDLBEH1_I() {
return DLBEH1_I;
}

public boolean getDLBEH1_IFLAG() {
return DLBEH1_IFLAG;
}

public byte getDLEST1() {
return DLEST1;
}

public byte getDLEST5() {
return DLEST5;
}

public short getDLINS1() {
return DLINS1;
}

public short getDLINS1_I() {
return DLINS1_I;
}

public boolean getDLINS1_IFLAG() {
return DLINS1_IFLAG;
}

public byte getDLINT1() {
return DLINT1;
}

public byte getDLNNM() {
return DLNNM;
}

public byte getDLOFT1() {
return DLOFT1;
}

public byte getDLOFT1_I() {
return DLOFT1_I;
}

public boolean getDLOFT1_IFLAG() {
return DLOFT1_IFLAG;
}

public byte getDLOLD1() {
return DLOLD1;
}

public byte getDLOLD2() {
return DLOLD2;
}

public byte getDLOLD3() {
return DLOLD3;
}

public byte getDLOLD4() {
return DLOLD4;
}

public byte getDLOLD5() {
return DLOLD5;
}

public byte getDLONM() {
return DLONM;
}

public short getDLOWE1() {
return DLOWE1;
}

public short getDLOWE1_I() {
return DLOWE1_I;
}

public boolean getDLOWE1_IFLAG() {
return DLOWE1_IFLAG;
}

public byte getDLSEC1() {
return DLSEC1;
}

public byte getDLTYPE1() {
return DLTYPE1;
}

public byte getDLTYPE1_I() {
return DLTYPE1_I;
}

public boolean getDLTYPE1_IFLAG() {
return DLTYPE1_IFLAG;
}

public byte getDLWEST1() {
return DLWEST1;
}

public byte getDLWHNM1() {
return DLWHNM1;
}

public byte getDLWHNM1_I() {
return DLWHNM1_I;
}

public boolean getDLWHNM1_IFLAG() {
return DLWHNM1_IFLAG;
}

public short getDLWHNY1() {
return DLWHNY1;
}

public short getDLWHNY1_I() {
return DLWHNY1_I;
}

public boolean getDLWHNY1_IFLAG() {
return DLWHNY1_IFLAG;
}

public boolean getDLWHY30() {
return DLWHY30;
}

public boolean getDLWHY6() {
return DLWHY6;
}

public boolean getDLWHY7() {
return DLWHY7;
}

public byte getDMOBEH1() {
return DMOBEH1;
}

public byte getDMOBEH1_I() {
return DMOBEH1_I;
}

public boolean getDMOBEH1_IFLAG() {
return DMOBEH1_IFLAG;
}

public byte getDMOEST1() {
return DMOEST1;
}

public short getDMOINS1() {
return DMOINS1;
}

public short getDMOINS1_I() {
return DMOINS1_I;
}

public boolean getDMOINS1_IFLAG() {
return DMOINS1_IFLAG;
}

public byte getDMOINT1() {
return DMOINT1;
}

public byte getDMOOFT1() {
return DMOOFT1;
}

public byte getDMOOFT1_I() {
return DMOOFT1_I;
}

public boolean getDMOOFT1_IFLAG() {
return DMOOFT1_IFLAG;
}

public short getDMOOWE1() {
return DMOOWE1;
}

public short getDMOOWE1_I() {
return DMOOWE1_I;
}

public boolean getDMOOWE1_IFLAG() {
return DMOOWE1_IFLAG;
}

public byte getDMOWEST1() {
return DMOWEST1;
}

public byte getDMOWHNM1() {
return DMOWHNM1;
}

public byte getDMOWHNM1_I() {
return DMOWHNM1_I;
}

public boolean getDMOWHNM1_IFLAG() {
return DMOWHNM1_IFLAG;
}

public short getDMOWHNY1() {
return DMOWHNY1;
}

public short getDMOWHNY1_I() {
return DMOWHNY1_I;
}

public boolean getDMOWHNY1_IFLAG() {
return DMOWHNY1_IFLAG;
}

public byte getDS12BEH1() {
return DS12BEH1;
}

public byte getDS12BEH2() {
return DS12BEH2;
}

public byte getDS12BEH3() {
return DS12BEH3;
}

public short getDS12OWE1() {
return DS12OWE1;
}

public short getDS12OWE2() {
return DS12OWE2;
}

public byte getDS12OWE3() {
return DS12OWE3;
}

public short getDSAMC1() {
return DSAMC1;
}

public short getDSAMD1() {
return DSAMD1;
}

public short getDSAMOS1_I() {
return DSAMOS1_I;
}

public boolean getDSAMOS1_IFLAG() {
return DSAMOS1_IFLAG;
}

public short getDSAMOS2_I() {
return DSAMOS2_I;
}

public boolean getDSAMOS2_IFLAG() {
return DSAMOS2_IFLAG;
}

public short getDSAMOS3_I() {
return DSAMOS3_I;
}

public boolean getDSAMOS3_IFLAG() {
return DSAMOS3_IFLAG;
}

public short getDSAMP1() {
return DSAMP1;
}

public byte getDSCOS1() {
return DSCOS1;
}

public byte getDSCSP1() {
return DSCSP1;
}

public byte getDSESB1() {
return DSESB1;
}

public int getDSLAMT1() {
return DSLAMT1;
}

public int getDSLAMT1_I() {
return DSLAMT1_I;
}

public boolean getDSLAMT1_IFLAG() {
return DSLAMT1_IFLAG;
}

public byte getDSLEST1() {
return DSLEST1;
}

public byte getDSLPAY1() {
return DSLPAY1;
}

public byte getDSNAM1() {
return DSNAM1;
}

public byte getDSNUM2() {
return DSNUM2;
}

public byte getDSPER1() {
return DSPER1;
}

public boolean getDSPER3() {
return DSPER3;
}

public byte getDSREC1() {
return DSREC1;
}

public int getDVACCINANNUAL() {
return DVACCINANNUAL;
}

public byte getDVAGE4() {
return DVAGE4;
}

public byte getDVAGE5() {
return DVAGE5;
}

public byte getDVAGE6() {
return DVAGE6;
}

public byte getDVAGE7() {
return DVAGE7;
}

public byte getDVAGE9() {
return DVAGE9;
}

public int getDVBLDDEBT() {
return DVBLDDEBT;
}

public int getDVBLDVAL() {
return DVBLDVAL;
}

public int getDVBLTDEBT() {
return DVBLTDEBT;
}

public int getDVBLTVAL() {
return DVBLTVAL;
}

public double getDVBTOGANNUAL() {
return DVBTOGANNUAL;
}

public double getDVCACRVAL_SUM() {
return DVCACRVAL_SUM;
}

public double getDVCAODVAL_SUM() {
return DVCAODVAL_SUM;
}

public double getDVCAVAL_SUM() {
return DVCAVAL_SUM;
}

public byte getDVCCARDNUM_I() {
return DVCCARDNUM_I;
}

public boolean getDVCCARDNUM_IFLAG() {
return DVCCARDNUM_IFLAG;
}

public byte getDVCCARDYN_I() {
return DVCCARDYN_I;
}

public boolean getDVCCARDYN_IFLAG() {
return DVCCARDYN_IFLAG;
}

public short getDVCOINV4() {
return DVCOINV4;
}

public short getDVCOINV5() {
return DVCOINV5;
}

public int getDVDBINC4() {
return DVDBINC4;
}

public short getDVDBINC5() {
return DVDBINC5;
}

public short getDVDBINC6() {
return DVDBINC6;
}

public double getDVDBLUMP4() {
return DVDBLUMP4;
}

public double getDVDBLUMP5() {
return DVDBLUMP5;
}

public int getDVDBLUMP6() {
return DVDBLUMP6;
}

public double getDVDBOPEN1T() {
return DVDBOPEN1T;
}

public double getDVDBOPEN2T() {
return DVDBOPEN2T;
}

public short getDVDHPOWE1() {
return DVDHPOWE1;
}

public short getDVDLOWE1() {
return DVDLOWE1;
}

public short getDVDMOOWE1() {
return DVDMOOWE1;
}

public byte getDVEMPNO() {
return DVEMPNO;
}

public int getDVFESHARES_SUM() {
return DVFESHARES_SUM;
}

public double getDVFFASSETS_SUM() {
return DVFFASSETS_SUM;
}

public int getDVFINFVAL_SUM() {
return DVFINFVAL_SUM;
}

public int getDVGIEMP() {
return DVGIEMP;
}

public int getDVGIFTANNUAL() {
return DVGIFTANNUAL;
}

public int getDVGIINV() {
return DVGIINV;
}

public int getDVGIPPEN() {
return DVGIPPEN;
}

public int getDVGISE() {
return DVGISE;
}

public int getDVGRSBONAMT() {
return DVGRSBONAMT;
}

public double getDVGRSBONAMT_I() {
return DVGRSBONAMT_I;
}

public byte getDVGRSBONAMT_IFLAG() {
return DVGRSBONAMT_IFLAG;
}

public int getDVGRSEMPSECJOB() {
return DVGRSEMPSECJOB;
}

public int getDVGRSEMPSECJOB_I() {
return DVGRSEMPSECJOB_I;
}

public boolean getDVGRSEMPSECJOB_IFLAG() {
return DVGRSEMPSECJOB_IFLAG;
}

public int getDVGRSRENTAMTANNUAL() {
return DVGRSRENTAMTANNUAL;
}

public int getDVGRSSESECJOB() {
return DVGRSSESECJOB;
}

public int getDVGRSSESECJOB_I() {
return DVGRSSESECJOB_I;
}

public boolean getDVGRSSESECJOB_IFLAG() {
return DVGRSSESECJOB_IFLAG;
}

public boolean getDVHASHP() {
return DVHASHP;
}

public boolean getDVHASLF() {
return DVHASLF;
}

public boolean getDVHASLNAR() {
return DVHASLNAR;
}

public boolean getDVHASMOAR() {
return DVHASMOAR;
}

public boolean getDVHASNLF() {
return DVHASNLF;
}

public boolean getDVHASNLI() {
return DVHASNLI;
}

public boolean getDVHASPFGRP() {
return DVHASPFGRP;
}

public boolean getDVHASPFOCC() {
return DVHASPFOCC;
}

public boolean getDVHASPFPRIV() {
return DVHASPFPRIV;
}

public boolean getDVHASPFRAC() {
return DVHASPFRAC;
}

public boolean getDVHASPFSIPP() {
return DVHASPFSIPP;
}

public boolean getDVHASPLINF() {
return DVHASPLINF;
}

public boolean getDVHASSLBNK() {
return DVHASSLBNK;
}

public boolean getDVHASSLC() {
return DVHASSLC;
}

public byte getDVHRPNUM() {
return DVHRPNUM;
}

public int getDVHSEDEBT() {
return DVHSEDEBT;
}

public int getDVHSEVAL() {
return DVHSEVAL;
}

public byte getDVHSIZE() {
return DVHSIZE;
}

public byte getDVILO3A_I() {
return DVILO3A_I;
}

public boolean getDVILO3A_IFLAG() {
return DVILO3A_IFLAG;
}

public int getDVINHERITANNUAL() {
return DVINHERITANNUAL;
}

public int getDVINSV_SUM() {
return DVINSV_SUM;
}

public int getDVIRREGOTHANNUAL() {
return DVIRREGOTHANNUAL;
}

public int getDVISAVAL_SUM() {
return DVISAVAL_SUM;
}

public int getDVLIFEANNUAL() {
return DVLIFEANNUAL;
}

public int getDVLOSDEBT() {
return DVLOSDEBT;
}

public int getDVLOSVAL() {
return DVLOSVAL;
}

public int getDVLUKDEBT() {
return DVLUKDEBT;
}

public int getDVLUKVAL() {
return DVLUKVAL;
}

public int getDVLUMPPENANNUAL() {
return DVLUMPPENANNUAL;
}

public int getDVNETBONAMT() {
return DVNETBONAMT;
}

public double getDVNETBONAMT_I() {
return DVNETBONAMT_I;
}

public byte getDVNETBONAMT_IFLAG() {
return DVNETBONAMT_IFLAG;
}

public int getDVNETEMPSECJOB() {
return DVNETEMPSECJOB;
}

public int getDVNETEMPSECJOB_I() {
return DVNETEMPSECJOB_I;
}

public boolean getDVNETEMPSECJOB_IFLAG() {
return DVNETEMPSECJOB_IFLAG;
}

public int getDVNETRENTAMTANNUAL() {
return DVNETRENTAMTANNUAL;
}

public double getDVNETSESECJOB() {
return DVNETSESECJOB;
}

public double getDVNIEMP() {
return DVNIEMP;
}

public int getDVNIINV() {
return DVNIINV;
}

public int getDVNIOTHI() {
return DVNIOTHI;
}

public int getDVNIPPEN() {
return DVNIPPEN;
}

public double getDVNISE() {
return DVNISE;
}

public byte getDVNUMBU() {
return DVNUMBU;
}

public int getDVNWFLN_SUM() {
return DVNWFLN_SUM;
}

public int getDVNWILN_SUM() {
return DVNWILN_SUM;
}

public int getDVOIGEGANNUAL_I() {
return DVOIGEGANNUAL_I;
}

public int getDVOIGFRANNUAL_I() {
return DVOIGFRANNUAL_I;
}

public short getDVOIGGTANNUAL_I() {
return DVOIGGTANNUAL_I;
}

public int getDVOIGMAANNUAL_I() {
return DVOIGMAANNUAL_I;
}

public boolean getDVOIGOEANNUAL_IFLAG() {
return DVOIGOEANNUAL_IFLAG;
}

public int getDVOIGOPANNUAL_I() {
return DVOIGOPANNUAL_I;
}

public boolean getDVOIGOSANNUAL_IFLAG() {
return DVOIGOSANNUAL_IFLAG;
}

public boolean getDVOIGPPANNUAL_IFLAG() {
return DVOIGPPANNUAL_IFLAG;
}

public int getDVOIGROANNUAL_I() {
return DVOIGROANNUAL_I;
}

public int getDVOIGRRANNUAL_I() {
return DVOIGRRANNUAL_I;
}

public int getDVOINEGANNUAL_I() {
return DVOINEGANNUAL_I;
}

public boolean getDVOINEGANNUAL_IFLAG() {
return DVOINEGANNUAL_IFLAG;
}

public int getDVOINFRANNUAL_I() {
return DVOINFRANNUAL_I;
}

public boolean getDVOINFRANNUAL_IFLAG() {
return DVOINFRANNUAL_IFLAG;
}

public short getDVOINGTANNUAL_I() {
return DVOINGTANNUAL_I;
}

public boolean getDVOINGTANNUAL_IFLAG() {
return DVOINGTANNUAL_IFLAG;
}

public int getDVOINMAANNUAL_I() {
return DVOINMAANNUAL_I;
}

public boolean getDVOINMAANNUAL_IFLAG() {
return DVOINMAANNUAL_IFLAG;
}

public int getDVOINOPANNUAL_I() {
return DVOINOPANNUAL_I;
}

public boolean getDVOINOPANNUAL_IFLAG() {
return DVOINOPANNUAL_IFLAG;
}

public int getDVOINROANNUAL_I() {
return DVOINROANNUAL_I;
}

public boolean getDVOINROANNUAL_IFLAG() {
return DVOINROANNUAL_IFLAG;
}

public int getDVOINRRANNUAL_I() {
return DVOINRRANNUAL_I;
}

public boolean getDVOINRRANNUAL_IFLAG() {
return DVOINRRANNUAL_IFLAG;
}

public int getDVOPRDEBT() {
return DVOPRDEBT;
}

public int getDVOPRVAL() {
return DVOPRVAL;
}

public int getDVOTHINSANNUAL() {
return DVOTHINSANNUAL;
}

public double getDVPENINC1() {
return DVPENINC1;
}

public double getDVPENINC2() {
return DVPENINC2;
}

public int getDVREDUNANNUAL() {
return DVREDUNANNUAL;
}

public int getDVRENTAMTANNUAL_I() {
return DVRENTAMTANNUAL_I;
}

public boolean getDVRENTAMTANNUAL_IFLAG() {
return DVRENTAMTANNUAL_IFLAG;
}

public byte getDVSAME() {
return DVSAME;
}

public double getDVSAVAL_SUM() {
return DVSAVAL_SUM;
}

public byte getDVSCARDNUM_I() {
return DVSCARDNUM_I;
}

public boolean getDVSCARDNUM_IFLAG() {
return DVSCARDNUM_IFLAG;
}

public byte getDVSCARDYN_I() {
return DVSCARDYN_I;
}

public boolean getDVSCARDYN_IFLAG() {
return DVSCARDYN_IFLAG;
}

public int getDVSEGRSPAY() {
return DVSEGRSPAY;
}

public int getDVSEGRSPAY_I() {
return DVSEGRSPAY_I;
}

public boolean getDVSEGRSPAY_IFLAG() {
return DVSEGRSPAY_IFLAG;
}

public int getDVSENETPAY() {
return DVSENETPAY;
}

public int getDVSENETPAY_I() {
return DVSENETPAY_I;
}

public boolean getDVSENETPAY_IFLAG() {
return DVSENETPAY_IFLAG;
}

public byte getDVSENO() {
return DVSENO;
}

public double getDVSEPANNUAL01() {
return DVSEPANNUAL01;
}

public double getDVSEPANNUAL02() {
return DVSEPANNUAL02;
}

public double getDVSEPANNUAL03() {
return DVSEPANNUAL03;
}

public short getDVSEPANNUAL04() {
return DVSEPANNUAL04;
}

public short getDVSEPANNUAL05() {
return DVSEPANNUAL05;
}

public short getDVSEPANNUAL06() {
return DVSEPANNUAL06;
}

public short getDVSEPANNUAL07() {
return DVSEPANNUAL07;
}

public short getDVSEPANNUAL08() {
return DVSEPANNUAL08;
}

public double getDVSPS() {
return DVSPS;
}

public double getDVWID() {
return DVWID;
}

public int getDVWINANNUAL() {
return DVWINANNUAL;
}

public byte getDWELLTYP() {
return DWELLTYP;
}

public boolean getEMPNO() {
return EMPNO;
}

public byte getES2000() {
return ES2000;
}

public byte getEVERWK_I() {
return EVERWK_I;
}

public boolean getEVERWK_IFLAG() {
return EVERWK_IFLAG;
}

public byte getEYE1() {
return EYE1;
}

public byte getEYE2() {
return EYE2;
}

public byte getEYE3() {
return EYE3;
}

public byte getEYE4() {
return EYE4;
}

public byte getEYE5() {
return EYE5;
}

public byte getEYE6() {
return EYE6;
}

public byte getEYE7() {
return EYE7;
}

public byte getEYE8() {
return EYE8;
}

public byte getFBFAED() {
return FBFAED;
}

public byte getFBMOED() {
return FBMOED;
}

public byte getFBSIBS() {
return FBSIBS;
}

public byte getFBSITU() {
return FBSITU;
}

public byte getFBTEN() {
return FBTEN;
}

public byte getFCISAWD() {
return FCISAWD;
}

public byte getFCISCE() {
return FCISCE;
}

public byte getFCIWDAB() {
return FCIWDAB;
}

public byte getFCIWNUM() {
return FCIWNUM;
}

public boolean getFINCV_IFLAG() {
return FINCV_IFLAG;
}

public byte getFINVTY11_I() {
return FINVTY11_I;
}

public byte getFNDCASH1() {
return FNDCASH1;
}

public byte getFNDCASH2() {
return FNDCASH2;
}

public byte getFNDCASH3() {
return FNDCASH3;
}

public byte getFNDCASH4() {
return FNDCASH4;
}

public byte getFNDCASH5() {
return FNDCASH5;
}

public boolean getFRSTSCH() {
return FRSTSCH;
}

public byte getFSAVAB() {
return FSAVAB;
}

public byte getFSAVED() {
return FSAVED;
}

public boolean getFSTYPIN4() {
return FSTYPIN4;
}

public byte getFTHECST() {
return FTHECST;
}

public byte getFTSTUD() {
return FTSTUD;
}

public byte getFWITHD() {
return FWITHD;
}

public byte getGROSSPER() {
return GROSSPER;
}

public byte getGRSAMK() {
return GRSAMK;
}

public byte getGRSEESM() {
return GRSEESM;
}

public byte getGRSEESW() {
return GRSEESW;
}

public int getGRSPAYEMPORSE() {
return GRSPAYEMPORSE;
}

public byte getGSTDNW() {
return GSTDNW;
}

public byte getHAPPY() {
return HAPPY;
}

public byte getHASSHAC() {
return HASSHAC;
}

public double getHFINL_SUM() {
return HFINL_SUM;
}

public double getHFINW_EXCENDW_SUM() {
return HFINW_EXCENDW_SUM;
}

public byte getHHLDR() {
return HHLDR;
}

public byte getHIHNUM() {
return HIHNUM;
}

public int getHOUSGDSOST() {
return HOUSGDSOST;
}

public short getHOUT() {
return HOUT;
}

public short getHPARR_SUM() {
return HPARR_SUM;
}

public double getHPLFT1() {
return HPLFT1;
}

public byte getHPNMN1() {
return HPNMN1;
}

public byte getHPNMN2() {
return HPNMN2;
}

public byte getHPNYR1() {
return HPNYR1;
}

public byte getHPNYR2() {
return HPNYR2;
}

public boolean getHPROX() {
return HPROX;
}

public byte getHRPPART() {
return HRPPART;
}

public byte getIFBANKACC() {
return IFBANKACC;
}

public boolean getIGIFVAL_IFLAG() {
return IGIFVAL_IFLAG;
}

public byte getIHRCNUM_I() {
return IHRCNUM_I;
}

public boolean getIHRCNUM_IFLAG() {
return IHRCNUM_IFLAG;
}

public byte getIHRECNT_I() {
return IHRECNT_I;
}

public boolean getIHRECNT_IFLAG() {
return IHRECNT_IFLAG;
}

public boolean getIHSE10() {
return IHSE10;
}

public boolean getIHSE11() {
return IHSE11;
}

public boolean getIHSE12() {
return IHSE12;
}

public boolean getIHSE3() {
return IHSE3;
}

public boolean getIHSE8() {
return IHSE8;
}

public boolean getIHSE9() {
return IHSE9;
}

public boolean getILACC_IFLAG() {
return ILACC_IFLAG;
}

public byte getILGIFT_I() {
return ILGIFT_I;
}

public boolean getILGIFT_IFLAG() {
return ILGIFT_IFLAG;
}

public byte getILIFB_I() {
return ILIFB_I;
}

public boolean getILIFB_IFLAG() {
return ILIFB_IFLAG;
}

public boolean getILIFE_IFLAG() {
return ILIFE_IFLAG;
}

public boolean getILINS_IFLAG() {
return ILINS_IFLAG;
}

public short getILNPBAM() {
return ILNPBAM;
}

public byte getILNPBK() {
return ILNPBK;
}

public byte getILNUSE01() {
return ILNUSE01;
}

public byte getILNUSE02() {
return ILNUSE02;
}

public byte getILNUSE03() {
return ILNUSE03;
}

public byte getILNUSE04() {
return ILNUSE04;
}

public byte getILNUSE05() {
return ILNUSE05;
}

public int getILNVAL() {
return ILNVAL;
}

public byte getILNVALB() {
return ILNVALB;
}

public byte getILOAN() {
return ILOAN;
}

public boolean getILOTH_IFLAG() {
return ILOTH_IFLAG;
}

public boolean getILRED_IFLAG() {
return ILRED_IFLAG;
}

public byte getILUMP_I() {
return ILUMP_I;
}

public boolean getILUMP_IFLAG() {
return ILUMP_IFLAG;
}

public byte getILUMTY1_I() {
return ILUMTY1_I;
}

public boolean getILUMTY1_IFLAG() {
return ILUMTY1_IFLAG;
}

public int getILUPP_I() {
return ILUPP_I;
}

public boolean getILUPP_IFLAG() {
return ILUPP_IFLAG;
}

public boolean getILWIN_IFLAG() {
return ILWIN_IFLAG;
}

public byte getINCDROP() {
return INCDROP;
}

public byte getINDFREQ() {
return INDFREQ;
}

public boolean getIVAL1_IFLAG() {
return IVAL1_IFLAG;
}

public boolean getIVAL2_IFLAG() {
return IVAL2_IFLAG;
}

public boolean getIVAL3_IFLAG() {
return IVAL3_IFLAG;
}

public byte getIVALB1() {
return IVALB1;
}

public boolean getIWAT6() {
return IWAT6;
}

public byte getJBAWAY_I() {
return JBAWAY_I;
}

public boolean getJBAWAY_IFLAG() {
return JBAWAY_IFLAG;
}

public byte getKNOHOWMUCH() {
return KNOHOWMUCH;
}

public byte getKNOWBALANCE() {
return KNOWBALANCE;
}

public short getLNARR_SUM() {
return LNARR_SUM;
}

public double getLNLFT1() {
return LNLFT1;
}

public byte getLOOKED_I() {
return LOOKED_I;
}

public boolean getLOOKED_IFLAG() {
return LOOKED_IFLAG;
}

public byte getMARBEF_I() {
return MARBEF_I;
}

public boolean getMARBEF_IFLAG() {
return MARBEF_IFLAG;
}

public byte getMARST() {
return MARST;
}

public double getMNTHSCAPE() {
return MNTHSCAPE;
}

public short getMOARR_SUM() {
return MOARR_SUM;
}

public double getMOLFT1() {
return MOLFT1;
}

public byte getMRECJB() {
return MRECJB;
}

public byte getMTHECST() {
return MTHECST;
}

public byte getNEWFCMX() {
return NEWFCMX;
}

public byte getNEWGIFT() {
return NEWGIFT;
}

public byte getNOUNITS() {
return NOUNITS;
}

public int getNSLBNK1() {
return NSLBNK1;
}

public short getNSLBNK2() {
return NSLBNK2;
}

public boolean getNSLBNK3() {
return NSLBNK3;
}

public int getNSLC1() {
return NSLC1;
}

public int getNSLC2() {
return NSLC2;
}

public short getNSLC3() {
return NSLC3;
}

public byte getNUMADULT() {
return NUMADULT;
}

public byte getNUMCH18() {
return NUMCH18;
}

public byte getNUMCHILD() {
return NUMCHILD;
}

public byte getNUMCHSAV() {
return NUMCHSAV;
}

public byte getNUMCIVPTR() {
return NUMCIVPTR;
}

public byte getNUMCOUPLES() {
return NUMCOUPLES;
}

public byte getNUMCPART() {
return NUMCPART;
}

public byte getNUMDEPCH() {
return NUMDEPCH;
}

public byte getNUMJOB() {
return NUMJOB;
}

public boolean getNUMSSEX() {
return NUMSSEX;
}

public int getNWFLNVAL1() {
return NWFLNVAL1;
}

public int getNWFLNVAL2() {
return NWFLNVAL2;
}

public short getNWFLNVAL3() {
return NWFLNVAL3;
}

public int getNWILNVAL1() {
return NWILNVAL1;
}

public short getNWILNVAL2() {
return NWILNVAL2;
}

public short getNWILNVAL3() {
return NWILNVAL3;
}

public byte getNWLN() {
return NWLN;
}

public byte getNWLNNO() {
return NWLNNO;
}

public byte getNWLNNO_I() {
return NWLNNO_I;
}

public byte getNWLNNO_IFLAG() {
return NWLNNO_IFLAG;
}

public byte getNWLN_I() {
return NWLN_I;
}

public byte getNWLN_IFLAG() {
return NWLN_IFLAG;
}

public byte getOEXPINC01() {
return OEXPINC01;
}

public byte getOEXPINC02() {
return OEXPINC02;
}

public byte getOEXPINC03() {
return OEXPINC03;
}

public byte getOEXPINC04() {
return OEXPINC04;
}

public byte getOEXPINC05() {
return OEXPINC05;
}

public byte getOEXPINC06() {
return OEXPINC06;
}

public byte getOEXPINC07() {
return OEXPINC07;
}

public byte getOEXPINC08() {
return OEXPINC08;
}

public byte getOEXPINC09() {
return OEXPINC09;
}

public byte getOEXPINC10() {
return OEXPINC10;
}

public byte getOEXPINC11() {
return OEXPINC11;
}

public byte getOEXPINC12() {
return OEXPINC12;
}

public byte getOEXPINC13() {
return OEXPINC13;
}

public boolean getOEXPINC14() {
return OEXPINC14;
}

public boolean getOEXPINC15() {
return OEXPINC15;
}

public byte getOFTCHECKED() {
return OFTCHECKED;
}

public byte getOIMPRS1() {
return OIMPRS1;
}

public byte getOIMPRS2() {
return OIMPRS2;
}

public byte getOIMPRS3() {
return OIMPRS3;
}

public byte getOIMPRS4() {
return OIMPRS4;
}

public byte getOIMPRS5() {
return OIMPRS5;
}

public byte getOIMPRS6() {
return OIMPRS6;
}

public byte getONOSAVE1() {
return ONOSAVE1;
}

public byte getONOSAVE2() {
return ONOSAVE2;
}

public byte getONOSAVE3() {
return ONOSAVE3;
}

public byte getONOSAVE4() {
return ONOSAVE4;
}

public byte getONOSAVE5() {
return ONOSAVE5;
}

public boolean getONOSAVE6() {
return ONOSAVE6;
}

public byte getOPENS09() {
return OPENS09;
}

public boolean getOPENS10() {
return OPENS10;
}

public boolean getOPENS11() {
return OPENS11;
}

public boolean getOPENS12() {
return OPENS12;
}

public boolean getOPENS13() {
return OPENS13;
}

public boolean getOPENS14() {
return OPENS14;
}

public boolean getOPENS15() {
return OPENS15;
}

public byte getORGNSED() {
return ORGNSED;
}

public byte getORISKS() {
return ORISKS;
}

public byte getOSAFESAV() {
return OSAFESAV;
}

public byte getOSAV2Y() {
return OSAV2Y;
}

public byte getOSAVEXT() {
return OSAVEXT;
}

public byte getOSITCH() {
return OSITCH;
}

public int getOSLBNK1() {
return OSLBNK1;
}

public short getOSLBNK2() {
return OSLBNK2;
}

public short getOSLBNK3() {
return OSLBNK3;
}

public int getOSLC1() {
return OSLC1;
}

public int getOSLC2() {
return OSLC2;
}

public short getOSLC3() {
return OSLC3;
}

public byte getOTHASCH() {
return OTHASCH;
}

public byte getOTHASVB() {
return OTHASVB;
}

public int getOTHASVL() {
return OTHASVL;
}

public int getOTHMORT() {
return OTHMORT;
}

public boolean getOTHSRC4_I() {
return OTHSRC4_I;
}

public boolean getOTHSRC4_IFLAG() {
return OTHSRC4_IFLAG;
}

public boolean getOTRUST15() {
return OTRUST15;
}

public byte getOWAIT() {
return OWAIT;
}

public byte getOWNBUS_I() {
return OWNBUS_I;
}

public boolean getOWNBUS_IFLAG() {
return OWNBUS_IFLAG;
}

public byte getOWRSRS01() {
return OWRSRS01;
}

public byte getOWRSRS02() {
return OWRSRS02;
}

public byte getOWRSRS03() {
return OWRSRS03;
}

public byte getOWRSRS04() {
return OWRSRS04;
}

public byte getOWRSRS05() {
return OWRSRS05;
}

public byte getOWRSRS06() {
return OWRSRS06;
}

public byte getOWRSRS07() {
return OWRSRS07;
}

public byte getPAGESTP() {
return PAGESTP;
}

public byte getPANYO() {
return PANYO;
}

public byte getPANYO_I() {
return PANYO_I;
}

public boolean getPANYO_IFLAG() {
return PANYO_IFLAG;
}

public int getPARTGRSPAY() {
return PARTGRSPAY;
}

public double getPARTNSSEC() {
return PARTNSSEC;
}

public byte getPARTNSSEC3() {
return PARTNSSEC3;
}

public byte getPARTNSSEC5() {
return PARTNSSEC5;
}

public double getPARTNSSEC8() {
return PARTNSSEC8;
}

public double getPARTNSSECB() {
return PARTNSSECB;
}

public byte getPASTMN1() {
return PASTMN1;
}

public boolean getPASTMN2() {
return PASTMN2;
}

public short getPASTYR1() {
return PASTYR1;
}

public short getPASTYR2() {
return PASTYR2;
}

public int getPAVCUV1() {
return PAVCUV1;
}

public int getPAVCUV1_I() {
return PAVCUV1_I;
}

public boolean getPAVCUV1_IFLAG() {
return PAVCUV1_IFLAG;
}

public int getPAVCUV2() {
return PAVCUV2;
}

public int getPAVCUV2_I() {
return PAVCUV2_I;
}

public boolean getPAVCUV2_IFLAG() {
return PAVCUV2_IFLAG;
}

public byte getPAVCVB1() {
return PAVCVB1;
}

public byte getPAVCVB2() {
return PAVCVB2;
}

public byte getPAVDOC1() {
return PAVDOC1;
}

public byte getPAVDOC2() {
return PAVDOC2;
}

public byte getPAYBON_I() {
return PAYBON_I;
}

public boolean getPAYBON_IFLAG() {
return PAYBON_IFLAG;
}

public boolean getPAYINC7() {
return PAYINC7;
}

public byte getPBDOCS1() {
return PBDOCS1;
}

public byte getPBDOCS2() {
return PBDOCS2;
}

public byte getPBFRAC1() {
return PBFRAC1;
}

public byte getPBFRAC1_I() {
return PBFRAC1_I;
}

public boolean getPBFRAC1_IFLAG() {
return PBFRAC1_IFLAG;
}

public byte getPBFRAC2() {
return PBFRAC2;
}

public byte getPBFRAC2_I() {
return PBFRAC2_I;
}

public boolean getPBFRAC2_IFLAG() {
return PBFRAC2_IFLAG;
}

public int getPBINCA1() {
return PBINCA1;
}

public int getPBINCA2() {
return PBINCA2;
}

public double getPBINCF1() {
return PBINCF1;
}

public double getPBINCF2() {
return PBINCF2;
}

public byte getPBINCH1() {
return PBINCH1;
}

public byte getPBINCH2() {
return PBINCH2;
}

public byte getPBLMVB1() {
return PBLMVB1;
}

public byte getPBLMVB2() {
return PBLMVB2;
}

public int getPBLUMV1() {
return PBLUMV1;
}

public int getPBLUMV1_I() {
return PBLUMV1_I;
}

public boolean getPBLUMV1_IFLAG() {
return PBLUMV1_IFLAG;
}

public int getPBLUMV2() {
return PBLUMV2;
}

public int getPBLUMV2_I() {
return PBLUMV2_I;
}

public boolean getPBLUMV2_IFLAG() {
return PBLUMV2_IFLAG;
}

public byte getPBQUAL1() {
return PBQUAL1;
}

public byte getPBQUAL1_I() {
return PBQUAL1_I;
}

public boolean getPBQUAL1_IFLAG() {
return PBQUAL1_IFLAG;
}

public byte getPBQUAL2() {
return PBQUAL2;
}

public byte getPBQUAL2_I() {
return PBQUAL2_I;
}

public boolean getPBQUAL2_IFLAG() {
return PBQUAL2_IFLAG;
}

public byte getPBSTMN1() {
return PBSTMN1;
}

public byte getPBSTMN2() {
return PBSTMN2;
}

public short getPBSTYR1() {
return PBSTYR1;
}

public short getPBSTYR2() {
return PBSTYR2;
}

public byte getPCDOCS1() {
return PCDOCS1;
}

public byte getPCDOCS2() {
return PCDOCS2;
}

public byte getPCONT() {
return PCONT;
}

public byte getPCONT_I() {
return PCONT_I;
}

public boolean getPCONT_IFLAG() {
return PCONT_IFLAG;
}

public byte getPCSTMN1() {
return PCSTMN1;
}

public byte getPCSTMN2() {
return PCSTMN2;
}

public short getPCSTYR1() {
return PCSTYR1;
}

public short getPCSTYR2() {
return PCSTYR2;
}

public byte getPDBCAL1() {
return PDBCAL1;
}

public byte getPDBCAL2() {
return PDBCAL2;
}

public int getPDCVAL1() {
return PDCVAL1;
}

public double getPDCVAL1_I() {
return PDCVAL1_I;
}

public boolean getPDCVAL1_IFLAG() {
return PDCVAL1_IFLAG;
}

public int getPDCVAL2() {
return PDCVAL2;
}

public int getPDCVAL2_I() {
return PDCVAL2_I;
}

public boolean getPDCVAL2_IFLAG() {
return PDCVAL2_IFLAG;
}

public byte getPDCVB1() {
return PDCVB1;
}

public byte getPDCVB2() {
return PDCVB2;
}

public boolean getPENFLAG() {
return PENFLAG;
}

public byte getPENIND1() {
return PENIND1;
}

public byte getPENIND2() {
return PENIND2;
}

public byte getPENIND3() {
return PENIND3;
}

public byte getPENIND4() {
return PENIND4;
}

public byte getPENIND5() {
return PENIND5;
}

public byte getPENIND6() {
return PENIND6;
}

public byte getPERMJB() {
return PERMJB;
}

public byte getPERNOWK() {
return PERNOWK;
}

public byte getPERSONW2() {
return PERSONW2;
}

public byte getPERSONW3() {
return PERSONW3;
}

public byte getPESAME() {
return PESAME;
}

public byte getPFANEH1() {
return PFANEH1;
}

public byte getPFANEH2() {
return PFANEH2;
}

public boolean getPFANEH4() {
return PFANEH4;
}

public byte getPFANGA1() {
return PFANGA1;
}

public byte getPFANGA2() {
return PFANGA2;
}

public boolean getPFANGA4() {
return PFANGA4;
}

public byte getPFANIF1() {
return PFANIF1;
}

public byte getPFANIF2() {
return PFANIF2;
}

public boolean getPFANIF4() {
return PFANIF4;
}

public byte getPFANJT1() {
return PFANJT1;
}

public byte getPFANJT2() {
return PFANJT2;
}

public boolean getPFANJT4() {
return PFANJT4;
}

public byte getPFANN1() {
return PFANN1;
}

public boolean getPFANN16() {
return PFANN16;
}

public byte getPFANN6() {
return PFANN6;
}

public byte getPFCASH1() {
return PFCASH1;
}

public byte getPFCASH1_I() {
return PFCASH1_I;
}

public boolean getPFCASH1_IFLAG() {
return PFCASH1_IFLAG;
}

public byte getPFCASH2() {
return PFCASH2;
}

public byte getPFCASH2_I() {
return PFCASH2_I;
}

public boolean getPFCASH2_IFLAG() {
return PFCASH2_IFLAG;
}

public byte getPFCASH3() {
return PFCASH3;
}

public byte getPFCASH3_I() {
return PFCASH3_I;
}

public boolean getPFCASH3_IFLAG() {
return PFCASH3_IFLAG;
}

public byte getPFCASH4() {
return PFCASH4;
}

public byte getPFCASH4_I() {
return PFCASH4_I;
}

public boolean getPFCASH4_IFLAG() {
return PFCASH4_IFLAG;
}

public int getPFCURV1() {
return PFCURV1;
}

public int getPFCURV1_I() {
return PFCURV1_I;
}

public boolean getPFCURV1_IFLAG() {
return PFCURV1_IFLAG;
}

public int getPFCURV2() {
return PFCURV2;
}

public double getPFCURV2_I() {
return PFCURV2_I;
}

public byte getPFCURV2_IFLAG() {
return PFCURV2_IFLAG;
}

public int getPFCURV3() {
return PFCURV3;
}

public double getPFCURV3_I() {
return PFCURV3_I;
}

public byte getPFCURV3_IFLAG() {
return PFCURV3_IFLAG;
}

public int getPFCURV4() {
return PFCURV4;
}

public int getPFCURV4_I() {
return PFCURV4_I;
}

public byte getPFCURV4_IFLAG() {
return PFCURV4_IFLAG;
}

public int getPFCURV5() {
return PFCURV5;
}

public double getPFCURV5_I() {
return PFCURV5_I;
}

public byte getPFCURV5_IFLAG() {
return PFCURV5_IFLAG;
}

public int getPFCURV6() {
return PFCURV6;
}

public double getPFCURV6_I() {
return PFCURV6_I;
}

public boolean getPFCURV6_IFLAG() {
return PFCURV6_IFLAG;
}

public byte getPFCUVB1() {
return PFCUVB1;
}

public byte getPFCUVB2() {
return PFCUVB2;
}

public byte getPFCUVB3() {
return PFCUVB3;
}

public byte getPFCUVB4() {
return PFCUVB4;
}

public byte getPFCUVB5() {
return PFCUVB5;
}

public boolean getPFCUVB6() {
return PFCUVB6;
}

public int getPFDDV1() {
return PFDDV1;
}

public int getPFDDV1_I() {
return PFDDV1_I;
}

public boolean getPFDDV1_IFLAG() {
return PFDDV1_IFLAG;
}

public int getPFDDV2() {
return PFDDV2;
}

public int getPFDDV2_I() {
return PFDDV2_I;
}

public byte getPFDDV2_IFLAG() {
return PFDDV2_IFLAG;
}

public int getPFDDV3() {
return PFDDV3;
}

public int getPFDDV3_I() {
return PFDDV3_I;
}

public byte getPFDDV3_IFLAG() {
return PFDDV3_IFLAG;
}

public int getPFDDV4_I() {
return PFDDV4_I;
}

public byte getPFDDV4_IFLAG() {
return PFDDV4_IFLAG;
}

public byte getPFDDVB1() {
return PFDDVB1;
}

public byte getPFDDVB2() {
return PFDDVB2;
}

public byte getPFDDVB3() {
return PFDDVB3;
}

public byte getPFDOCS1() {
return PFDOCS1;
}

public byte getPFDOCS2() {
return PFDOCS2;
}

public byte getPFDOCS3() {
return PFDOCS3;
}

public byte getPFDOCS4() {
return PFDOCS4;
}

public byte getPFDOCS5() {
return PFDOCS5;
}

public byte getPFDOCS6() {
return PFDOCS6;
}

public byte getPFDRAW1() {
return PFDRAW1;
}

public byte getPFDRAW1_I() {
return PFDRAW1_I;
}

public boolean getPFDRAW1_IFLAG() {
return PFDRAW1_IFLAG;
}

public byte getPFDRAW2() {
return PFDRAW2;
}

public byte getPFDRAW2_I() {
return PFDRAW2_I;
}

public byte getPFDRAW2_IFLAG() {
return PFDRAW2_IFLAG;
}

public byte getPFDRAW3_I() {
return PFDRAW3_I;
}

public byte getPFDRAW3_IFLAG() {
return PFDRAW3_IFLAG;
}

public short getPFDRINC1() {
return PFDRINC1;
}

public byte getPFDRVB1() {
return PFDRVB1;
}

public int getPFDRVI1() {
return PFDRVI1;
}

public byte getPFEN() {
return PFEN;
}

public byte getPFENNUM() {
return PFENNUM;
}

public byte getPFENNUM_I() {
return PFENNUM_I;
}

public boolean getPFENNUM_IFLAG() {
return PFENNUM_IFLAG;
}

public byte getPFEN_I() {
return PFEN_I;
}

public boolean getPFEN_IFLAG() {
return PFEN_IFLAG;
}

public byte getPFFAAG1() {
return PFFAAG1;
}

public byte getPFFAAG2() {
return PFFAAG2;
}

public byte getPFFAN1() {
return PFFAN1;
}

public byte getPFFAN11() {
return PFFAN11;
}

public byte getPFFAN16() {
return PFFAN16;
}

public byte getPFFAN2() {
return PFFAN2;
}

public byte getPFFAN6() {
return PFFAN6;
}

public byte getPFFAWH1() {
return PFFAWH1;
}

public boolean getPFFAWH16() {
return PFFAWH16;
}

public byte getPFFAWH6() {
return PFFAWH6;
}

public int getPFINCA1() {
return PFINCA1;
}

public int getPFINCA1_I() {
return PFINCA1_I;
}

public boolean getPFINCA1_IFLAG() {
return PFINCA1_IFLAG;
}

public int getPFINCA2() {
return PFINCA2;
}

public double getPFINCA2_I() {
return PFINCA2_I;
}

public boolean getPFINCA2_IFLAG() {
return PFINCA2_IFLAG;
}

public double getPFINCA3() {
return PFINCA3;
}

public double getPFINCA3_I() {
return PFINCA3_I;
}

public boolean getPFINCA3_IFLAG() {
return PFINCA3_IFLAG;
}

public double getPFINCA4() {
return PFINCA4;
}

public short getPFINCA4_I() {
return PFINCA4_I;
}

public boolean getPFINCA4_IFLAG() {
return PFINCA4_IFLAG;
}

public short getPFINCA5() {
return PFINCA5;
}

public short getPFINCA5_I() {
return PFINCA5_I;
}

public boolean getPFINCA5_IFLAG() {
return PFINCA5_IFLAG;
}

public short getPFINCA6() {
return PFINCA6;
}

public short getPFINCA6_I() {
return PFINCA6_I;
}

public byte getPFINCP1() {
return PFINCP1;
}

public byte getPFINCP1_I() {
return PFINCP1_I;
}

public boolean getPFINCP1_IFLAG() {
return PFINCP1_IFLAG;
}

public byte getPFINCP2() {
return PFINCP2;
}

public byte getPFINCP2_I() {
return PFINCP2_I;
}

public boolean getPFINCP2_IFLAG() {
return PFINCP2_IFLAG;
}

public byte getPFINCP3() {
return PFINCP3;
}

public byte getPFINCP3_I() {
return PFINCP3_I;
}

public boolean getPFINCP3_IFLAG() {
return PFINCP3_IFLAG;
}

public byte getPFINCP4() {
return PFINCP4;
}

public byte getPFINCP4_I() {
return PFINCP4_I;
}

public boolean getPFINCP4_IFLAG() {
return PFINCP4_IFLAG;
}

public byte getPFINCP5() {
return PFINCP5;
}

public byte getPFINCP5_I() {
return PFINCP5_I;
}

public boolean getPFINCP5_IFLAG() {
return PFINCP5_IFLAG;
}

public byte getPFINCP6() {
return PFINCP6;
}

public byte getPFINCP6_I() {
return PFINCP6_I;
}

public boolean getPFINCP6_IFLAG() {
return PFINCP6_IFLAG;
}

public byte getPFLMUS1() {
return PFLMUS1;
}

public byte getPFLMUS2() {
return PFLMUS2;
}

public byte getPFLMUS3() {
return PFLMUS3;
}

public byte getPFLMUS4() {
return PFLMUS4;
}

public int getPFLMV1() {
return PFLMV1;
}

public int getPFLMV1_I() {
return PFLMV1_I;
}

public boolean getPFLMV1_IFLAG() {
return PFLMV1_IFLAG;
}

public int getPFLMV2() {
return PFLMV2;
}

public int getPFLMV2_I() {
return PFLMV2_I;
}

public boolean getPFLMV2_IFLAG() {
return PFLMV2_IFLAG;
}

public int getPFLMV3() {
return PFLMV3;
}

public int getPFLMV3_I() {
return PFLMV3_I;
}

public boolean getPFLMV3_IFLAG() {
return PFLMV3_IFLAG;
}

public int getPFLMV4() {
return PFLMV4;
}

public int getPFLMV4_I() {
return PFLMV4_I;
}

public boolean getPFLMV4_IFLAG() {
return PFLMV4_IFLAG;
}

public boolean getPFLMV6() {
return PFLMV6;
}

public byte getPFLMVB1() {
return PFLMVB1;
}

public byte getPFLMVB2() {
return PFLMVB2;
}

public byte getPFLMVB3() {
return PFLMVB3;
}

public byte getPFLUM1() {
return PFLUM1;
}

public byte getPFLUM1_I() {
return PFLUM1_I;
}

public boolean getPFLUM1_IFLAG() {
return PFLUM1_IFLAG;
}

public byte getPFLUM2() {
return PFLUM2;
}

public byte getPFLUM2_I() {
return PFLUM2_I;
}

public byte getPFLUM2_IFLAG() {
return PFLUM2_IFLAG;
}

public byte getPFLUM3() {
return PFLUM3;
}

public byte getPFLUM3_I() {
return PFLUM3_I;
}

public byte getPFLUM3_IFLAG() {
return PFLUM3_IFLAG;
}

public byte getPFLUM4() {
return PFLUM4;
}

public byte getPFLUM4_I() {
return PFLUM4_I;
}

public byte getPFLUM4_IFLAG() {
return PFLUM4_IFLAG;
}

public byte getPFLUM5() {
return PFLUM5;
}

public boolean getPFLUM5_I() {
return PFLUM5_I;
}

public byte getPFLUM5_IFLAG() {
return PFLUM5_IFLAG;
}

public byte getPFLUM6() {
return PFLUM6;
}

public boolean getPFLUM6_I() {
return PFLUM6_I;
}

public byte getPFLUM6_IFLAG() {
return PFLUM6_IFLAG;
}

public byte getPFLUMALL1() {
return PFLUMALL1;
}

public byte getPFLUMALL1_I() {
return PFLUMALL1_I;
}

public boolean getPFLUMALL1_IFLAG() {
return PFLUMALL1_IFLAG;
}

public byte getPFLUMALL2() {
return PFLUMALL2;
}

public byte getPFLUMALL2_I() {
return PFLUMALL2_I;
}

public byte getPFLUMALL2_IFLAG() {
return PFLUMALL2_IFLAG;
}

public byte getPFLUMALL3() {
return PFLUMALL3;
}

public byte getPFLUMALL3_I() {
return PFLUMALL3_I;
}

public byte getPFLUMALL3_IFLAG() {
return PFLUMALL3_IFLAG;
}

public byte getPFLUMALL4() {
return PFLUMALL4;
}

public byte getPFLUMALL4_I() {
return PFLUMALL4_I;
}

public byte getPFLUMALL4_IFLAG() {
return PFLUMALL4_IFLAG;
}

public int getPFLUMV1() {
return PFLUMV1;
}

public int getPFLUMV1_I() {
return PFLUMV1_I;
}

public boolean getPFLUMV1_IFLAG() {
return PFLUMV1_IFLAG;
}

public int getPFLUMV2() {
return PFLUMV2;
}

public double getPFLUMV2_I() {
return PFLUMV2_I;
}

public boolean getPFLUMV2_IFLAG() {
return PFLUMV2_IFLAG;
}

public int getPFLUMV3() {
return PFLUMV3;
}

public int getPFLUMV3_I() {
return PFLUMV3_I;
}

public boolean getPFLUMV3_IFLAG() {
return PFLUMV3_IFLAG;
}

public int getPFLUMV4() {
return PFLUMV4;
}

public int getPFLUMV4_I() {
return PFLUMV4_I;
}

public boolean getPFLUMV4_IFLAG() {
return PFLUMV4_IFLAG;
}

public int getPFLUMV5() {
return PFLUMV5;
}

public int getPFLUMV5_I() {
return PFLUMV5_I;
}

public byte getPFLUMV5_IFLAG() {
return PFLUMV5_IFLAG;
}

public int getPFLUMV6() {
return PFLUMV6;
}

public int getPFLUMV6_I() {
return PFLUMV6_I;
}

public boolean getPFLUMV6_IFLAG() {
return PFLUMV6_IFLAG;
}

public byte getPFLUVB1() {
return PFLUVB1;
}

public byte getPFLUVB2() {
return PFLUVB2;
}

public byte getPFLUVB3() {
return PFLUVB3;
}

public byte getPFLUVB4() {
return PFLUVB4;
}

public byte getPFLUVB5() {
return PFLUVB5;
}

public boolean getPFLUVB6() {
return PFLUVB6;
}

public byte getPFNEW() {
return PFNEW;
}

public byte getPFNEWNO() {
return PFNEWNO;
}

public byte getPFNEWNO_I() {
return PFNEWNO_I;
}

public boolean getPFNEWNO_IFLAG() {
return PFNEWNO_IFLAG;
}

public byte getPFNEW_I() {
return PFNEW_I;
}

public boolean getPFNEW_IFLAG() {
return PFNEW_IFLAG;
}

public byte getPFOCTY1() {
return PFOCTY1;
}

public byte getPFOCTY1_I() {
return PFOCTY1_I;
}

public boolean getPFOCTY1_IFLAG() {
return PFOCTY1_IFLAG;
}

public byte getPFOCTY2() {
return PFOCTY2;
}

public byte getPFOCTY2_I() {
return PFOCTY2_I;
}

public boolean getPFOCTY2_IFLAG() {
return PFOCTY2_IFLAG;
}

public byte getPFOCTY3() {
return PFOCTY3;
}

public byte getPFOCTY3_I() {
return PFOCTY3_I;
}

public boolean getPFOCTY3_IFLAG() {
return PFOCTY3_IFLAG;
}

public byte getPFOCTY4() {
return PFOCTY4;
}

public byte getPFOCTY4_I() {
return PFOCTY4_I;
}

public boolean getPFOCTY4_IFLAG() {
return PFOCTY4_IFLAG;
}

public byte getPFOCTY5() {
return PFOCTY5;
}

public byte getPFOCTY5_I() {
return PFOCTY5_I;
}

public byte getPFOCTY5_IFLAG() {
return PFOCTY5_IFLAG;
}

public byte getPFOCTY6() {
return PFOCTY6;
}

public byte getPFOCTY6_I() {
return PFOCTY6_I;
}

public byte getPFOCTY6_IFLAG() {
return PFOCTY6_IFLAG;
}

public byte getPFREC1() {
return PFREC1;
}

public byte getPFREC1_I() {
return PFREC1_I;
}

public boolean getPFREC1_IFLAG() {
return PFREC1_IFLAG;
}

public byte getPFREC2() {
return PFREC2;
}

public byte getPFREC2_I() {
return PFREC2_I;
}

public boolean getPFREC2_IFLAG() {
return PFREC2_IFLAG;
}

public byte getPFREC3() {
return PFREC3;
}

public byte getPFREC3_I() {
return PFREC3_I;
}

public boolean getPFREC3_IFLAG() {
return PFREC3_IFLAG;
}

public byte getPFREC4() {
return PFREC4;
}

public byte getPFREC4_I() {
return PFREC4_I;
}

public boolean getPFREC4_IFLAG() {
return PFREC4_IFLAG;
}

public byte getPFREC5() {
return PFREC5;
}

public byte getPFREC5_I() {
return PFREC5_I;
}

public boolean getPFREC5_IFLAG() {
return PFREC5_IFLAG;
}

public byte getPFREC6() {
return PFREC6;
}

public byte getPFREC6_I() {
return PFREC6_I;
}

public boolean getPFREC6_IFLAG() {
return PFREC6_IFLAG;
}

public byte getPFREM1() {
return PFREM1;
}

public byte getPFREM1_I() {
return PFREM1_I;
}

public boolean getPFREM1_IFLAG() {
return PFREM1_IFLAG;
}

public byte getPFREM2() {
return PFREM2;
}

public byte getPFREM2_I() {
return PFREM2_I;
}

public byte getPFREM2_IFLAG() {
return PFREM2_IFLAG;
}

public byte getPFREM3() {
return PFREM3;
}

public byte getPFREM3_I() {
return PFREM3_I;
}

public byte getPFREM3_IFLAG() {
return PFREM3_IFLAG;
}

public byte getPFREM4() {
return PFREM4;
}

public byte getPFREM4_I() {
return PFREM4_I;
}

public byte getPFREM4_IFLAG() {
return PFREM4_IFLAG;
}

public byte getPFSTAT1() {
return PFSTAT1;
}

public byte getPFSTAT2() {
return PFSTAT2;
}

public byte getPFSTAT3() {
return PFSTAT3;
}

public byte getPFSTAT4() {
return PFSTAT4;
}

public byte getPFSTAT5() {
return PFSTAT5;
}

public byte getPFSTAT6() {
return PFSTAT6;
}

public byte getPFSTMM1() {
return PFSTMM1;
}

public byte getPFSTMM2() {
return PFSTMM2;
}

public byte getPFSTMM3() {
return PFSTMM3;
}

public byte getPFSTMM4() {
return PFSTMM4;
}

public byte getPFSTMM5() {
return PFSTMM5;
}

public byte getPFSTMM6() {
return PFSTMM6;
}

public short getPFSTMY1() {
return PFSTMY1;
}

public short getPFSTMY2() {
return PFSTMY2;
}

public short getPFSTMY3() {
return PFSTMY3;
}

public short getPFSTMY4() {
return PFSTMY4;
}

public short getPFSTMY5() {
return PFSTMY5;
}

public short getPFSTMY6() {
return PFSTMY6;
}

public byte getPFTYP1() {
return PFTYP1;
}

public byte getPFTYP1_I() {
return PFTYP1_I;
}

public boolean getPFTYP1_IFLAG() {
return PFTYP1_IFLAG;
}

public byte getPFTYP2() {
return PFTYP2;
}

public byte getPFTYP2_I() {
return PFTYP2_I;
}

public boolean getPFTYP2_IFLAG() {
return PFTYP2_IFLAG;
}

public byte getPFTYP3() {
return PFTYP3;
}

public byte getPFTYP3_I() {
return PFTYP3_I;
}

public boolean getPFTYP3_IFLAG() {
return PFTYP3_IFLAG;
}

public byte getPFTYP4() {
return PFTYP4;
}

public byte getPFTYP4_I() {
return PFTYP4_I;
}

public boolean getPFTYP4_IFLAG() {
return PFTYP4_IFLAG;
}

public byte getPFTYP5() {
return PFTYP5;
}

public byte getPFTYP5_I() {
return PFTYP5_I;
}

public boolean getPFTYP5_IFLAG() {
return PFTYP5_IFLAG;
}

public byte getPFTYP6() {
return PFTYP6;
}

public byte getPFTYP6_I() {
return PFTYP6_I;
}

public boolean getPFTYP6_IFLAG() {
return PFTYP6_IFLAG;
}

public boolean getPHYSBUYLGDST() {
return PHYSBUYLGDST;
}

public boolean getPHYSHOUSGDSOST() {
return PHYSHOUSGDSOST;
}

public boolean getPHYSHOUSGDST() {
return PHYSHOUSGDST;
}

public byte getPINC() {
return PINC;
}

public byte getPMORTC2() {
return PMORTC2;
}

public byte getPMORTC3() {
return PMORTC3;
}

public byte getPNOWK() {
return PNOWK;
}

public byte getPNOWKLN() {
return PNOWKLN;
}

public byte getPNOWKRS() {
return PNOWKRS;
}

public byte getPNUMOS() {
return PNUMOS;
}

public byte getPNUMOS_I() {
return PNUMOS_I;
}

public boolean getPNUMOS_IFLAG() {
return PNUMOS_IFLAG;
}

public byte getPOADD1() {
return POADD1;
}

public byte getPOADD1_I() {
return POADD1_I;
}

public boolean getPOADD1_IFLAG() {
return POADD1_IFLAG;
}

public byte getPOADD2() {
return POADD2;
}

public byte getPOADD2_I() {
return POADD2_I;
}

public boolean getPOADD2_IFLAG() {
return POADD2_IFLAG;
}

public boolean getPOADD3() {
return POADD3;
}

public boolean getPOADD3_I() {
return POADD3_I;
}

public boolean getPOADD3_IFLAG() {
return POADD3_IFLAG;
}

public byte getPOADD4() {
return POADD4;
}

public byte getPOADD4_I() {
return POADD4_I;
}

public boolean getPOADD4_IFLAG() {
return POADD4_IFLAG;
}

public boolean getPOADD5_I() {
return POADD5_I;
}

public boolean getPOADD5_IFLAG() {
return POADD5_IFLAG;
}

public boolean getPOADD6_I() {
return POADD6_I;
}

public boolean getPOADD6_IFLAG() {
return POADD6_IFLAG;
}

public byte getPOANEH1() {
return POANEH1;
}

public byte getPOANGA1() {
return POANGA1;
}

public byte getPOANIF1() {
return POANIF1;
}

public byte getPOANJT1() {
return POANJT1;
}

public byte getPOANN1() {
return POANN1;
}

public byte getPOANN5() {
return POANN5;
}

public byte getPOCASH1() {
return POCASH1;
}

public byte getPOCASH2() {
return POCASH2;
}

public byte getPOCNFG1() {
return POCNFG1;
}

public byte getPOCNFG2() {
return POCNFG2;
}

public double getPOCNFR1() {
return POCNFR1;
}

public double getPOCNFR2() {
return POCNFR2;
}

public byte getPOCNPR1() {
return POCNPR1;
}

public byte getPOCNPR2() {
return POCNPR2;
}

public byte getPOCONH1() {
return POCONH1;
}

public byte getPOCONH2() {
return POCONH2;
}

public byte getPOCTYP1() {
return POCTYP1;
}

public byte getPOCTYP1_I() {
return POCTYP1_I;
}

public boolean getPOCTYP1_IFLAG() {
return POCTYP1_IFLAG;
}

public byte getPOCTYP2() {
return POCTYP2;
}

public byte getPOCTYP2_I() {
return POCTYP2_I;
}

public boolean getPOCTYP2_IFLAG() {
return POCTYP2_IFLAG;
}

public short getPODRINC1() {
return PODRINC1;
}

public int getPODRINC2() {
return PODRINC2;
}

public byte getPODRINCB1() {
return PODRINCB1;
}

public boolean getPODRINCB2() {
return PODRINCB2;
}

public byte getPODRVB1() {
return PODRVB1;
}

public boolean getPODRVB2() {
return PODRVB2;
}

public short getPODRVI1() {
return PODRVI1;
}

public int getPODRVI2() {
return PODRVI2;
}

public double getPOEMAM1() {
return POEMAM1;
}

public int getPOEMAM2() {
return POEMAM2;
}

public byte getPOEMFG1() {
return POEMFG1;
}

public byte getPOEMFG2() {
return POEMFG2;
}

public double getPOEMFR1() {
return POEMFR1;
}

public double getPOEMFR2() {
return POEMFR2;
}

public byte getPOEMP1() {
return POEMP1;
}

public byte getPOEMP2() {
return POEMP2;
}

public byte getPOEMPH1() {
return POEMPH1;
}

public byte getPOEMPH2() {
return POEMPH2;
}

public byte getPOEMPR1() {
return POEMPR1;
}

public byte getPOEMPR2() {
return POEMPR2;
}

public byte getPOFAAG1() {
return POFAAG1;
}

public byte getPOFAAG2() {
return POFAAG2;
}

public byte getPOFAN1() {
return POFAN1;
}

public byte getPOFAN2() {
return POFAN2;
}

public byte getPOFAN3() {
return POFAN3;
}

public byte getPOFAN4() {
return POFAN4;
}

public boolean getPOFAN5() {
return POFAN5;
}

public byte getPOFAN6() {
return POFAN6;
}

public byte getPOFAN7() {
return POFAN7;
}

public boolean getPOFAN8() {
return POFAN8;
}

public byte getPOFAWH1() {
return POFAWH1;
}

public boolean getPOFAWH2() {
return POFAWH2;
}

public byte getPOFAWH6() {
return POFAWH6;
}

public short getPOJOIN1() {
return POJOIN1;
}

public short getPOJOIN2() {
return POJOIN2;
}

public byte getPOLMUS1() {
return POLMUS1;
}

public byte getPOLMUS2() {
return POLMUS2;
}

public byte getPOLMUS3() {
return POLMUS3;
}

public byte getPOLMUS4() {
return POLMUS4;
}

public boolean getPOLMUS5() {
return POLMUS5;
}

public boolean getPOLMUS6() {
return POLMUS6;
}

public byte getPOLMUS7() {
return POLMUS7;
}

public boolean getPOLMUS8() {
return POLMUS8;
}

public int getPOLMV1() {
return POLMV1;
}

public int getPOLMV1_I() {
return POLMV1_I;
}

public boolean getPOLMV1_IFLAG() {
return POLMV1_IFLAG;
}

public int getPOLMV2() {
return POLMV2;
}

public int getPOLMV2_I() {
return POLMV2_I;
}

public boolean getPOLMV2_IFLAG() {
return POLMV2_IFLAG;
}

public byte getPOLMVB1() {
return POLMVB1;
}

public byte getPOLSYR1() {
return POLSYR1;
}

public byte getPOLSYR2() {
return POLSYR2;
}

public byte getPOLUM1() {
return POLUM1;
}

public byte getPOLUM1_I() {
return POLUM1_I;
}

public boolean getPOLUM1_IFLAG() {
return POLUM1_IFLAG;
}

public byte getPOLUM2() {
return POLUM2;
}

public byte getPOLUM2_I() {
return POLUM2_I;
}

public boolean getPOLUM2_IFLAG() {
return POLUM2_IFLAG;
}

public byte getPOMETH1() {
return POMETH1;
}

public byte getPOMETH2() {
return POMETH2;
}

public byte getPOPYCH2() {
return POPYCH2;
}

public byte getPORAGE1() {
return PORAGE1;
}

public byte getPORAGE2() {
return PORAGE2;
}

public byte getPOWER1T() {
return POWER1T;
}

public byte getPOWER2T() {
return POWER2T;
}

public int getPOYRAM1() {
return POYRAM1;
}

public int getPOYRAM2() {
return POYRAM2;
}

public byte getPPACCU1() {
return PPACCU1;
}

public byte getPPACCU2() {
return PPACCU2;
}

public byte getPPACCU3() {
return PPACCU3;
}

public byte getPPANEH1() {
return PPANEH1;
}

public byte getPPANEH2() {
return PPANEH2;
}

public boolean getPPANEH3() {
return PPANEH3;
}

public byte getPPANGA1() {
return PPANGA1;
}

public byte getPPANGA2() {
return PPANGA2;
}

public byte getPPANGA3() {
return PPANGA3;
}

public byte getPPANIF1() {
return PPANIF1;
}

public byte getPPANIF2() {
return PPANIF2;
}

public byte getPPANIF3() {
return PPANIF3;
}

public byte getPPANJT1() {
return PPANJT1;
}

public byte getPPANJT2() {
return PPANJT2;
}

public byte getPPANJT3() {
return PPANJT3;
}

public byte getPPANN1() {
return PPANN1;
}

public boolean getPPANN10() {
return PPANN10;
}

public boolean getPPANN11() {
return PPANN11;
}

public boolean getPPANN12() {
return PPANN12;
}

public boolean getPPANN2() {
return PPANN2;
}

public byte getPPANN5() {
return PPANN5;
}

public byte getPPANN9() {
return PPANN9;
}

public byte getPPCASH1() {
return PPCASH1;
}

public byte getPPCASH2() {
return PPCASH2;
}

public byte getPPCASH3() {
return PPCASH3;
}

public byte getPPCNDRS1() {
return PPCNDRS1;
}

public byte getPPCNDRS10() {
return PPCNDRS10;
}

public byte getPPCNDRS11() {
return PPCNDRS11;
}

public boolean getPPCNDRS19() {
return PPCNDRS19;
}

public byte getPPCNDRS2() {
return PPCNDRS2;
}

public byte getPPCNHOW1() {
return PPCNHOW1;
}

public byte getPPCNHOW2() {
return PPCNHOW2;
}

public byte getPPCNLRS1() {
return PPCNLRS1;
}

public byte getPPCNLRS2() {
return PPCNLRS2;
}

public byte getPPCNLRS3() {
return PPCNLRS3;
}

public byte getPPCNLRS5() {
return PPCNLRS5;
}

public byte getPPCONCH2() {
return PPCONCH2;
}

public byte getPPCONCH3() {
return PPCONCH3;
}

public byte getPPDOCS1() {
return PPDOCS1;
}

public byte getPPDOCS2() {
return PPDOCS2;
}

public byte getPPDOCS3() {
return PPDOCS3;
}

public int getPPDRINC1() {
return PPDRINC1;
}

public short getPPDRINC2() {
return PPDRINC2;
}

public boolean getPPDRINCB2() {
return PPDRINCB2;
}

public byte getPPDRVB1() {
return PPDRVB1;
}

public boolean getPPDRVB2() {
return PPDRVB2;
}

public int getPPDRVI1() {
return PPDRVI1;
}

public int getPPDRVI2() {
return PPDRVI2;
}

public int getPPEIRA1() {
return PPEIRA1;
}

public short getPPEIRA2() {
return PPEIRA2;
}

public boolean getPPEIRA3() {
return PPEIRA3;
}

public double getPPEIRF1() {
return PPEIRF1;
}

public boolean getPPEIRF2() {
return PPEIRF2;
}

public boolean getPPEIRF3() {
return PPEIRF3;
}

public byte getPPEIRH1() {
return PPEIRH1;
}

public byte getPPEIRH2() {
return PPEIRH2;
}

public byte getPPEIRH3() {
return PPEIRH3;
}

public short getPPEMAM1() {
return PPEMAM1;
}

public short getPPEMAM2() {
return PPEMAM2;
}

public short getPPEMAM3() {
return PPEMAM3;
}

public double getPPEMFR1() {
return PPEMFR1;
}

public byte getPPEMFR2() {
return PPEMFR2;
}

public byte getPPEMFR3() {
return PPEMFR3;
}

public byte getPPEMP1() {
return PPEMP1;
}

public byte getPPEMP2() {
return PPEMP2;
}

public byte getPPEMP3() {
return PPEMP3;
}

public byte getPPEMPH1() {
return PPEMPH1;
}

public byte getPPEMPH2() {
return PPEMPH2;
}

public byte getPPEMPH3() {
return PPEMPH3;
}

public byte getPPEMPR1() {
return PPEMPR1;
}

public byte getPPEMPR2() {
return PPEMPR2;
}

public byte getPPEMPR3() {
return PPEMPR3;
}

public byte getPPEVRG1() {
return PPEVRG1;
}

public byte getPPEVRG2() {
return PPEVRG2;
}

public byte getPPEVRG3() {
return PPEVRG3;
}

public boolean getPPFAAG1() {
return PPFAAG1;
}

public byte getPPFAN1() {
return PPFAN1;
}

public byte getPPFAN11() {
return PPFAN11;
}

public byte getPPFAN2() {
return PPFAN2;
}

public byte getPPFAN6() {
return PPFAN6;
}

public byte getPPFAWH1() {
return PPFAWH1;
}

public boolean getPPFAWH15() {
return PPFAWH15;
}

public boolean getPPFAWH2() {
return PPFAWH2;
}

public boolean getPPFAWH3() {
return PPFAWH3;
}

public boolean getPPFAWH6() {
return PPFAWH6;
}

public byte getPPLMUS1() {
return PPLMUS1;
}

public byte getPPLMUS2() {
return PPLMUS2;
}

public boolean getPPLMUS3() {
return PPLMUS3;
}

public int getPPLMV1() {
return PPLMV1;
}

public int getPPLMV1_I() {
return PPLMV1_I;
}

public boolean getPPLMV1_IFLAG() {
return PPLMV1_IFLAG;
}

public int getPPLMV2() {
return PPLMV2;
}

public int getPPLMV2_I() {
return PPLMV2_I;
}

public boolean getPPLMV2_IFLAG() {
return PPLMV2_IFLAG;
}

public short getPPLMV3() {
return PPLMV3;
}

public short getPPLMV3_I() {
return PPLMV3_I;
}

public boolean getPPLMV3_IFLAG() {
return PPLMV3_IFLAG;
}

public boolean getPPLMVB1() {
return PPLMVB1;
}

public boolean getPPLMVB2() {
return PPLMVB2;
}

public boolean getPPLMVB3() {
return PPLMVB3;
}

public int getPPLSTA1() {
return PPLSTA1;
}

public int getPPLSTA2() {
return PPLSTA2;
}

public int getPPLSTA3() {
return PPLSTA3;
}

public byte getPPLSTP1() {
return PPLSTP1;
}

public byte getPPLSTP2() {
return PPLSTP2;
}

public byte getPPLSTP3() {
return PPLSTP3;
}

public byte getPPLUM1() {
return PPLUM1;
}

public byte getPPLUM1_I() {
return PPLUM1_I;
}

public boolean getPPLUM1_IFLAG() {
return PPLUM1_IFLAG;
}

public byte getPPLUM2() {
return PPLUM2;
}

public byte getPPLUM2_I() {
return PPLUM2_I;
}

public boolean getPPLUM2_IFLAG() {
return PPLUM2_IFLAG;
}

public byte getPPLUM3() {
return PPLUM3;
}

public byte getPPLUM3_I() {
return PPLUM3_I;
}

public boolean getPPLUM3_IFLAG() {
return PPLUM3_IFLAG;
}

public byte getPPORG1() {
return PPORG1;
}

public byte getPPORG2() {
return PPORG2;
}

public byte getPPORG3() {
return PPORG3;
}

public byte getPPPAY1() {
return PPPAY1;
}

public byte getPPPAY2() {
return PPPAY2;
}

public byte getPPPAY3() {
return PPPAY3;
}

public int getPPRGAM2() {
return PPRGAM2;
}

public int getPPRGAM3() {
return PPRGAM3;
}

public byte getPPRGFG1() {
return PPRGFG1;
}

public byte getPPRGFG2() {
return PPRGFG2;
}

public double getPPRGFR1() {
return PPRGFR1;
}

public byte getPPRGFR2() {
return PPRGFR2;
}

public byte getPPRGH1() {
return PPRGH1;
}

public byte getPPRGH2() {
return PPRGH2;
}

public byte getPPRGH3() {
return PPRGH3;
}

public byte getPPRGPE1() {
return PPRGPE1;
}

public byte getPPRGPE2() {
return PPRGPE2;
}

public byte getPPRGPE3() {
return PPRGPE3;
}

public byte getPPSIPP1() {
return PPSIPP1;
}

public byte getPPSIPP2() {
return PPSIPP2;
}

public byte getPPSIPP3() {
return PPSIPP3;
}

public byte getPPSTMN1() {
return PPSTMN1;
}

public byte getPPSTMN2() {
return PPSTMN2;
}

public byte getPPSTMN3() {
return PPSTMN3;
}

public short getPPSTYR1() {
return PPSTYR1;
}

public short getPPSTYR2() {
return PPSTYR2;
}

public short getPPSTYR3() {
return PPSTYR3;
}

public byte getPPTYP1() {
return PPTYP1;
}

public byte getPPTYP2() {
return PPTYP2;
}

public byte getPPTYP3() {
return PPTYP3;
}

public int getPPVAL1() {
return PPVAL1;
}

public int getPPVAL1_I() {
return PPVAL1_I;
}

public boolean getPPVAL1_IFLAG() {
return PPVAL1_IFLAG;
}

public int getPPVAL2() {
return PPVAL2;
}

public double getPPVAL2_I() {
return PPVAL2_I;
}

public byte getPPVAL2_IFLAG() {
return PPVAL2_IFLAG;
}

public int getPPVAL3() {
return PPVAL3;
}

public double getPPVAL3_I() {
return PPVAL3_I;
}

public boolean getPPVAL3_IFLAG() {
return PPVAL3_IFLAG;
}

public byte getPPVALB1() {
return PPVALB1;
}

public byte getPPVALB2() {
return PPVALB2;
}

public byte getPPVALB3() {
return PPVALB3;
}

public byte getPPVINT1() {
return PPVINT1;
}

public byte getPPVINT2() {
return PPVINT2;
}

public boolean getPPVINT3() {
return PPVINT3;
}

public short getPPYRST1() {
return PPYRST1;
}

public short getPPYRST2() {
return PPYRST2;
}

public short getPPYRST3() {
return PPYRST3;
}

public byte getPPYSTP1() {
return PPYSTP1;
}

public byte getPPYSTP11() {
return PPYSTP11;
}

public byte getPPYSTP12() {
return PPYSTP12;
}

public boolean getPPYSTP13() {
return PPYSTP13;
}

public boolean getPPYSTP14() {
return PPYSTP14;
}

public byte getPPYSTP19() {
return PPYSTP19;
}

public byte getPPYSTP2() {
return PPYSTP2;
}

public byte getPPYSTP8() {
return PPYSTP8;
}

public byte getPPYSTP9() {
return PPYSTP9;
}

public byte getPRESMON() {
return PRESMON;
}

public short getPRESYR() {
return PRESYR;
}

public byte getPRODTS() {
return PRODTS;
}

public byte getPROXYNUM() {
return PROXYNUM;
}

public int getPSPEXPA() {
return PSPEXPA;
}

public int getPSPEXPA_I() {
return PSPEXPA_I;
}

public boolean getPSPEXPA_IFLAG() {
return PSPEXPA_IFLAG;
}

public byte getPSPEXPH() {
return PSPEXPH;
}

public byte getPSPEXPH_I() {
return PSPEXPH_I;
}

public boolean getPSPEXPH_IFLAG() {
return PSPEXPH_IFLAG;
}

public byte getPSPLUM() {
return PSPLUM;
}

public int getPSPLUVAL() {
return PSPLUVAL;
}

public byte getPSPSE() {
return PSPSE;
}

public byte getPSPSE_I() {
return PSPSE_I;
}

public boolean getPSPSE_IFLAG() {
return PSPSE_IFLAG;
}

public boolean getPWACCU() {
return PWACCU;
}

public byte getPWLUM() {
return PWLUM;
}

public int getPWLUVAL() {
return PWLUVAL;
}

public byte getR01() {
return R01;
}

public byte getR02() {
return R02;
}

public byte getR03() {
return R03;
}

public byte getR04() {
return R04;
}

public byte getR05() {
return R05;
}

public byte getR06() {
return R06;
}

public byte getR07() {
return R07;
}

public byte getR08() {
return R08;
}

public byte getR09() {
return R09;
}

public boolean getR10() {
return R10;
}

public boolean getR11() {
return R11;
}

public byte getREGLRPY1_I() {
return REGLRPY1_I;
}

public boolean getREGLRPY1_IFLAG() {
return REGLRPY1_IFLAG;
}

public byte getREGLRPY2_I() {
return REGLRPY2_I;
}

public boolean getREGLRPY2_IFLAG() {
return REGLRPY2_IFLAG;
}

public byte getRELBUS_I() {
return RELBUS_I;
}

public boolean getRELBUS_IFLAG() {
return RELBUS_IFLAG;
}

public byte getRENTPAY_I() {
return RENTPAY_I;
}

public boolean getRENTPAY_IFLAG() {
return RENTPAY_IFLAG;
}

public byte getRESPDNT() {
return RESPDNT;
}

public double getRETFRAC() {
return RETFRAC;
}

public byte getRNYDAY() {
return RNYDAY;
}

public byte getRPFCRET1() {
return RPFCRET1;
}

public byte getRPFCRET2() {
return RPFCRET2;
}

public boolean getRPFCRET3() {
return RPFCRET3;
}

public boolean getRPFCRET4() {
return RPFCRET4;
}

public boolean getRPFCRET5() {
return RPFCRET5;
}

public boolean getRPFCRET6() {
return RPFCRET6;
}

public byte getSAMEJOB1() {
return SAMEJOB1;
}

public byte getSAMEJOB2() {
return SAMEJOB2;
}

public byte getSAMEJOB3() {
return SAMEJOB3;
}

public byte getSAMEJOB4() {
return SAMEJOB4;
}

public byte getSAMEJOB5() {
return SAMEJOB5;
}

public byte getSAMEJOB6() {
return SAMEJOB6;
}

public byte getSAMEMP() {
return SAMEMP;
}

public byte getSAMJOB() {
return SAMJOB;
}

public byte getSATIS() {
return SATIS;
}

public byte getSAVNUM() {
return SAVNUM;
}

public byte getSCAC1_I() {
return SCAC1_I;
}

public boolean getSCAC1_IFLAG() {
return SCAC1_IFLAG;
}

public byte getSCAC2_I() {
return SCAC2_I;
}

public boolean getSCAC2_IFLAG() {
return SCAC2_IFLAG;
}

public byte getSCAC3_I() {
return SCAC3_I;
}

public boolean getSCAC3_IFLAG() {
return SCAC3_IFLAG;
}

public byte getSCHEMEET_I() {
return SCHEMEET_I;
}

public boolean getSCHEMEET_IFLAG() {
return SCHEMEET_IFLAG;
}

public boolean getSCNDSCH() {
return SCNDSCH;
}

public byte getSECTOR() {
return SECTOR;
}

public byte getSECTR2() {
return SECTR2;
}

public int getSICCODE() {
return SICCODE;
}

public byte getSJEMP1_I() {
return SJEMP1_I;
}

public byte getSJEMP1_IFLAG() {
return SJEMP1_IFLAG;
}

public byte getSJOB2_I() {
return SJOB2_I;
}

public byte getSJOB2_IFLAG() {
return SJOB2_IFLAG;
}

public byte getSMTPEN() {
return SMTPEN;
}

public double getSOC2010() {
return SOC2010;
}

public byte getSOURC2P() {
return SOURC2P;
}

public byte getSTARTJ_I() {
return STARTJ_I;
}

public boolean getSTARTJ_IFLAG() {
return STARTJ_IFLAG;
}

public boolean getSTAT_IFLAG() {
return STAT_IFLAG;
}

public byte getTACC1() {
return TACC1;
}

public byte getTACC2() {
return TACC2;
}

public byte getTADDVB1() {
return TADDVB1;
}

public boolean getTADDVB2() {
return TADDVB2;
}

public int getTADDVL2() {
return TADDVL2;
}

public byte getTBCAP1() {
return TBCAP1;
}

public byte getTBCAP2() {
return TBCAP2;
}

public short getTBCAPY1() {
return TBCAPY1;
}

public short getTBCAPY2() {
return TBCAPY2;
}

public byte getTBCKNO1() {
return TBCKNO1;
}

public byte getTBCKNO2() {
return TBCKNO2;
}

public byte getTBEN1() {
return TBEN1;
}

public byte getTBEN10() {
return TBEN10;
}

public byte getTBEN11() {
return TBEN11;
}

public boolean getTBEN12() {
return TBEN12;
}

public byte getTBEN2() {
return TBEN2;
}

public byte getTBEN3() {
return TBEN3;
}

public byte getTBEN4() {
return TBEN4;
}

public boolean getTBEN5() {
return TBEN5;
}

public byte getTBEN9() {
return TBEN9;
}

public byte getTBINC1() {
return TBINC1;
}

public byte getTBINC2() {
return TBINC2;
}

public int getTBREC1() {
return TBREC1;
}

public int getTBREC2() {
return TBREC2;
}

public byte getTBRECB1() {
return TBRECB1;
}

public byte getTBRECB2() {
return TBRECB2;
}

public byte getTBVALB1() {
return TBVALB1;
}

public byte getTBVALB2() {
return TBVALB2;
}

public byte getTDUP1() {
return TDUP1;
}

public byte getTDUP2() {
return TDUP2;
}

public byte getTDUPA1() {
return TDUPA1;
}

public byte getTDUPA2() {
return TDUPA2;
}

public byte getTJNT1() {
return TJNT1;
}

public byte getTJNT2() {
return TJNT2;
}

public byte getTJNT3() {
return TJNT3;
}

public boolean getTJNT4() {
return TJNT4;
}

public double getTOPDVDBOPEN1T() {
return TOPDVDBOPEN1T;
}

public double getTOPDVDBOPEN2T() {
return TOPDVDBOPEN2T;
}

public short getTOTARR_EXCMORT_SUM() {
return TOTARR_EXCMORT_SUM;
}

public short getTOTBILLARR_SUM() {
return TOTBILLARR_SUM;
}

public int getTOTCC_SUM() {
return TOTCC_SUM;
}

public double getTOTFLNS_SUM() {
return TOTFLNS_SUM;
}

public double getTOTHP_SUM() {
return TOTHP_SUM;
}

public double getTOTLNS_SUM() {
return TOTLNS_SUM;
}

public double getTOTLOS_SUM() {
return TOTLOS_SUM;
}

public double getTOTMO_SUM() {
return TOTMO_SUM;
}

public int getTOTNLOS_SUM() {
return TOTNLOS_SUM;
}

public int getTOTNSLBNK_SUM() {
return TOTNSLBNK_SUM;
}

public int getTOTNSLC_SUM() {
return TOTNSLC_SUM;
}

public int getTOTOSLBNK_SUM() {
return TOTOSLBNK_SUM;
}

public int getTOTOSLC_SUM() {
return TOTOSLC_SUM;
}

public int getTOTPARTGRSPAY() {
return TOTPARTGRSPAY;
}

public short getTOTSC_SUM() {
return TOTSC_SUM;
}

public int getTOTSLBNK_SUM() {
return TOTSLBNK_SUM;
}

public int getTOTSLC_SUM() {
return TOTSLC_SUM;
}

public byte getTRUST() {
return TRUST;
}

public byte getTSNEW() {
return TSNEW;
}

public byte getTSNUM1() {
return TSNUM1;
}

public byte getTSNUM2() {
return TSNUM2;
}

public int getTVAL1() {
return TVAL1;
}

public int getTVAL2() {
return TVAL2;
}

public byte getTVALB1() {
return TVALB1;
}

public byte getTVALB2() {
return TVALB2;
}

public byte getTWHO1() {
return TWHO1;
}

public byte getTWHO2() {
return TWHO2;
}

public byte getTWHO7() {
return TWHO7;
}

public boolean getTWHO8() {
return TWHO8;
}

public byte getUBUYLET() {
return UBUYLET;
}

public byte getUBUYLET_I() {
return UBUYLET_I;
}

public boolean getUBUYLET_IFLAG() {
return UBUYLET_IFLAG;
}

public byte getUDEBTBL() {
return UDEBTBL;
}

public byte getUDEBTBLU() {
return UDEBTBLU;
}

public byte getUDEBTBO() {
return UDEBTBO;
}

public byte getUDEBTBOR() {
return UDEBTBOR;
}

public byte getUDEBTBOS() {
return UDEBTBOS;
}

public byte getUDEBTBS() {
return UDEBTBS;
}

public int getUDEBTL() {
return UDEBTL;
}

public int getUDEBTLU() {
return UDEBTLU;
}

public int getUDEBTLU_I() {
return UDEBTLU_I;
}

public boolean getUDEBTLU_IFLAG() {
return UDEBTLU_IFLAG;
}

public int getUDEBTL_I() {
return UDEBTL_I;
}

public boolean getUDEBTL_IFLAG() {
return UDEBTL_IFLAG;
}

public int getUDEBTO() {
return UDEBTO;
}

public int getUDEBTOR() {
return UDEBTOR;
}

public int getUDEBTOR_I() {
return UDEBTOR_I;
}

public boolean getUDEBTOR_IFLAG() {
return UDEBTOR_IFLAG;
}

public int getUDEBTOS() {
return UDEBTOS;
}

public int getUDEBTOS_I() {
return UDEBTOS_I;
}

public boolean getUDEBTOS_IFLAG() {
return UDEBTOS_IFLAG;
}

public int getUDEBTO_I() {
return UDEBTO_I;
}

public boolean getUDEBTO_IFLAG() {
return UDEBTO_IFLAG;
}

public int getUDEBTS() {
return UDEBTS;
}

public int getUDEBTS_I() {
return UDEBTS_I;
}

public boolean getUDEBTS_IFLAG() {
return UDEBTS_IFLAG;
}

public byte getUGDVBL() {
return UGDVBL;
}

public byte getUGDVBL_I() {
return UGDVBL_I;
}

public boolean getUGDVBL_IFLAG() {
return UGDVBL_IFLAG;
}

public byte getUGDVBOS() {
return UGDVBOS;
}

public byte getUGDVBOS_I() {
return UGDVBOS_I;
}

public boolean getUGDVBOS_IFLAG() {
return UGDVBOS_IFLAG;
}

public byte getUGDVBS() {
return UGDVBS;
}

public byte getUGDVBS_I() {
return UGDVBS_I;
}

public boolean getUGDVBS_IFLAG() {
return UGDVBS_IFLAG;
}

public boolean getUPROP5_I() {
return UPROP5_I;
}

public boolean getUPROP6_I() {
return UPROP6_I;
}

public boolean getUPRTYP10() {
return UPRTYP10;
}

public boolean getUPRTYP11() {
return UPRTYP11;
}

public boolean getUPRTYP12() {
return UPRTYP12;
}

public byte getUPRTYP13() {
return UPRTYP13;
}

public boolean getUPRTYP14() {
return UPRTYP14;
}

public boolean getUPRTYP15() {
return UPRTYP15;
}

public byte getUPRTYP16() {
return UPRTYP16;
}

public boolean getUPRTYP17() {
return UPRTYP17;
}

public boolean getUPRTYP18() {
return UPRTYP18;
}

public boolean getUPRTYP2() {
return UPRTYP2;
}

public boolean getUPRTYP3() {
return UPRTYP3;
}

public boolean getUPRTYP4() {
return UPRTYP4;
}

public boolean getUPRTYP5() {
return UPRTYP5;
}

public byte getUPRTYP6() {
return UPRTYP6;
}

public boolean getUPRTYP7() {
return UPRTYP7;
}

public boolean getUPRTYP8() {
return UPRTYP8;
}

public boolean getUPRTYP9() {
return UPRTYP9;
}

public byte getUVALBL() {
return UVALBL;
}

public byte getUVALBLU() {
return UVALBLU;
}

public byte getUVALBO() {
return UVALBO;
}

public byte getUVALBOR() {
return UVALBOR;
}

public byte getUVALBOS() {
return UVALBOS;
}

public byte getUVALBS() {
return UVALBS;
}

public int getUVALL() {
return UVALL;
}

public int getUVALLU() {
return UVALLU;
}

public int getUVALLU_I() {
return UVALLU_I;
}

public boolean getUVALLU_IFLAG() {
return UVALLU_IFLAG;
}

public int getUVALL_I() {
return UVALL_I;
}

public boolean getUVALL_IFLAG() {
return UVALL_IFLAG;
}

public int getUVALO() {
return UVALO;
}

public int getUVALOR() {
return UVALOR;
}

public int getUVALOR_I() {
return UVALOR_I;
}

public boolean getUVALOR_IFLAG() {
return UVALOR_IFLAG;
}

public int getUVALOS() {
return UVALOS;
}

public int getUVALOS_I() {
return UVALOS_I;
}

public boolean getUVALOS_IFLAG() {
return UVALOS_IFLAG;
}

public int getUVALO_I() {
return UVALO_I;
}

public boolean getUVALO_IFLAG() {
return UVALO_IFLAG;
}

public int getUVALS() {
return UVALS;
}

public int getUVALS_I() {
return UVALS_I;
}

public boolean getUVALS_IFLAG() {
return UVALS_IFLAG;
}

public int getVALPBLUM1() {
return VALPBLUM1;
}

public int getVALPBLUM2() {
return VALPBLUM2;
}

public byte getWKBETW() {
return WKBETW;
}

public byte getWKHRS() {
return WKHRS;
}

public byte getWKHRSIR() {
return WKHRSIR;
}

public byte getWORTH() {
return WORTH;
}

public byte getWRKING_I() {
return WRKING_I;
}

public boolean getWRKING_IFLAG() {
return WRKING_IFLAG;
}

public byte getXINCSE() {
return XINCSE;
}

public byte getXMARSTA() {
return XMARSTA;
}

public byte getXMARSTA_I() {
return XMARSTA_I;
}

public boolean getXMARSTA_IFLAG() {
return XMARSTA_IFLAG;
}

}
