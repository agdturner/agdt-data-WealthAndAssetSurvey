/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.waascg.process.WaASCG_Main
 */

package uk.ac.leeds.ccg.andyt.generic.data.waas.data.person;
import uk.ac.leeds.ccg.andyt.generic.data.waas.data.id.WaAS_RecordID;
import uk.ac.leeds.ccg.andyt.data.Data_Record;

public abstract class WaAS_W1W2PRecord extends WaAS_W1W2W3W4W5PRecord {


    WaAS_W1W2PRecord(WaAS_RecordID i){
        super(i);
    }
    protected byte ATTALL;

    protected String BACCBEG;

    protected String BACCEND;

    protected String BACCEND2;

    protected String BACCEND3;

    protected byte BACCSA;

    protected byte BACCSB;

    protected double BAMT;

    protected double BAMT10;

    protected double BAMT11;

    protected double BAMT12;

    protected double BAMT13;

    protected double BAMT14;

    protected double BAMT15;

    protected double BAMT16;

    protected double BAMT17;

    protected double BAMT18;

    protected double BAMT2;

    protected double BAMT3;

    protected double BAMT4;

    protected double BAMT5;

    protected double BAMT6;

    protected double BAMT7;

    protected double BAMT8;

    protected double BAMT9;

    protected byte BAMTDK;

    protected byte BAMTDK10;

    protected byte BAMTDK11;

    protected byte BAMTDK12;

    protected byte BAMTDK13;

    protected byte BAMTDK14;

    protected boolean BAMTDK15;

    protected byte BAMTDK16;

    protected byte BAMTDK17;

    protected byte BAMTDK18;

    protected boolean BAMTDK2;

    protected byte BAMTDK3;

    protected byte BAMTDK4;

    protected byte BAMTDK5;

    protected byte BAMTDK6;

    protected byte BAMTDK7;

    protected byte BAMTDK8;

    protected byte BAMTDK9;

    protected int BBEFORE;

    protected int BDEBTS;

    protected byte BDIRNI;

    protected byte BDOCS;

    protected byte BEMPN;

    protected byte BEN1Q1;

    protected byte BEN1Q2;

    protected byte BEN1Q3;

    protected byte BEN2Q1;

    protected byte BEN2Q2;

    protected byte BEN2Q3;

    protected byte BFUND18;

    protected byte BFUND3;

    protected boolean BFUND4;

    protected byte BNATINS;

    protected int BONAMT;

    protected int BOWED;

    protected byte BOWN;

    protected byte BPART;

    protected byte BPD;

    protected byte BPD10;

    protected byte BPD11;

    protected byte BPD12;

    protected byte BPD13;

    protected byte BPD14;

    protected byte BPD15;

    protected byte BPD16;

    protected byte BPD17;

    protected byte BPD18;

    protected byte BPD2;

    protected byte BPD3;

    protected byte BPD4;

    protected byte BPD5;

    protected byte BPD6;

    protected byte BPD7;

    protected byte BPD8;

    protected byte BPD9;

    protected byte BPRFLOSS;

    protected int BPROFIT;

    protected byte BPROPN;

    protected byte BRETIRE;

    protected byte BSIZE;

    protected byte BSTART;

    protected byte BTAX;

    protected byte BTYPE;

    protected byte BUILDDB1;

    protected byte BUILDDB2;

    protected boolean BUILDDB3;

    protected int BUILDDEBT1;

    protected int BUILDDEBT1_I;

    protected boolean BUILDDEBT1_IFLAG;

    protected int BUILDDEBT2;

    protected int BUILDDEBT2_I;

    protected boolean BUILDDEBT2_IFLAG;

    protected int BUILDDEBT3;

    protected int BUILDDEBT3_I;

    protected boolean BUILDDEBT3_IFLAG;

    protected int BUILDVAL1;

    protected int BUILDVAL1_I;

    protected boolean BUILDVAL1_IFLAG;

    protected int BUILDVAL2;

    protected int BUILDVAL2_I;

    protected boolean BUILDVAL2_IFLAG;

    protected int BUILDVAL3;

    protected int BUILDVAL3_I;

    protected boolean BUILDVAL3_IFLAG;

    protected byte BUILDVB1;

    protected byte BUILDVB2;

    protected byte BUILDVB3;

    protected int BVAL;

    protected byte BVALB;

    protected byte BVALQ;

    protected byte BVALQ2;

    protected byte BVALQ3;

    protected byte BVALWH1;

    protected byte BVALWH10;

    protected byte BVALWH13;

    protected boolean BVALWH14;

    protected byte BVALWH2;

    protected byte BVALWH3;

    protected byte BVALWH7;

    protected byte BVALWH8;

    protected byte BVALWH9;

    protected short BYEAR;

    protected byte CARER1Q;

    protected byte CHECKCC;

    protected byte CHECKDL;

    protected boolean CHECKHB;

    protected byte CHECKHP;

    protected byte CHECKMO;

    protected byte CHECKST;

    protected byte COMMIT1;

    protected byte COMMIT2;

    protected byte COMMIT3;

    protected byte COMMIT4;

    protected boolean COMMIT5;

    protected byte DBURDH;

    protected byte DBURDW3;

    protected byte DBURDW4;

    protected byte DBURDW5;

    protected byte DBURDW6;

    protected int DCAMC;

    protected int DCAMC2_I;

    protected byte DCAMC2_IFLAG;

    protected int DCAMC3_I;

    protected byte DCAMC3_IFLAG;

    protected int DCAMC4;

    protected int DCAMC4_I;

    protected byte DCAMC4_IFLAG;

    protected short DCAMC5;

    protected short DCAMC5_I;

    protected byte DCAMC5_IFLAG;

    protected int DCAMC_I;

    protected byte DCAMC_IFLAG;

    protected short DCAMD;

    protected short DCAMD2_I;

    protected byte DCAMD2_IFLAG;

    protected short DCAMD3_I;

    protected byte DCAMD3_IFLAG;

    protected short DCAMD4;

    protected short DCAMD4_I;

    protected byte DCAMD4_IFLAG;

    protected short DCAMD5;

    protected short DCAMD5_I;

    protected boolean DCAMD5_IFLAG;

    protected short DCAMD_I;

    protected byte DCAMD_IFLAG;

    protected int DCAMOS;

    protected int DCAMOS4;

    protected short DCAMOS5;

    protected short DCAMP;

    protected short DCAMP2_I;

    protected byte DCAMP2_IFLAG;

    protected short DCAMP3_I;

    protected byte DCAMP3_IFLAG;

    protected short DCAMP4;

    protected short DCAMP4_I;

    protected byte DCAMP4_IFLAG;

    protected short DCAMP5;

    protected short DCAMP5_I;

    protected byte DCAMP5_IFLAG;

    protected short DCAMP_I;

    protected byte DCAMP_IFLAG;

    protected byte DCANU_I;

    protected byte DCANU_IFLAG;

    protected byte DCANY_I;

    protected byte DCANY_IFLAG;

    protected byte DCCINTR;

    protected byte DCCOS;

    protected byte DCCOS2_I;

    protected byte DCCOS2_IFLAG;

    protected byte DCCOS3_I;

    protected byte DCCOS3_IFLAG;

    protected byte DCCOS4;

    protected byte DCCOS4_I;

    protected byte DCCOS4_IFLAG;

    protected byte DCCOS5;

    protected byte DCCOS5_I;

    protected byte DCCOS5_IFLAG;

    protected byte DCCOS_I;

    protected byte DCCOS_IFLAG;

    protected byte DCCSP;

    protected byte DCCSP2_I;

    protected byte DCCSP2_IFLAG;

    protected byte DCCSP3_I;

    protected byte DCCSP3_IFLAG;

    protected byte DCCSP4;

    protected byte DCCSP4_I;

    protected boolean DCCSP4_IFLAG;

    protected byte DCCSP5;

    protected byte DCCSP5_I;

    protected boolean DCCSP5_IFLAG;

    protected byte DCCSP_I;

    protected byte DCCSP_IFLAG;

    protected byte DCESB;

    protected byte DCESB4;

    protected byte DCESB5;

    protected byte DCINZ;

    protected byte DCINZ4;

    protected byte DCINZ5;

    protected byte DCNAM;

    protected byte DCNAM2_I;

    protected byte DCNAM2_IFLAG;

    protected byte DCNAM3_I;

    protected byte DCNAM3_IFLAG;

    protected byte DCNAM4;

    protected byte DCNAM4_I;

    protected byte DCNAM4_IFLAG;

    protected byte DCNAM5;

    protected byte DCNAM5_I;

    protected byte DCNAM5_IFLAG;

    protected byte DCNAM_I;

    protected byte DCNAM_IFLAG;

    protected byte DCNUM;

    protected byte DCNUM_I;

    protected byte DCNUM_IFLAG;

    protected int DCOINV;

    protected byte DCOINVB;

    protected int DCOINV_I;

    protected byte DCOINV_IFLAG;

    protected boolean DCONM10;

    protected boolean DCONM10_I;

    protected boolean DCONM10_IFLAG;

    protected byte DCONM1_I;

    protected byte DCONM1_IFLAG;

    protected byte DCONM2_I;

    protected byte DCONM2_IFLAG;

    protected byte DCONM3_I;

    protected byte DCONM3_IFLAG;

    protected byte DCONM4_I;

    protected byte DCONM4_IFLAG;

    protected byte DCONM5_I;

    protected byte DCONM5_IFLAG;

    protected byte DCONM6_I;

    protected byte DCONM6_IFLAG;

    protected byte DCONM7;

    protected byte DCONM7_I;

    protected boolean DCONM7_IFLAG;

    protected boolean DCONM8;

    protected boolean DCONM8_I;

    protected boolean DCONM8_IFLAG;

    protected byte DCONM9;

    protected byte DCONM9_I;

    protected boolean DCONM9_IFLAG;

    protected int DCOSHV;

    protected byte DCOSHVB;

    protected int DCOSHV_I;

    protected byte DCOSHV_IFLAG;

    protected byte DCPER;

    protected boolean DCPER4;

    protected boolean DCPER5;

    protected byte DCREC;

    protected byte DCREC2_I;

    protected byte DCREC2_IFLAG;

    protected byte DCREC3_I;

    protected byte DCREC3_IFLAG;

    protected byte DCREC4;

    protected byte DCREC4_I;

    protected byte DCREC4_IFLAG;

    protected byte DCREC5;

    protected byte DCREC5_I;

    protected byte DCREC5_IFLAG;

    protected byte DCREC_I;

    protected byte DCREC_IFLAG;

    protected byte DCRSP;

    protected byte DCRSP2_I;

    protected byte DCRSP2_IFLAG;

    protected byte DCRSP3_I;

    protected byte DCRSP3_IFLAG;

    protected boolean DCRSP4;

    protected byte DCRSP4_I;

    protected byte DCRSP4_IFLAG;

    protected boolean DCRSP5;

    protected byte DCRSP5_I;

    protected boolean DCRSP5_IFLAG;

    protected boolean DCRSP_I;

    protected byte DCRSP_IFLAG;

    protected byte DHPBEH;

    protected byte DHPBEH3;

    protected byte DHPBEH3_I;

    protected byte DHPBEH3_IFLAG;

    protected byte DHPBEH4;

    protected byte DHPBEH4_I;

    protected boolean DHPBEH4_IFLAG;

    protected byte DHPBEH5;

    protected byte DHPBEH5_I;

    protected boolean DHPBEH5_IFLAG;

    protected byte DHPBEH_I;

    protected byte DHPBEH_IFLAG;

    protected byte DHPEST;

    protected byte DHPEST3;

    protected byte DHPEST4;

    protected boolean DHPEST5;

    protected short DHPINS;

    protected short DHPINS3;

    protected short DHPINS3_I;

    protected byte DHPINS3_IFLAG;

    protected short DHPINS4;

    protected double DHPINS4_I;

    protected byte DHPINS4_IFLAG;

    protected short DHPINS5;

    protected short DHPINS5_I;

    protected byte DHPINS5_IFLAG;

    protected short DHPINS_I;

    protected byte DHPINS_IFLAG;

    protected byte DHPINT;

    protected byte DHPINT3;

    protected byte DHPINT4;

    protected byte DHPINT5;

    protected byte DHPOFT;

    protected byte DHPOFT3;

    protected byte DHPOFT3_I;

    protected byte DHPOFT3_IFLAG;

    protected byte DHPOFT4;

    protected byte DHPOFT4_I;

    protected boolean DHPOFT4_IFLAG;

    protected byte DHPOFT5;

    protected byte DHPOFT5_I;

    protected boolean DHPOFT5_IFLAG;

    protected byte DHPOFT_I;

    protected byte DHPOFT_IFLAG;

    protected short DHPOWE;

    protected short DHPOWE3;

    protected short DHPOWE3_I;

    protected byte DHPOWE3_IFLAG;

    protected short DHPOWE4;

    protected short DHPOWE4_I;

    protected byte DHPOWE4_IFLAG;

    protected short DHPOWE5;

    protected short DHPOWE5_I;

    protected boolean DHPOWE5_IFLAG;

    protected short DHPOWE_I;

    protected byte DHPOWE_IFLAG;

    protected byte DHPWEST;

    protected byte DHPWEST3;

    protected byte DHPWEST4;

    protected byte DHPWEST5;

    protected byte DHPWHNM;

    protected byte DHPWHNM3;

    protected byte DHPWHNM3_I;

    protected byte DHPWHNM3_IFLAG;

    protected byte DHPWHNM4;

    protected byte DHPWHNM4_I;

    protected byte DHPWHNM4_IFLAG;

    protected byte DHPWHNM5;

    protected byte DHPWHNM5_I;

    protected byte DHPWHNM5_IFLAG;

    protected byte DHPWHNM_I;

    protected byte DHPWHNM_IFLAG;

    protected short DHPWHNY;

    protected short DHPWHNY3;

    protected short DHPWHNY3_I;

    protected byte DHPWHNY3_IFLAG;

    protected short DHPWHNY4;

    protected short DHPWHNY4_I;

    protected byte DHPWHNY4_IFLAG;

    protected short DHPWHNY5;

    protected short DHPWHNY5_I;

    protected byte DHPWHNY5_IFLAG;

    protected short DHPWHNY_I;

    protected byte DHPWHNY_IFLAG;

    protected byte DISBEN1;

    protected byte DISBEN2;

    protected byte DISBEN3;

    protected byte DLBEH;

    protected byte DLBEH_I;

    protected byte DLBEH_IFLAG;

    protected byte DLEST;

    protected short DLINS;

    protected double DLINS_I;

    protected byte DLINS_IFLAG;

    protected byte DLINT;

    protected byte DLOFT;

    protected byte DLOFT_I;

    protected byte DLOFT_IFLAG;

    protected short DLOWE;

    protected short DLOWE_I;

    protected byte DLOWE_IFLAG;

    protected byte DLSEC;

    protected byte DLTYPE;

    protected byte DLTYPE_I;

    protected byte DLTYPE_IFLAG;

    protected byte DLWEST;

    protected byte DLWHNM;

    protected byte DLWHNM_I;

    protected byte DLWHNM_IFLAG;

    protected short DLWHNY;

    protected short DLWHNY_I;

    protected byte DLWHNY_IFLAG;

    protected byte DLWHY11;

    protected boolean DLWHY12;

    protected byte DLWHY17;

    protected boolean DLWHY18;

    protected byte DLWHY29;

    protected byte DMOBEH;

    protected byte DMOBEH3;

    protected byte DMOBEH3_I;

    protected byte DMOBEH3_IFLAG;

    protected byte DMOBEH4;

    protected byte DMOBEH4_I;

    protected boolean DMOBEH4_IFLAG;

    protected byte DMOBEH5;

    protected byte DMOBEH5_I;

    protected boolean DMOBEH5_IFLAG;

    protected byte DMOBEH_I;

    protected byte DMOBEH_IFLAG;

    protected byte DMOEST;

    protected byte DMOEST3;

    protected byte DMOEST4;

    protected byte DMOEST5;

    protected short DMOINS;

    protected short DMOINS3;

    protected byte DMOINS3_I;

    protected boolean DMOINS3_IFLAG;

    protected short DMOINS4;

    protected byte DMOINS4_I;

    protected byte DMOINS4_IFLAG;

    protected byte DMOINS5;

    protected byte DMOINS5_I;

    protected boolean DMOINS5_IFLAG;

    protected short DMOINS_I;

    protected byte DMOINS_IFLAG;

    protected byte DMOINT;

    protected byte DMOINT3;

    protected byte DMOINT4;

    protected byte DMOINT5;

    protected byte DMOOFT;

    protected byte DMOOFT3;

    protected byte DMOOFT3_I;

    protected byte DMOOFT3_IFLAG;

    protected byte DMOOFT4;

    protected byte DMOOFT4_I;

    protected boolean DMOOFT4_IFLAG;

    protected byte DMOOFT5;

    protected boolean DMOOFT5_I;

    protected boolean DMOOFT5_IFLAG;

    protected byte DMOOFT_I;

    protected byte DMOOFT_IFLAG;

    protected short DMOOWE;

    protected short DMOOWE3;

    protected short DMOOWE3_I;

    protected byte DMOOWE3_IFLAG;

    protected short DMOOWE4;

    protected short DMOOWE4_I;

    protected boolean DMOOWE4_IFLAG;

    protected short DMOOWE5;

    protected short DMOOWE5_I;

    protected boolean DMOOWE5_IFLAG;

    protected short DMOOWE_I;

    protected byte DMOOWE_IFLAG;

    protected byte DMOWEST;

    protected byte DMOWEST3;

    protected byte DMOWEST4;

    protected byte DMOWEST5;

    protected byte DMOWHNM;

    protected byte DMOWHNM3;

    protected byte DMOWHNM3_I;

    protected byte DMOWHNM3_IFLAG;

    protected byte DMOWHNM4;

    protected byte DMOWHNM4_I;

    protected boolean DMOWHNM4_IFLAG;

    protected byte DMOWHNM5;

    protected byte DMOWHNM5_I;

    protected boolean DMOWHNM5_IFLAG;

    protected byte DMOWHNM_I;

    protected byte DMOWHNM_IFLAG;

    protected short DMOWHNY;

    protected short DMOWHNY3;

    protected short DMOWHNY3_I;

    protected byte DMOWHNY3_IFLAG;

    protected short DMOWHNY4;

    protected short DMOWHNY4_I;

    protected boolean DMOWHNY4_IFLAG;

    protected short DMOWHNY5;

    protected short DMOWHNY5_I;

    protected boolean DMOWHNY5_IFLAG;

    protected short DMOWHNY_I;

    protected byte DMOWHNY_IFLAG;

    protected short DSAMC;

    protected short DSAMC2_I;

    protected byte DSAMC2_IFLAG;

    protected short DSAMC3_I;

    protected boolean DSAMC3_IFLAG;

    protected short DSAMC4;

    protected short DSAMC4_I;

    protected byte DSAMC4_IFLAG;

    protected short DSAMC5;

    protected short DSAMC5_I;

    protected boolean DSAMC5_IFLAG;

    protected short DSAMC_I;

    protected byte DSAMC_IFLAG;

    protected short DSAMD;

    protected short DSAMD2_I;

    protected byte DSAMD2_IFLAG;

    protected short DSAMD3_I;

    protected boolean DSAMD3_IFLAG;

    protected short DSAMD4;

    protected short DSAMD4_I;

    protected boolean DSAMD4_IFLAG;

    protected byte DSAMD5;

    protected short DSAMD5_I;

    protected boolean DSAMD5_IFLAG;

    protected short DSAMD_I;

    protected byte DSAMD_IFLAG;

    protected short DSAMOS4;

    protected short DSAMOS5;

    protected short DSAMP;

    protected short DSAMP2_I;

    protected byte DSAMP2_IFLAG;

    protected short DSAMP3_I;

    protected boolean DSAMP3_IFLAG;

    protected short DSAMP4;

    protected short DSAMP4_I;

    protected byte DSAMP4_IFLAG;

    protected short DSAMP5;

    protected short DSAMP5_I;

    protected boolean DSAMP5_IFLAG;

    protected short DSAMP_I;

    protected byte DSAMP_IFLAG;

    protected byte DSANU1_I;

    protected byte DSANU1_IFLAG;

    protected boolean DSANU2_I;

    protected boolean DSANU2_IFLAG;

    protected byte DSANY1_I;

    protected byte DSANY1_IFLAG;

    protected boolean DSANY2_I;

    protected boolean DSANY2_IFLAG;

    protected byte DSCOS;

    protected byte DSCOS2_I;

    protected byte DSCOS2_IFLAG;

    protected byte DSCOS3_I;

    protected byte DSCOS3_IFLAG;

    protected byte DSCOS4;

    protected byte DSCOS4_I;

    protected byte DSCOS4_IFLAG;

    protected byte DSCOS5;

    protected byte DSCOS5_I;

    protected byte DSCOS5_IFLAG;

    protected byte DSCOS_I;

    protected byte DSCOS_IFLAG;

    protected byte DSCSP;

    protected byte DSCSP2_I;

    protected boolean DSCSP2_IFLAG;

    protected byte DSCSP3_I;

    protected boolean DSCSP3_IFLAG;

    protected byte DSCSP4;

    protected boolean DSCSP4_I;

    protected boolean DSCSP4_IFLAG;

    protected byte DSCSP5;

    protected byte DSCSP5_I;

    protected boolean DSCSP5_IFLAG;

    protected byte DSCSP_I;

    protected boolean DSCSP_IFLAG;

    protected byte DSESB;

    protected byte DSESB4;

    protected boolean DSESB5;

    protected int DSLAMT;

    protected double DSLAMT_I;

    protected byte DSLAMT_IFLAG;

    protected byte DSLEST;

    protected byte DSLPAY;

    protected byte DSLPAY2_I;

    protected byte DSLPAY2_IFLAG;

    protected byte DSLPAY3_I;

    protected boolean DSLPAY3_IFLAG;

    protected byte DSLPAY4_I;

    protected boolean DSLPAY4_IFLAG;

    protected boolean DSLPAY5_I;

    protected boolean DSLPAY5_IFLAG;

    protected byte DSLPAY_I;

    protected byte DSLPAY_IFLAG;

    protected byte DSNAM;

    protected byte DSNAM2_I;

    protected byte DSNAM2_IFLAG;

    protected byte DSNAM3_I;

    protected byte DSNAM3_IFLAG;

    protected byte DSNAM4;

    protected boolean DSNAM4_I;

    protected byte DSNAM4_IFLAG;

    protected byte DSNAM5;

    protected boolean DSNAM5_I;

    protected boolean DSNAM5_IFLAG;

    protected byte DSNAM_I;

    protected byte DSNAM_IFLAG;

    protected byte DSNUM;

    protected byte DSNUM_I;

    protected byte DSNUM_IFLAG;

    protected boolean DSONM10;

    protected boolean DSONM10_I;

    protected boolean DSONM10_IFLAG;

    protected byte DSONM1_I;

    protected byte DSONM1_IFLAG;

    protected byte DSONM2_I;

    protected boolean DSONM2_IFLAG;

    protected byte DSONM3_I;

    protected boolean DSONM3_IFLAG;

    protected boolean DSONM4_I;

    protected boolean DSONM4_IFLAG;

    protected boolean DSONM5_I;

    protected boolean DSONM5_IFLAG;

    protected boolean DSONM6_I;

    protected boolean DSONM6_IFLAG;

    protected boolean DSONM7;

    protected boolean DSONM7_I;

    protected boolean DSONM7_IFLAG;

    protected boolean DSONM8;

    protected boolean DSONM8_I;

    protected boolean DSONM8_IFLAG;

    protected boolean DSONM9;

    protected boolean DSONM9_I;

    protected boolean DSONM9_IFLAG;

    protected byte DSPER;

    protected byte DSREC;

    protected byte DSREC2_I;

    protected byte DSREC2_IFLAG;

    protected boolean DSREC3_I;

    protected boolean DSREC3_IFLAG;

    protected boolean DSREC4;

    protected boolean DSREC4_I;

    protected boolean DSREC4_IFLAG;

    protected boolean DSREC5;

    protected boolean DSREC5_I;

    protected boolean DSREC5_IFLAG;

    protected byte DSREC_I;

    protected byte DSREC_IFLAG;

    protected boolean DSRSP;

    protected byte DSRSP2;

    protected boolean DSRSP2_I;

    protected byte DSRSP2_IFLAG;

    protected boolean DSRSP3;

    protected boolean DSRSP3_I;

    protected boolean DSRSP3_IFLAG;

    protected boolean DSRSP4;

    protected boolean DSRSP4_I;

    protected boolean DSRSP4_IFLAG;

    protected boolean DSRSP5;

    protected boolean DSRSP5_I;

    protected boolean DSRSP5_IFLAG;

    protected boolean DSRSP_I;

    protected byte DSRSP_IFLAG;

    protected double DVCACRVAL;

    protected double DVCAODVAL;

    protected double DVCAVAL;

    protected int DVCOINV;

    protected short DVDHPOWE;

    protected short DVDHPOWE3;

    protected short DVDHPOWE4;

    protected short DVDHPOWE5;

    protected short DVDLOWE;

    protected short DVDMOOWE;

    protected short DVDMOOWE3;

    protected short DVDMOOWE4;

    protected short DVDMOOWE5;

    protected boolean DVLNAR;

    protected boolean DVMOAR;

    protected double DVSHODVAL;

    protected boolean EMPSHARE;

    protected byte EMPSTAT2;

    protected int FINCV;

    protected byte FINVTY01_IFLAG;

    protected byte FINVTY02_IFLAG;

    protected byte FINVTY03_IFLAG;

    protected byte FINVTY04_IFLAG;

    protected byte FINVTY05_IFLAG;

    protected byte FINVTY06_IFLAG;

    protected byte FINVTY07_IFLAG;

    protected byte FINVTY08_IFLAG;

    protected byte FINVTY09_IFLAG;

    protected byte FINVTY10_IFLAG;

    protected boolean FINVTY11_IFLAG;

    protected short FLNOS5;

    protected int FNSVAL;

    protected boolean FTIBOND;

    protected boolean GCBGILT;

    protected int HOUSEGDVAL1;

    protected int HOUSEGDVAL2;

    protected int HOUSEGDVAL3;

    protected byte HOUSEGDVB1;

    protected byte HOUSEGDVB1_I;

    protected boolean HOUSEGDVB1_IFLAG;

    protected byte HOUSEGDVB2;

    protected byte HOUSEGDVB2_I;

    protected boolean HOUSEGDVB2_IFLAG;

    protected byte HOUSEGDVB3;

    protected byte HOUSEGDVB3_I;

    protected boolean HOUSEGDVB3_IFLAG;

    protected double HPLFT3;

    protected double HPLFT4;

    protected double HPLFT5;

    protected double HPOS3;

    protected double HPOS4;

    protected double HPOS5;

    protected byte HSEDB1;

    protected byte HSEDB2;

    protected byte HSEDB3;

    protected int HSEDEBT1;

    protected int HSEDEBT1_I;

    protected boolean HSEDEBT1_IFLAG;

    protected int HSEDEBT2;

    protected int HSEDEBT2_I;

    protected boolean HSEDEBT2_IFLAG;

    protected int HSEDEBT3;

    protected int HSEDEBT3_I;

    protected boolean HSEDEBT3_IFLAG;

    protected int HSEVAL1;

    protected int HSEVAL1_I;

    protected boolean HSEVAL1_IFLAG;

    protected int HSEVAL2;

    protected int HSEVAL2_I;

    protected boolean HSEVAL2_IFLAG;

    protected int HSEVAL3;

    protected int HSEVAL3_I;

    protected boolean HSEVAL3_IFLAG;

    protected byte HSEVB1;

    protected byte HSEVB2;

    protected byte HSEVB3;

    protected boolean IGDS12;

    protected boolean IGDS16;

    protected boolean IGDS6;

    protected int IGIFVAL;

    protected int ILACC;

    protected int ILIFE;

    protected int ILINS;

    protected int ILOTH;

    protected int ILRED;

    protected boolean ILUMTY4;

    protected int ILWIN;

    protected boolean INS;

    protected byte INSPOL;

    protected byte INTRO;

    protected boolean ISA;

    protected boolean ISCH1618;

    protected boolean ISCHILD;

    protected int IVAL;

    protected int IVAL2;

    protected int IVAL3;

    protected byte IVALB;

    protected boolean IWAT10;

    protected boolean IWAT14;

    protected byte IWAT8;

    protected byte IWAT9;

    protected byte IWHO;

    protected byte LANDOSDB1;

    protected byte LANDOSDB2;

    protected byte LANDOSDB3;

    protected int LANDOSDEBT1;

    protected int LANDOSDEBT1_I;

    protected boolean LANDOSDEBT1_IFLAG;

    protected int LANDOSDEBT2;

    protected int LANDOSDEBT2_I;

    protected boolean LANDOSDEBT2_IFLAG;

    protected int LANDOSDEBT3;

    protected int LANDOSDEBT3_I;

    protected boolean LANDOSDEBT3_IFLAG;

    protected int LANDOSVAL1;

    protected int LANDOSVAL1_I;

    protected boolean LANDOSVAL1_IFLAG;

    protected int LANDOSVAL2;

    protected int LANDOSVAL2_I;

    protected boolean LANDOSVAL2_IFLAG;

    protected int LANDOSVAL3;

    protected int LANDOSVAL3_I;

    protected boolean LANDOSVAL3_IFLAG;

    protected byte LANDOSVB1;

    protected byte LANDOSVB2;

    protected byte LANDOSVB3;

    protected byte LANDUKDB1;

    protected boolean LANDUKDB2;

    protected boolean LANDUKDB3;

    protected int LANDUKDEBT1;

    protected int LANDUKDEBT1_I;

    protected boolean LANDUKDEBT1_IFLAG;

    protected int LANDUKDEBT2;

    protected int LANDUKDEBT2_I;

    protected boolean LANDUKDEBT2_IFLAG;

    protected short LANDUKDEBT3;

    protected short LANDUKDEBT3_I;

    protected boolean LANDUKDEBT3_IFLAG;

    protected int LANDUKVAL1;

    protected int LANDUKVAL1_I;

    protected boolean LANDUKVAL1_IFLAG;

    protected int LANDUKVAL2;

    protected int LANDUKVAL2_I;

    protected boolean LANDUKVAL2_IFLAG;

    protected int LANDUKVAL3;

    protected int LANDUKVAL3_I;

    protected boolean LANDUKVAL3_IFLAG;

    protected byte LANDUKVB1;

    protected byte LANDUKVB2;

    protected byte LANDUKVB3;

    protected byte LIVWTH;

    protected double MOLFT3;

    protected double MOLFT4;

    protected double MOLFT5;

    protected double MOOS3;

    protected double MOOS4;

    protected double MOOS5;

    protected short OIGGT;

    protected int OIGOE;

    protected int OIGOE_I;

    protected boolean OIGOE_IFLAG;

    protected int OIGOS;

    protected int OIGOS_I;

    protected boolean OIGOS_IFLAG;

    protected int OIGPP;

    protected int OIGPP_I;

    protected boolean OIGPP_IFLAG;

    protected short OIGRR;

    protected short OINEG;

    protected short OINFR;

    protected short OINGT;

    protected short OINMA;

    protected int OINOE;

    protected short OINOP;

    protected int OINOS;

    protected int OINPP;

    protected int OINRO;

    protected short OINRR;

    protected boolean OPROPDB1;

    protected boolean OPROPDB2;

    protected boolean OPROPDB3;

    protected int OPROPDEBT1;

    protected int OPROPDEBT1_I;

    protected boolean OPROPDEBT1_IFLAG;

    protected short OPROPDEBT2;

    protected short OPROPDEBT2_I;

    protected boolean OPROPDEBT2_IFLAG;

    protected byte OPROPDEBT3;

    protected boolean OPROPDEBT3_I;

    protected boolean OPROPDEBT3_IFLAG;

    protected int OPROPVAL1;

    protected int OPROPVAL1_I;

    protected boolean OPROPVAL1_IFLAG;

    protected int OPROPVAL2;

    protected int OPROPVAL2_I;

    protected boolean OPROPVAL2_IFLAG;

    protected int OPROPVAL3;

    protected int OPROPVAL3_I;

    protected boolean OPROPVAL3_IFLAG;

    protected byte OPROPVB1;

    protected byte OPROPVB2;

    protected boolean OPROPVB3;

    protected boolean OTHERFA;

    protected boolean OTHSHARE;

    protected byte OVERSPA;

    protected byte PEANYO;

    protected byte PECONT;

    protected byte PEMFIN;

    protected byte PEWYNO01;

    protected byte PEWYNO02;

    protected byte PEWYNO03;

    protected byte PEWYNO04;

    protected byte PINCT;

    protected byte PINTRE;

    protected byte PINTRN;

    protected byte PNANYO;

    protected byte PNCONT;

    protected boolean PNSBOND;

    protected byte PNUMSC;

    protected byte PNUMSC_I;

    protected boolean PNUMSC_IFLAG;

    protected boolean PRACCU;

    protected byte PRCRELIG;

    protected byte PSCHY_F;

    protected byte PSCHY_S;

    protected byte PSCHY_T;

    protected int RENTAMT;

    protected short SEAML;

    protected byte SELECTAD_I;

    protected byte SELECTAD_IFLAG;

    protected byte SIC2007D;

    protected byte SOC2010_1DIGIT;

    protected byte SOC2010_2DIGIT;

    protected double SPASAF;

    protected byte SSPART;

    protected byte SSPNO;

    protected byte TRAINEE;

    protected byte TSNUM;

    protected byte TXCRED1;

    protected byte TXCRED2;

    protected int UDEBT;

    protected int UDEBT2;

    protected int UDEBT3;

    protected int UDEBT4;

    protected int UDEBT5;

    protected byte UDEBTB;

    protected byte UDEBTB2;

    protected byte UDEBTB3;

    protected byte UDEBTB4;

    protected byte UDEBTB5;

    protected byte UGDVB;

    protected byte UGDVB2;

    protected byte UGDVB3;

    protected byte UGDVB4;

    protected byte UGDVB5;

    protected boolean UITRUST;

    protected byte ULAND;

    protected byte ULAND2;

    protected byte ULAND3;

    protected byte ULAND4;

    protected byte ULAND5;

    protected boolean UPROP1_IFLAG;

    protected boolean UPROP2_IFLAG;

    protected boolean UPROP3_IFLAG;

    protected boolean UPROP4_IFLAG;

    protected boolean UPRSH10;

    protected byte UPRSH6;

    protected byte UPRSH7;

    protected byte UPRSH8;

    protected byte UPRSH9;

    protected int UVAL;

    protected int UVAL2;

    protected int UVAL3;

    protected int UVAL4;

    protected int UVAL5;

    protected byte UVALB;

    protected byte UVALB2;

    protected byte UVALB3;

    protected byte UVALB4;

    protected byte UVALB5;

    protected byte WHOREATT;

    protected byte WHORECAR;

    protected byte WHOREMOB;

    protected final void initATTALL(String s) {
        if (!s.trim().isEmpty()) {
            ATTALL = Byte.parseByte(s);
        } else {
            ATTALL = Byte.MIN_VALUE;
        }
    }

    protected final void initBACCBEG(String s) {
        if (!s.trim().isEmpty()) {
            BACCBEG = s;
        }
    }

    protected final void initBACCEND(String s) {
        if (!s.trim().isEmpty()) {
            BACCEND = s;
        }
    }

    protected final void initBACCEND2(String s) {
        if (!s.trim().isEmpty()) {
            BACCEND2 = s;
        }
    }

    protected final void initBACCEND3(String s) {
        if (!s.trim().isEmpty()) {
            BACCEND3 = s;
        }
    }

    protected final void initBACCSA(String s) {
        if (!s.trim().isEmpty()) {
            BACCSA = Byte.parseByte(s);
        } else {
            BACCSA = Byte.MIN_VALUE;
        }
    }

    protected final void initBACCSB(String s) {
        if (!s.trim().isEmpty()) {
            BACCSB = Byte.parseByte(s);
        } else {
            BACCSB = Byte.MIN_VALUE;
        }
    }

    protected final void initBAMT(String s) {
        if (!s.trim().isEmpty()) {
            BAMT = Double.parseDouble(s);
        } else {
            BAMT = Double.NaN;
        }
    }

    protected final void initBAMT10(String s) {
        if (!s.trim().isEmpty()) {
            BAMT10 = Double.parseDouble(s);
        } else {
            BAMT10 = Double.NaN;
        }
    }

    protected final void initBAMT11(String s) {
        if (!s.trim().isEmpty()) {
            BAMT11 = Double.parseDouble(s);
        } else {
            BAMT11 = Double.NaN;
        }
    }

    protected final void initBAMT12(String s) {
        if (!s.trim().isEmpty()) {
            BAMT12 = Double.parseDouble(s);
        } else {
            BAMT12 = Double.NaN;
        }
    }

    protected final void initBAMT13(String s) {
        if (!s.trim().isEmpty()) {
            BAMT13 = Double.parseDouble(s);
        } else {
            BAMT13 = Double.NaN;
        }
    }

    protected final void initBAMT14(String s) {
        if (!s.trim().isEmpty()) {
            BAMT14 = Double.parseDouble(s);
        } else {
            BAMT14 = Double.NaN;
        }
    }

    protected final void initBAMT15(String s) {
        if (!s.trim().isEmpty()) {
            BAMT15 = Double.parseDouble(s);
        } else {
            BAMT15 = Double.NaN;
        }
    }

    protected final void initBAMT16(String s) {
        if (!s.trim().isEmpty()) {
            BAMT16 = Double.parseDouble(s);
        } else {
            BAMT16 = Double.NaN;
        }
    }

    protected final void initBAMT17(String s) {
        if (!s.trim().isEmpty()) {
            BAMT17 = Double.parseDouble(s);
        } else {
            BAMT17 = Double.NaN;
        }
    }

    protected final void initBAMT18(String s) {
        if (!s.trim().isEmpty()) {
            BAMT18 = Double.parseDouble(s);
        } else {
            BAMT18 = Double.NaN;
        }
    }

    protected final void initBAMT2(String s) {
        if (!s.trim().isEmpty()) {
            BAMT2 = Double.parseDouble(s);
        } else {
            BAMT2 = Double.NaN;
        }
    }

    protected final void initBAMT3(String s) {
        if (!s.trim().isEmpty()) {
            BAMT3 = Double.parseDouble(s);
        } else {
            BAMT3 = Double.NaN;
        }
    }

    protected final void initBAMT4(String s) {
        if (!s.trim().isEmpty()) {
            BAMT4 = Double.parseDouble(s);
        } else {
            BAMT4 = Double.NaN;
        }
    }

    protected final void initBAMT5(String s) {
        if (!s.trim().isEmpty()) {
            BAMT5 = Double.parseDouble(s);
        } else {
            BAMT5 = Double.NaN;
        }
    }

    protected final void initBAMT6(String s) {
        if (!s.trim().isEmpty()) {
            BAMT6 = Double.parseDouble(s);
        } else {
            BAMT6 = Double.NaN;
        }
    }

    protected final void initBAMT7(String s) {
        if (!s.trim().isEmpty()) {
            BAMT7 = Double.parseDouble(s);
        } else {
            BAMT7 = Double.NaN;
        }
    }

    protected final void initBAMT8(String s) {
        if (!s.trim().isEmpty()) {
            BAMT8 = Double.parseDouble(s);
        } else {
            BAMT8 = Double.NaN;
        }
    }

    protected final void initBAMT9(String s) {
        if (!s.trim().isEmpty()) {
            BAMT9 = Double.parseDouble(s);
        } else {
            BAMT9 = Double.NaN;
        }
    }

    protected final void initBAMTDK(String s) {
        if (!s.trim().isEmpty()) {
            BAMTDK = Byte.parseByte(s);
        } else {
            BAMTDK = Byte.MIN_VALUE;
        }
    }

    protected final void initBAMTDK10(String s) {
        if (!s.trim().isEmpty()) {
            BAMTDK10 = Byte.parseByte(s);
        } else {
            BAMTDK10 = Byte.MIN_VALUE;
        }
    }

    protected final void initBAMTDK11(String s) {
        if (!s.trim().isEmpty()) {
            BAMTDK11 = Byte.parseByte(s);
        } else {
            BAMTDK11 = Byte.MIN_VALUE;
        }
    }

    protected final void initBAMTDK12(String s) {
        if (!s.trim().isEmpty()) {
            BAMTDK12 = Byte.parseByte(s);
        } else {
            BAMTDK12 = Byte.MIN_VALUE;
        }
    }

    protected final void initBAMTDK13(String s) {
        if (!s.trim().isEmpty()) {
            BAMTDK13 = Byte.parseByte(s);
        } else {
            BAMTDK13 = Byte.MIN_VALUE;
        }
    }

    protected final void initBAMTDK14(String s) {
        if (!s.trim().isEmpty()) {
            BAMTDK14 = Byte.parseByte(s);
        } else {
            BAMTDK14 = Byte.MIN_VALUE;
        }
    }

    protected final void initBAMTDK15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            BAMTDK15 = false;
        }
    }

    protected final void initBAMTDK16(String s) {
        if (!s.trim().isEmpty()) {
            BAMTDK16 = Byte.parseByte(s);
        } else {
            BAMTDK16 = Byte.MIN_VALUE;
        }
    }

    protected final void initBAMTDK17(String s) {
        if (!s.trim().isEmpty()) {
            BAMTDK17 = Byte.parseByte(s);
        } else {
            BAMTDK17 = Byte.MIN_VALUE;
        }
    }

    protected final void initBAMTDK18(String s) {
        if (!s.trim().isEmpty()) {
            BAMTDK18 = Byte.parseByte(s);
        } else {
            BAMTDK18 = Byte.MIN_VALUE;
        }
    }

    protected final void initBAMTDK2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            BAMTDK2 = false;
        }
    }

    protected final void initBAMTDK3(String s) {
        if (!s.trim().isEmpty()) {
            BAMTDK3 = Byte.parseByte(s);
        } else {
            BAMTDK3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBAMTDK4(String s) {
        if (!s.trim().isEmpty()) {
            BAMTDK4 = Byte.parseByte(s);
        } else {
            BAMTDK4 = Byte.MIN_VALUE;
        }
    }

    protected final void initBAMTDK5(String s) {
        if (!s.trim().isEmpty()) {
            BAMTDK5 = Byte.parseByte(s);
        } else {
            BAMTDK5 = Byte.MIN_VALUE;
        }
    }

    protected final void initBAMTDK6(String s) {
        if (!s.trim().isEmpty()) {
            BAMTDK6 = Byte.parseByte(s);
        } else {
            BAMTDK6 = Byte.MIN_VALUE;
        }
    }

    protected final void initBAMTDK7(String s) {
        if (!s.trim().isEmpty()) {
            BAMTDK7 = Byte.parseByte(s);
        } else {
            BAMTDK7 = Byte.MIN_VALUE;
        }
    }

    protected final void initBAMTDK8(String s) {
        if (!s.trim().isEmpty()) {
            BAMTDK8 = Byte.parseByte(s);
        } else {
            BAMTDK8 = Byte.MIN_VALUE;
        }
    }

    protected final void initBAMTDK9(String s) {
        if (!s.trim().isEmpty()) {
            BAMTDK9 = Byte.parseByte(s);
        } else {
            BAMTDK9 = Byte.MIN_VALUE;
        }
    }

    protected final void initBBEFORE(String s) {
        if (!s.trim().isEmpty()) {
            BBEFORE = Integer.parseInt(s);
        } else {
            BBEFORE = Integer.MIN_VALUE;
        }
    }

    protected final void initBDEBTS(String s) {
        if (!s.trim().isEmpty()) {
            BDEBTS = Integer.parseInt(s);
        } else {
            BDEBTS = Integer.MIN_VALUE;
        }
    }

    protected final void initBDIRNI(String s) {
        if (!s.trim().isEmpty()) {
            BDIRNI = Byte.parseByte(s);
        } else {
            BDIRNI = Byte.MIN_VALUE;
        }
    }

    protected final void initBDOCS(String s) {
        if (!s.trim().isEmpty()) {
            BDOCS = Byte.parseByte(s);
        } else {
            BDOCS = Byte.MIN_VALUE;
        }
    }

    protected final void initBEMPN(String s) {
        if (!s.trim().isEmpty()) {
            BEMPN = Byte.parseByte(s);
        } else {
            BEMPN = Byte.MIN_VALUE;
        }
    }

    protected final void initBEN1Q1(String s) {
        if (!s.trim().isEmpty()) {
            BEN1Q1 = Byte.parseByte(s);
        } else {
            BEN1Q1 = Byte.MIN_VALUE;
        }
    }

    protected final void initBEN1Q2(String s) {
        if (!s.trim().isEmpty()) {
            BEN1Q2 = Byte.parseByte(s);
        } else {
            BEN1Q2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBEN1Q3(String s) {
        if (!s.trim().isEmpty()) {
            BEN1Q3 = Byte.parseByte(s);
        } else {
            BEN1Q3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBEN2Q1(String s) {
        if (!s.trim().isEmpty()) {
            BEN2Q1 = Byte.parseByte(s);
        } else {
            BEN2Q1 = Byte.MIN_VALUE;
        }
    }

    protected final void initBEN2Q2(String s) {
        if (!s.trim().isEmpty()) {
            BEN2Q2 = Byte.parseByte(s);
        } else {
            BEN2Q2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBEN2Q3(String s) {
        if (!s.trim().isEmpty()) {
            BEN2Q3 = Byte.parseByte(s);
        } else {
            BEN2Q3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBFUND18(String s) {
        if (!s.trim().isEmpty()) {
            BFUND18 = Byte.parseByte(s);
        } else {
            BFUND18 = Byte.MIN_VALUE;
        }
    }

    protected final void initBFUND3(String s) {
        if (!s.trim().isEmpty()) {
            BFUND3 = Byte.parseByte(s);
        } else {
            BFUND3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBFUND4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            BFUND4 = false;
        }
    }

    protected final void initBNATINS(String s) {
        if (!s.trim().isEmpty()) {
            BNATINS = Byte.parseByte(s);
        } else {
            BNATINS = Byte.MIN_VALUE;
        }
    }

    protected final void initBONAMT(String s) {
        if (!s.trim().isEmpty()) {
            BONAMT = Integer.parseInt(s);
        } else {
            BONAMT = Integer.MIN_VALUE;
        }
    }

    protected final void initBOWED(String s) {
        if (!s.trim().isEmpty()) {
            BOWED = Integer.parseInt(s);
        } else {
            BOWED = Integer.MIN_VALUE;
        }
    }

    protected final void initBOWN(String s) {
        if (!s.trim().isEmpty()) {
            BOWN = Byte.parseByte(s);
        } else {
            BOWN = Byte.MIN_VALUE;
        }
    }

    protected final void initBPART(String s) {
        if (!s.trim().isEmpty()) {
            BPART = Byte.parseByte(s);
        } else {
            BPART = Byte.MIN_VALUE;
        }
    }

    protected final void initBPD(String s) {
        if (!s.trim().isEmpty()) {
            BPD = Byte.parseByte(s);
        } else {
            BPD = Byte.MIN_VALUE;
        }
    }

    protected final void initBPD10(String s) {
        if (!s.trim().isEmpty()) {
            BPD10 = Byte.parseByte(s);
        } else {
            BPD10 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPD11(String s) {
        if (!s.trim().isEmpty()) {
            BPD11 = Byte.parseByte(s);
        } else {
            BPD11 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPD12(String s) {
        if (!s.trim().isEmpty()) {
            BPD12 = Byte.parseByte(s);
        } else {
            BPD12 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPD13(String s) {
        if (!s.trim().isEmpty()) {
            BPD13 = Byte.parseByte(s);
        } else {
            BPD13 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPD14(String s) {
        if (!s.trim().isEmpty()) {
            BPD14 = Byte.parseByte(s);
        } else {
            BPD14 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPD15(String s) {
        if (!s.trim().isEmpty()) {
            BPD15 = Byte.parseByte(s);
        } else {
            BPD15 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPD16(String s) {
        if (!s.trim().isEmpty()) {
            BPD16 = Byte.parseByte(s);
        } else {
            BPD16 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPD17(String s) {
        if (!s.trim().isEmpty()) {
            BPD17 = Byte.parseByte(s);
        } else {
            BPD17 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPD18(String s) {
        if (!s.trim().isEmpty()) {
            BPD18 = Byte.parseByte(s);
        } else {
            BPD18 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPD2(String s) {
        if (!s.trim().isEmpty()) {
            BPD2 = Byte.parseByte(s);
        } else {
            BPD2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPD3(String s) {
        if (!s.trim().isEmpty()) {
            BPD3 = Byte.parseByte(s);
        } else {
            BPD3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPD4(String s) {
        if (!s.trim().isEmpty()) {
            BPD4 = Byte.parseByte(s);
        } else {
            BPD4 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPD5(String s) {
        if (!s.trim().isEmpty()) {
            BPD5 = Byte.parseByte(s);
        } else {
            BPD5 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPD6(String s) {
        if (!s.trim().isEmpty()) {
            BPD6 = Byte.parseByte(s);
        } else {
            BPD6 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPD7(String s) {
        if (!s.trim().isEmpty()) {
            BPD7 = Byte.parseByte(s);
        } else {
            BPD7 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPD8(String s) {
        if (!s.trim().isEmpty()) {
            BPD8 = Byte.parseByte(s);
        } else {
            BPD8 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPD9(String s) {
        if (!s.trim().isEmpty()) {
            BPD9 = Byte.parseByte(s);
        } else {
            BPD9 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPRFLOSS(String s) {
        if (!s.trim().isEmpty()) {
            BPRFLOSS = Byte.parseByte(s);
        } else {
            BPRFLOSS = Byte.MIN_VALUE;
        }
    }

    protected final void initBPROFIT(String s) {
        if (!s.trim().isEmpty()) {
            BPROFIT = Integer.parseInt(s);
        } else {
            BPROFIT = Integer.MIN_VALUE;
        }
    }

    protected final void initBPROPN(String s) {
        if (!s.trim().isEmpty()) {
            BPROPN = Byte.parseByte(s);
        } else {
            BPROPN = Byte.MIN_VALUE;
        }
    }

    protected final void initBRETIRE(String s) {
        if (!s.trim().isEmpty()) {
            BRETIRE = Byte.parseByte(s);
        } else {
            BRETIRE = Byte.MIN_VALUE;
        }
    }

    protected final void initBSIZE(String s) {
        if (!s.trim().isEmpty()) {
            BSIZE = Byte.parseByte(s);
        } else {
            BSIZE = Byte.MIN_VALUE;
        }
    }

    protected final void initBSTART(String s) {
        if (!s.trim().isEmpty()) {
            BSTART = Byte.parseByte(s);
        } else {
            BSTART = Byte.MIN_VALUE;
        }
    }

    protected final void initBTAX(String s) {
        if (!s.trim().isEmpty()) {
            BTAX = Byte.parseByte(s);
        } else {
            BTAX = Byte.MIN_VALUE;
        }
    }

    protected final void initBTYPE(String s) {
        if (!s.trim().isEmpty()) {
            BTYPE = Byte.parseByte(s);
        } else {
            BTYPE = Byte.MIN_VALUE;
        }
    }

    protected final void initBUILDDB1(String s) {
        if (!s.trim().isEmpty()) {
            BUILDDB1 = Byte.parseByte(s);
        } else {
            BUILDDB1 = Byte.MIN_VALUE;
        }
    }

    protected final void initBUILDDB2(String s) {
        if (!s.trim().isEmpty()) {
            BUILDDB2 = Byte.parseByte(s);
        } else {
            BUILDDB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBUILDDB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            BUILDDB3 = false;
        }
    }

    protected final void initBUILDDEBT1(String s) {
        if (!s.trim().isEmpty()) {
            BUILDDEBT1 = Integer.parseInt(s);
        } else {
            BUILDDEBT1 = Integer.MIN_VALUE;
        }
    }

    protected final void initBUILDDEBT1_I(String s) {
        if (!s.trim().isEmpty()) {
            BUILDDEBT1_I = Integer.parseInt(s);
        } else {
            BUILDDEBT1_I = Integer.MIN_VALUE;
        }
    }

    protected final void initBUILDDEBT1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            BUILDDEBT1_IFLAG = false;
        }
    }

    protected final void initBUILDDEBT2(String s) {
        if (!s.trim().isEmpty()) {
            BUILDDEBT2 = Integer.parseInt(s);
        } else {
            BUILDDEBT2 = Integer.MIN_VALUE;
        }
    }

    protected final void initBUILDDEBT2_I(String s) {
        if (!s.trim().isEmpty()) {
            BUILDDEBT2_I = Integer.parseInt(s);
        } else {
            BUILDDEBT2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initBUILDDEBT2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            BUILDDEBT2_IFLAG = false;
        }
    }

    protected final void initBUILDDEBT3(String s) {
        if (!s.trim().isEmpty()) {
            BUILDDEBT3 = Integer.parseInt(s);
        } else {
            BUILDDEBT3 = Integer.MIN_VALUE;
        }
    }

    protected final void initBUILDDEBT3_I(String s) {
        if (!s.trim().isEmpty()) {
            BUILDDEBT3_I = Integer.parseInt(s);
        } else {
            BUILDDEBT3_I = Integer.MIN_VALUE;
        }
    }

    protected final void initBUILDDEBT3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            BUILDDEBT3_IFLAG = false;
        }
    }

    protected final void initBUILDVAL1(String s) {
        if (!s.trim().isEmpty()) {
            BUILDVAL1 = Integer.parseInt(s);
        } else {
            BUILDVAL1 = Integer.MIN_VALUE;
        }
    }

    protected final void initBUILDVAL1_I(String s) {
        if (!s.trim().isEmpty()) {
            BUILDVAL1_I = Integer.parseInt(s);
        } else {
            BUILDVAL1_I = Integer.MIN_VALUE;
        }
    }

    protected final void initBUILDVAL1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            BUILDVAL1_IFLAG = false;
        }
    }

    protected final void initBUILDVAL2(String s) {
        if (!s.trim().isEmpty()) {
            BUILDVAL2 = Integer.parseInt(s);
        } else {
            BUILDVAL2 = Integer.MIN_VALUE;
        }
    }

    protected final void initBUILDVAL2_I(String s) {
        if (!s.trim().isEmpty()) {
            BUILDVAL2_I = Integer.parseInt(s);
        } else {
            BUILDVAL2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initBUILDVAL2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            BUILDVAL2_IFLAG = false;
        }
    }

    protected final void initBUILDVAL3(String s) {
        if (!s.trim().isEmpty()) {
            BUILDVAL3 = Integer.parseInt(s);
        } else {
            BUILDVAL3 = Integer.MIN_VALUE;
        }
    }

    protected final void initBUILDVAL3_I(String s) {
        if (!s.trim().isEmpty()) {
            BUILDVAL3_I = Integer.parseInt(s);
        } else {
            BUILDVAL3_I = Integer.MIN_VALUE;
        }
    }

    protected final void initBUILDVAL3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            BUILDVAL3_IFLAG = false;
        }
    }

    protected final void initBUILDVB1(String s) {
        if (!s.trim().isEmpty()) {
            BUILDVB1 = Byte.parseByte(s);
        } else {
            BUILDVB1 = Byte.MIN_VALUE;
        }
    }

    protected final void initBUILDVB2(String s) {
        if (!s.trim().isEmpty()) {
            BUILDVB2 = Byte.parseByte(s);
        } else {
            BUILDVB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBUILDVB3(String s) {
        if (!s.trim().isEmpty()) {
            BUILDVB3 = Byte.parseByte(s);
        } else {
            BUILDVB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBVAL(String s) {
        if (!s.trim().isEmpty()) {
            BVAL = Integer.parseInt(s);
        } else {
            BVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initBVALB(String s) {
        if (!s.trim().isEmpty()) {
            BVALB = Byte.parseByte(s);
        } else {
            BVALB = Byte.MIN_VALUE;
        }
    }

    protected final void initBVALQ(String s) {
        if (!s.trim().isEmpty()) {
            BVALQ = Byte.parseByte(s);
        } else {
            BVALQ = Byte.MIN_VALUE;
        }
    }

    protected final void initBVALQ2(String s) {
        if (!s.trim().isEmpty()) {
            BVALQ2 = Byte.parseByte(s);
        } else {
            BVALQ2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBVALQ3(String s) {
        if (!s.trim().isEmpty()) {
            BVALQ3 = Byte.parseByte(s);
        } else {
            BVALQ3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBVALWH1(String s) {
        if (!s.trim().isEmpty()) {
            BVALWH1 = Byte.parseByte(s);
        } else {
            BVALWH1 = Byte.MIN_VALUE;
        }
    }

    protected final void initBVALWH10(String s) {
        if (!s.trim().isEmpty()) {
            BVALWH10 = Byte.parseByte(s);
        } else {
            BVALWH10 = Byte.MIN_VALUE;
        }
    }

    protected final void initBVALWH13(String s) {
        if (!s.trim().isEmpty()) {
            BVALWH13 = Byte.parseByte(s);
        } else {
            BVALWH13 = Byte.MIN_VALUE;
        }
    }

    protected final void initBVALWH14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            BVALWH14 = false;
        }
    }

    protected final void initBVALWH2(String s) {
        if (!s.trim().isEmpty()) {
            BVALWH2 = Byte.parseByte(s);
        } else {
            BVALWH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBVALWH3(String s) {
        if (!s.trim().isEmpty()) {
            BVALWH3 = Byte.parseByte(s);
        } else {
            BVALWH3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBVALWH7(String s) {
        if (!s.trim().isEmpty()) {
            BVALWH7 = Byte.parseByte(s);
        } else {
            BVALWH7 = Byte.MIN_VALUE;
        }
    }

    protected final void initBVALWH8(String s) {
        if (!s.trim().isEmpty()) {
            BVALWH8 = Byte.parseByte(s);
        } else {
            BVALWH8 = Byte.MIN_VALUE;
        }
    }

    protected final void initBVALWH9(String s) {
        if (!s.trim().isEmpty()) {
            BVALWH9 = Byte.parseByte(s);
        } else {
            BVALWH9 = Byte.MIN_VALUE;
        }
    }

    protected final void initBYEAR(String s) {
        if (!s.trim().isEmpty()) {
            BYEAR = Short.parseShort(s);
        } else {
            BYEAR = Short.MIN_VALUE;
        }
    }

    protected final void initCARER1Q(String s) {
        if (!s.trim().isEmpty()) {
            CARER1Q = Byte.parseByte(s);
        } else {
            CARER1Q = Byte.MIN_VALUE;
        }
    }

    protected final void initCHECKCC(String s) {
        if (!s.trim().isEmpty()) {
            CHECKCC = Byte.parseByte(s);
        } else {
            CHECKCC = Byte.MIN_VALUE;
        }
    }

    protected final void initCHECKDL(String s) {
        if (!s.trim().isEmpty()) {
            CHECKDL = Byte.parseByte(s);
        } else {
            CHECKDL = Byte.MIN_VALUE;
        }
    }

    protected final void initCHECKHB(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            CHECKHB = false;
        }
    }

    protected final void initCHECKHP(String s) {
        if (!s.trim().isEmpty()) {
            CHECKHP = Byte.parseByte(s);
        } else {
            CHECKHP = Byte.MIN_VALUE;
        }
    }

    protected final void initCHECKMO(String s) {
        if (!s.trim().isEmpty()) {
            CHECKMO = Byte.parseByte(s);
        } else {
            CHECKMO = Byte.MIN_VALUE;
        }
    }

    protected final void initCHECKST(String s) {
        if (!s.trim().isEmpty()) {
            CHECKST = Byte.parseByte(s);
        } else {
            CHECKST = Byte.MIN_VALUE;
        }
    }

    protected final void initCOMMIT1(String s) {
        if (!s.trim().isEmpty()) {
            COMMIT1 = Byte.parseByte(s);
        } else {
            COMMIT1 = Byte.MIN_VALUE;
        }
    }

    protected final void initCOMMIT2(String s) {
        if (!s.trim().isEmpty()) {
            COMMIT2 = Byte.parseByte(s);
        } else {
            COMMIT2 = Byte.MIN_VALUE;
        }
    }

    protected final void initCOMMIT3(String s) {
        if (!s.trim().isEmpty()) {
            COMMIT3 = Byte.parseByte(s);
        } else {
            COMMIT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initCOMMIT4(String s) {
        if (!s.trim().isEmpty()) {
            COMMIT4 = Byte.parseByte(s);
        } else {
            COMMIT4 = Byte.MIN_VALUE;
        }
    }

    protected final void initCOMMIT5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            COMMIT5 = false;
        }
    }

    protected final void initDBURDH(String s) {
        if (!s.trim().isEmpty()) {
            DBURDH = Byte.parseByte(s);
        } else {
            DBURDH = Byte.MIN_VALUE;
        }
    }

    protected final void initDBURDW3(String s) {
        if (!s.trim().isEmpty()) {
            DBURDW3 = Byte.parseByte(s);
        } else {
            DBURDW3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDBURDW4(String s) {
        if (!s.trim().isEmpty()) {
            DBURDW4 = Byte.parseByte(s);
        } else {
            DBURDW4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDBURDW5(String s) {
        if (!s.trim().isEmpty()) {
            DBURDW5 = Byte.parseByte(s);
        } else {
            DBURDW5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDBURDW6(String s) {
        if (!s.trim().isEmpty()) {
            DBURDW6 = Byte.parseByte(s);
        } else {
            DBURDW6 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCAMC(String s) {
        if (!s.trim().isEmpty()) {
            DCAMC = Integer.parseInt(s);
        } else {
            DCAMC = Integer.MIN_VALUE;
        }
    }

    protected final void initDCAMC2_I(String s) {
        if (!s.trim().isEmpty()) {
            DCAMC2_I = Integer.parseInt(s);
        } else {
            DCAMC2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initDCAMC2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCAMC2_IFLAG = Byte.parseByte(s);
        } else {
            DCAMC2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCAMC3_I(String s) {
        if (!s.trim().isEmpty()) {
            DCAMC3_I = Integer.parseInt(s);
        } else {
            DCAMC3_I = Integer.MIN_VALUE;
        }
    }

    protected final void initDCAMC3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCAMC3_IFLAG = Byte.parseByte(s);
        } else {
            DCAMC3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCAMC4(String s) {
        if (!s.trim().isEmpty()) {
            DCAMC4 = Integer.parseInt(s);
        } else {
            DCAMC4 = Integer.MIN_VALUE;
        }
    }

    protected final void initDCAMC4_I(String s) {
        if (!s.trim().isEmpty()) {
            DCAMC4_I = Integer.parseInt(s);
        } else {
            DCAMC4_I = Integer.MIN_VALUE;
        }
    }

    protected final void initDCAMC4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCAMC4_IFLAG = Byte.parseByte(s);
        } else {
            DCAMC4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCAMC5(String s) {
        if (!s.trim().isEmpty()) {
            DCAMC5 = Short.parseShort(s);
        } else {
            DCAMC5 = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMC5_I(String s) {
        if (!s.trim().isEmpty()) {
            DCAMC5_I = Short.parseShort(s);
        } else {
            DCAMC5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMC5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCAMC5_IFLAG = Byte.parseByte(s);
        } else {
            DCAMC5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCAMC_I(String s) {
        if (!s.trim().isEmpty()) {
            DCAMC_I = Integer.parseInt(s);
        } else {
            DCAMC_I = Integer.MIN_VALUE;
        }
    }

    protected final void initDCAMC_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCAMC_IFLAG = Byte.parseByte(s);
        } else {
            DCAMC_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCAMD(String s) {
        if (!s.trim().isEmpty()) {
            DCAMD = Short.parseShort(s);
        } else {
            DCAMD = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMD2_I(String s) {
        if (!s.trim().isEmpty()) {
            DCAMD2_I = Short.parseShort(s);
        } else {
            DCAMD2_I = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMD2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCAMD2_IFLAG = Byte.parseByte(s);
        } else {
            DCAMD2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCAMD3_I(String s) {
        if (!s.trim().isEmpty()) {
            DCAMD3_I = Short.parseShort(s);
        } else {
            DCAMD3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMD3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCAMD3_IFLAG = Byte.parseByte(s);
        } else {
            DCAMD3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCAMD4(String s) {
        if (!s.trim().isEmpty()) {
            DCAMD4 = Short.parseShort(s);
        } else {
            DCAMD4 = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMD4_I(String s) {
        if (!s.trim().isEmpty()) {
            DCAMD4_I = Short.parseShort(s);
        } else {
            DCAMD4_I = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMD4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCAMD4_IFLAG = Byte.parseByte(s);
        } else {
            DCAMD4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCAMD5(String s) {
        if (!s.trim().isEmpty()) {
            DCAMD5 = Short.parseShort(s);
        } else {
            DCAMD5 = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMD5_I(String s) {
        if (!s.trim().isEmpty()) {
            DCAMD5_I = Short.parseShort(s);
        } else {
            DCAMD5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMD5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DCAMD5_IFLAG = false;
        }
    }

    protected final void initDCAMD_I(String s) {
        if (!s.trim().isEmpty()) {
            DCAMD_I = Short.parseShort(s);
        } else {
            DCAMD_I = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMD_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCAMD_IFLAG = Byte.parseByte(s);
        } else {
            DCAMD_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCAMOS(String s) {
        if (!s.trim().isEmpty()) {
            DCAMOS = Integer.parseInt(s);
        } else {
            DCAMOS = Integer.MIN_VALUE;
        }
    }

    protected final void initDCAMOS4(String s) {
        if (!s.trim().isEmpty()) {
            DCAMOS4 = Integer.parseInt(s);
        } else {
            DCAMOS4 = Integer.MIN_VALUE;
        }
    }

    protected final void initDCAMOS5(String s) {
        if (!s.trim().isEmpty()) {
            DCAMOS5 = Short.parseShort(s);
        } else {
            DCAMOS5 = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMP(String s) {
        if (!s.trim().isEmpty()) {
            DCAMP = Short.parseShort(s);
        } else {
            DCAMP = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMP2_I(String s) {
        if (!s.trim().isEmpty()) {
            DCAMP2_I = Short.parseShort(s);
        } else {
            DCAMP2_I = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMP2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCAMP2_IFLAG = Byte.parseByte(s);
        } else {
            DCAMP2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCAMP3_I(String s) {
        if (!s.trim().isEmpty()) {
            DCAMP3_I = Short.parseShort(s);
        } else {
            DCAMP3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMP3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCAMP3_IFLAG = Byte.parseByte(s);
        } else {
            DCAMP3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCAMP4(String s) {
        if (!s.trim().isEmpty()) {
            DCAMP4 = Short.parseShort(s);
        } else {
            DCAMP4 = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMP4_I(String s) {
        if (!s.trim().isEmpty()) {
            DCAMP4_I = Short.parseShort(s);
        } else {
            DCAMP4_I = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMP4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCAMP4_IFLAG = Byte.parseByte(s);
        } else {
            DCAMP4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCAMP5(String s) {
        if (!s.trim().isEmpty()) {
            DCAMP5 = Short.parseShort(s);
        } else {
            DCAMP5 = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMP5_I(String s) {
        if (!s.trim().isEmpty()) {
            DCAMP5_I = Short.parseShort(s);
        } else {
            DCAMP5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMP5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCAMP5_IFLAG = Byte.parseByte(s);
        } else {
            DCAMP5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCAMP_I(String s) {
        if (!s.trim().isEmpty()) {
            DCAMP_I = Short.parseShort(s);
        } else {
            DCAMP_I = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMP_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCAMP_IFLAG = Byte.parseByte(s);
        } else {
            DCAMP_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCANU_I(String s) {
        if (!s.trim().isEmpty()) {
            DCANU_I = Byte.parseByte(s);
        } else {
            DCANU_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCANU_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCANU_IFLAG = Byte.parseByte(s);
        } else {
            DCANU_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCANY_I(String s) {
        if (!s.trim().isEmpty()) {
            DCANY_I = Byte.parseByte(s);
        } else {
            DCANY_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCANY_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCANY_IFLAG = Byte.parseByte(s);
        } else {
            DCANY_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCINTR(String s) {
        if (!s.trim().isEmpty()) {
            DCCINTR = Byte.parseByte(s);
        } else {
            DCCINTR = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCOS(String s) {
        if (!s.trim().isEmpty()) {
            DCCOS = Byte.parseByte(s);
        } else {
            DCCOS = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCOS2_I(String s) {
        if (!s.trim().isEmpty()) {
            DCCOS2_I = Byte.parseByte(s);
        } else {
            DCCOS2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCOS2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCCOS2_IFLAG = Byte.parseByte(s);
        } else {
            DCCOS2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCOS3_I(String s) {
        if (!s.trim().isEmpty()) {
            DCCOS3_I = Byte.parseByte(s);
        } else {
            DCCOS3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCOS3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCCOS3_IFLAG = Byte.parseByte(s);
        } else {
            DCCOS3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCOS4(String s) {
        if (!s.trim().isEmpty()) {
            DCCOS4 = Byte.parseByte(s);
        } else {
            DCCOS4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCOS4_I(String s) {
        if (!s.trim().isEmpty()) {
            DCCOS4_I = Byte.parseByte(s);
        } else {
            DCCOS4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCOS4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCCOS4_IFLAG = Byte.parseByte(s);
        } else {
            DCCOS4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCOS5(String s) {
        if (!s.trim().isEmpty()) {
            DCCOS5 = Byte.parseByte(s);
        } else {
            DCCOS5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCOS5_I(String s) {
        if (!s.trim().isEmpty()) {
            DCCOS5_I = Byte.parseByte(s);
        } else {
            DCCOS5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCOS5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCCOS5_IFLAG = Byte.parseByte(s);
        } else {
            DCCOS5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCOS_I(String s) {
        if (!s.trim().isEmpty()) {
            DCCOS_I = Byte.parseByte(s);
        } else {
            DCCOS_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCOS_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCCOS_IFLAG = Byte.parseByte(s);
        } else {
            DCCOS_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCSP(String s) {
        if (!s.trim().isEmpty()) {
            DCCSP = Byte.parseByte(s);
        } else {
            DCCSP = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCSP2_I(String s) {
        if (!s.trim().isEmpty()) {
            DCCSP2_I = Byte.parseByte(s);
        } else {
            DCCSP2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCSP2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCCSP2_IFLAG = Byte.parseByte(s);
        } else {
            DCCSP2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCSP3_I(String s) {
        if (!s.trim().isEmpty()) {
            DCCSP3_I = Byte.parseByte(s);
        } else {
            DCCSP3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCSP3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCCSP3_IFLAG = Byte.parseByte(s);
        } else {
            DCCSP3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCSP4(String s) {
        if (!s.trim().isEmpty()) {
            DCCSP4 = Byte.parseByte(s);
        } else {
            DCCSP4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCSP4_I(String s) {
        if (!s.trim().isEmpty()) {
            DCCSP4_I = Byte.parseByte(s);
        } else {
            DCCSP4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCSP4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DCCSP4_IFLAG = false;
        }
    }

    protected final void initDCCSP5(String s) {
        if (!s.trim().isEmpty()) {
            DCCSP5 = Byte.parseByte(s);
        } else {
            DCCSP5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCSP5_I(String s) {
        if (!s.trim().isEmpty()) {
            DCCSP5_I = Byte.parseByte(s);
        } else {
            DCCSP5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCSP5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DCCSP5_IFLAG = false;
        }
    }

    protected final void initDCCSP_I(String s) {
        if (!s.trim().isEmpty()) {
            DCCSP_I = Byte.parseByte(s);
        } else {
            DCCSP_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCSP_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCCSP_IFLAG = Byte.parseByte(s);
        } else {
            DCCSP_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCESB(String s) {
        if (!s.trim().isEmpty()) {
            DCESB = Byte.parseByte(s);
        } else {
            DCESB = Byte.MIN_VALUE;
        }
    }

    protected final void initDCESB4(String s) {
        if (!s.trim().isEmpty()) {
            DCESB4 = Byte.parseByte(s);
        } else {
            DCESB4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCESB5(String s) {
        if (!s.trim().isEmpty()) {
            DCESB5 = Byte.parseByte(s);
        } else {
            DCESB5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCINZ(String s) {
        if (!s.trim().isEmpty()) {
            DCINZ = Byte.parseByte(s);
        } else {
            DCINZ = Byte.MIN_VALUE;
        }
    }

    protected final void initDCINZ4(String s) {
        if (!s.trim().isEmpty()) {
            DCINZ4 = Byte.parseByte(s);
        } else {
            DCINZ4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCINZ5(String s) {
        if (!s.trim().isEmpty()) {
            DCINZ5 = Byte.parseByte(s);
        } else {
            DCINZ5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNAM(String s) {
        if (!s.trim().isEmpty()) {
            DCNAM = Byte.parseByte(s);
        } else {
            DCNAM = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNAM2_I(String s) {
        if (!s.trim().isEmpty()) {
            DCNAM2_I = Byte.parseByte(s);
        } else {
            DCNAM2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNAM2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCNAM2_IFLAG = Byte.parseByte(s);
        } else {
            DCNAM2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNAM3_I(String s) {
        if (!s.trim().isEmpty()) {
            DCNAM3_I = Byte.parseByte(s);
        } else {
            DCNAM3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNAM3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCNAM3_IFLAG = Byte.parseByte(s);
        } else {
            DCNAM3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNAM4(String s) {
        if (!s.trim().isEmpty()) {
            DCNAM4 = Byte.parseByte(s);
        } else {
            DCNAM4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNAM4_I(String s) {
        if (!s.trim().isEmpty()) {
            DCNAM4_I = Byte.parseByte(s);
        } else {
            DCNAM4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNAM4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCNAM4_IFLAG = Byte.parseByte(s);
        } else {
            DCNAM4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNAM5(String s) {
        if (!s.trim().isEmpty()) {
            DCNAM5 = Byte.parseByte(s);
        } else {
            DCNAM5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNAM5_I(String s) {
        if (!s.trim().isEmpty()) {
            DCNAM5_I = Byte.parseByte(s);
        } else {
            DCNAM5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNAM5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCNAM5_IFLAG = Byte.parseByte(s);
        } else {
            DCNAM5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNAM_I(String s) {
        if (!s.trim().isEmpty()) {
            DCNAM_I = Byte.parseByte(s);
        } else {
            DCNAM_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNAM_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCNAM_IFLAG = Byte.parseByte(s);
        } else {
            DCNAM_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNUM(String s) {
        if (!s.trim().isEmpty()) {
            DCNUM = Byte.parseByte(s);
        } else {
            DCNUM = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNUM_I(String s) {
        if (!s.trim().isEmpty()) {
            DCNUM_I = Byte.parseByte(s);
        } else {
            DCNUM_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNUM_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCNUM_IFLAG = Byte.parseByte(s);
        } else {
            DCNUM_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCOINV(String s) {
        if (!s.trim().isEmpty()) {
            DCOINV = Integer.parseInt(s);
        } else {
            DCOINV = Integer.MIN_VALUE;
        }
    }

    protected final void initDCOINVB(String s) {
        if (!s.trim().isEmpty()) {
            DCOINVB = Byte.parseByte(s);
        } else {
            DCOINVB = Byte.MIN_VALUE;
        }
    }

    protected final void initDCOINV_I(String s) {
        if (!s.trim().isEmpty()) {
            DCOINV_I = Integer.parseInt(s);
        } else {
            DCOINV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initDCOINV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCOINV_IFLAG = Byte.parseByte(s);
        } else {
            DCOINV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DCONM10 = false;
        }
    }

    protected final void initDCONM10_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DCONM10_I = false;
        }
    }

    protected final void initDCONM10_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DCONM10_IFLAG = false;
        }
    }

    protected final void initDCONM1_I(String s) {
        if (!s.trim().isEmpty()) {
            DCONM1_I = Byte.parseByte(s);
        } else {
            DCONM1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCONM1_IFLAG = Byte.parseByte(s);
        } else {
            DCONM1_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM2_I(String s) {
        if (!s.trim().isEmpty()) {
            DCONM2_I = Byte.parseByte(s);
        } else {
            DCONM2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCONM2_IFLAG = Byte.parseByte(s);
        } else {
            DCONM2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM3_I(String s) {
        if (!s.trim().isEmpty()) {
            DCONM3_I = Byte.parseByte(s);
        } else {
            DCONM3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCONM3_IFLAG = Byte.parseByte(s);
        } else {
            DCONM3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM4_I(String s) {
        if (!s.trim().isEmpty()) {
            DCONM4_I = Byte.parseByte(s);
        } else {
            DCONM4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCONM4_IFLAG = Byte.parseByte(s);
        } else {
            DCONM4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM5_I(String s) {
        if (!s.trim().isEmpty()) {
            DCONM5_I = Byte.parseByte(s);
        } else {
            DCONM5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCONM5_IFLAG = Byte.parseByte(s);
        } else {
            DCONM5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM6_I(String s) {
        if (!s.trim().isEmpty()) {
            DCONM6_I = Byte.parseByte(s);
        } else {
            DCONM6_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM6_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCONM6_IFLAG = Byte.parseByte(s);
        } else {
            DCONM6_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM7(String s) {
        if (!s.trim().isEmpty()) {
            DCONM7 = Byte.parseByte(s);
        } else {
            DCONM7 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM7_I(String s) {
        if (!s.trim().isEmpty()) {
            DCONM7_I = Byte.parseByte(s);
        } else {
            DCONM7_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM7_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DCONM7_IFLAG = false;
        }
    }

    protected final void initDCONM8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DCONM8 = false;
        }
    }

    protected final void initDCONM8_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DCONM8_I = false;
        }
    }

    protected final void initDCONM8_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DCONM8_IFLAG = false;
        }
    }

    protected final void initDCONM9(String s) {
        if (!s.trim().isEmpty()) {
            DCONM9 = Byte.parseByte(s);
        } else {
            DCONM9 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM9_I(String s) {
        if (!s.trim().isEmpty()) {
            DCONM9_I = Byte.parseByte(s);
        } else {
            DCONM9_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM9_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DCONM9_IFLAG = false;
        }
    }

    protected final void initDCOSHV(String s) {
        if (!s.trim().isEmpty()) {
            DCOSHV = Integer.parseInt(s);
        } else {
            DCOSHV = Integer.MIN_VALUE;
        }
    }

    protected final void initDCOSHVB(String s) {
        if (!s.trim().isEmpty()) {
            DCOSHVB = Byte.parseByte(s);
        } else {
            DCOSHVB = Byte.MIN_VALUE;
        }
    }

    protected final void initDCOSHV_I(String s) {
        if (!s.trim().isEmpty()) {
            DCOSHV_I = Integer.parseInt(s);
        } else {
            DCOSHV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initDCOSHV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCOSHV_IFLAG = Byte.parseByte(s);
        } else {
            DCOSHV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCPER(String s) {
        if (!s.trim().isEmpty()) {
            DCPER = Byte.parseByte(s);
        } else {
            DCPER = Byte.MIN_VALUE;
        }
    }

    protected final void initDCPER4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DCPER4 = false;
        }
    }

    protected final void initDCPER5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DCPER5 = false;
        }
    }

    protected final void initDCREC(String s) {
        if (!s.trim().isEmpty()) {
            DCREC = Byte.parseByte(s);
        } else {
            DCREC = Byte.MIN_VALUE;
        }
    }

    protected final void initDCREC2_I(String s) {
        if (!s.trim().isEmpty()) {
            DCREC2_I = Byte.parseByte(s);
        } else {
            DCREC2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCREC2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCREC2_IFLAG = Byte.parseByte(s);
        } else {
            DCREC2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCREC3_I(String s) {
        if (!s.trim().isEmpty()) {
            DCREC3_I = Byte.parseByte(s);
        } else {
            DCREC3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCREC3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCREC3_IFLAG = Byte.parseByte(s);
        } else {
            DCREC3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCREC4(String s) {
        if (!s.trim().isEmpty()) {
            DCREC4 = Byte.parseByte(s);
        } else {
            DCREC4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCREC4_I(String s) {
        if (!s.trim().isEmpty()) {
            DCREC4_I = Byte.parseByte(s);
        } else {
            DCREC4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCREC4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCREC4_IFLAG = Byte.parseByte(s);
        } else {
            DCREC4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCREC5(String s) {
        if (!s.trim().isEmpty()) {
            DCREC5 = Byte.parseByte(s);
        } else {
            DCREC5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCREC5_I(String s) {
        if (!s.trim().isEmpty()) {
            DCREC5_I = Byte.parseByte(s);
        } else {
            DCREC5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCREC5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCREC5_IFLAG = Byte.parseByte(s);
        } else {
            DCREC5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCREC_I(String s) {
        if (!s.trim().isEmpty()) {
            DCREC_I = Byte.parseByte(s);
        } else {
            DCREC_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCREC_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCREC_IFLAG = Byte.parseByte(s);
        } else {
            DCREC_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCRSP(String s) {
        if (!s.trim().isEmpty()) {
            DCRSP = Byte.parseByte(s);
        } else {
            DCRSP = Byte.MIN_VALUE;
        }
    }

    protected final void initDCRSP2_I(String s) {
        if (!s.trim().isEmpty()) {
            DCRSP2_I = Byte.parseByte(s);
        } else {
            DCRSP2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCRSP2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCRSP2_IFLAG = Byte.parseByte(s);
        } else {
            DCRSP2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCRSP3_I(String s) {
        if (!s.trim().isEmpty()) {
            DCRSP3_I = Byte.parseByte(s);
        } else {
            DCRSP3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCRSP3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCRSP3_IFLAG = Byte.parseByte(s);
        } else {
            DCRSP3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCRSP4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DCRSP4 = false;
        }
    }

    protected final void initDCRSP4_I(String s) {
        if (!s.trim().isEmpty()) {
            DCRSP4_I = Byte.parseByte(s);
        } else {
            DCRSP4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCRSP4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCRSP4_IFLAG = Byte.parseByte(s);
        } else {
            DCRSP4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCRSP5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DCRSP5 = false;
        }
    }

    protected final void initDCRSP5_I(String s) {
        if (!s.trim().isEmpty()) {
            DCRSP5_I = Byte.parseByte(s);
        } else {
            DCRSP5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDCRSP5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DCRSP5_IFLAG = false;
        }
    }

    protected final void initDCRSP_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DCRSP_I = false;
        }
    }

    protected final void initDCRSP_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCRSP_IFLAG = Byte.parseByte(s);
        } else {
            DCRSP_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPBEH(String s) {
        if (!s.trim().isEmpty()) {
            DHPBEH = Byte.parseByte(s);
        } else {
            DHPBEH = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPBEH3(String s) {
        if (!s.trim().isEmpty()) {
            DHPBEH3 = Byte.parseByte(s);
        } else {
            DHPBEH3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPBEH3_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPBEH3_I = Byte.parseByte(s);
        } else {
            DHPBEH3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPBEH3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPBEH3_IFLAG = Byte.parseByte(s);
        } else {
            DHPBEH3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPBEH4(String s) {
        if (!s.trim().isEmpty()) {
            DHPBEH4 = Byte.parseByte(s);
        } else {
            DHPBEH4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPBEH4_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPBEH4_I = Byte.parseByte(s);
        } else {
            DHPBEH4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPBEH4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DHPBEH4_IFLAG = false;
        }
    }

    protected final void initDHPBEH5(String s) {
        if (!s.trim().isEmpty()) {
            DHPBEH5 = Byte.parseByte(s);
        } else {
            DHPBEH5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPBEH5_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPBEH5_I = Byte.parseByte(s);
        } else {
            DHPBEH5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPBEH5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DHPBEH5_IFLAG = false;
        }
    }

    protected final void initDHPBEH_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPBEH_I = Byte.parseByte(s);
        } else {
            DHPBEH_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPBEH_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPBEH_IFLAG = Byte.parseByte(s);
        } else {
            DHPBEH_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPEST(String s) {
        if (!s.trim().isEmpty()) {
            DHPEST = Byte.parseByte(s);
        } else {
            DHPEST = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPEST3(String s) {
        if (!s.trim().isEmpty()) {
            DHPEST3 = Byte.parseByte(s);
        } else {
            DHPEST3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPEST4(String s) {
        if (!s.trim().isEmpty()) {
            DHPEST4 = Byte.parseByte(s);
        } else {
            DHPEST4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPEST5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DHPEST5 = false;
        }
    }

    protected final void initDHPINS(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS = Short.parseShort(s);
        } else {
            DHPINS = Short.MIN_VALUE;
        }
    }

    protected final void initDHPINS3(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS3 = Short.parseShort(s);
        } else {
            DHPINS3 = Short.MIN_VALUE;
        }
    }

    protected final void initDHPINS3_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS3_I = Short.parseShort(s);
        } else {
            DHPINS3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPINS3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS3_IFLAG = Byte.parseByte(s);
        } else {
            DHPINS3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPINS4(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS4 = Short.parseShort(s);
        } else {
            DHPINS4 = Short.MIN_VALUE;
        }
    }

    protected final void initDHPINS4_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS4_I = Double.parseDouble(s);
        } else {
            DHPINS4_I = Double.NaN;
        }
    }

    protected final void initDHPINS4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS4_IFLAG = Byte.parseByte(s);
        } else {
            DHPINS4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPINS5(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS5 = Short.parseShort(s);
        } else {
            DHPINS5 = Short.MIN_VALUE;
        }
    }

    protected final void initDHPINS5_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS5_I = Short.parseShort(s);
        } else {
            DHPINS5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPINS5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS5_IFLAG = Byte.parseByte(s);
        } else {
            DHPINS5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPINS_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS_I = Short.parseShort(s);
        } else {
            DHPINS_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPINS_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS_IFLAG = Byte.parseByte(s);
        } else {
            DHPINS_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPINT(String s) {
        if (!s.trim().isEmpty()) {
            DHPINT = Byte.parseByte(s);
        } else {
            DHPINT = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPINT3(String s) {
        if (!s.trim().isEmpty()) {
            DHPINT3 = Byte.parseByte(s);
        } else {
            DHPINT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPINT4(String s) {
        if (!s.trim().isEmpty()) {
            DHPINT4 = Byte.parseByte(s);
        } else {
            DHPINT4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPINT5(String s) {
        if (!s.trim().isEmpty()) {
            DHPINT5 = Byte.parseByte(s);
        } else {
            DHPINT5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT(String s) {
        if (!s.trim().isEmpty()) {
            DHPOFT = Byte.parseByte(s);
        } else {
            DHPOFT = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT3(String s) {
        if (!s.trim().isEmpty()) {
            DHPOFT3 = Byte.parseByte(s);
        } else {
            DHPOFT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT3_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPOFT3_I = Byte.parseByte(s);
        } else {
            DHPOFT3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPOFT3_IFLAG = Byte.parseByte(s);
        } else {
            DHPOFT3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT4(String s) {
        if (!s.trim().isEmpty()) {
            DHPOFT4 = Byte.parseByte(s);
        } else {
            DHPOFT4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT4_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPOFT4_I = Byte.parseByte(s);
        } else {
            DHPOFT4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DHPOFT4_IFLAG = false;
        }
    }

    protected final void initDHPOFT5(String s) {
        if (!s.trim().isEmpty()) {
            DHPOFT5 = Byte.parseByte(s);
        } else {
            DHPOFT5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT5_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPOFT5_I = Byte.parseByte(s);
        } else {
            DHPOFT5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DHPOFT5_IFLAG = false;
        }
    }

    protected final void initDHPOFT_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPOFT_I = Byte.parseByte(s);
        } else {
            DHPOFT_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPOFT_IFLAG = Byte.parseByte(s);
        } else {
            DHPOFT_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOWE(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE = Short.parseShort(s);
        } else {
            DHPOWE = Short.MIN_VALUE;
        }
    }

    protected final void initDHPOWE3(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE3 = Short.parseShort(s);
        } else {
            DHPOWE3 = Short.MIN_VALUE;
        }
    }

    protected final void initDHPOWE3_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE3_I = Short.parseShort(s);
        } else {
            DHPOWE3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPOWE3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE3_IFLAG = Byte.parseByte(s);
        } else {
            DHPOWE3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOWE4(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE4 = Short.parseShort(s);
        } else {
            DHPOWE4 = Short.MIN_VALUE;
        }
    }

    protected final void initDHPOWE4_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE4_I = Short.parseShort(s);
        } else {
            DHPOWE4_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPOWE4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE4_IFLAG = Byte.parseByte(s);
        } else {
            DHPOWE4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOWE5(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE5 = Short.parseShort(s);
        } else {
            DHPOWE5 = Short.MIN_VALUE;
        }
    }

    protected final void initDHPOWE5_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE5_I = Short.parseShort(s);
        } else {
            DHPOWE5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPOWE5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DHPOWE5_IFLAG = false;
        }
    }

    protected final void initDHPOWE_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE_I = Short.parseShort(s);
        } else {
            DHPOWE_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPOWE_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE_IFLAG = Byte.parseByte(s);
        } else {
            DHPOWE_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWEST(String s) {
        if (!s.trim().isEmpty()) {
            DHPWEST = Byte.parseByte(s);
        } else {
            DHPWEST = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWEST3(String s) {
        if (!s.trim().isEmpty()) {
            DHPWEST3 = Byte.parseByte(s);
        } else {
            DHPWEST3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWEST4(String s) {
        if (!s.trim().isEmpty()) {
            DHPWEST4 = Byte.parseByte(s);
        } else {
            DHPWEST4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWEST5(String s) {
        if (!s.trim().isEmpty()) {
            DHPWEST5 = Byte.parseByte(s);
        } else {
            DHPWEST5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM = Byte.parseByte(s);
        } else {
            DHPWHNM = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM3(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM3 = Byte.parseByte(s);
        } else {
            DHPWHNM3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM3_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM3_I = Byte.parseByte(s);
        } else {
            DHPWHNM3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM3_IFLAG = Byte.parseByte(s);
        } else {
            DHPWHNM3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM4(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM4 = Byte.parseByte(s);
        } else {
            DHPWHNM4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM4_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM4_I = Byte.parseByte(s);
        } else {
            DHPWHNM4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM4_IFLAG = Byte.parseByte(s);
        } else {
            DHPWHNM4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM5(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM5 = Byte.parseByte(s);
        } else {
            DHPWHNM5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM5_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM5_I = Byte.parseByte(s);
        } else {
            DHPWHNM5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM5_IFLAG = Byte.parseByte(s);
        } else {
            DHPWHNM5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM_I = Byte.parseByte(s);
        } else {
            DHPWHNM_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM_IFLAG = Byte.parseByte(s);
        } else {
            DHPWHNM_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY = Short.parseShort(s);
        } else {
            DHPWHNY = Short.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY3(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY3 = Short.parseShort(s);
        } else {
            DHPWHNY3 = Short.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY3_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY3_I = Short.parseShort(s);
        } else {
            DHPWHNY3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY3_IFLAG = Byte.parseByte(s);
        } else {
            DHPWHNY3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY4(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY4 = Short.parseShort(s);
        } else {
            DHPWHNY4 = Short.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY4_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY4_I = Short.parseShort(s);
        } else {
            DHPWHNY4_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY4_IFLAG = Byte.parseByte(s);
        } else {
            DHPWHNY4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY5(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY5 = Short.parseShort(s);
        } else {
            DHPWHNY5 = Short.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY5_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY5_I = Short.parseShort(s);
        } else {
            DHPWHNY5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY5_IFLAG = Byte.parseByte(s);
        } else {
            DHPWHNY5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY_I = Short.parseShort(s);
        } else {
            DHPWHNY_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY_IFLAG = Byte.parseByte(s);
        } else {
            DHPWHNY_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDISBEN1(String s) {
        if (!s.trim().isEmpty()) {
            DISBEN1 = Byte.parseByte(s);
        } else {
            DISBEN1 = Byte.MIN_VALUE;
        }
    }

    protected final void initDISBEN2(String s) {
        if (!s.trim().isEmpty()) {
            DISBEN2 = Byte.parseByte(s);
        } else {
            DISBEN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDISBEN3(String s) {
        if (!s.trim().isEmpty()) {
            DISBEN3 = Byte.parseByte(s);
        } else {
            DISBEN3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLBEH(String s) {
        if (!s.trim().isEmpty()) {
            DLBEH = Byte.parseByte(s);
        } else {
            DLBEH = Byte.MIN_VALUE;
        }
    }

    protected final void initDLBEH_I(String s) {
        if (!s.trim().isEmpty()) {
            DLBEH_I = Byte.parseByte(s);
        } else {
            DLBEH_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLBEH_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLBEH_IFLAG = Byte.parseByte(s);
        } else {
            DLBEH_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLEST(String s) {
        if (!s.trim().isEmpty()) {
            DLEST = Byte.parseByte(s);
        } else {
            DLEST = Byte.MIN_VALUE;
        }
    }

    protected final void initDLINS(String s) {
        if (!s.trim().isEmpty()) {
            DLINS = Short.parseShort(s);
        } else {
            DLINS = Short.MIN_VALUE;
        }
    }

    protected final void initDLINS_I(String s) {
        if (!s.trim().isEmpty()) {
            DLINS_I = Double.parseDouble(s);
        } else {
            DLINS_I = Double.NaN;
        }
    }

    protected final void initDLINS_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLINS_IFLAG = Byte.parseByte(s);
        } else {
            DLINS_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLINT(String s) {
        if (!s.trim().isEmpty()) {
            DLINT = Byte.parseByte(s);
        } else {
            DLINT = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOFT(String s) {
        if (!s.trim().isEmpty()) {
            DLOFT = Byte.parseByte(s);
        } else {
            DLOFT = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOFT_I(String s) {
        if (!s.trim().isEmpty()) {
            DLOFT_I = Byte.parseByte(s);
        } else {
            DLOFT_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOFT_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLOFT_IFLAG = Byte.parseByte(s);
        } else {
            DLOFT_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOWE(String s) {
        if (!s.trim().isEmpty()) {
            DLOWE = Short.parseShort(s);
        } else {
            DLOWE = Short.MIN_VALUE;
        }
    }

    protected final void initDLOWE_I(String s) {
        if (!s.trim().isEmpty()) {
            DLOWE_I = Short.parseShort(s);
        } else {
            DLOWE_I = Short.MIN_VALUE;
        }
    }

    protected final void initDLOWE_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLOWE_IFLAG = Byte.parseByte(s);
        } else {
            DLOWE_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLSEC(String s) {
        if (!s.trim().isEmpty()) {
            DLSEC = Byte.parseByte(s);
        } else {
            DLSEC = Byte.MIN_VALUE;
        }
    }

    protected final void initDLTYPE(String s) {
        if (!s.trim().isEmpty()) {
            DLTYPE = Byte.parseByte(s);
        } else {
            DLTYPE = Byte.MIN_VALUE;
        }
    }

    protected final void initDLTYPE_I(String s) {
        if (!s.trim().isEmpty()) {
            DLTYPE_I = Byte.parseByte(s);
        } else {
            DLTYPE_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLTYPE_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLTYPE_IFLAG = Byte.parseByte(s);
        } else {
            DLTYPE_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWEST(String s) {
        if (!s.trim().isEmpty()) {
            DLWEST = Byte.parseByte(s);
        } else {
            DLWEST = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHNM(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNM = Byte.parseByte(s);
        } else {
            DLWHNM = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHNM_I(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNM_I = Byte.parseByte(s);
        } else {
            DLWHNM_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHNM_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNM_IFLAG = Byte.parseByte(s);
        } else {
            DLWHNM_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHNY(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNY = Short.parseShort(s);
        } else {
            DLWHNY = Short.MIN_VALUE;
        }
    }

    protected final void initDLWHNY_I(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNY_I = Short.parseShort(s);
        } else {
            DLWHNY_I = Short.MIN_VALUE;
        }
    }

    protected final void initDLWHNY_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNY_IFLAG = Byte.parseByte(s);
        } else {
            DLWHNY_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHY11(String s) {
        if (!s.trim().isEmpty()) {
            DLWHY11 = Byte.parseByte(s);
        } else {
            DLWHY11 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHY12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DLWHY12 = false;
        }
    }

    protected final void initDLWHY17(String s) {
        if (!s.trim().isEmpty()) {
            DLWHY17 = Byte.parseByte(s);
        } else {
            DLWHY17 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHY18(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DLWHY18 = false;
        }
    }

    protected final void initDLWHY29(String s) {
        if (!s.trim().isEmpty()) {
            DLWHY29 = Byte.parseByte(s);
        } else {
            DLWHY29 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOBEH(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH = Byte.parseByte(s);
        } else {
            DMOBEH = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOBEH3(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH3 = Byte.parseByte(s);
        } else {
            DMOBEH3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOBEH3_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH3_I = Byte.parseByte(s);
        } else {
            DMOBEH3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOBEH3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH3_IFLAG = Byte.parseByte(s);
        } else {
            DMOBEH3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOBEH4(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH4 = Byte.parseByte(s);
        } else {
            DMOBEH4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOBEH4_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH4_I = Byte.parseByte(s);
        } else {
            DMOBEH4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOBEH4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DMOBEH4_IFLAG = false;
        }
    }

    protected final void initDMOBEH5(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH5 = Byte.parseByte(s);
        } else {
            DMOBEH5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOBEH5_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH5_I = Byte.parseByte(s);
        } else {
            DMOBEH5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOBEH5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DMOBEH5_IFLAG = false;
        }
    }

    protected final void initDMOBEH_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH_I = Byte.parseByte(s);
        } else {
            DMOBEH_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOBEH_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH_IFLAG = Byte.parseByte(s);
        } else {
            DMOBEH_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOEST(String s) {
        if (!s.trim().isEmpty()) {
            DMOEST = Byte.parseByte(s);
        } else {
            DMOEST = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOEST3(String s) {
        if (!s.trim().isEmpty()) {
            DMOEST3 = Byte.parseByte(s);
        } else {
            DMOEST3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOEST4(String s) {
        if (!s.trim().isEmpty()) {
            DMOEST4 = Byte.parseByte(s);
        } else {
            DMOEST4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOEST5(String s) {
        if (!s.trim().isEmpty()) {
            DMOEST5 = Byte.parseByte(s);
        } else {
            DMOEST5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOINS(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS = Short.parseShort(s);
        } else {
            DMOINS = Short.MIN_VALUE;
        }
    }

    protected final void initDMOINS3(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS3 = Short.parseShort(s);
        } else {
            DMOINS3 = Short.MIN_VALUE;
        }
    }

    protected final void initDMOINS3_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS3_I = Byte.parseByte(s);
        } else {
            DMOINS3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOINS3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DMOINS3_IFLAG = false;
        }
    }

    protected final void initDMOINS4(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS4 = Short.parseShort(s);
        } else {
            DMOINS4 = Short.MIN_VALUE;
        }
    }

    protected final void initDMOINS4_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS4_I = Byte.parseByte(s);
        } else {
            DMOINS4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOINS4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS4_IFLAG = Byte.parseByte(s);
        } else {
            DMOINS4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOINS5(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS5 = Byte.parseByte(s);
        } else {
            DMOINS5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOINS5_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS5_I = Byte.parseByte(s);
        } else {
            DMOINS5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOINS5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DMOINS5_IFLAG = false;
        }
    }

    protected final void initDMOINS_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS_I = Short.parseShort(s);
        } else {
            DMOINS_I = Short.MIN_VALUE;
        }
    }

    protected final void initDMOINS_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS_IFLAG = Byte.parseByte(s);
        } else {
            DMOINS_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOINT(String s) {
        if (!s.trim().isEmpty()) {
            DMOINT = Byte.parseByte(s);
        } else {
            DMOINT = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOINT3(String s) {
        if (!s.trim().isEmpty()) {
            DMOINT3 = Byte.parseByte(s);
        } else {
            DMOINT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOINT4(String s) {
        if (!s.trim().isEmpty()) {
            DMOINT4 = Byte.parseByte(s);
        } else {
            DMOINT4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOINT5(String s) {
        if (!s.trim().isEmpty()) {
            DMOINT5 = Byte.parseByte(s);
        } else {
            DMOINT5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOFT(String s) {
        if (!s.trim().isEmpty()) {
            DMOOFT = Byte.parseByte(s);
        } else {
            DMOOFT = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOFT3(String s) {
        if (!s.trim().isEmpty()) {
            DMOOFT3 = Byte.parseByte(s);
        } else {
            DMOOFT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOFT3_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOOFT3_I = Byte.parseByte(s);
        } else {
            DMOOFT3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOFT3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOOFT3_IFLAG = Byte.parseByte(s);
        } else {
            DMOOFT3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOFT4(String s) {
        if (!s.trim().isEmpty()) {
            DMOOFT4 = Byte.parseByte(s);
        } else {
            DMOOFT4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOFT4_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOOFT4_I = Byte.parseByte(s);
        } else {
            DMOOFT4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOFT4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DMOOFT4_IFLAG = false;
        }
    }

    protected final void initDMOOFT5(String s) {
        if (!s.trim().isEmpty()) {
            DMOOFT5 = Byte.parseByte(s);
        } else {
            DMOOFT5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOFT5_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DMOOFT5_I = false;
        }
    }

    protected final void initDMOOFT5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DMOOFT5_IFLAG = false;
        }
    }

    protected final void initDMOOFT_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOOFT_I = Byte.parseByte(s);
        } else {
            DMOOFT_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOFT_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOOFT_IFLAG = Byte.parseByte(s);
        } else {
            DMOOFT_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOWE(String s) {
        if (!s.trim().isEmpty()) {
            DMOOWE = Short.parseShort(s);
        } else {
            DMOOWE = Short.MIN_VALUE;
        }
    }

    protected final void initDMOOWE3(String s) {
        if (!s.trim().isEmpty()) {
            DMOOWE3 = Short.parseShort(s);
        } else {
            DMOOWE3 = Short.MIN_VALUE;
        }
    }

    protected final void initDMOOWE3_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOOWE3_I = Short.parseShort(s);
        } else {
            DMOOWE3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDMOOWE3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOOWE3_IFLAG = Byte.parseByte(s);
        } else {
            DMOOWE3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOWE4(String s) {
        if (!s.trim().isEmpty()) {
            DMOOWE4 = Short.parseShort(s);
        } else {
            DMOOWE4 = Short.MIN_VALUE;
        }
    }

    protected final void initDMOOWE4_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOOWE4_I = Short.parseShort(s);
        } else {
            DMOOWE4_I = Short.MIN_VALUE;
        }
    }

    protected final void initDMOOWE4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DMOOWE4_IFLAG = false;
        }
    }

    protected final void initDMOOWE5(String s) {
        if (!s.trim().isEmpty()) {
            DMOOWE5 = Short.parseShort(s);
        } else {
            DMOOWE5 = Short.MIN_VALUE;
        }
    }

    protected final void initDMOOWE5_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOOWE5_I = Short.parseShort(s);
        } else {
            DMOOWE5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDMOOWE5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DMOOWE5_IFLAG = false;
        }
    }

    protected final void initDMOOWE_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOOWE_I = Short.parseShort(s);
        } else {
            DMOOWE_I = Short.MIN_VALUE;
        }
    }

    protected final void initDMOOWE_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOOWE_IFLAG = Byte.parseByte(s);
        } else {
            DMOOWE_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWEST(String s) {
        if (!s.trim().isEmpty()) {
            DMOWEST = Byte.parseByte(s);
        } else {
            DMOWEST = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWEST3(String s) {
        if (!s.trim().isEmpty()) {
            DMOWEST3 = Byte.parseByte(s);
        } else {
            DMOWEST3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWEST4(String s) {
        if (!s.trim().isEmpty()) {
            DMOWEST4 = Byte.parseByte(s);
        } else {
            DMOWEST4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWEST5(String s) {
        if (!s.trim().isEmpty()) {
            DMOWEST5 = Byte.parseByte(s);
        } else {
            DMOWEST5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM = Byte.parseByte(s);
        } else {
            DMOWHNM = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM3(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM3 = Byte.parseByte(s);
        } else {
            DMOWHNM3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM3_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM3_I = Byte.parseByte(s);
        } else {
            DMOWHNM3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM3_IFLAG = Byte.parseByte(s);
        } else {
            DMOWHNM3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM4(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM4 = Byte.parseByte(s);
        } else {
            DMOWHNM4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM4_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM4_I = Byte.parseByte(s);
        } else {
            DMOWHNM4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DMOWHNM4_IFLAG = false;
        }
    }

    protected final void initDMOWHNM5(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM5 = Byte.parseByte(s);
        } else {
            DMOWHNM5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM5_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM5_I = Byte.parseByte(s);
        } else {
            DMOWHNM5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DMOWHNM5_IFLAG = false;
        }
    }

    protected final void initDMOWHNM_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM_I = Byte.parseByte(s);
        } else {
            DMOWHNM_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM_IFLAG = Byte.parseByte(s);
        } else {
            DMOWHNM_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY = Short.parseShort(s);
        } else {
            DMOWHNY = Short.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY3(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY3 = Short.parseShort(s);
        } else {
            DMOWHNY3 = Short.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY3_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY3_I = Short.parseShort(s);
        } else {
            DMOWHNY3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY3_IFLAG = Byte.parseByte(s);
        } else {
            DMOWHNY3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY4(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY4 = Short.parseShort(s);
        } else {
            DMOWHNY4 = Short.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY4_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY4_I = Short.parseShort(s);
        } else {
            DMOWHNY4_I = Short.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DMOWHNY4_IFLAG = false;
        }
    }

    protected final void initDMOWHNY5(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY5 = Short.parseShort(s);
        } else {
            DMOWHNY5 = Short.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY5_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY5_I = Short.parseShort(s);
        } else {
            DMOWHNY5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DMOWHNY5_IFLAG = false;
        }
    }

    protected final void initDMOWHNY_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY_I = Short.parseShort(s);
        } else {
            DMOWHNY_I = Short.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY_IFLAG = Byte.parseByte(s);
        } else {
            DMOWHNY_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSAMC(String s) {
        if (!s.trim().isEmpty()) {
            DSAMC = Short.parseShort(s);
        } else {
            DSAMC = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMC2_I(String s) {
        if (!s.trim().isEmpty()) {
            DSAMC2_I = Short.parseShort(s);
        } else {
            DSAMC2_I = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMC2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSAMC2_IFLAG = Byte.parseByte(s);
        } else {
            DSAMC2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSAMC3_I(String s) {
        if (!s.trim().isEmpty()) {
            DSAMC3_I = Short.parseShort(s);
        } else {
            DSAMC3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMC3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSAMC3_IFLAG = false;
        }
    }

    protected final void initDSAMC4(String s) {
        if (!s.trim().isEmpty()) {
            DSAMC4 = Short.parseShort(s);
        } else {
            DSAMC4 = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMC4_I(String s) {
        if (!s.trim().isEmpty()) {
            DSAMC4_I = Short.parseShort(s);
        } else {
            DSAMC4_I = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMC4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSAMC4_IFLAG = Byte.parseByte(s);
        } else {
            DSAMC4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSAMC5(String s) {
        if (!s.trim().isEmpty()) {
            DSAMC5 = Short.parseShort(s);
        } else {
            DSAMC5 = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMC5_I(String s) {
        if (!s.trim().isEmpty()) {
            DSAMC5_I = Short.parseShort(s);
        } else {
            DSAMC5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMC5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSAMC5_IFLAG = false;
        }
    }

    protected final void initDSAMC_I(String s) {
        if (!s.trim().isEmpty()) {
            DSAMC_I = Short.parseShort(s);
        } else {
            DSAMC_I = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMC_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSAMC_IFLAG = Byte.parseByte(s);
        } else {
            DSAMC_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSAMD(String s) {
        if (!s.trim().isEmpty()) {
            DSAMD = Short.parseShort(s);
        } else {
            DSAMD = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMD2_I(String s) {
        if (!s.trim().isEmpty()) {
            DSAMD2_I = Short.parseShort(s);
        } else {
            DSAMD2_I = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMD2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSAMD2_IFLAG = Byte.parseByte(s);
        } else {
            DSAMD2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSAMD3_I(String s) {
        if (!s.trim().isEmpty()) {
            DSAMD3_I = Short.parseShort(s);
        } else {
            DSAMD3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMD3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSAMD3_IFLAG = false;
        }
    }

    protected final void initDSAMD4(String s) {
        if (!s.trim().isEmpty()) {
            DSAMD4 = Short.parseShort(s);
        } else {
            DSAMD4 = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMD4_I(String s) {
        if (!s.trim().isEmpty()) {
            DSAMD4_I = Short.parseShort(s);
        } else {
            DSAMD4_I = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMD4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSAMD4_IFLAG = false;
        }
    }

    protected final void initDSAMD5(String s) {
        if (!s.trim().isEmpty()) {
            DSAMD5 = Byte.parseByte(s);
        } else {
            DSAMD5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSAMD5_I(String s) {
        if (!s.trim().isEmpty()) {
            DSAMD5_I = Short.parseShort(s);
        } else {
            DSAMD5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMD5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSAMD5_IFLAG = false;
        }
    }

    protected final void initDSAMD_I(String s) {
        if (!s.trim().isEmpty()) {
            DSAMD_I = Short.parseShort(s);
        } else {
            DSAMD_I = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMD_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSAMD_IFLAG = Byte.parseByte(s);
        } else {
            DSAMD_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSAMOS4(String s) {
        if (!s.trim().isEmpty()) {
            DSAMOS4 = Short.parseShort(s);
        } else {
            DSAMOS4 = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMOS5(String s) {
        if (!s.trim().isEmpty()) {
            DSAMOS5 = Short.parseShort(s);
        } else {
            DSAMOS5 = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMP(String s) {
        if (!s.trim().isEmpty()) {
            DSAMP = Short.parseShort(s);
        } else {
            DSAMP = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMP2_I(String s) {
        if (!s.trim().isEmpty()) {
            DSAMP2_I = Short.parseShort(s);
        } else {
            DSAMP2_I = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMP2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSAMP2_IFLAG = Byte.parseByte(s);
        } else {
            DSAMP2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSAMP3_I(String s) {
        if (!s.trim().isEmpty()) {
            DSAMP3_I = Short.parseShort(s);
        } else {
            DSAMP3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMP3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSAMP3_IFLAG = false;
        }
    }

    protected final void initDSAMP4(String s) {
        if (!s.trim().isEmpty()) {
            DSAMP4 = Short.parseShort(s);
        } else {
            DSAMP4 = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMP4_I(String s) {
        if (!s.trim().isEmpty()) {
            DSAMP4_I = Short.parseShort(s);
        } else {
            DSAMP4_I = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMP4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSAMP4_IFLAG = Byte.parseByte(s);
        } else {
            DSAMP4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSAMP5(String s) {
        if (!s.trim().isEmpty()) {
            DSAMP5 = Short.parseShort(s);
        } else {
            DSAMP5 = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMP5_I(String s) {
        if (!s.trim().isEmpty()) {
            DSAMP5_I = Short.parseShort(s);
        } else {
            DSAMP5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMP5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSAMP5_IFLAG = false;
        }
    }

    protected final void initDSAMP_I(String s) {
        if (!s.trim().isEmpty()) {
            DSAMP_I = Short.parseShort(s);
        } else {
            DSAMP_I = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMP_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSAMP_IFLAG = Byte.parseByte(s);
        } else {
            DSAMP_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSANU1_I(String s) {
        if (!s.trim().isEmpty()) {
            DSANU1_I = Byte.parseByte(s);
        } else {
            DSANU1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSANU1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSANU1_IFLAG = Byte.parseByte(s);
        } else {
            DSANU1_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSANU2_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSANU2_I = false;
        }
    }

    protected final void initDSANU2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSANU2_IFLAG = false;
        }
    }

    protected final void initDSANY1_I(String s) {
        if (!s.trim().isEmpty()) {
            DSANY1_I = Byte.parseByte(s);
        } else {
            DSANY1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSANY1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSANY1_IFLAG = Byte.parseByte(s);
        } else {
            DSANY1_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSANY2_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSANY2_I = false;
        }
    }

    protected final void initDSANY2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSANY2_IFLAG = false;
        }
    }

    protected final void initDSCOS(String s) {
        if (!s.trim().isEmpty()) {
            DSCOS = Byte.parseByte(s);
        } else {
            DSCOS = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCOS2_I(String s) {
        if (!s.trim().isEmpty()) {
            DSCOS2_I = Byte.parseByte(s);
        } else {
            DSCOS2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCOS2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSCOS2_IFLAG = Byte.parseByte(s);
        } else {
            DSCOS2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCOS3_I(String s) {
        if (!s.trim().isEmpty()) {
            DSCOS3_I = Byte.parseByte(s);
        } else {
            DSCOS3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCOS3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSCOS3_IFLAG = Byte.parseByte(s);
        } else {
            DSCOS3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCOS4(String s) {
        if (!s.trim().isEmpty()) {
            DSCOS4 = Byte.parseByte(s);
        } else {
            DSCOS4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCOS4_I(String s) {
        if (!s.trim().isEmpty()) {
            DSCOS4_I = Byte.parseByte(s);
        } else {
            DSCOS4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCOS4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSCOS4_IFLAG = Byte.parseByte(s);
        } else {
            DSCOS4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCOS5(String s) {
        if (!s.trim().isEmpty()) {
            DSCOS5 = Byte.parseByte(s);
        } else {
            DSCOS5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCOS5_I(String s) {
        if (!s.trim().isEmpty()) {
            DSCOS5_I = Byte.parseByte(s);
        } else {
            DSCOS5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCOS5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSCOS5_IFLAG = Byte.parseByte(s);
        } else {
            DSCOS5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCOS_I(String s) {
        if (!s.trim().isEmpty()) {
            DSCOS_I = Byte.parseByte(s);
        } else {
            DSCOS_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCOS_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSCOS_IFLAG = Byte.parseByte(s);
        } else {
            DSCOS_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCSP(String s) {
        if (!s.trim().isEmpty()) {
            DSCSP = Byte.parseByte(s);
        } else {
            DSCSP = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCSP2_I(String s) {
        if (!s.trim().isEmpty()) {
            DSCSP2_I = Byte.parseByte(s);
        } else {
            DSCSP2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCSP2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSCSP2_IFLAG = false;
        }
    }

    protected final void initDSCSP3_I(String s) {
        if (!s.trim().isEmpty()) {
            DSCSP3_I = Byte.parseByte(s);
        } else {
            DSCSP3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCSP3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSCSP3_IFLAG = false;
        }
    }

    protected final void initDSCSP4(String s) {
        if (!s.trim().isEmpty()) {
            DSCSP4 = Byte.parseByte(s);
        } else {
            DSCSP4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCSP4_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSCSP4_I = false;
        }
    }

    protected final void initDSCSP4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSCSP4_IFLAG = false;
        }
    }

    protected final void initDSCSP5(String s) {
        if (!s.trim().isEmpty()) {
            DSCSP5 = Byte.parseByte(s);
        } else {
            DSCSP5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCSP5_I(String s) {
        if (!s.trim().isEmpty()) {
            DSCSP5_I = Byte.parseByte(s);
        } else {
            DSCSP5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCSP5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSCSP5_IFLAG = false;
        }
    }

    protected final void initDSCSP_I(String s) {
        if (!s.trim().isEmpty()) {
            DSCSP_I = Byte.parseByte(s);
        } else {
            DSCSP_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCSP_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSCSP_IFLAG = false;
        }
    }

    protected final void initDSESB(String s) {
        if (!s.trim().isEmpty()) {
            DSESB = Byte.parseByte(s);
        } else {
            DSESB = Byte.MIN_VALUE;
        }
    }

    protected final void initDSESB4(String s) {
        if (!s.trim().isEmpty()) {
            DSESB4 = Byte.parseByte(s);
        } else {
            DSESB4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSESB5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSESB5 = false;
        }
    }

    protected final void initDSLAMT(String s) {
        if (!s.trim().isEmpty()) {
            DSLAMT = Integer.parseInt(s);
        } else {
            DSLAMT = Integer.MIN_VALUE;
        }
    }

    protected final void initDSLAMT_I(String s) {
        if (!s.trim().isEmpty()) {
            DSLAMT_I = Double.parseDouble(s);
        } else {
            DSLAMT_I = Double.NaN;
        }
    }

    protected final void initDSLAMT_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSLAMT_IFLAG = Byte.parseByte(s);
        } else {
            DSLAMT_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSLEST(String s) {
        if (!s.trim().isEmpty()) {
            DSLEST = Byte.parseByte(s);
        } else {
            DSLEST = Byte.MIN_VALUE;
        }
    }

    protected final void initDSLPAY(String s) {
        if (!s.trim().isEmpty()) {
            DSLPAY = Byte.parseByte(s);
        } else {
            DSLPAY = Byte.MIN_VALUE;
        }
    }

    protected final void initDSLPAY2_I(String s) {
        if (!s.trim().isEmpty()) {
            DSLPAY2_I = Byte.parseByte(s);
        } else {
            DSLPAY2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSLPAY2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSLPAY2_IFLAG = Byte.parseByte(s);
        } else {
            DSLPAY2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSLPAY3_I(String s) {
        if (!s.trim().isEmpty()) {
            DSLPAY3_I = Byte.parseByte(s);
        } else {
            DSLPAY3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSLPAY3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSLPAY3_IFLAG = false;
        }
    }

    protected final void initDSLPAY4_I(String s) {
        if (!s.trim().isEmpty()) {
            DSLPAY4_I = Byte.parseByte(s);
        } else {
            DSLPAY4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSLPAY4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSLPAY4_IFLAG = false;
        }
    }

    protected final void initDSLPAY5_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSLPAY5_I = false;
        }
    }

    protected final void initDSLPAY5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSLPAY5_IFLAG = false;
        }
    }

    protected final void initDSLPAY_I(String s) {
        if (!s.trim().isEmpty()) {
            DSLPAY_I = Byte.parseByte(s);
        } else {
            DSLPAY_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSLPAY_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSLPAY_IFLAG = Byte.parseByte(s);
        } else {
            DSLPAY_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSNAM(String s) {
        if (!s.trim().isEmpty()) {
            DSNAM = Byte.parseByte(s);
        } else {
            DSNAM = Byte.MIN_VALUE;
        }
    }

    protected final void initDSNAM2_I(String s) {
        if (!s.trim().isEmpty()) {
            DSNAM2_I = Byte.parseByte(s);
        } else {
            DSNAM2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSNAM2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSNAM2_IFLAG = Byte.parseByte(s);
        } else {
            DSNAM2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSNAM3_I(String s) {
        if (!s.trim().isEmpty()) {
            DSNAM3_I = Byte.parseByte(s);
        } else {
            DSNAM3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSNAM3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSNAM3_IFLAG = Byte.parseByte(s);
        } else {
            DSNAM3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSNAM4(String s) {
        if (!s.trim().isEmpty()) {
            DSNAM4 = Byte.parseByte(s);
        } else {
            DSNAM4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSNAM4_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSNAM4_I = false;
        }
    }

    protected final void initDSNAM4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSNAM4_IFLAG = Byte.parseByte(s);
        } else {
            DSNAM4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSNAM5(String s) {
        if (!s.trim().isEmpty()) {
            DSNAM5 = Byte.parseByte(s);
        } else {
            DSNAM5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSNAM5_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSNAM5_I = false;
        }
    }

    protected final void initDSNAM5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSNAM5_IFLAG = false;
        }
    }

    protected final void initDSNAM_I(String s) {
        if (!s.trim().isEmpty()) {
            DSNAM_I = Byte.parseByte(s);
        } else {
            DSNAM_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSNAM_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSNAM_IFLAG = Byte.parseByte(s);
        } else {
            DSNAM_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSNUM(String s) {
        if (!s.trim().isEmpty()) {
            DSNUM = Byte.parseByte(s);
        } else {
            DSNUM = Byte.MIN_VALUE;
        }
    }

    protected final void initDSNUM_I(String s) {
        if (!s.trim().isEmpty()) {
            DSNUM_I = Byte.parseByte(s);
        } else {
            DSNUM_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSNUM_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSNUM_IFLAG = Byte.parseByte(s);
        } else {
            DSNUM_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSONM10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSONM10 = false;
        }
    }

    protected final void initDSONM10_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSONM10_I = false;
        }
    }

    protected final void initDSONM10_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSONM10_IFLAG = false;
        }
    }

    protected final void initDSONM1_I(String s) {
        if (!s.trim().isEmpty()) {
            DSONM1_I = Byte.parseByte(s);
        } else {
            DSONM1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSONM1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSONM1_IFLAG = Byte.parseByte(s);
        } else {
            DSONM1_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSONM2_I(String s) {
        if (!s.trim().isEmpty()) {
            DSONM2_I = Byte.parseByte(s);
        } else {
            DSONM2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSONM2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSONM2_IFLAG = false;
        }
    }

    protected final void initDSONM3_I(String s) {
        if (!s.trim().isEmpty()) {
            DSONM3_I = Byte.parseByte(s);
        } else {
            DSONM3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSONM3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSONM3_IFLAG = false;
        }
    }

    protected final void initDSONM4_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSONM4_I = false;
        }
    }

    protected final void initDSONM4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSONM4_IFLAG = false;
        }
    }

    protected final void initDSONM5_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSONM5_I = false;
        }
    }

    protected final void initDSONM5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSONM5_IFLAG = false;
        }
    }

    protected final void initDSONM6_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSONM6_I = false;
        }
    }

    protected final void initDSONM6_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSONM6_IFLAG = false;
        }
    }

    protected final void initDSONM7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSONM7 = false;
        }
    }

    protected final void initDSONM7_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSONM7_I = false;
        }
    }

    protected final void initDSONM7_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSONM7_IFLAG = false;
        }
    }

    protected final void initDSONM8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSONM8 = false;
        }
    }

    protected final void initDSONM8_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSONM8_I = false;
        }
    }

    protected final void initDSONM8_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSONM8_IFLAG = false;
        }
    }

    protected final void initDSONM9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSONM9 = false;
        }
    }

    protected final void initDSONM9_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSONM9_I = false;
        }
    }

    protected final void initDSONM9_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSONM9_IFLAG = false;
        }
    }

    protected final void initDSPER(String s) {
        if (!s.trim().isEmpty()) {
            DSPER = Byte.parseByte(s);
        } else {
            DSPER = Byte.MIN_VALUE;
        }
    }

    protected final void initDSREC(String s) {
        if (!s.trim().isEmpty()) {
            DSREC = Byte.parseByte(s);
        } else {
            DSREC = Byte.MIN_VALUE;
        }
    }

    protected final void initDSREC2_I(String s) {
        if (!s.trim().isEmpty()) {
            DSREC2_I = Byte.parseByte(s);
        } else {
            DSREC2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSREC2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSREC2_IFLAG = Byte.parseByte(s);
        } else {
            DSREC2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSREC3_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSREC3_I = false;
        }
    }

    protected final void initDSREC3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSREC3_IFLAG = false;
        }
    }

    protected final void initDSREC4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSREC4 = false;
        }
    }

    protected final void initDSREC4_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSREC4_I = false;
        }
    }

    protected final void initDSREC4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSREC4_IFLAG = false;
        }
    }

    protected final void initDSREC5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSREC5 = false;
        }
    }

    protected final void initDSREC5_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSREC5_I = false;
        }
    }

    protected final void initDSREC5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSREC5_IFLAG = false;
        }
    }

    protected final void initDSREC_I(String s) {
        if (!s.trim().isEmpty()) {
            DSREC_I = Byte.parseByte(s);
        } else {
            DSREC_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDSREC_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSREC_IFLAG = Byte.parseByte(s);
        } else {
            DSREC_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSRSP(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSRSP = false;
        }
    }

    protected final void initDSRSP2(String s) {
        if (!s.trim().isEmpty()) {
            DSRSP2 = Byte.parseByte(s);
        } else {
            DSRSP2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSRSP2_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSRSP2_I = false;
        }
    }

    protected final void initDSRSP2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSRSP2_IFLAG = Byte.parseByte(s);
        } else {
            DSRSP2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSRSP3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSRSP3 = false;
        }
    }

    protected final void initDSRSP3_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSRSP3_I = false;
        }
    }

    protected final void initDSRSP3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSRSP3_IFLAG = false;
        }
    }

    protected final void initDSRSP4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSRSP4 = false;
        }
    }

    protected final void initDSRSP4_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSRSP4_I = false;
        }
    }

    protected final void initDSRSP4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSRSP4_IFLAG = false;
        }
    }

    protected final void initDSRSP5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSRSP5 = false;
        }
    }

    protected final void initDSRSP5_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSRSP5_I = false;
        }
    }

    protected final void initDSRSP5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSRSP5_IFLAG = false;
        }
    }

    protected final void initDSRSP_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DSRSP_I = false;
        }
    }

    protected final void initDSRSP_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSRSP_IFLAG = Byte.parseByte(s);
        } else {
            DSRSP_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDVCACRVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVCACRVAL = Double.parseDouble(s);
        } else {
            DVCACRVAL = Double.NaN;
        }
    }

    protected final void initDVCAODVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVCAODVAL = Double.parseDouble(s);
        } else {
            DVCAODVAL = Double.NaN;
        }
    }

    protected final void initDVCAVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVCAVAL = Double.parseDouble(s);
        } else {
            DVCAVAL = Double.NaN;
        }
    }

    protected final void initDVCOINV(String s) {
        if (!s.trim().isEmpty()) {
            DVCOINV = Integer.parseInt(s);
        } else {
            DVCOINV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVDHPOWE(String s) {
        if (!s.trim().isEmpty()) {
            DVDHPOWE = Short.parseShort(s);
        } else {
            DVDHPOWE = Short.MIN_VALUE;
        }
    }

    protected final void initDVDHPOWE3(String s) {
        if (!s.trim().isEmpty()) {
            DVDHPOWE3 = Short.parseShort(s);
        } else {
            DVDHPOWE3 = Short.MIN_VALUE;
        }
    }

    protected final void initDVDHPOWE4(String s) {
        if (!s.trim().isEmpty()) {
            DVDHPOWE4 = Short.parseShort(s);
        } else {
            DVDHPOWE4 = Short.MIN_VALUE;
        }
    }

    protected final void initDVDHPOWE5(String s) {
        if (!s.trim().isEmpty()) {
            DVDHPOWE5 = Short.parseShort(s);
        } else {
            DVDHPOWE5 = Short.MIN_VALUE;
        }
    }

    protected final void initDVDLOWE(String s) {
        if (!s.trim().isEmpty()) {
            DVDLOWE = Short.parseShort(s);
        } else {
            DVDLOWE = Short.MIN_VALUE;
        }
    }

    protected final void initDVDMOOWE(String s) {
        if (!s.trim().isEmpty()) {
            DVDMOOWE = Short.parseShort(s);
        } else {
            DVDMOOWE = Short.MIN_VALUE;
        }
    }

    protected final void initDVDMOOWE3(String s) {
        if (!s.trim().isEmpty()) {
            DVDMOOWE3 = Short.parseShort(s);
        } else {
            DVDMOOWE3 = Short.MIN_VALUE;
        }
    }

    protected final void initDVDMOOWE4(String s) {
        if (!s.trim().isEmpty()) {
            DVDMOOWE4 = Short.parseShort(s);
        } else {
            DVDMOOWE4 = Short.MIN_VALUE;
        }
    }

    protected final void initDVDMOOWE5(String s) {
        if (!s.trim().isEmpty()) {
            DVDMOOWE5 = Short.parseShort(s);
        } else {
            DVDMOOWE5 = Short.MIN_VALUE;
        }
    }

    protected final void initDVLNAR(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DVLNAR = false;
        }
    }

    protected final void initDVMOAR(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            DVMOAR = false;
        }
    }

    protected final void initDVSHODVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVSHODVAL = Double.parseDouble(s);
        } else {
            DVSHODVAL = Double.NaN;
        }
    }

    protected final void initEMPSHARE(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            EMPSHARE = false;
        }
    }

    protected final void initEMPSTAT2(String s) {
        if (!s.trim().isEmpty()) {
            EMPSTAT2 = Byte.parseByte(s);
        } else {
            EMPSTAT2 = Byte.MIN_VALUE;
        }
    }

    protected final void initFINCV(String s) {
        if (!s.trim().isEmpty()) {
            FINCV = Integer.parseInt(s);
        } else {
            FINCV = Integer.MIN_VALUE;
        }
    }

    protected final void initFINVTY01_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY01_IFLAG = Byte.parseByte(s);
        } else {
            FINVTY01_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY02_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY02_IFLAG = Byte.parseByte(s);
        } else {
            FINVTY02_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY03_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY03_IFLAG = Byte.parseByte(s);
        } else {
            FINVTY03_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY04_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY04_IFLAG = Byte.parseByte(s);
        } else {
            FINVTY04_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY05_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY05_IFLAG = Byte.parseByte(s);
        } else {
            FINVTY05_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY06_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY06_IFLAG = Byte.parseByte(s);
        } else {
            FINVTY06_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY07_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY07_IFLAG = Byte.parseByte(s);
        } else {
            FINVTY07_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY08_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY08_IFLAG = Byte.parseByte(s);
        } else {
            FINVTY08_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY09_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY09_IFLAG = Byte.parseByte(s);
        } else {
            FINVTY09_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY10_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY10_IFLAG = Byte.parseByte(s);
        } else {
            FINVTY10_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY11_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            FINVTY11_IFLAG = false;
        }
    }

    protected final void initFLNOS5(String s) {
        if (!s.trim().isEmpty()) {
            FLNOS5 = Short.parseShort(s);
        } else {
            FLNOS5 = Short.MIN_VALUE;
        }
    }

    protected final void initFNSVAL(String s) {
        if (!s.trim().isEmpty()) {
            FNSVAL = Integer.parseInt(s);
        } else {
            FNSVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initFTIBOND(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            FTIBOND = false;
        }
    }

    protected final void initGCBGILT(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            GCBGILT = false;
        }
    }

    protected final void initHOUSEGDVAL1(String s) {
        if (!s.trim().isEmpty()) {
            HOUSEGDVAL1 = Integer.parseInt(s);
        } else {
            HOUSEGDVAL1 = Integer.MIN_VALUE;
        }
    }

    protected final void initHOUSEGDVAL2(String s) {
        if (!s.trim().isEmpty()) {
            HOUSEGDVAL2 = Integer.parseInt(s);
        } else {
            HOUSEGDVAL2 = Integer.MIN_VALUE;
        }
    }

    protected final void initHOUSEGDVAL3(String s) {
        if (!s.trim().isEmpty()) {
            HOUSEGDVAL3 = Integer.parseInt(s);
        } else {
            HOUSEGDVAL3 = Integer.MIN_VALUE;
        }
    }

    protected final void initHOUSEGDVB1(String s) {
        if (!s.trim().isEmpty()) {
            HOUSEGDVB1 = Byte.parseByte(s);
        } else {
            HOUSEGDVB1 = Byte.MIN_VALUE;
        }
    }

    protected final void initHOUSEGDVB1_I(String s) {
        if (!s.trim().isEmpty()) {
            HOUSEGDVB1_I = Byte.parseByte(s);
        } else {
            HOUSEGDVB1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initHOUSEGDVB1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            HOUSEGDVB1_IFLAG = false;
        }
    }

    protected final void initHOUSEGDVB2(String s) {
        if (!s.trim().isEmpty()) {
            HOUSEGDVB2 = Byte.parseByte(s);
        } else {
            HOUSEGDVB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initHOUSEGDVB2_I(String s) {
        if (!s.trim().isEmpty()) {
            HOUSEGDVB2_I = Byte.parseByte(s);
        } else {
            HOUSEGDVB2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initHOUSEGDVB2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            HOUSEGDVB2_IFLAG = false;
        }
    }

    protected final void initHOUSEGDVB3(String s) {
        if (!s.trim().isEmpty()) {
            HOUSEGDVB3 = Byte.parseByte(s);
        } else {
            HOUSEGDVB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initHOUSEGDVB3_I(String s) {
        if (!s.trim().isEmpty()) {
            HOUSEGDVB3_I = Byte.parseByte(s);
        } else {
            HOUSEGDVB3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initHOUSEGDVB3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            HOUSEGDVB3_IFLAG = false;
        }
    }

    protected final void initHPLFT3(String s) {
        if (!s.trim().isEmpty()) {
            HPLFT3 = Double.parseDouble(s);
        } else {
            HPLFT3 = Double.NaN;
        }
    }

    protected final void initHPLFT4(String s) {
        if (!s.trim().isEmpty()) {
            HPLFT4 = Double.parseDouble(s);
        } else {
            HPLFT4 = Double.NaN;
        }
    }

    protected final void initHPLFT5(String s) {
        if (!s.trim().isEmpty()) {
            HPLFT5 = Double.parseDouble(s);
        } else {
            HPLFT5 = Double.NaN;
        }
    }

    protected final void initHPOS3(String s) {
        if (!s.trim().isEmpty()) {
            HPOS3 = Double.parseDouble(s);
        } else {
            HPOS3 = Double.NaN;
        }
    }

    protected final void initHPOS4(String s) {
        if (!s.trim().isEmpty()) {
            HPOS4 = Double.parseDouble(s);
        } else {
            HPOS4 = Double.NaN;
        }
    }

    protected final void initHPOS5(String s) {
        if (!s.trim().isEmpty()) {
            HPOS5 = Double.parseDouble(s);
        } else {
            HPOS5 = Double.NaN;
        }
    }

    protected final void initHSEDB1(String s) {
        if (!s.trim().isEmpty()) {
            HSEDB1 = Byte.parseByte(s);
        } else {
            HSEDB1 = Byte.MIN_VALUE;
        }
    }

    protected final void initHSEDB2(String s) {
        if (!s.trim().isEmpty()) {
            HSEDB2 = Byte.parseByte(s);
        } else {
            HSEDB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initHSEDB3(String s) {
        if (!s.trim().isEmpty()) {
            HSEDB3 = Byte.parseByte(s);
        } else {
            HSEDB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initHSEDEBT1(String s) {
        if (!s.trim().isEmpty()) {
            HSEDEBT1 = Integer.parseInt(s);
        } else {
            HSEDEBT1 = Integer.MIN_VALUE;
        }
    }

    protected final void initHSEDEBT1_I(String s) {
        if (!s.trim().isEmpty()) {
            HSEDEBT1_I = Integer.parseInt(s);
        } else {
            HSEDEBT1_I = Integer.MIN_VALUE;
        }
    }

    protected final void initHSEDEBT1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            HSEDEBT1_IFLAG = false;
        }
    }

    protected final void initHSEDEBT2(String s) {
        if (!s.trim().isEmpty()) {
            HSEDEBT2 = Integer.parseInt(s);
        } else {
            HSEDEBT2 = Integer.MIN_VALUE;
        }
    }

    protected final void initHSEDEBT2_I(String s) {
        if (!s.trim().isEmpty()) {
            HSEDEBT2_I = Integer.parseInt(s);
        } else {
            HSEDEBT2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initHSEDEBT2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            HSEDEBT2_IFLAG = false;
        }
    }

    protected final void initHSEDEBT3(String s) {
        if (!s.trim().isEmpty()) {
            HSEDEBT3 = Integer.parseInt(s);
        } else {
            HSEDEBT3 = Integer.MIN_VALUE;
        }
    }

    protected final void initHSEDEBT3_I(String s) {
        if (!s.trim().isEmpty()) {
            HSEDEBT3_I = Integer.parseInt(s);
        } else {
            HSEDEBT3_I = Integer.MIN_VALUE;
        }
    }

    protected final void initHSEDEBT3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            HSEDEBT3_IFLAG = false;
        }
    }

    protected final void initHSEVAL1(String s) {
        if (!s.trim().isEmpty()) {
            HSEVAL1 = Integer.parseInt(s);
        } else {
            HSEVAL1 = Integer.MIN_VALUE;
        }
    }

    protected final void initHSEVAL1_I(String s) {
        if (!s.trim().isEmpty()) {
            HSEVAL1_I = Integer.parseInt(s);
        } else {
            HSEVAL1_I = Integer.MIN_VALUE;
        }
    }

    protected final void initHSEVAL1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            HSEVAL1_IFLAG = false;
        }
    }

    protected final void initHSEVAL2(String s) {
        if (!s.trim().isEmpty()) {
            HSEVAL2 = Integer.parseInt(s);
        } else {
            HSEVAL2 = Integer.MIN_VALUE;
        }
    }

    protected final void initHSEVAL2_I(String s) {
        if (!s.trim().isEmpty()) {
            HSEVAL2_I = Integer.parseInt(s);
        } else {
            HSEVAL2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initHSEVAL2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            HSEVAL2_IFLAG = false;
        }
    }

    protected final void initHSEVAL3(String s) {
        if (!s.trim().isEmpty()) {
            HSEVAL3 = Integer.parseInt(s);
        } else {
            HSEVAL3 = Integer.MIN_VALUE;
        }
    }

    protected final void initHSEVAL3_I(String s) {
        if (!s.trim().isEmpty()) {
            HSEVAL3_I = Integer.parseInt(s);
        } else {
            HSEVAL3_I = Integer.MIN_VALUE;
        }
    }

    protected final void initHSEVAL3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            HSEVAL3_IFLAG = false;
        }
    }

    protected final void initHSEVB1(String s) {
        if (!s.trim().isEmpty()) {
            HSEVB1 = Byte.parseByte(s);
        } else {
            HSEVB1 = Byte.MIN_VALUE;
        }
    }

    protected final void initHSEVB2(String s) {
        if (!s.trim().isEmpty()) {
            HSEVB2 = Byte.parseByte(s);
        } else {
            HSEVB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initHSEVB3(String s) {
        if (!s.trim().isEmpty()) {
            HSEVB3 = Byte.parseByte(s);
        } else {
            HSEVB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initIGDS12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            IGDS12 = false;
        }
    }

    protected final void initIGDS16(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            IGDS16 = false;
        }
    }

    protected final void initIGDS6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            IGDS6 = false;
        }
    }

    protected final void initIGIFVAL(String s) {
        if (!s.trim().isEmpty()) {
            IGIFVAL = Integer.parseInt(s);
        } else {
            IGIFVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initILACC(String s) {
        if (!s.trim().isEmpty()) {
            ILACC = Integer.parseInt(s);
        } else {
            ILACC = Integer.MIN_VALUE;
        }
    }

    protected final void initILIFE(String s) {
        if (!s.trim().isEmpty()) {
            ILIFE = Integer.parseInt(s);
        } else {
            ILIFE = Integer.MIN_VALUE;
        }
    }

    protected final void initILINS(String s) {
        if (!s.trim().isEmpty()) {
            ILINS = Integer.parseInt(s);
        } else {
            ILINS = Integer.MIN_VALUE;
        }
    }

    protected final void initILOTH(String s) {
        if (!s.trim().isEmpty()) {
            ILOTH = Integer.parseInt(s);
        } else {
            ILOTH = Integer.MIN_VALUE;
        }
    }

    protected final void initILRED(String s) {
        if (!s.trim().isEmpty()) {
            ILRED = Integer.parseInt(s);
        } else {
            ILRED = Integer.MIN_VALUE;
        }
    }

    protected final void initILUMTY4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            ILUMTY4 = false;
        }
    }

    protected final void initILWIN(String s) {
        if (!s.trim().isEmpty()) {
            ILWIN = Integer.parseInt(s);
        } else {
            ILWIN = Integer.MIN_VALUE;
        }
    }

    protected final void initINS(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            INS = false;
        }
    }

    protected final void initINSPOL(String s) {
        if (!s.trim().isEmpty()) {
            INSPOL = Byte.parseByte(s);
        } else {
            INSPOL = Byte.MIN_VALUE;
        }
    }

    protected final void initINTRO(String s) {
        if (!s.trim().isEmpty()) {
            INTRO = Byte.parseByte(s);
        } else {
            INTRO = Byte.MIN_VALUE;
        }
    }

    protected final void initISA(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            ISA = false;
        }
    }

    protected final void initISCH1618(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            ISCH1618 = false;
        }
    }

    protected final void initISCHILD(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            ISCHILD = false;
        }
    }

    protected final void initIVAL(String s) {
        if (!s.trim().isEmpty()) {
            IVAL = Integer.parseInt(s);
        } else {
            IVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initIVAL2(String s) {
        if (!s.trim().isEmpty()) {
            IVAL2 = Integer.parseInt(s);
        } else {
            IVAL2 = Integer.MIN_VALUE;
        }
    }

    protected final void initIVAL3(String s) {
        if (!s.trim().isEmpty()) {
            IVAL3 = Integer.parseInt(s);
        } else {
            IVAL3 = Integer.MIN_VALUE;
        }
    }

    protected final void initIVALB(String s) {
        if (!s.trim().isEmpty()) {
            IVALB = Byte.parseByte(s);
        } else {
            IVALB = Byte.MIN_VALUE;
        }
    }

    protected final void initIWAT10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            IWAT10 = false;
        }
    }

    protected final void initIWAT14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            IWAT14 = false;
        }
    }

    protected final void initIWAT8(String s) {
        if (!s.trim().isEmpty()) {
            IWAT8 = Byte.parseByte(s);
        } else {
            IWAT8 = Byte.MIN_VALUE;
        }
    }

    protected final void initIWAT9(String s) {
        if (!s.trim().isEmpty()) {
            IWAT9 = Byte.parseByte(s);
        } else {
            IWAT9 = Byte.MIN_VALUE;
        }
    }

    protected final void initIWHO(String s) {
        if (!s.trim().isEmpty()) {
            IWHO = Byte.parseByte(s);
        } else {
            IWHO = Byte.MIN_VALUE;
        }
    }

    protected final void initLANDOSDB1(String s) {
        if (!s.trim().isEmpty()) {
            LANDOSDB1 = Byte.parseByte(s);
        } else {
            LANDOSDB1 = Byte.MIN_VALUE;
        }
    }

    protected final void initLANDOSDB2(String s) {
        if (!s.trim().isEmpty()) {
            LANDOSDB2 = Byte.parseByte(s);
        } else {
            LANDOSDB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initLANDOSDB3(String s) {
        if (!s.trim().isEmpty()) {
            LANDOSDB3 = Byte.parseByte(s);
        } else {
            LANDOSDB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initLANDOSDEBT1(String s) {
        if (!s.trim().isEmpty()) {
            LANDOSDEBT1 = Integer.parseInt(s);
        } else {
            LANDOSDEBT1 = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDOSDEBT1_I(String s) {
        if (!s.trim().isEmpty()) {
            LANDOSDEBT1_I = Integer.parseInt(s);
        } else {
            LANDOSDEBT1_I = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDOSDEBT1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            LANDOSDEBT1_IFLAG = false;
        }
    }

    protected final void initLANDOSDEBT2(String s) {
        if (!s.trim().isEmpty()) {
            LANDOSDEBT2 = Integer.parseInt(s);
        } else {
            LANDOSDEBT2 = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDOSDEBT2_I(String s) {
        if (!s.trim().isEmpty()) {
            LANDOSDEBT2_I = Integer.parseInt(s);
        } else {
            LANDOSDEBT2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDOSDEBT2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            LANDOSDEBT2_IFLAG = false;
        }
    }

    protected final void initLANDOSDEBT3(String s) {
        if (!s.trim().isEmpty()) {
            LANDOSDEBT3 = Integer.parseInt(s);
        } else {
            LANDOSDEBT3 = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDOSDEBT3_I(String s) {
        if (!s.trim().isEmpty()) {
            LANDOSDEBT3_I = Integer.parseInt(s);
        } else {
            LANDOSDEBT3_I = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDOSDEBT3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            LANDOSDEBT3_IFLAG = false;
        }
    }

    protected final void initLANDOSVAL1(String s) {
        if (!s.trim().isEmpty()) {
            LANDOSVAL1 = Integer.parseInt(s);
        } else {
            LANDOSVAL1 = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDOSVAL1_I(String s) {
        if (!s.trim().isEmpty()) {
            LANDOSVAL1_I = Integer.parseInt(s);
        } else {
            LANDOSVAL1_I = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDOSVAL1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            LANDOSVAL1_IFLAG = false;
        }
    }

    protected final void initLANDOSVAL2(String s) {
        if (!s.trim().isEmpty()) {
            LANDOSVAL2 = Integer.parseInt(s);
        } else {
            LANDOSVAL2 = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDOSVAL2_I(String s) {
        if (!s.trim().isEmpty()) {
            LANDOSVAL2_I = Integer.parseInt(s);
        } else {
            LANDOSVAL2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDOSVAL2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            LANDOSVAL2_IFLAG = false;
        }
    }

    protected final void initLANDOSVAL3(String s) {
        if (!s.trim().isEmpty()) {
            LANDOSVAL3 = Integer.parseInt(s);
        } else {
            LANDOSVAL3 = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDOSVAL3_I(String s) {
        if (!s.trim().isEmpty()) {
            LANDOSVAL3_I = Integer.parseInt(s);
        } else {
            LANDOSVAL3_I = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDOSVAL3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            LANDOSVAL3_IFLAG = false;
        }
    }

    protected final void initLANDOSVB1(String s) {
        if (!s.trim().isEmpty()) {
            LANDOSVB1 = Byte.parseByte(s);
        } else {
            LANDOSVB1 = Byte.MIN_VALUE;
        }
    }

    protected final void initLANDOSVB2(String s) {
        if (!s.trim().isEmpty()) {
            LANDOSVB2 = Byte.parseByte(s);
        } else {
            LANDOSVB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initLANDOSVB3(String s) {
        if (!s.trim().isEmpty()) {
            LANDOSVB3 = Byte.parseByte(s);
        } else {
            LANDOSVB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initLANDUKDB1(String s) {
        if (!s.trim().isEmpty()) {
            LANDUKDB1 = Byte.parseByte(s);
        } else {
            LANDUKDB1 = Byte.MIN_VALUE;
        }
    }

    protected final void initLANDUKDB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            LANDUKDB2 = false;
        }
    }

    protected final void initLANDUKDB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            LANDUKDB3 = false;
        }
    }

    protected final void initLANDUKDEBT1(String s) {
        if (!s.trim().isEmpty()) {
            LANDUKDEBT1 = Integer.parseInt(s);
        } else {
            LANDUKDEBT1 = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDUKDEBT1_I(String s) {
        if (!s.trim().isEmpty()) {
            LANDUKDEBT1_I = Integer.parseInt(s);
        } else {
            LANDUKDEBT1_I = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDUKDEBT1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            LANDUKDEBT1_IFLAG = false;
        }
    }

    protected final void initLANDUKDEBT2(String s) {
        if (!s.trim().isEmpty()) {
            LANDUKDEBT2 = Integer.parseInt(s);
        } else {
            LANDUKDEBT2 = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDUKDEBT2_I(String s) {
        if (!s.trim().isEmpty()) {
            LANDUKDEBT2_I = Integer.parseInt(s);
        } else {
            LANDUKDEBT2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDUKDEBT2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            LANDUKDEBT2_IFLAG = false;
        }
    }

    protected final void initLANDUKDEBT3(String s) {
        if (!s.trim().isEmpty()) {
            LANDUKDEBT3 = Short.parseShort(s);
        } else {
            LANDUKDEBT3 = Short.MIN_VALUE;
        }
    }

    protected final void initLANDUKDEBT3_I(String s) {
        if (!s.trim().isEmpty()) {
            LANDUKDEBT3_I = Short.parseShort(s);
        } else {
            LANDUKDEBT3_I = Short.MIN_VALUE;
        }
    }

    protected final void initLANDUKDEBT3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            LANDUKDEBT3_IFLAG = false;
        }
    }

    protected final void initLANDUKVAL1(String s) {
        if (!s.trim().isEmpty()) {
            LANDUKVAL1 = Integer.parseInt(s);
        } else {
            LANDUKVAL1 = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDUKVAL1_I(String s) {
        if (!s.trim().isEmpty()) {
            LANDUKVAL1_I = Integer.parseInt(s);
        } else {
            LANDUKVAL1_I = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDUKVAL1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            LANDUKVAL1_IFLAG = false;
        }
    }

    protected final void initLANDUKVAL2(String s) {
        if (!s.trim().isEmpty()) {
            LANDUKVAL2 = Integer.parseInt(s);
        } else {
            LANDUKVAL2 = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDUKVAL2_I(String s) {
        if (!s.trim().isEmpty()) {
            LANDUKVAL2_I = Integer.parseInt(s);
        } else {
            LANDUKVAL2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDUKVAL2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            LANDUKVAL2_IFLAG = false;
        }
    }

    protected final void initLANDUKVAL3(String s) {
        if (!s.trim().isEmpty()) {
            LANDUKVAL3 = Integer.parseInt(s);
        } else {
            LANDUKVAL3 = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDUKVAL3_I(String s) {
        if (!s.trim().isEmpty()) {
            LANDUKVAL3_I = Integer.parseInt(s);
        } else {
            LANDUKVAL3_I = Integer.MIN_VALUE;
        }
    }

    protected final void initLANDUKVAL3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            LANDUKVAL3_IFLAG = false;
        }
    }

    protected final void initLANDUKVB1(String s) {
        if (!s.trim().isEmpty()) {
            LANDUKVB1 = Byte.parseByte(s);
        } else {
            LANDUKVB1 = Byte.MIN_VALUE;
        }
    }

    protected final void initLANDUKVB2(String s) {
        if (!s.trim().isEmpty()) {
            LANDUKVB2 = Byte.parseByte(s);
        } else {
            LANDUKVB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initLANDUKVB3(String s) {
        if (!s.trim().isEmpty()) {
            LANDUKVB3 = Byte.parseByte(s);
        } else {
            LANDUKVB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initLIVWTH(String s) {
        if (!s.trim().isEmpty()) {
            LIVWTH = Byte.parseByte(s);
        } else {
            LIVWTH = Byte.MIN_VALUE;
        }
    }

    protected final void initMOLFT3(String s) {
        if (!s.trim().isEmpty()) {
            MOLFT3 = Double.parseDouble(s);
        } else {
            MOLFT3 = Double.NaN;
        }
    }

    protected final void initMOLFT4(String s) {
        if (!s.trim().isEmpty()) {
            MOLFT4 = Double.parseDouble(s);
        } else {
            MOLFT4 = Double.NaN;
        }
    }

    protected final void initMOLFT5(String s) {
        if (!s.trim().isEmpty()) {
            MOLFT5 = Double.parseDouble(s);
        } else {
            MOLFT5 = Double.NaN;
        }
    }

    protected final void initMOOS3(String s) {
        if (!s.trim().isEmpty()) {
            MOOS3 = Double.parseDouble(s);
        } else {
            MOOS3 = Double.NaN;
        }
    }

    protected final void initMOOS4(String s) {
        if (!s.trim().isEmpty()) {
            MOOS4 = Double.parseDouble(s);
        } else {
            MOOS4 = Double.NaN;
        }
    }

    protected final void initMOOS5(String s) {
        if (!s.trim().isEmpty()) {
            MOOS5 = Double.parseDouble(s);
        } else {
            MOOS5 = Double.NaN;
        }
    }

    protected final void initOIGGT(String s) {
        if (!s.trim().isEmpty()) {
            OIGGT = Short.parseShort(s);
        } else {
            OIGGT = Short.MIN_VALUE;
        }
    }

    protected final void initOIGOE(String s) {
        if (!s.trim().isEmpty()) {
            OIGOE = Integer.parseInt(s);
        } else {
            OIGOE = Integer.MIN_VALUE;
        }
    }

    protected final void initOIGOE_I(String s) {
        if (!s.trim().isEmpty()) {
            OIGOE_I = Integer.parseInt(s);
        } else {
            OIGOE_I = Integer.MIN_VALUE;
        }
    }

    protected final void initOIGOE_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            OIGOE_IFLAG = false;
        }
    }

    protected final void initOIGOS(String s) {
        if (!s.trim().isEmpty()) {
            OIGOS = Integer.parseInt(s);
        } else {
            OIGOS = Integer.MIN_VALUE;
        }
    }

    protected final void initOIGOS_I(String s) {
        if (!s.trim().isEmpty()) {
            OIGOS_I = Integer.parseInt(s);
        } else {
            OIGOS_I = Integer.MIN_VALUE;
        }
    }

    protected final void initOIGOS_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            OIGOS_IFLAG = false;
        }
    }

    protected final void initOIGPP(String s) {
        if (!s.trim().isEmpty()) {
            OIGPP = Integer.parseInt(s);
        } else {
            OIGPP = Integer.MIN_VALUE;
        }
    }

    protected final void initOIGPP_I(String s) {
        if (!s.trim().isEmpty()) {
            OIGPP_I = Integer.parseInt(s);
        } else {
            OIGPP_I = Integer.MIN_VALUE;
        }
    }

    protected final void initOIGPP_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            OIGPP_IFLAG = false;
        }
    }

    protected final void initOIGRR(String s) {
        if (!s.trim().isEmpty()) {
            OIGRR = Short.parseShort(s);
        } else {
            OIGRR = Short.MIN_VALUE;
        }
    }

    protected final void initOINEG(String s) {
        if (!s.trim().isEmpty()) {
            OINEG = Short.parseShort(s);
        } else {
            OINEG = Short.MIN_VALUE;
        }
    }

    protected final void initOINFR(String s) {
        if (!s.trim().isEmpty()) {
            OINFR = Short.parseShort(s);
        } else {
            OINFR = Short.MIN_VALUE;
        }
    }

    protected final void initOINGT(String s) {
        if (!s.trim().isEmpty()) {
            OINGT = Short.parseShort(s);
        } else {
            OINGT = Short.MIN_VALUE;
        }
    }

    protected final void initOINMA(String s) {
        if (!s.trim().isEmpty()) {
            OINMA = Short.parseShort(s);
        } else {
            OINMA = Short.MIN_VALUE;
        }
    }

    protected final void initOINOE(String s) {
        if (!s.trim().isEmpty()) {
            OINOE = Integer.parseInt(s);
        } else {
            OINOE = Integer.MIN_VALUE;
        }
    }

    protected final void initOINOP(String s) {
        if (!s.trim().isEmpty()) {
            OINOP = Short.parseShort(s);
        } else {
            OINOP = Short.MIN_VALUE;
        }
    }

    protected final void initOINOS(String s) {
        if (!s.trim().isEmpty()) {
            OINOS = Integer.parseInt(s);
        } else {
            OINOS = Integer.MIN_VALUE;
        }
    }

    protected final void initOINPP(String s) {
        if (!s.trim().isEmpty()) {
            OINPP = Integer.parseInt(s);
        } else {
            OINPP = Integer.MIN_VALUE;
        }
    }

    protected final void initOINRO(String s) {
        if (!s.trim().isEmpty()) {
            OINRO = Integer.parseInt(s);
        } else {
            OINRO = Integer.MIN_VALUE;
        }
    }

    protected final void initOINRR(String s) {
        if (!s.trim().isEmpty()) {
            OINRR = Short.parseShort(s);
        } else {
            OINRR = Short.MIN_VALUE;
        }
    }

    protected final void initOPROPDB1(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            OPROPDB1 = false;
        }
    }

    protected final void initOPROPDB2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            OPROPDB2 = false;
        }
    }

    protected final void initOPROPDB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            OPROPDB3 = false;
        }
    }

    protected final void initOPROPDEBT1(String s) {
        if (!s.trim().isEmpty()) {
            OPROPDEBT1 = Integer.parseInt(s);
        } else {
            OPROPDEBT1 = Integer.MIN_VALUE;
        }
    }

    protected final void initOPROPDEBT1_I(String s) {
        if (!s.trim().isEmpty()) {
            OPROPDEBT1_I = Integer.parseInt(s);
        } else {
            OPROPDEBT1_I = Integer.MIN_VALUE;
        }
    }

    protected final void initOPROPDEBT1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            OPROPDEBT1_IFLAG = false;
        }
    }

    protected final void initOPROPDEBT2(String s) {
        if (!s.trim().isEmpty()) {
            OPROPDEBT2 = Short.parseShort(s);
        } else {
            OPROPDEBT2 = Short.MIN_VALUE;
        }
    }

    protected final void initOPROPDEBT2_I(String s) {
        if (!s.trim().isEmpty()) {
            OPROPDEBT2_I = Short.parseShort(s);
        } else {
            OPROPDEBT2_I = Short.MIN_VALUE;
        }
    }

    protected final void initOPROPDEBT2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            OPROPDEBT2_IFLAG = false;
        }
    }

    protected final void initOPROPDEBT3(String s) {
        if (!s.trim().isEmpty()) {
            OPROPDEBT3 = Byte.parseByte(s);
        } else {
            OPROPDEBT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initOPROPDEBT3_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            OPROPDEBT3_I = false;
        }
    }

    protected final void initOPROPDEBT3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            OPROPDEBT3_IFLAG = false;
        }
    }

    protected final void initOPROPVAL1(String s) {
        if (!s.trim().isEmpty()) {
            OPROPVAL1 = Integer.parseInt(s);
        } else {
            OPROPVAL1 = Integer.MIN_VALUE;
        }
    }

    protected final void initOPROPVAL1_I(String s) {
        if (!s.trim().isEmpty()) {
            OPROPVAL1_I = Integer.parseInt(s);
        } else {
            OPROPVAL1_I = Integer.MIN_VALUE;
        }
    }

    protected final void initOPROPVAL1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            OPROPVAL1_IFLAG = false;
        }
    }

    protected final void initOPROPVAL2(String s) {
        if (!s.trim().isEmpty()) {
            OPROPVAL2 = Integer.parseInt(s);
        } else {
            OPROPVAL2 = Integer.MIN_VALUE;
        }
    }

    protected final void initOPROPVAL2_I(String s) {
        if (!s.trim().isEmpty()) {
            OPROPVAL2_I = Integer.parseInt(s);
        } else {
            OPROPVAL2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initOPROPVAL2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            OPROPVAL2_IFLAG = false;
        }
    }

    protected final void initOPROPVAL3(String s) {
        if (!s.trim().isEmpty()) {
            OPROPVAL3 = Integer.parseInt(s);
        } else {
            OPROPVAL3 = Integer.MIN_VALUE;
        }
    }

    protected final void initOPROPVAL3_I(String s) {
        if (!s.trim().isEmpty()) {
            OPROPVAL3_I = Integer.parseInt(s);
        } else {
            OPROPVAL3_I = Integer.MIN_VALUE;
        }
    }

    protected final void initOPROPVAL3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            OPROPVAL3_IFLAG = false;
        }
    }

    protected final void initOPROPVB1(String s) {
        if (!s.trim().isEmpty()) {
            OPROPVB1 = Byte.parseByte(s);
        } else {
            OPROPVB1 = Byte.MIN_VALUE;
        }
    }

    protected final void initOPROPVB2(String s) {
        if (!s.trim().isEmpty()) {
            OPROPVB2 = Byte.parseByte(s);
        } else {
            OPROPVB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initOPROPVB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            OPROPVB3 = false;
        }
    }

    protected final void initOTHERFA(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            OTHERFA = false;
        }
    }

    protected final void initOTHSHARE(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            OTHSHARE = false;
        }
    }

    protected final void initOVERSPA(String s) {
        if (!s.trim().isEmpty()) {
            OVERSPA = Byte.parseByte(s);
        } else {
            OVERSPA = Byte.MIN_VALUE;
        }
    }

    protected final void initPEANYO(String s) {
        if (!s.trim().isEmpty()) {
            PEANYO = Byte.parseByte(s);
        } else {
            PEANYO = Byte.MIN_VALUE;
        }
    }

    protected final void initPECONT(String s) {
        if (!s.trim().isEmpty()) {
            PECONT = Byte.parseByte(s);
        } else {
            PECONT = Byte.MIN_VALUE;
        }
    }

    protected final void initPEMFIN(String s) {
        if (!s.trim().isEmpty()) {
            PEMFIN = Byte.parseByte(s);
        } else {
            PEMFIN = Byte.MIN_VALUE;
        }
    }

    protected final void initPEWYNO01(String s) {
        if (!s.trim().isEmpty()) {
            PEWYNO01 = Byte.parseByte(s);
        } else {
            PEWYNO01 = Byte.MIN_VALUE;
        }
    }

    protected final void initPEWYNO02(String s) {
        if (!s.trim().isEmpty()) {
            PEWYNO02 = Byte.parseByte(s);
        } else {
            PEWYNO02 = Byte.MIN_VALUE;
        }
    }

    protected final void initPEWYNO03(String s) {
        if (!s.trim().isEmpty()) {
            PEWYNO03 = Byte.parseByte(s);
        } else {
            PEWYNO03 = Byte.MIN_VALUE;
        }
    }

    protected final void initPEWYNO04(String s) {
        if (!s.trim().isEmpty()) {
            PEWYNO04 = Byte.parseByte(s);
        } else {
            PEWYNO04 = Byte.MIN_VALUE;
        }
    }

    protected final void initPINCT(String s) {
        if (!s.trim().isEmpty()) {
            PINCT = Byte.parseByte(s);
        } else {
            PINCT = Byte.MIN_VALUE;
        }
    }

    protected final void initPINTRE(String s) {
        if (!s.trim().isEmpty()) {
            PINTRE = Byte.parseByte(s);
        } else {
            PINTRE = Byte.MIN_VALUE;
        }
    }

    protected final void initPINTRN(String s) {
        if (!s.trim().isEmpty()) {
            PINTRN = Byte.parseByte(s);
        } else {
            PINTRN = Byte.MIN_VALUE;
        }
    }

    protected final void initPNANYO(String s) {
        if (!s.trim().isEmpty()) {
            PNANYO = Byte.parseByte(s);
        } else {
            PNANYO = Byte.MIN_VALUE;
        }
    }

    protected final void initPNCONT(String s) {
        if (!s.trim().isEmpty()) {
            PNCONT = Byte.parseByte(s);
        } else {
            PNCONT = Byte.MIN_VALUE;
        }
    }

    protected final void initPNSBOND(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            PNSBOND = false;
        }
    }

    protected final void initPNUMSC(String s) {
        if (!s.trim().isEmpty()) {
            PNUMSC = Byte.parseByte(s);
        } else {
            PNUMSC = Byte.MIN_VALUE;
        }
    }

    protected final void initPNUMSC_I(String s) {
        if (!s.trim().isEmpty()) {
            PNUMSC_I = Byte.parseByte(s);
        } else {
            PNUMSC_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPNUMSC_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            PNUMSC_IFLAG = false;
        }
    }

    protected final void initPRACCU(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            PRACCU = false;
        }
    }

    protected final void initPRCRELIG(String s) {
        if (!s.trim().isEmpty()) {
            PRCRELIG = Byte.parseByte(s);
        } else {
            PRCRELIG = Byte.MIN_VALUE;
        }
    }

    protected final void initPSCHY_F(String s) {
        if (!s.trim().isEmpty()) {
            PSCHY_F = Byte.parseByte(s);
        } else {
            PSCHY_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPSCHY_S(String s) {
        if (!s.trim().isEmpty()) {
            PSCHY_S = Byte.parseByte(s);
        } else {
            PSCHY_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPSCHY_T(String s) {
        if (!s.trim().isEmpty()) {
            PSCHY_T = Byte.parseByte(s);
        } else {
            PSCHY_T = Byte.MIN_VALUE;
        }
    }

    protected final void initRENTAMT(String s) {
        if (!s.trim().isEmpty()) {
            RENTAMT = Integer.parseInt(s);
        } else {
            RENTAMT = Integer.MIN_VALUE;
        }
    }

    protected final void initSEAML(String s) {
        if (!s.trim().isEmpty()) {
            SEAML = Short.parseShort(s);
        } else {
            SEAML = Short.MIN_VALUE;
        }
    }

    protected final void initSELECTAD_I(String s) {
        if (!s.trim().isEmpty()) {
            SELECTAD_I = Byte.parseByte(s);
        } else {
            SELECTAD_I = Byte.MIN_VALUE;
        }
    }

    protected final void initSELECTAD_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            SELECTAD_IFLAG = Byte.parseByte(s);
        } else {
            SELECTAD_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initSIC2007D(String s) {
        if (!s.trim().isEmpty()) {
            SIC2007D = Byte.parseByte(s);
        } else {
            SIC2007D = Byte.MIN_VALUE;
        }
    }

    protected final void initSOC2010_1DIGIT(String s) {
        if (!s.trim().isEmpty()) {
            SOC2010_1DIGIT = Byte.parseByte(s);
        } else {
            SOC2010_1DIGIT = Byte.MIN_VALUE;
        }
    }

    protected final void initSOC2010_2DIGIT(String s) {
        if (!s.trim().isEmpty()) {
            SOC2010_2DIGIT = Byte.parseByte(s);
        } else {
            SOC2010_2DIGIT = Byte.MIN_VALUE;
        }
    }

    protected final void initSPASAF(String s) {
        if (!s.trim().isEmpty()) {
            SPASAF = Double.parseDouble(s);
        } else {
            SPASAF = Double.NaN;
        }
    }

    protected final void initSSPART(String s) {
        if (!s.trim().isEmpty()) {
            SSPART = Byte.parseByte(s);
        } else {
            SSPART = Byte.MIN_VALUE;
        }
    }

    protected final void initSSPNO(String s) {
        if (!s.trim().isEmpty()) {
            SSPNO = Byte.parseByte(s);
        } else {
            SSPNO = Byte.MIN_VALUE;
        }
    }

    protected final void initTRAINEE(String s) {
        if (!s.trim().isEmpty()) {
            TRAINEE = Byte.parseByte(s);
        } else {
            TRAINEE = Byte.MIN_VALUE;
        }
    }

    protected final void initTSNUM(String s) {
        if (!s.trim().isEmpty()) {
            TSNUM = Byte.parseByte(s);
        } else {
            TSNUM = Byte.MIN_VALUE;
        }
    }

    protected final void initTXCRED1(String s) {
        if (!s.trim().isEmpty()) {
            TXCRED1 = Byte.parseByte(s);
        } else {
            TXCRED1 = Byte.MIN_VALUE;
        }
    }

    protected final void initTXCRED2(String s) {
        if (!s.trim().isEmpty()) {
            TXCRED2 = Byte.parseByte(s);
        } else {
            TXCRED2 = Byte.MIN_VALUE;
        }
    }

    protected final void initUDEBT(String s) {
        if (!s.trim().isEmpty()) {
            UDEBT = Integer.parseInt(s);
        } else {
            UDEBT = Integer.MIN_VALUE;
        }
    }

    protected final void initUDEBT2(String s) {
        if (!s.trim().isEmpty()) {
            UDEBT2 = Integer.parseInt(s);
        } else {
            UDEBT2 = Integer.MIN_VALUE;
        }
    }

    protected final void initUDEBT3(String s) {
        if (!s.trim().isEmpty()) {
            UDEBT3 = Integer.parseInt(s);
        } else {
            UDEBT3 = Integer.MIN_VALUE;
        }
    }

    protected final void initUDEBT4(String s) {
        if (!s.trim().isEmpty()) {
            UDEBT4 = Integer.parseInt(s);
        } else {
            UDEBT4 = Integer.MIN_VALUE;
        }
    }

    protected final void initUDEBT5(String s) {
        if (!s.trim().isEmpty()) {
            UDEBT5 = Integer.parseInt(s);
        } else {
            UDEBT5 = Integer.MIN_VALUE;
        }
    }

    protected final void initUDEBTB(String s) {
        if (!s.trim().isEmpty()) {
            UDEBTB = Byte.parseByte(s);
        } else {
            UDEBTB = Byte.MIN_VALUE;
        }
    }

    protected final void initUDEBTB2(String s) {
        if (!s.trim().isEmpty()) {
            UDEBTB2 = Byte.parseByte(s);
        } else {
            UDEBTB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initUDEBTB3(String s) {
        if (!s.trim().isEmpty()) {
            UDEBTB3 = Byte.parseByte(s);
        } else {
            UDEBTB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initUDEBTB4(String s) {
        if (!s.trim().isEmpty()) {
            UDEBTB4 = Byte.parseByte(s);
        } else {
            UDEBTB4 = Byte.MIN_VALUE;
        }
    }

    protected final void initUDEBTB5(String s) {
        if (!s.trim().isEmpty()) {
            UDEBTB5 = Byte.parseByte(s);
        } else {
            UDEBTB5 = Byte.MIN_VALUE;
        }
    }

    protected final void initUGDVB(String s) {
        if (!s.trim().isEmpty()) {
            UGDVB = Byte.parseByte(s);
        } else {
            UGDVB = Byte.MIN_VALUE;
        }
    }

    protected final void initUGDVB2(String s) {
        if (!s.trim().isEmpty()) {
            UGDVB2 = Byte.parseByte(s);
        } else {
            UGDVB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initUGDVB3(String s) {
        if (!s.trim().isEmpty()) {
            UGDVB3 = Byte.parseByte(s);
        } else {
            UGDVB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initUGDVB4(String s) {
        if (!s.trim().isEmpty()) {
            UGDVB4 = Byte.parseByte(s);
        } else {
            UGDVB4 = Byte.MIN_VALUE;
        }
    }

    protected final void initUGDVB5(String s) {
        if (!s.trim().isEmpty()) {
            UGDVB5 = Byte.parseByte(s);
        } else {
            UGDVB5 = Byte.MIN_VALUE;
        }
    }

    protected final void initUITRUST(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            UITRUST = false;
        }
    }

    protected final void initULAND(String s) {
        if (!s.trim().isEmpty()) {
            ULAND = Byte.parseByte(s);
        } else {
            ULAND = Byte.MIN_VALUE;
        }
    }

    protected final void initULAND2(String s) {
        if (!s.trim().isEmpty()) {
            ULAND2 = Byte.parseByte(s);
        } else {
            ULAND2 = Byte.MIN_VALUE;
        }
    }

    protected final void initULAND3(String s) {
        if (!s.trim().isEmpty()) {
            ULAND3 = Byte.parseByte(s);
        } else {
            ULAND3 = Byte.MIN_VALUE;
        }
    }

    protected final void initULAND4(String s) {
        if (!s.trim().isEmpty()) {
            ULAND4 = Byte.parseByte(s);
        } else {
            ULAND4 = Byte.MIN_VALUE;
        }
    }

    protected final void initULAND5(String s) {
        if (!s.trim().isEmpty()) {
            ULAND5 = Byte.parseByte(s);
        } else {
            ULAND5 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPROP1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            UPROP1_IFLAG = false;
        }
    }

    protected final void initUPROP2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            UPROP2_IFLAG = false;
        }
    }

    protected final void initUPROP3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            UPROP3_IFLAG = false;
        }
    }

    protected final void initUPROP4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            UPROP4_IFLAG = false;
        }
    }

    protected final void initUPRSH10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            UPRSH10 = false;
        }
    }

    protected final void initUPRSH6(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH6 = Byte.parseByte(s);
        } else {
            UPRSH6 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH7(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH7 = Byte.parseByte(s);
        } else {
            UPRSH7 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH8(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH8 = Byte.parseByte(s);
        } else {
            UPRSH8 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH9(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH9 = Byte.parseByte(s);
        } else {
            UPRSH9 = Byte.MIN_VALUE;
        }
    }

    protected final void initUVAL(String s) {
        if (!s.trim().isEmpty()) {
            UVAL = Integer.parseInt(s);
        } else {
            UVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initUVAL2(String s) {
        if (!s.trim().isEmpty()) {
            UVAL2 = Integer.parseInt(s);
        } else {
            UVAL2 = Integer.MIN_VALUE;
        }
    }

    protected final void initUVAL3(String s) {
        if (!s.trim().isEmpty()) {
            UVAL3 = Integer.parseInt(s);
        } else {
            UVAL3 = Integer.MIN_VALUE;
        }
    }

    protected final void initUVAL4(String s) {
        if (!s.trim().isEmpty()) {
            UVAL4 = Integer.parseInt(s);
        } else {
            UVAL4 = Integer.MIN_VALUE;
        }
    }

    protected final void initUVAL5(String s) {
        if (!s.trim().isEmpty()) {
            UVAL5 = Integer.parseInt(s);
        } else {
            UVAL5 = Integer.MIN_VALUE;
        }
    }

    protected final void initUVALB(String s) {
        if (!s.trim().isEmpty()) {
            UVALB = Byte.parseByte(s);
        } else {
            UVALB = Byte.MIN_VALUE;
        }
    }

    protected final void initUVALB2(String s) {
        if (!s.trim().isEmpty()) {
            UVALB2 = Byte.parseByte(s);
        } else {
            UVALB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initUVALB3(String s) {
        if (!s.trim().isEmpty()) {
            UVALB3 = Byte.parseByte(s);
        } else {
            UVALB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initUVALB4(String s) {
        if (!s.trim().isEmpty()) {
            UVALB4 = Byte.parseByte(s);
        } else {
            UVALB4 = Byte.MIN_VALUE;
        }
    }

    protected final void initUVALB5(String s) {
        if (!s.trim().isEmpty()) {
            UVALB5 = Byte.parseByte(s);
        } else {
            UVALB5 = Byte.MIN_VALUE;
        }
    }

    protected final void initWHOREATT(String s) {
        if (!s.trim().isEmpty()) {
            WHOREATT = Byte.parseByte(s);
        } else {
            WHOREATT = Byte.MIN_VALUE;
        }
    }

    protected final void initWHORECAR(String s) {
        if (!s.trim().isEmpty()) {
            WHORECAR = Byte.parseByte(s);
        } else {
            WHORECAR = Byte.MIN_VALUE;
        }
    }

    protected final void initWHOREMOB(String s) {
        if (!s.trim().isEmpty()) {
            WHOREMOB = Byte.parseByte(s);
        } else {
            WHOREMOB = Byte.MIN_VALUE;
        }
    }

    public byte getATTALL() {
        return ATTALL;
    }

    public String getBACCBEG() {
        return BACCBEG;
    }

    public String getBACCEND() {
        return BACCEND;
    }

    public String getBACCEND2() {
        return BACCEND2;
    }

    public String getBACCEND3() {
        return BACCEND3;
    }

    public byte getBACCSA() {
        return BACCSA;
    }

    public byte getBACCSB() {
        return BACCSB;
    }

    public double getBAMT() {
        return BAMT;
    }

    public double getBAMT10() {
        return BAMT10;
    }

    public double getBAMT11() {
        return BAMT11;
    }

    public double getBAMT12() {
        return BAMT12;
    }

    public double getBAMT13() {
        return BAMT13;
    }

    public double getBAMT14() {
        return BAMT14;
    }

    public double getBAMT15() {
        return BAMT15;
    }

    public double getBAMT16() {
        return BAMT16;
    }

    public double getBAMT17() {
        return BAMT17;
    }

    public double getBAMT18() {
        return BAMT18;
    }

    public double getBAMT2() {
        return BAMT2;
    }

    public double getBAMT3() {
        return BAMT3;
    }

    public double getBAMT4() {
        return BAMT4;
    }

    public double getBAMT5() {
        return BAMT5;
    }

    public double getBAMT6() {
        return BAMT6;
    }

    public double getBAMT7() {
        return BAMT7;
    }

    public double getBAMT8() {
        return BAMT8;
    }

    public double getBAMT9() {
        return BAMT9;
    }

    public byte getBAMTDK() {
        return BAMTDK;
    }

    public byte getBAMTDK10() {
        return BAMTDK10;
    }

    public byte getBAMTDK11() {
        return BAMTDK11;
    }

    public byte getBAMTDK12() {
        return BAMTDK12;
    }

    public byte getBAMTDK13() {
        return BAMTDK13;
    }

    public byte getBAMTDK14() {
        return BAMTDK14;
    }

    public boolean getBAMTDK15() {
        return BAMTDK15;
    }

    public byte getBAMTDK16() {
        return BAMTDK16;
    }

    public byte getBAMTDK17() {
        return BAMTDK17;
    }

    public byte getBAMTDK18() {
        return BAMTDK18;
    }

    public boolean getBAMTDK2() {
        return BAMTDK2;
    }

    public byte getBAMTDK3() {
        return BAMTDK3;
    }

    public byte getBAMTDK4() {
        return BAMTDK4;
    }

    public byte getBAMTDK5() {
        return BAMTDK5;
    }

    public byte getBAMTDK6() {
        return BAMTDK6;
    }

    public byte getBAMTDK7() {
        return BAMTDK7;
    }

    public byte getBAMTDK8() {
        return BAMTDK8;
    }

    public byte getBAMTDK9() {
        return BAMTDK9;
    }

    public int getBBEFORE() {
        return BBEFORE;
    }

    public int getBDEBTS() {
        return BDEBTS;
    }

    public byte getBDIRNI() {
        return BDIRNI;
    }

    public byte getBDOCS() {
        return BDOCS;
    }

    public byte getBEMPN() {
        return BEMPN;
    }

    public byte getBEN1Q1() {
        return BEN1Q1;
    }

    public byte getBEN1Q2() {
        return BEN1Q2;
    }

    public byte getBEN1Q3() {
        return BEN1Q3;
    }

    public byte getBEN2Q1() {
        return BEN2Q1;
    }

    public byte getBEN2Q2() {
        return BEN2Q2;
    }

    public byte getBEN2Q3() {
        return BEN2Q3;
    }

    public byte getBFUND18() {
        return BFUND18;
    }

    public byte getBFUND3() {
        return BFUND3;
    }

    public boolean getBFUND4() {
        return BFUND4;
    }

    public byte getBNATINS() {
        return BNATINS;
    }

    public int getBONAMT() {
        return BONAMT;
    }

    public int getBOWED() {
        return BOWED;
    }

    public byte getBOWN() {
        return BOWN;
    }

    public byte getBPART() {
        return BPART;
    }

    public byte getBPD() {
        return BPD;
    }

    public byte getBPD10() {
        return BPD10;
    }

    public byte getBPD11() {
        return BPD11;
    }

    public byte getBPD12() {
        return BPD12;
    }

    public byte getBPD13() {
        return BPD13;
    }

    public byte getBPD14() {
        return BPD14;
    }

    public byte getBPD15() {
        return BPD15;
    }

    public byte getBPD16() {
        return BPD16;
    }

    public byte getBPD17() {
        return BPD17;
    }

    public byte getBPD18() {
        return BPD18;
    }

    public byte getBPD2() {
        return BPD2;
    }

    public byte getBPD3() {
        return BPD3;
    }

    public byte getBPD4() {
        return BPD4;
    }

    public byte getBPD5() {
        return BPD5;
    }

    public byte getBPD6() {
        return BPD6;
    }

    public byte getBPD7() {
        return BPD7;
    }

    public byte getBPD8() {
        return BPD8;
    }

    public byte getBPD9() {
        return BPD9;
    }

    public byte getBPRFLOSS() {
        return BPRFLOSS;
    }

    public int getBPROFIT() {
        return BPROFIT;
    }

    public byte getBPROPN() {
        return BPROPN;
    }

    public byte getBRETIRE() {
        return BRETIRE;
    }

    public byte getBSIZE() {
        return BSIZE;
    }

    public byte getBSTART() {
        return BSTART;
    }

    public byte getBTAX() {
        return BTAX;
    }

    public byte getBTYPE() {
        return BTYPE;
    }

    public byte getBUILDDB1() {
        return BUILDDB1;
    }

    public byte getBUILDDB2() {
        return BUILDDB2;
    }

    public boolean getBUILDDB3() {
        return BUILDDB3;
    }

    public int getBUILDDEBT1() {
        return BUILDDEBT1;
    }

    public int getBUILDDEBT1_I() {
        return BUILDDEBT1_I;
    }

    public boolean getBUILDDEBT1_IFLAG() {
        return BUILDDEBT1_IFLAG;
    }

    public int getBUILDDEBT2() {
        return BUILDDEBT2;
    }

    public int getBUILDDEBT2_I() {
        return BUILDDEBT2_I;
    }

    public boolean getBUILDDEBT2_IFLAG() {
        return BUILDDEBT2_IFLAG;
    }

    public int getBUILDDEBT3() {
        return BUILDDEBT3;
    }

    public int getBUILDDEBT3_I() {
        return BUILDDEBT3_I;
    }

    public boolean getBUILDDEBT3_IFLAG() {
        return BUILDDEBT3_IFLAG;
    }

    public int getBUILDVAL1() {
        return BUILDVAL1;
    }

    public int getBUILDVAL1_I() {
        return BUILDVAL1_I;
    }

    public boolean getBUILDVAL1_IFLAG() {
        return BUILDVAL1_IFLAG;
    }

    public int getBUILDVAL2() {
        return BUILDVAL2;
    }

    public int getBUILDVAL2_I() {
        return BUILDVAL2_I;
    }

    public boolean getBUILDVAL2_IFLAG() {
        return BUILDVAL2_IFLAG;
    }

    public int getBUILDVAL3() {
        return BUILDVAL3;
    }

    public int getBUILDVAL3_I() {
        return BUILDVAL3_I;
    }

    public boolean getBUILDVAL3_IFLAG() {
        return BUILDVAL3_IFLAG;
    }

    public byte getBUILDVB1() {
        return BUILDVB1;
    }

    public byte getBUILDVB2() {
        return BUILDVB2;
    }

    public byte getBUILDVB3() {
        return BUILDVB3;
    }

    public int getBVAL() {
        return BVAL;
    }

    public byte getBVALB() {
        return BVALB;
    }

    public byte getBVALQ() {
        return BVALQ;
    }

    public byte getBVALQ2() {
        return BVALQ2;
    }

    public byte getBVALQ3() {
        return BVALQ3;
    }

    public byte getBVALWH1() {
        return BVALWH1;
    }

    public byte getBVALWH10() {
        return BVALWH10;
    }

    public byte getBVALWH13() {
        return BVALWH13;
    }

    public boolean getBVALWH14() {
        return BVALWH14;
    }

    public byte getBVALWH2() {
        return BVALWH2;
    }

    public byte getBVALWH3() {
        return BVALWH3;
    }

    public byte getBVALWH7() {
        return BVALWH7;
    }

    public byte getBVALWH8() {
        return BVALWH8;
    }

    public byte getBVALWH9() {
        return BVALWH9;
    }

    public short getBYEAR() {
        return BYEAR;
    }

    public byte getCARER1Q() {
        return CARER1Q;
    }

    public byte getCHECKCC() {
        return CHECKCC;
    }

    public byte getCHECKDL() {
        return CHECKDL;
    }

    public boolean getCHECKHB() {
        return CHECKHB;
    }

    public byte getCHECKHP() {
        return CHECKHP;
    }

    public byte getCHECKMO() {
        return CHECKMO;
    }

    public byte getCHECKST() {
        return CHECKST;
    }

    public byte getCOMMIT1() {
        return COMMIT1;
    }

    public byte getCOMMIT2() {
        return COMMIT2;
    }

    public byte getCOMMIT3() {
        return COMMIT3;
    }

    public byte getCOMMIT4() {
        return COMMIT4;
    }

    public boolean getCOMMIT5() {
        return COMMIT5;
    }

    public byte getDBURDH() {
        return DBURDH;
    }

    public byte getDBURDW3() {
        return DBURDW3;
    }

    public byte getDBURDW4() {
        return DBURDW4;
    }

    public byte getDBURDW5() {
        return DBURDW5;
    }

    public byte getDBURDW6() {
        return DBURDW6;
    }

    public int getDCAMC() {
        return DCAMC;
    }

    public int getDCAMC2_I() {
        return DCAMC2_I;
    }

    public byte getDCAMC2_IFLAG() {
        return DCAMC2_IFLAG;
    }

    public int getDCAMC3_I() {
        return DCAMC3_I;
    }

    public byte getDCAMC3_IFLAG() {
        return DCAMC3_IFLAG;
    }

    public int getDCAMC4() {
        return DCAMC4;
    }

    public int getDCAMC4_I() {
        return DCAMC4_I;
    }

    public byte getDCAMC4_IFLAG() {
        return DCAMC4_IFLAG;
    }

    public short getDCAMC5() {
        return DCAMC5;
    }

    public short getDCAMC5_I() {
        return DCAMC5_I;
    }

    public byte getDCAMC5_IFLAG() {
        return DCAMC5_IFLAG;
    }

    public int getDCAMC_I() {
        return DCAMC_I;
    }

    public byte getDCAMC_IFLAG() {
        return DCAMC_IFLAG;
    }

    public short getDCAMD() {
        return DCAMD;
    }

    public short getDCAMD2_I() {
        return DCAMD2_I;
    }

    public byte getDCAMD2_IFLAG() {
        return DCAMD2_IFLAG;
    }

    public short getDCAMD3_I() {
        return DCAMD3_I;
    }

    public byte getDCAMD3_IFLAG() {
        return DCAMD3_IFLAG;
    }

    public short getDCAMD4() {
        return DCAMD4;
    }

    public short getDCAMD4_I() {
        return DCAMD4_I;
    }

    public byte getDCAMD4_IFLAG() {
        return DCAMD4_IFLAG;
    }

    public short getDCAMD5() {
        return DCAMD5;
    }

    public short getDCAMD5_I() {
        return DCAMD5_I;
    }

    public boolean getDCAMD5_IFLAG() {
        return DCAMD5_IFLAG;
    }

    public short getDCAMD_I() {
        return DCAMD_I;
    }

    public byte getDCAMD_IFLAG() {
        return DCAMD_IFLAG;
    }

    public int getDCAMOS() {
        return DCAMOS;
    }

    public int getDCAMOS4() {
        return DCAMOS4;
    }

    public short getDCAMOS5() {
        return DCAMOS5;
    }

    public short getDCAMP() {
        return DCAMP;
    }

    public short getDCAMP2_I() {
        return DCAMP2_I;
    }

    public byte getDCAMP2_IFLAG() {
        return DCAMP2_IFLAG;
    }

    public short getDCAMP3_I() {
        return DCAMP3_I;
    }

    public byte getDCAMP3_IFLAG() {
        return DCAMP3_IFLAG;
    }

    public short getDCAMP4() {
        return DCAMP4;
    }

    public short getDCAMP4_I() {
        return DCAMP4_I;
    }

    public byte getDCAMP4_IFLAG() {
        return DCAMP4_IFLAG;
    }

    public short getDCAMP5() {
        return DCAMP5;
    }

    public short getDCAMP5_I() {
        return DCAMP5_I;
    }

    public byte getDCAMP5_IFLAG() {
        return DCAMP5_IFLAG;
    }

    public short getDCAMP_I() {
        return DCAMP_I;
    }

    public byte getDCAMP_IFLAG() {
        return DCAMP_IFLAG;
    }

    public byte getDCANU_I() {
        return DCANU_I;
    }

    public byte getDCANU_IFLAG() {
        return DCANU_IFLAG;
    }

    public byte getDCANY_I() {
        return DCANY_I;
    }

    public byte getDCANY_IFLAG() {
        return DCANY_IFLAG;
    }

    public byte getDCCINTR() {
        return DCCINTR;
    }

    public byte getDCCOS() {
        return DCCOS;
    }

    public byte getDCCOS2_I() {
        return DCCOS2_I;
    }

    public byte getDCCOS2_IFLAG() {
        return DCCOS2_IFLAG;
    }

    public byte getDCCOS3_I() {
        return DCCOS3_I;
    }

    public byte getDCCOS3_IFLAG() {
        return DCCOS3_IFLAG;
    }

    public byte getDCCOS4() {
        return DCCOS4;
    }

    public byte getDCCOS4_I() {
        return DCCOS4_I;
    }

    public byte getDCCOS4_IFLAG() {
        return DCCOS4_IFLAG;
    }

    public byte getDCCOS5() {
        return DCCOS5;
    }

    public byte getDCCOS5_I() {
        return DCCOS5_I;
    }

    public byte getDCCOS5_IFLAG() {
        return DCCOS5_IFLAG;
    }

    public byte getDCCOS_I() {
        return DCCOS_I;
    }

    public byte getDCCOS_IFLAG() {
        return DCCOS_IFLAG;
    }

    public byte getDCCSP() {
        return DCCSP;
    }

    public byte getDCCSP2_I() {
        return DCCSP2_I;
    }

    public byte getDCCSP2_IFLAG() {
        return DCCSP2_IFLAG;
    }

    public byte getDCCSP3_I() {
        return DCCSP3_I;
    }

    public byte getDCCSP3_IFLAG() {
        return DCCSP3_IFLAG;
    }

    public byte getDCCSP4() {
        return DCCSP4;
    }

    public byte getDCCSP4_I() {
        return DCCSP4_I;
    }

    public boolean getDCCSP4_IFLAG() {
        return DCCSP4_IFLAG;
    }

    public byte getDCCSP5() {
        return DCCSP5;
    }

    public byte getDCCSP5_I() {
        return DCCSP5_I;
    }

    public boolean getDCCSP5_IFLAG() {
        return DCCSP5_IFLAG;
    }

    public byte getDCCSP_I() {
        return DCCSP_I;
    }

    public byte getDCCSP_IFLAG() {
        return DCCSP_IFLAG;
    }

    public byte getDCESB() {
        return DCESB;
    }

    public byte getDCESB4() {
        return DCESB4;
    }

    public byte getDCESB5() {
        return DCESB5;
    }

    public byte getDCINZ() {
        return DCINZ;
    }

    public byte getDCINZ4() {
        return DCINZ4;
    }

    public byte getDCINZ5() {
        return DCINZ5;
    }

    public byte getDCNAM() {
        return DCNAM;
    }

    public byte getDCNAM2_I() {
        return DCNAM2_I;
    }

    public byte getDCNAM2_IFLAG() {
        return DCNAM2_IFLAG;
    }

    public byte getDCNAM3_I() {
        return DCNAM3_I;
    }

    public byte getDCNAM3_IFLAG() {
        return DCNAM3_IFLAG;
    }

    public byte getDCNAM4() {
        return DCNAM4;
    }

    public byte getDCNAM4_I() {
        return DCNAM4_I;
    }

    public byte getDCNAM4_IFLAG() {
        return DCNAM4_IFLAG;
    }

    public byte getDCNAM5() {
        return DCNAM5;
    }

    public byte getDCNAM5_I() {
        return DCNAM5_I;
    }

    public byte getDCNAM5_IFLAG() {
        return DCNAM5_IFLAG;
    }

    public byte getDCNAM_I() {
        return DCNAM_I;
    }

    public byte getDCNAM_IFLAG() {
        return DCNAM_IFLAG;
    }

    public byte getDCNUM() {
        return DCNUM;
    }

    public byte getDCNUM_I() {
        return DCNUM_I;
    }

    public byte getDCNUM_IFLAG() {
        return DCNUM_IFLAG;
    }

    public int getDCOINV() {
        return DCOINV;
    }

    public byte getDCOINVB() {
        return DCOINVB;
    }

    public int getDCOINV_I() {
        return DCOINV_I;
    }

    public byte getDCOINV_IFLAG() {
        return DCOINV_IFLAG;
    }

    public boolean getDCONM10() {
        return DCONM10;
    }

    public boolean getDCONM10_I() {
        return DCONM10_I;
    }

    public boolean getDCONM10_IFLAG() {
        return DCONM10_IFLAG;
    }

    public byte getDCONM1_I() {
        return DCONM1_I;
    }

    public byte getDCONM1_IFLAG() {
        return DCONM1_IFLAG;
    }

    public byte getDCONM2_I() {
        return DCONM2_I;
    }

    public byte getDCONM2_IFLAG() {
        return DCONM2_IFLAG;
    }

    public byte getDCONM3_I() {
        return DCONM3_I;
    }

    public byte getDCONM3_IFLAG() {
        return DCONM3_IFLAG;
    }

    public byte getDCONM4_I() {
        return DCONM4_I;
    }

    public byte getDCONM4_IFLAG() {
        return DCONM4_IFLAG;
    }

    public byte getDCONM5_I() {
        return DCONM5_I;
    }

    public byte getDCONM5_IFLAG() {
        return DCONM5_IFLAG;
    }

    public byte getDCONM6_I() {
        return DCONM6_I;
    }

    public byte getDCONM6_IFLAG() {
        return DCONM6_IFLAG;
    }

    public byte getDCONM7() {
        return DCONM7;
    }

    public byte getDCONM7_I() {
        return DCONM7_I;
    }

    public boolean getDCONM7_IFLAG() {
        return DCONM7_IFLAG;
    }

    public boolean getDCONM8() {
        return DCONM8;
    }

    public boolean getDCONM8_I() {
        return DCONM8_I;
    }

    public boolean getDCONM8_IFLAG() {
        return DCONM8_IFLAG;
    }

    public byte getDCONM9() {
        return DCONM9;
    }

    public byte getDCONM9_I() {
        return DCONM9_I;
    }

    public boolean getDCONM9_IFLAG() {
        return DCONM9_IFLAG;
    }

    public int getDCOSHV() {
        return DCOSHV;
    }

    public byte getDCOSHVB() {
        return DCOSHVB;
    }

    public int getDCOSHV_I() {
        return DCOSHV_I;
    }

    public byte getDCOSHV_IFLAG() {
        return DCOSHV_IFLAG;
    }

    public byte getDCPER() {
        return DCPER;
    }

    public boolean getDCPER4() {
        return DCPER4;
    }

    public boolean getDCPER5() {
        return DCPER5;
    }

    public byte getDCREC() {
        return DCREC;
    }

    public byte getDCREC2_I() {
        return DCREC2_I;
    }

    public byte getDCREC2_IFLAG() {
        return DCREC2_IFLAG;
    }

    public byte getDCREC3_I() {
        return DCREC3_I;
    }

    public byte getDCREC3_IFLAG() {
        return DCREC3_IFLAG;
    }

    public byte getDCREC4() {
        return DCREC4;
    }

    public byte getDCREC4_I() {
        return DCREC4_I;
    }

    public byte getDCREC4_IFLAG() {
        return DCREC4_IFLAG;
    }

    public byte getDCREC5() {
        return DCREC5;
    }

    public byte getDCREC5_I() {
        return DCREC5_I;
    }

    public byte getDCREC5_IFLAG() {
        return DCREC5_IFLAG;
    }

    public byte getDCREC_I() {
        return DCREC_I;
    }

    public byte getDCREC_IFLAG() {
        return DCREC_IFLAG;
    }

    public byte getDCRSP() {
        return DCRSP;
    }

    public byte getDCRSP2_I() {
        return DCRSP2_I;
    }

    public byte getDCRSP2_IFLAG() {
        return DCRSP2_IFLAG;
    }

    public byte getDCRSP3_I() {
        return DCRSP3_I;
    }

    public byte getDCRSP3_IFLAG() {
        return DCRSP3_IFLAG;
    }

    public boolean getDCRSP4() {
        return DCRSP4;
    }

    public byte getDCRSP4_I() {
        return DCRSP4_I;
    }

    public byte getDCRSP4_IFLAG() {
        return DCRSP4_IFLAG;
    }

    public boolean getDCRSP5() {
        return DCRSP5;
    }

    public byte getDCRSP5_I() {
        return DCRSP5_I;
    }

    public boolean getDCRSP5_IFLAG() {
        return DCRSP5_IFLAG;
    }

    public boolean getDCRSP_I() {
        return DCRSP_I;
    }

    public byte getDCRSP_IFLAG() {
        return DCRSP_IFLAG;
    }

    public byte getDHPBEH() {
        return DHPBEH;
    }

    public byte getDHPBEH3() {
        return DHPBEH3;
    }

    public byte getDHPBEH3_I() {
        return DHPBEH3_I;
    }

    public byte getDHPBEH3_IFLAG() {
        return DHPBEH3_IFLAG;
    }

    public byte getDHPBEH4() {
        return DHPBEH4;
    }

    public byte getDHPBEH4_I() {
        return DHPBEH4_I;
    }

    public boolean getDHPBEH4_IFLAG() {
        return DHPBEH4_IFLAG;
    }

    public byte getDHPBEH5() {
        return DHPBEH5;
    }

    public byte getDHPBEH5_I() {
        return DHPBEH5_I;
    }

    public boolean getDHPBEH5_IFLAG() {
        return DHPBEH5_IFLAG;
    }

    public byte getDHPBEH_I() {
        return DHPBEH_I;
    }

    public byte getDHPBEH_IFLAG() {
        return DHPBEH_IFLAG;
    }

    public byte getDHPEST() {
        return DHPEST;
    }

    public byte getDHPEST3() {
        return DHPEST3;
    }

    public byte getDHPEST4() {
        return DHPEST4;
    }

    public boolean getDHPEST5() {
        return DHPEST5;
    }

    public short getDHPINS() {
        return DHPINS;
    }

    public short getDHPINS3() {
        return DHPINS3;
    }

    public short getDHPINS3_I() {
        return DHPINS3_I;
    }

    public byte getDHPINS3_IFLAG() {
        return DHPINS3_IFLAG;
    }

    public short getDHPINS4() {
        return DHPINS4;
    }

    public double getDHPINS4_I() {
        return DHPINS4_I;
    }

    public byte getDHPINS4_IFLAG() {
        return DHPINS4_IFLAG;
    }

    public short getDHPINS5() {
        return DHPINS5;
    }

    public short getDHPINS5_I() {
        return DHPINS5_I;
    }

    public byte getDHPINS5_IFLAG() {
        return DHPINS5_IFLAG;
    }

    public short getDHPINS_I() {
        return DHPINS_I;
    }

    public byte getDHPINS_IFLAG() {
        return DHPINS_IFLAG;
    }

    public byte getDHPINT() {
        return DHPINT;
    }

    public byte getDHPINT3() {
        return DHPINT3;
    }

    public byte getDHPINT4() {
        return DHPINT4;
    }

    public byte getDHPINT5() {
        return DHPINT5;
    }

    public byte getDHPOFT() {
        return DHPOFT;
    }

    public byte getDHPOFT3() {
        return DHPOFT3;
    }

    public byte getDHPOFT3_I() {
        return DHPOFT3_I;
    }

    public byte getDHPOFT3_IFLAG() {
        return DHPOFT3_IFLAG;
    }

    public byte getDHPOFT4() {
        return DHPOFT4;
    }

    public byte getDHPOFT4_I() {
        return DHPOFT4_I;
    }

    public boolean getDHPOFT4_IFLAG() {
        return DHPOFT4_IFLAG;
    }

    public byte getDHPOFT5() {
        return DHPOFT5;
    }

    public byte getDHPOFT5_I() {
        return DHPOFT5_I;
    }

    public boolean getDHPOFT5_IFLAG() {
        return DHPOFT5_IFLAG;
    }

    public byte getDHPOFT_I() {
        return DHPOFT_I;
    }

    public byte getDHPOFT_IFLAG() {
        return DHPOFT_IFLAG;
    }

    public short getDHPOWE() {
        return DHPOWE;
    }

    public short getDHPOWE3() {
        return DHPOWE3;
    }

    public short getDHPOWE3_I() {
        return DHPOWE3_I;
    }

    public byte getDHPOWE3_IFLAG() {
        return DHPOWE3_IFLAG;
    }

    public short getDHPOWE4() {
        return DHPOWE4;
    }

    public short getDHPOWE4_I() {
        return DHPOWE4_I;
    }

    public byte getDHPOWE4_IFLAG() {
        return DHPOWE4_IFLAG;
    }

    public short getDHPOWE5() {
        return DHPOWE5;
    }

    public short getDHPOWE5_I() {
        return DHPOWE5_I;
    }

    public boolean getDHPOWE5_IFLAG() {
        return DHPOWE5_IFLAG;
    }

    public short getDHPOWE_I() {
        return DHPOWE_I;
    }

    public byte getDHPOWE_IFLAG() {
        return DHPOWE_IFLAG;
    }

    public byte getDHPWEST() {
        return DHPWEST;
    }

    public byte getDHPWEST3() {
        return DHPWEST3;
    }

    public byte getDHPWEST4() {
        return DHPWEST4;
    }

    public byte getDHPWEST5() {
        return DHPWEST5;
    }

    public byte getDHPWHNM() {
        return DHPWHNM;
    }

    public byte getDHPWHNM3() {
        return DHPWHNM3;
    }

    public byte getDHPWHNM3_I() {
        return DHPWHNM3_I;
    }

    public byte getDHPWHNM3_IFLAG() {
        return DHPWHNM3_IFLAG;
    }

    public byte getDHPWHNM4() {
        return DHPWHNM4;
    }

    public byte getDHPWHNM4_I() {
        return DHPWHNM4_I;
    }

    public byte getDHPWHNM4_IFLAG() {
        return DHPWHNM4_IFLAG;
    }

    public byte getDHPWHNM5() {
        return DHPWHNM5;
    }

    public byte getDHPWHNM5_I() {
        return DHPWHNM5_I;
    }

    public byte getDHPWHNM5_IFLAG() {
        return DHPWHNM5_IFLAG;
    }

    public byte getDHPWHNM_I() {
        return DHPWHNM_I;
    }

    public byte getDHPWHNM_IFLAG() {
        return DHPWHNM_IFLAG;
    }

    public short getDHPWHNY() {
        return DHPWHNY;
    }

    public short getDHPWHNY3() {
        return DHPWHNY3;
    }

    public short getDHPWHNY3_I() {
        return DHPWHNY3_I;
    }

    public byte getDHPWHNY3_IFLAG() {
        return DHPWHNY3_IFLAG;
    }

    public short getDHPWHNY4() {
        return DHPWHNY4;
    }

    public short getDHPWHNY4_I() {
        return DHPWHNY4_I;
    }

    public byte getDHPWHNY4_IFLAG() {
        return DHPWHNY4_IFLAG;
    }

    public short getDHPWHNY5() {
        return DHPWHNY5;
    }

    public short getDHPWHNY5_I() {
        return DHPWHNY5_I;
    }

    public byte getDHPWHNY5_IFLAG() {
        return DHPWHNY5_IFLAG;
    }

    public short getDHPWHNY_I() {
        return DHPWHNY_I;
    }

    public byte getDHPWHNY_IFLAG() {
        return DHPWHNY_IFLAG;
    }

    public byte getDISBEN1() {
        return DISBEN1;
    }

    public byte getDISBEN2() {
        return DISBEN2;
    }

    public byte getDISBEN3() {
        return DISBEN3;
    }

    public byte getDLBEH() {
        return DLBEH;
    }

    public byte getDLBEH_I() {
        return DLBEH_I;
    }

    public byte getDLBEH_IFLAG() {
        return DLBEH_IFLAG;
    }

    public byte getDLEST() {
        return DLEST;
    }

    public short getDLINS() {
        return DLINS;
    }

    public double getDLINS_I() {
        return DLINS_I;
    }

    public byte getDLINS_IFLAG() {
        return DLINS_IFLAG;
    }

    public byte getDLINT() {
        return DLINT;
    }

    public byte getDLOFT() {
        return DLOFT;
    }

    public byte getDLOFT_I() {
        return DLOFT_I;
    }

    public byte getDLOFT_IFLAG() {
        return DLOFT_IFLAG;
    }

    public short getDLOWE() {
        return DLOWE;
    }

    public short getDLOWE_I() {
        return DLOWE_I;
    }

    public byte getDLOWE_IFLAG() {
        return DLOWE_IFLAG;
    }

    public byte getDLSEC() {
        return DLSEC;
    }

    public byte getDLTYPE() {
        return DLTYPE;
    }

    public byte getDLTYPE_I() {
        return DLTYPE_I;
    }

    public byte getDLTYPE_IFLAG() {
        return DLTYPE_IFLAG;
    }

    public byte getDLWEST() {
        return DLWEST;
    }

    public byte getDLWHNM() {
        return DLWHNM;
    }

    public byte getDLWHNM_I() {
        return DLWHNM_I;
    }

    public byte getDLWHNM_IFLAG() {
        return DLWHNM_IFLAG;
    }

    public short getDLWHNY() {
        return DLWHNY;
    }

    public short getDLWHNY_I() {
        return DLWHNY_I;
    }

    public byte getDLWHNY_IFLAG() {
        return DLWHNY_IFLAG;
    }

    public byte getDLWHY11() {
        return DLWHY11;
    }

    public boolean getDLWHY12() {
        return DLWHY12;
    }

    public byte getDLWHY17() {
        return DLWHY17;
    }

    public boolean getDLWHY18() {
        return DLWHY18;
    }

    public byte getDLWHY29() {
        return DLWHY29;
    }

    public byte getDMOBEH() {
        return DMOBEH;
    }

    public byte getDMOBEH3() {
        return DMOBEH3;
    }

    public byte getDMOBEH3_I() {
        return DMOBEH3_I;
    }

    public byte getDMOBEH3_IFLAG() {
        return DMOBEH3_IFLAG;
    }

    public byte getDMOBEH4() {
        return DMOBEH4;
    }

    public byte getDMOBEH4_I() {
        return DMOBEH4_I;
    }

    public boolean getDMOBEH4_IFLAG() {
        return DMOBEH4_IFLAG;
    }

    public byte getDMOBEH5() {
        return DMOBEH5;
    }

    public byte getDMOBEH5_I() {
        return DMOBEH5_I;
    }

    public boolean getDMOBEH5_IFLAG() {
        return DMOBEH5_IFLAG;
    }

    public byte getDMOBEH_I() {
        return DMOBEH_I;
    }

    public byte getDMOBEH_IFLAG() {
        return DMOBEH_IFLAG;
    }

    public byte getDMOEST() {
        return DMOEST;
    }

    public byte getDMOEST3() {
        return DMOEST3;
    }

    public byte getDMOEST4() {
        return DMOEST4;
    }

    public byte getDMOEST5() {
        return DMOEST5;
    }

    public short getDMOINS() {
        return DMOINS;
    }

    public short getDMOINS3() {
        return DMOINS3;
    }

    public byte getDMOINS3_I() {
        return DMOINS3_I;
    }

    public boolean getDMOINS3_IFLAG() {
        return DMOINS3_IFLAG;
    }

    public short getDMOINS4() {
        return DMOINS4;
    }

    public byte getDMOINS4_I() {
        return DMOINS4_I;
    }

    public byte getDMOINS4_IFLAG() {
        return DMOINS4_IFLAG;
    }

    public byte getDMOINS5() {
        return DMOINS5;
    }

    public byte getDMOINS5_I() {
        return DMOINS5_I;
    }

    public boolean getDMOINS5_IFLAG() {
        return DMOINS5_IFLAG;
    }

    public short getDMOINS_I() {
        return DMOINS_I;
    }

    public byte getDMOINS_IFLAG() {
        return DMOINS_IFLAG;
    }

    public byte getDMOINT() {
        return DMOINT;
    }

    public byte getDMOINT3() {
        return DMOINT3;
    }

    public byte getDMOINT4() {
        return DMOINT4;
    }

    public byte getDMOINT5() {
        return DMOINT5;
    }

    public byte getDMOOFT() {
        return DMOOFT;
    }

    public byte getDMOOFT3() {
        return DMOOFT3;
    }

    public byte getDMOOFT3_I() {
        return DMOOFT3_I;
    }

    public byte getDMOOFT3_IFLAG() {
        return DMOOFT3_IFLAG;
    }

    public byte getDMOOFT4() {
        return DMOOFT4;
    }

    public byte getDMOOFT4_I() {
        return DMOOFT4_I;
    }

    public boolean getDMOOFT4_IFLAG() {
        return DMOOFT4_IFLAG;
    }

    public byte getDMOOFT5() {
        return DMOOFT5;
    }

    public boolean getDMOOFT5_I() {
        return DMOOFT5_I;
    }

    public boolean getDMOOFT5_IFLAG() {
        return DMOOFT5_IFLAG;
    }

    public byte getDMOOFT_I() {
        return DMOOFT_I;
    }

    public byte getDMOOFT_IFLAG() {
        return DMOOFT_IFLAG;
    }

    public short getDMOOWE() {
        return DMOOWE;
    }

    public short getDMOOWE3() {
        return DMOOWE3;
    }

    public short getDMOOWE3_I() {
        return DMOOWE3_I;
    }

    public byte getDMOOWE3_IFLAG() {
        return DMOOWE3_IFLAG;
    }

    public short getDMOOWE4() {
        return DMOOWE4;
    }

    public short getDMOOWE4_I() {
        return DMOOWE4_I;
    }

    public boolean getDMOOWE4_IFLAG() {
        return DMOOWE4_IFLAG;
    }

    public short getDMOOWE5() {
        return DMOOWE5;
    }

    public short getDMOOWE5_I() {
        return DMOOWE5_I;
    }

    public boolean getDMOOWE5_IFLAG() {
        return DMOOWE5_IFLAG;
    }

    public short getDMOOWE_I() {
        return DMOOWE_I;
    }

    public byte getDMOOWE_IFLAG() {
        return DMOOWE_IFLAG;
    }

    public byte getDMOWEST() {
        return DMOWEST;
    }

    public byte getDMOWEST3() {
        return DMOWEST3;
    }

    public byte getDMOWEST4() {
        return DMOWEST4;
    }

    public byte getDMOWEST5() {
        return DMOWEST5;
    }

    public byte getDMOWHNM() {
        return DMOWHNM;
    }

    public byte getDMOWHNM3() {
        return DMOWHNM3;
    }

    public byte getDMOWHNM3_I() {
        return DMOWHNM3_I;
    }

    public byte getDMOWHNM3_IFLAG() {
        return DMOWHNM3_IFLAG;
    }

    public byte getDMOWHNM4() {
        return DMOWHNM4;
    }

    public byte getDMOWHNM4_I() {
        return DMOWHNM4_I;
    }

    public boolean getDMOWHNM4_IFLAG() {
        return DMOWHNM4_IFLAG;
    }

    public byte getDMOWHNM5() {
        return DMOWHNM5;
    }

    public byte getDMOWHNM5_I() {
        return DMOWHNM5_I;
    }

    public boolean getDMOWHNM5_IFLAG() {
        return DMOWHNM5_IFLAG;
    }

    public byte getDMOWHNM_I() {
        return DMOWHNM_I;
    }

    public byte getDMOWHNM_IFLAG() {
        return DMOWHNM_IFLAG;
    }

    public short getDMOWHNY() {
        return DMOWHNY;
    }

    public short getDMOWHNY3() {
        return DMOWHNY3;
    }

    public short getDMOWHNY3_I() {
        return DMOWHNY3_I;
    }

    public byte getDMOWHNY3_IFLAG() {
        return DMOWHNY3_IFLAG;
    }

    public short getDMOWHNY4() {
        return DMOWHNY4;
    }

    public short getDMOWHNY4_I() {
        return DMOWHNY4_I;
    }

    public boolean getDMOWHNY4_IFLAG() {
        return DMOWHNY4_IFLAG;
    }

    public short getDMOWHNY5() {
        return DMOWHNY5;
    }

    public short getDMOWHNY5_I() {
        return DMOWHNY5_I;
    }

    public boolean getDMOWHNY5_IFLAG() {
        return DMOWHNY5_IFLAG;
    }

    public short getDMOWHNY_I() {
        return DMOWHNY_I;
    }

    public byte getDMOWHNY_IFLAG() {
        return DMOWHNY_IFLAG;
    }

    public short getDSAMC() {
        return DSAMC;
    }

    public short getDSAMC2_I() {
        return DSAMC2_I;
    }

    public byte getDSAMC2_IFLAG() {
        return DSAMC2_IFLAG;
    }

    public short getDSAMC3_I() {
        return DSAMC3_I;
    }

    public boolean getDSAMC3_IFLAG() {
        return DSAMC3_IFLAG;
    }

    public short getDSAMC4() {
        return DSAMC4;
    }

    public short getDSAMC4_I() {
        return DSAMC4_I;
    }

    public byte getDSAMC4_IFLAG() {
        return DSAMC4_IFLAG;
    }

    public short getDSAMC5() {
        return DSAMC5;
    }

    public short getDSAMC5_I() {
        return DSAMC5_I;
    }

    public boolean getDSAMC5_IFLAG() {
        return DSAMC5_IFLAG;
    }

    public short getDSAMC_I() {
        return DSAMC_I;
    }

    public byte getDSAMC_IFLAG() {
        return DSAMC_IFLAG;
    }

    public short getDSAMD() {
        return DSAMD;
    }

    public short getDSAMD2_I() {
        return DSAMD2_I;
    }

    public byte getDSAMD2_IFLAG() {
        return DSAMD2_IFLAG;
    }

    public short getDSAMD3_I() {
        return DSAMD3_I;
    }

    public boolean getDSAMD3_IFLAG() {
        return DSAMD3_IFLAG;
    }

    public short getDSAMD4() {
        return DSAMD4;
    }

    public short getDSAMD4_I() {
        return DSAMD4_I;
    }

    public boolean getDSAMD4_IFLAG() {
        return DSAMD4_IFLAG;
    }

    public byte getDSAMD5() {
        return DSAMD5;
    }

    public short getDSAMD5_I() {
        return DSAMD5_I;
    }

    public boolean getDSAMD5_IFLAG() {
        return DSAMD5_IFLAG;
    }

    public short getDSAMD_I() {
        return DSAMD_I;
    }

    public byte getDSAMD_IFLAG() {
        return DSAMD_IFLAG;
    }

    public short getDSAMOS4() {
        return DSAMOS4;
    }

    public short getDSAMOS5() {
        return DSAMOS5;
    }

    public short getDSAMP() {
        return DSAMP;
    }

    public short getDSAMP2_I() {
        return DSAMP2_I;
    }

    public byte getDSAMP2_IFLAG() {
        return DSAMP2_IFLAG;
    }

    public short getDSAMP3_I() {
        return DSAMP3_I;
    }

    public boolean getDSAMP3_IFLAG() {
        return DSAMP3_IFLAG;
    }

    public short getDSAMP4() {
        return DSAMP4;
    }

    public short getDSAMP4_I() {
        return DSAMP4_I;
    }

    public byte getDSAMP4_IFLAG() {
        return DSAMP4_IFLAG;
    }

    public short getDSAMP5() {
        return DSAMP5;
    }

    public short getDSAMP5_I() {
        return DSAMP5_I;
    }

    public boolean getDSAMP5_IFLAG() {
        return DSAMP5_IFLAG;
    }

    public short getDSAMP_I() {
        return DSAMP_I;
    }

    public byte getDSAMP_IFLAG() {
        return DSAMP_IFLAG;
    }

    public byte getDSANU1_I() {
        return DSANU1_I;
    }

    public byte getDSANU1_IFLAG() {
        return DSANU1_IFLAG;
    }

    public boolean getDSANU2_I() {
        return DSANU2_I;
    }

    public boolean getDSANU2_IFLAG() {
        return DSANU2_IFLAG;
    }

    public byte getDSANY1_I() {
        return DSANY1_I;
    }

    public byte getDSANY1_IFLAG() {
        return DSANY1_IFLAG;
    }

    public boolean getDSANY2_I() {
        return DSANY2_I;
    }

    public boolean getDSANY2_IFLAG() {
        return DSANY2_IFLAG;
    }

    public byte getDSCOS() {
        return DSCOS;
    }

    public byte getDSCOS2_I() {
        return DSCOS2_I;
    }

    public byte getDSCOS2_IFLAG() {
        return DSCOS2_IFLAG;
    }

    public byte getDSCOS3_I() {
        return DSCOS3_I;
    }

    public byte getDSCOS3_IFLAG() {
        return DSCOS3_IFLAG;
    }

    public byte getDSCOS4() {
        return DSCOS4;
    }

    public byte getDSCOS4_I() {
        return DSCOS4_I;
    }

    public byte getDSCOS4_IFLAG() {
        return DSCOS4_IFLAG;
    }

    public byte getDSCOS5() {
        return DSCOS5;
    }

    public byte getDSCOS5_I() {
        return DSCOS5_I;
    }

    public byte getDSCOS5_IFLAG() {
        return DSCOS5_IFLAG;
    }

    public byte getDSCOS_I() {
        return DSCOS_I;
    }

    public byte getDSCOS_IFLAG() {
        return DSCOS_IFLAG;
    }

    public byte getDSCSP() {
        return DSCSP;
    }

    public byte getDSCSP2_I() {
        return DSCSP2_I;
    }

    public boolean getDSCSP2_IFLAG() {
        return DSCSP2_IFLAG;
    }

    public byte getDSCSP3_I() {
        return DSCSP3_I;
    }

    public boolean getDSCSP3_IFLAG() {
        return DSCSP3_IFLAG;
    }

    public byte getDSCSP4() {
        return DSCSP4;
    }

    public boolean getDSCSP4_I() {
        return DSCSP4_I;
    }

    public boolean getDSCSP4_IFLAG() {
        return DSCSP4_IFLAG;
    }

    public byte getDSCSP5() {
        return DSCSP5;
    }

    public byte getDSCSP5_I() {
        return DSCSP5_I;
    }

    public boolean getDSCSP5_IFLAG() {
        return DSCSP5_IFLAG;
    }

    public byte getDSCSP_I() {
        return DSCSP_I;
    }

    public boolean getDSCSP_IFLAG() {
        return DSCSP_IFLAG;
    }

    public byte getDSESB() {
        return DSESB;
    }

    public byte getDSESB4() {
        return DSESB4;
    }

    public boolean getDSESB5() {
        return DSESB5;
    }

    public int getDSLAMT() {
        return DSLAMT;
    }

    public double getDSLAMT_I() {
        return DSLAMT_I;
    }

    public byte getDSLAMT_IFLAG() {
        return DSLAMT_IFLAG;
    }

    public byte getDSLEST() {
        return DSLEST;
    }

    public byte getDSLPAY() {
        return DSLPAY;
    }

    public byte getDSLPAY2_I() {
        return DSLPAY2_I;
    }

    public byte getDSLPAY2_IFLAG() {
        return DSLPAY2_IFLAG;
    }

    public byte getDSLPAY3_I() {
        return DSLPAY3_I;
    }

    public boolean getDSLPAY3_IFLAG() {
        return DSLPAY3_IFLAG;
    }

    public byte getDSLPAY4_I() {
        return DSLPAY4_I;
    }

    public boolean getDSLPAY4_IFLAG() {
        return DSLPAY4_IFLAG;
    }

    public boolean getDSLPAY5_I() {
        return DSLPAY5_I;
    }

    public boolean getDSLPAY5_IFLAG() {
        return DSLPAY5_IFLAG;
    }

    public byte getDSLPAY_I() {
        return DSLPAY_I;
    }

    public byte getDSLPAY_IFLAG() {
        return DSLPAY_IFLAG;
    }

    public byte getDSNAM() {
        return DSNAM;
    }

    public byte getDSNAM2_I() {
        return DSNAM2_I;
    }

    public byte getDSNAM2_IFLAG() {
        return DSNAM2_IFLAG;
    }

    public byte getDSNAM3_I() {
        return DSNAM3_I;
    }

    public byte getDSNAM3_IFLAG() {
        return DSNAM3_IFLAG;
    }

    public byte getDSNAM4() {
        return DSNAM4;
    }

    public boolean getDSNAM4_I() {
        return DSNAM4_I;
    }

    public byte getDSNAM4_IFLAG() {
        return DSNAM4_IFLAG;
    }

    public byte getDSNAM5() {
        return DSNAM5;
    }

    public boolean getDSNAM5_I() {
        return DSNAM5_I;
    }

    public boolean getDSNAM5_IFLAG() {
        return DSNAM5_IFLAG;
    }

    public byte getDSNAM_I() {
        return DSNAM_I;
    }

    public byte getDSNAM_IFLAG() {
        return DSNAM_IFLAG;
    }

    public byte getDSNUM() {
        return DSNUM;
    }

    public byte getDSNUM_I() {
        return DSNUM_I;
    }

    public byte getDSNUM_IFLAG() {
        return DSNUM_IFLAG;
    }

    public boolean getDSONM10() {
        return DSONM10;
    }

    public boolean getDSONM10_I() {
        return DSONM10_I;
    }

    public boolean getDSONM10_IFLAG() {
        return DSONM10_IFLAG;
    }

    public byte getDSONM1_I() {
        return DSONM1_I;
    }

    public byte getDSONM1_IFLAG() {
        return DSONM1_IFLAG;
    }

    public byte getDSONM2_I() {
        return DSONM2_I;
    }

    public boolean getDSONM2_IFLAG() {
        return DSONM2_IFLAG;
    }

    public byte getDSONM3_I() {
        return DSONM3_I;
    }

    public boolean getDSONM3_IFLAG() {
        return DSONM3_IFLAG;
    }

    public boolean getDSONM4_I() {
        return DSONM4_I;
    }

    public boolean getDSONM4_IFLAG() {
        return DSONM4_IFLAG;
    }

    public boolean getDSONM5_I() {
        return DSONM5_I;
    }

    public boolean getDSONM5_IFLAG() {
        return DSONM5_IFLAG;
    }

    public boolean getDSONM6_I() {
        return DSONM6_I;
    }

    public boolean getDSONM6_IFLAG() {
        return DSONM6_IFLAG;
    }

    public boolean getDSONM7() {
        return DSONM7;
    }

    public boolean getDSONM7_I() {
        return DSONM7_I;
    }

    public boolean getDSONM7_IFLAG() {
        return DSONM7_IFLAG;
    }

    public boolean getDSONM8() {
        return DSONM8;
    }

    public boolean getDSONM8_I() {
        return DSONM8_I;
    }

    public boolean getDSONM8_IFLAG() {
        return DSONM8_IFLAG;
    }

    public boolean getDSONM9() {
        return DSONM9;
    }

    public boolean getDSONM9_I() {
        return DSONM9_I;
    }

    public boolean getDSONM9_IFLAG() {
        return DSONM9_IFLAG;
    }

    public byte getDSPER() {
        return DSPER;
    }

    public byte getDSREC() {
        return DSREC;
    }

    public byte getDSREC2_I() {
        return DSREC2_I;
    }

    public byte getDSREC2_IFLAG() {
        return DSREC2_IFLAG;
    }

    public boolean getDSREC3_I() {
        return DSREC3_I;
    }

    public boolean getDSREC3_IFLAG() {
        return DSREC3_IFLAG;
    }

    public boolean getDSREC4() {
        return DSREC4;
    }

    public boolean getDSREC4_I() {
        return DSREC4_I;
    }

    public boolean getDSREC4_IFLAG() {
        return DSREC4_IFLAG;
    }

    public boolean getDSREC5() {
        return DSREC5;
    }

    public boolean getDSREC5_I() {
        return DSREC5_I;
    }

    public boolean getDSREC5_IFLAG() {
        return DSREC5_IFLAG;
    }

    public byte getDSREC_I() {
        return DSREC_I;
    }

    public byte getDSREC_IFLAG() {
        return DSREC_IFLAG;
    }

    public boolean getDSRSP() {
        return DSRSP;
    }

    public byte getDSRSP2() {
        return DSRSP2;
    }

    public boolean getDSRSP2_I() {
        return DSRSP2_I;
    }

    public byte getDSRSP2_IFLAG() {
        return DSRSP2_IFLAG;
    }

    public boolean getDSRSP3() {
        return DSRSP3;
    }

    public boolean getDSRSP3_I() {
        return DSRSP3_I;
    }

    public boolean getDSRSP3_IFLAG() {
        return DSRSP3_IFLAG;
    }

    public boolean getDSRSP4() {
        return DSRSP4;
    }

    public boolean getDSRSP4_I() {
        return DSRSP4_I;
    }

    public boolean getDSRSP4_IFLAG() {
        return DSRSP4_IFLAG;
    }

    public boolean getDSRSP5() {
        return DSRSP5;
    }

    public boolean getDSRSP5_I() {
        return DSRSP5_I;
    }

    public boolean getDSRSP5_IFLAG() {
        return DSRSP5_IFLAG;
    }

    public boolean getDSRSP_I() {
        return DSRSP_I;
    }

    public byte getDSRSP_IFLAG() {
        return DSRSP_IFLAG;
    }

    public double getDVCACRVAL() {
        return DVCACRVAL;
    }

    public double getDVCAODVAL() {
        return DVCAODVAL;
    }

    public double getDVCAVAL() {
        return DVCAVAL;
    }

    public int getDVCOINV() {
        return DVCOINV;
    }

    public short getDVDHPOWE() {
        return DVDHPOWE;
    }

    public short getDVDHPOWE3() {
        return DVDHPOWE3;
    }

    public short getDVDHPOWE4() {
        return DVDHPOWE4;
    }

    public short getDVDHPOWE5() {
        return DVDHPOWE5;
    }

    public short getDVDLOWE() {
        return DVDLOWE;
    }

    public short getDVDMOOWE() {
        return DVDMOOWE;
    }

    public short getDVDMOOWE3() {
        return DVDMOOWE3;
    }

    public short getDVDMOOWE4() {
        return DVDMOOWE4;
    }

    public short getDVDMOOWE5() {
        return DVDMOOWE5;
    }

    public boolean getDVLNAR() {
        return DVLNAR;
    }

    public boolean getDVMOAR() {
        return DVMOAR;
    }

    public double getDVSHODVAL() {
        return DVSHODVAL;
    }

    public boolean getEMPSHARE() {
        return EMPSHARE;
    }

    public byte getEMPSTAT2() {
        return EMPSTAT2;
    }

    public int getFINCV() {
        return FINCV;
    }

    public byte getFINVTY01_IFLAG() {
        return FINVTY01_IFLAG;
    }

    public byte getFINVTY02_IFLAG() {
        return FINVTY02_IFLAG;
    }

    public byte getFINVTY03_IFLAG() {
        return FINVTY03_IFLAG;
    }

    public byte getFINVTY04_IFLAG() {
        return FINVTY04_IFLAG;
    }

    public byte getFINVTY05_IFLAG() {
        return FINVTY05_IFLAG;
    }

    public byte getFINVTY06_IFLAG() {
        return FINVTY06_IFLAG;
    }

    public byte getFINVTY07_IFLAG() {
        return FINVTY07_IFLAG;
    }

    public byte getFINVTY08_IFLAG() {
        return FINVTY08_IFLAG;
    }

    public byte getFINVTY09_IFLAG() {
        return FINVTY09_IFLAG;
    }

    public byte getFINVTY10_IFLAG() {
        return FINVTY10_IFLAG;
    }

    public boolean getFINVTY11_IFLAG() {
        return FINVTY11_IFLAG;
    }

    public short getFLNOS5() {
        return FLNOS5;
    }

    public int getFNSVAL() {
        return FNSVAL;
    }

    public boolean getFTIBOND() {
        return FTIBOND;
    }

    public boolean getGCBGILT() {
        return GCBGILT;
    }

    public int getHOUSEGDVAL1() {
        return HOUSEGDVAL1;
    }

    public int getHOUSEGDVAL2() {
        return HOUSEGDVAL2;
    }

    public int getHOUSEGDVAL3() {
        return HOUSEGDVAL3;
    }

    public byte getHOUSEGDVB1() {
        return HOUSEGDVB1;
    }

    public byte getHOUSEGDVB1_I() {
        return HOUSEGDVB1_I;
    }

    public boolean getHOUSEGDVB1_IFLAG() {
        return HOUSEGDVB1_IFLAG;
    }

    public byte getHOUSEGDVB2() {
        return HOUSEGDVB2;
    }

    public byte getHOUSEGDVB2_I() {
        return HOUSEGDVB2_I;
    }

    public boolean getHOUSEGDVB2_IFLAG() {
        return HOUSEGDVB2_IFLAG;
    }

    public byte getHOUSEGDVB3() {
        return HOUSEGDVB3;
    }

    public byte getHOUSEGDVB3_I() {
        return HOUSEGDVB3_I;
    }

    public boolean getHOUSEGDVB3_IFLAG() {
        return HOUSEGDVB3_IFLAG;
    }

    public double getHPLFT3() {
        return HPLFT3;
    }

    public double getHPLFT4() {
        return HPLFT4;
    }

    public double getHPLFT5() {
        return HPLFT5;
    }

    public double getHPOS3() {
        return HPOS3;
    }

    public double getHPOS4() {
        return HPOS4;
    }

    public double getHPOS5() {
        return HPOS5;
    }

    public byte getHSEDB1() {
        return HSEDB1;
    }

    public byte getHSEDB2() {
        return HSEDB2;
    }

    public byte getHSEDB3() {
        return HSEDB3;
    }

    public int getHSEDEBT1() {
        return HSEDEBT1;
    }

    public int getHSEDEBT1_I() {
        return HSEDEBT1_I;
    }

    public boolean getHSEDEBT1_IFLAG() {
        return HSEDEBT1_IFLAG;
    }

    public int getHSEDEBT2() {
        return HSEDEBT2;
    }

    public int getHSEDEBT2_I() {
        return HSEDEBT2_I;
    }

    public boolean getHSEDEBT2_IFLAG() {
        return HSEDEBT2_IFLAG;
    }

    public int getHSEDEBT3() {
        return HSEDEBT3;
    }

    public int getHSEDEBT3_I() {
        return HSEDEBT3_I;
    }

    public boolean getHSEDEBT3_IFLAG() {
        return HSEDEBT3_IFLAG;
    }

    public int getHSEVAL1() {
        return HSEVAL1;
    }

    public int getHSEVAL1_I() {
        return HSEVAL1_I;
    }

    public boolean getHSEVAL1_IFLAG() {
        return HSEVAL1_IFLAG;
    }

    public int getHSEVAL2() {
        return HSEVAL2;
    }

    public int getHSEVAL2_I() {
        return HSEVAL2_I;
    }

    public boolean getHSEVAL2_IFLAG() {
        return HSEVAL2_IFLAG;
    }

    public int getHSEVAL3() {
        return HSEVAL3;
    }

    public int getHSEVAL3_I() {
        return HSEVAL3_I;
    }

    public boolean getHSEVAL3_IFLAG() {
        return HSEVAL3_IFLAG;
    }

    public byte getHSEVB1() {
        return HSEVB1;
    }

    public byte getHSEVB2() {
        return HSEVB2;
    }

    public byte getHSEVB3() {
        return HSEVB3;
    }

    public boolean getIGDS12() {
        return IGDS12;
    }

    public boolean getIGDS16() {
        return IGDS16;
    }

    public boolean getIGDS6() {
        return IGDS6;
    }

    public int getIGIFVAL() {
        return IGIFVAL;
    }

    public int getILACC() {
        return ILACC;
    }

    public int getILIFE() {
        return ILIFE;
    }

    public int getILINS() {
        return ILINS;
    }

    public int getILOTH() {
        return ILOTH;
    }

    public int getILRED() {
        return ILRED;
    }

    public boolean getILUMTY4() {
        return ILUMTY4;
    }

    public int getILWIN() {
        return ILWIN;
    }

    public boolean getINS() {
        return INS;
    }

    public byte getINSPOL() {
        return INSPOL;
    }

    public byte getINTRO() {
        return INTRO;
    }

    public boolean getISA() {
        return ISA;
    }

    public boolean getISCH1618() {
        return ISCH1618;
    }

    public boolean getISCHILD() {
        return ISCHILD;
    }

    public int getIVAL() {
        return IVAL;
    }

    public int getIVAL2() {
        return IVAL2;
    }

    public int getIVAL3() {
        return IVAL3;
    }

    public byte getIVALB() {
        return IVALB;
    }

    public boolean getIWAT10() {
        return IWAT10;
    }

    public boolean getIWAT14() {
        return IWAT14;
    }

    public byte getIWAT8() {
        return IWAT8;
    }

    public byte getIWAT9() {
        return IWAT9;
    }

    public byte getIWHO() {
        return IWHO;
    }

    public byte getLANDOSDB1() {
        return LANDOSDB1;
    }

    public byte getLANDOSDB2() {
        return LANDOSDB2;
    }

    public byte getLANDOSDB3() {
        return LANDOSDB3;
    }

    public int getLANDOSDEBT1() {
        return LANDOSDEBT1;
    }

    public int getLANDOSDEBT1_I() {
        return LANDOSDEBT1_I;
    }

    public boolean getLANDOSDEBT1_IFLAG() {
        return LANDOSDEBT1_IFLAG;
    }

    public int getLANDOSDEBT2() {
        return LANDOSDEBT2;
    }

    public int getLANDOSDEBT2_I() {
        return LANDOSDEBT2_I;
    }

    public boolean getLANDOSDEBT2_IFLAG() {
        return LANDOSDEBT2_IFLAG;
    }

    public int getLANDOSDEBT3() {
        return LANDOSDEBT3;
    }

    public int getLANDOSDEBT3_I() {
        return LANDOSDEBT3_I;
    }

    public boolean getLANDOSDEBT3_IFLAG() {
        return LANDOSDEBT3_IFLAG;
    }

    public int getLANDOSVAL1() {
        return LANDOSVAL1;
    }

    public int getLANDOSVAL1_I() {
        return LANDOSVAL1_I;
    }

    public boolean getLANDOSVAL1_IFLAG() {
        return LANDOSVAL1_IFLAG;
    }

    public int getLANDOSVAL2() {
        return LANDOSVAL2;
    }

    public int getLANDOSVAL2_I() {
        return LANDOSVAL2_I;
    }

    public boolean getLANDOSVAL2_IFLAG() {
        return LANDOSVAL2_IFLAG;
    }

    public int getLANDOSVAL3() {
        return LANDOSVAL3;
    }

    public int getLANDOSVAL3_I() {
        return LANDOSVAL3_I;
    }

    public boolean getLANDOSVAL3_IFLAG() {
        return LANDOSVAL3_IFLAG;
    }

    public byte getLANDOSVB1() {
        return LANDOSVB1;
    }

    public byte getLANDOSVB2() {
        return LANDOSVB2;
    }

    public byte getLANDOSVB3() {
        return LANDOSVB3;
    }

    public byte getLANDUKDB1() {
        return LANDUKDB1;
    }

    public boolean getLANDUKDB2() {
        return LANDUKDB2;
    }

    public boolean getLANDUKDB3() {
        return LANDUKDB3;
    }

    public int getLANDUKDEBT1() {
        return LANDUKDEBT1;
    }

    public int getLANDUKDEBT1_I() {
        return LANDUKDEBT1_I;
    }

    public boolean getLANDUKDEBT1_IFLAG() {
        return LANDUKDEBT1_IFLAG;
    }

    public int getLANDUKDEBT2() {
        return LANDUKDEBT2;
    }

    public int getLANDUKDEBT2_I() {
        return LANDUKDEBT2_I;
    }

    public boolean getLANDUKDEBT2_IFLAG() {
        return LANDUKDEBT2_IFLAG;
    }

    public short getLANDUKDEBT3() {
        return LANDUKDEBT3;
    }

    public short getLANDUKDEBT3_I() {
        return LANDUKDEBT3_I;
    }

    public boolean getLANDUKDEBT3_IFLAG() {
        return LANDUKDEBT3_IFLAG;
    }

    public int getLANDUKVAL1() {
        return LANDUKVAL1;
    }

    public int getLANDUKVAL1_I() {
        return LANDUKVAL1_I;
    }

    public boolean getLANDUKVAL1_IFLAG() {
        return LANDUKVAL1_IFLAG;
    }

    public int getLANDUKVAL2() {
        return LANDUKVAL2;
    }

    public int getLANDUKVAL2_I() {
        return LANDUKVAL2_I;
    }

    public boolean getLANDUKVAL2_IFLAG() {
        return LANDUKVAL2_IFLAG;
    }

    public int getLANDUKVAL3() {
        return LANDUKVAL3;
    }

    public int getLANDUKVAL3_I() {
        return LANDUKVAL3_I;
    }

    public boolean getLANDUKVAL3_IFLAG() {
        return LANDUKVAL3_IFLAG;
    }

    public byte getLANDUKVB1() {
        return LANDUKVB1;
    }

    public byte getLANDUKVB2() {
        return LANDUKVB2;
    }

    public byte getLANDUKVB3() {
        return LANDUKVB3;
    }

    public byte getLIVWTH() {
        return LIVWTH;
    }

    public double getMOLFT3() {
        return MOLFT3;
    }

    public double getMOLFT4() {
        return MOLFT4;
    }

    public double getMOLFT5() {
        return MOLFT5;
    }

    public double getMOOS3() {
        return MOOS3;
    }

    public double getMOOS4() {
        return MOOS4;
    }

    public double getMOOS5() {
        return MOOS5;
    }

    public short getOIGGT() {
        return OIGGT;
    }

    public int getOIGOE() {
        return OIGOE;
    }

    public int getOIGOE_I() {
        return OIGOE_I;
    }

    public boolean getOIGOE_IFLAG() {
        return OIGOE_IFLAG;
    }

    public int getOIGOS() {
        return OIGOS;
    }

    public int getOIGOS_I() {
        return OIGOS_I;
    }

    public boolean getOIGOS_IFLAG() {
        return OIGOS_IFLAG;
    }

    public int getOIGPP() {
        return OIGPP;
    }

    public int getOIGPP_I() {
        return OIGPP_I;
    }

    public boolean getOIGPP_IFLAG() {
        return OIGPP_IFLAG;
    }

    public short getOIGRR() {
        return OIGRR;
    }

    public short getOINEG() {
        return OINEG;
    }

    public short getOINFR() {
        return OINFR;
    }

    public short getOINGT() {
        return OINGT;
    }

    public short getOINMA() {
        return OINMA;
    }

    public int getOINOE() {
        return OINOE;
    }

    public short getOINOP() {
        return OINOP;
    }

    public int getOINOS() {
        return OINOS;
    }

    public int getOINPP() {
        return OINPP;
    }

    public int getOINRO() {
        return OINRO;
    }

    public short getOINRR() {
        return OINRR;
    }

    public boolean getOPROPDB1() {
        return OPROPDB1;
    }

    public boolean getOPROPDB2() {
        return OPROPDB2;
    }

    public boolean getOPROPDB3() {
        return OPROPDB3;
    }

    public int getOPROPDEBT1() {
        return OPROPDEBT1;
    }

    public int getOPROPDEBT1_I() {
        return OPROPDEBT1_I;
    }

    public boolean getOPROPDEBT1_IFLAG() {
        return OPROPDEBT1_IFLAG;
    }

    public short getOPROPDEBT2() {
        return OPROPDEBT2;
    }

    public short getOPROPDEBT2_I() {
        return OPROPDEBT2_I;
    }

    public boolean getOPROPDEBT2_IFLAG() {
        return OPROPDEBT2_IFLAG;
    }

    public byte getOPROPDEBT3() {
        return OPROPDEBT3;
    }

    public boolean getOPROPDEBT3_I() {
        return OPROPDEBT3_I;
    }

    public boolean getOPROPDEBT3_IFLAG() {
        return OPROPDEBT3_IFLAG;
    }

    public int getOPROPVAL1() {
        return OPROPVAL1;
    }

    public int getOPROPVAL1_I() {
        return OPROPVAL1_I;
    }

    public boolean getOPROPVAL1_IFLAG() {
        return OPROPVAL1_IFLAG;
    }

    public int getOPROPVAL2() {
        return OPROPVAL2;
    }

    public int getOPROPVAL2_I() {
        return OPROPVAL2_I;
    }

    public boolean getOPROPVAL2_IFLAG() {
        return OPROPVAL2_IFLAG;
    }

    public int getOPROPVAL3() {
        return OPROPVAL3;
    }

    public int getOPROPVAL3_I() {
        return OPROPVAL3_I;
    }

    public boolean getOPROPVAL3_IFLAG() {
        return OPROPVAL3_IFLAG;
    }

    public byte getOPROPVB1() {
        return OPROPVB1;
    }

    public byte getOPROPVB2() {
        return OPROPVB2;
    }

    public boolean getOPROPVB3() {
        return OPROPVB3;
    }

    public boolean getOTHERFA() {
        return OTHERFA;
    }

    public boolean getOTHSHARE() {
        return OTHSHARE;
    }

    public byte getOVERSPA() {
        return OVERSPA;
    }

    public byte getPEANYO() {
        return PEANYO;
    }

    public byte getPECONT() {
        return PECONT;
    }

    public byte getPEMFIN() {
        return PEMFIN;
    }

    public byte getPEWYNO01() {
        return PEWYNO01;
    }

    public byte getPEWYNO02() {
        return PEWYNO02;
    }

    public byte getPEWYNO03() {
        return PEWYNO03;
    }

    public byte getPEWYNO04() {
        return PEWYNO04;
    }

    public byte getPINCT() {
        return PINCT;
    }

    public byte getPINTRE() {
        return PINTRE;
    }

    public byte getPINTRN() {
        return PINTRN;
    }

    public byte getPNANYO() {
        return PNANYO;
    }

    public byte getPNCONT() {
        return PNCONT;
    }

    public boolean getPNSBOND() {
        return PNSBOND;
    }

    public byte getPNUMSC() {
        return PNUMSC;
    }

    public byte getPNUMSC_I() {
        return PNUMSC_I;
    }

    public boolean getPNUMSC_IFLAG() {
        return PNUMSC_IFLAG;
    }

    public boolean getPRACCU() {
        return PRACCU;
    }

    public byte getPRCRELIG() {
        return PRCRELIG;
    }

    public byte getPSCHY_F() {
        return PSCHY_F;
    }

    public byte getPSCHY_S() {
        return PSCHY_S;
    }

    public byte getPSCHY_T() {
        return PSCHY_T;
    }

    public int getRENTAMT() {
        return RENTAMT;
    }

    public short getSEAML() {
        return SEAML;
    }

    public byte getSELECTAD_I() {
        return SELECTAD_I;
    }

    public byte getSELECTAD_IFLAG() {
        return SELECTAD_IFLAG;
    }

    public byte getSIC2007D() {
        return SIC2007D;
    }

    public byte getSOC2010_1DIGIT() {
        return SOC2010_1DIGIT;
    }

    public byte getSOC2010_2DIGIT() {
        return SOC2010_2DIGIT;
    }

    public double getSPASAF() {
        return SPASAF;
    }

    public byte getSSPART() {
        return SSPART;
    }

    public byte getSSPNO() {
        return SSPNO;
    }

    public byte getTRAINEE() {
        return TRAINEE;
    }

    public byte getTSNUM() {
        return TSNUM;
    }

    public byte getTXCRED1() {
        return TXCRED1;
    }

    public byte getTXCRED2() {
        return TXCRED2;
    }

    public int getUDEBT() {
        return UDEBT;
    }

    public int getUDEBT2() {
        return UDEBT2;
    }

    public int getUDEBT3() {
        return UDEBT3;
    }

    public int getUDEBT4() {
        return UDEBT4;
    }

    public int getUDEBT5() {
        return UDEBT5;
    }

    public byte getUDEBTB() {
        return UDEBTB;
    }

    public byte getUDEBTB2() {
        return UDEBTB2;
    }

    public byte getUDEBTB3() {
        return UDEBTB3;
    }

    public byte getUDEBTB4() {
        return UDEBTB4;
    }

    public byte getUDEBTB5() {
        return UDEBTB5;
    }

    public byte getUGDVB() {
        return UGDVB;
    }

    public byte getUGDVB2() {
        return UGDVB2;
    }

    public byte getUGDVB3() {
        return UGDVB3;
    }

    public byte getUGDVB4() {
        return UGDVB4;
    }

    public byte getUGDVB5() {
        return UGDVB5;
    }

    public boolean getUITRUST() {
        return UITRUST;
    }

    public byte getULAND() {
        return ULAND;
    }

    public byte getULAND2() {
        return ULAND2;
    }

    public byte getULAND3() {
        return ULAND3;
    }

    public byte getULAND4() {
        return ULAND4;
    }

    public byte getULAND5() {
        return ULAND5;
    }

    public boolean getUPROP1_IFLAG() {
        return UPROP1_IFLAG;
    }

    public boolean getUPROP2_IFLAG() {
        return UPROP2_IFLAG;
    }

    public boolean getUPROP3_IFLAG() {
        return UPROP3_IFLAG;
    }

    public boolean getUPROP4_IFLAG() {
        return UPROP4_IFLAG;
    }

    public boolean getUPRSH10() {
        return UPRSH10;
    }

    public byte getUPRSH6() {
        return UPRSH6;
    }

    public byte getUPRSH7() {
        return UPRSH7;
    }

    public byte getUPRSH8() {
        return UPRSH8;
    }

    public byte getUPRSH9() {
        return UPRSH9;
    }

    public int getUVAL() {
        return UVAL;
    }

    public int getUVAL2() {
        return UVAL2;
    }

    public int getUVAL3() {
        return UVAL3;
    }

    public int getUVAL4() {
        return UVAL4;
    }

    public int getUVAL5() {
        return UVAL5;
    }

    public byte getUVALB() {
        return UVALB;
    }

    public byte getUVALB2() {
        return UVALB2;
    }

    public byte getUVALB3() {
        return UVALB3;
    }

    public byte getUVALB4() {
        return UVALB4;
    }

    public byte getUVALB5() {
        return UVALB5;
    }

    public byte getWHOREATT() {
        return WHOREATT;
    }

    public byte getWHORECAR() {
        return WHORECAR;
    }

    public byte getWHOREMOB() {
        return WHOREMOB;
    }

}
