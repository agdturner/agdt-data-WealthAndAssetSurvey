/**
 * Source code generated by uk.ac.leeds.ccg.data.waascg.process.WaASCG_Main
 */

package uk.ac.leeds.ccg.data.waas.data.hhold;
import uk.ac.leeds.ccg.data.waas.data.id.WaAS_RecordID;
import uk.ac.leeds.ccg.data.Data_Record;

public abstract class WaAS_W1W2W3W4W5HRecord extends Data_Record {


    protected String[] s;

    WaAS_W1W2W3W4W5HRecord(WaAS_RecordID i){
        super(i);
    }
    protected byte ACCOM;

    protected byte ACCOTH;

    protected double ALLENDW;

    protected int ALLGD;

    protected short CASEW1;

    protected double DVEQRELVAL;

    protected int DVGCOLLV;

    protected double DVHORP;

    protected byte DVHSIZE;

    protected double DVHVALUE;

    protected boolean DVPRIRNT;

    protected double DVPROPERTY;

    protected int DVTOTOTHVEHVAL;

    protected int DVTOTPERNPVAL;

    protected int DVTOTVEHVAL;

    protected double EINTRAT;

    protected double EINTRAT_I;

    protected byte EINTRAT_IFLAG;

    protected byte EOTHREG;

    protected int EOTHRVA;

    protected byte EOTHRVB;

    protected byte EPRPER;

    protected int EPRVAL;

    protected byte EPRVPAY;

    protected int EQVAL;

    protected byte EQVALB;

    protected int EQVAL_I;

    protected byte EQVAL_IFLAG;

    protected byte EQYES;

    protected byte ERECTAX;

    protected double ERVPRP;

    protected double ERVPRP_I;

    protected byte ERVPRP_IFLAG;

    protected byte ERVRENT;

    protected int ERVSUM;

    protected byte ERVSUMB;

    protected byte ERVTAX;

    protected byte FLTTYP;

    protected byte FURN;

    protected byte GCOLLEC;

    protected byte GCOLLEC_I;

    protected boolean GCOLLEC_IFLAG;

    protected int GCOLLV;

    protected byte GCOLLVB;

    protected int GCOLLV_I;

    protected boolean GCOLLV_IFLAG;

    protected byte GCONTVB;

    protected byte GCONTVB_I;

    protected boolean GCONTVB_IFLAG;

    protected byte HAGEB;

    protected short HAGEYR;

    protected byte HBEDRM;

    protected byte HBFROM;

    protected byte HBUYSE;

    protected short HBUYYR;

    protected double HFINWNT_SUM;

    protected double HFINW_SUM;

    protected byte HHOLDTYPE;

    protected byte HHOSCH;

    protected byte HHOWN;

    protected double HMORTG;

    protected int HOUSGDST_SUM;

    protected short HOUT;

    protected int HPHYSW;

    protected int HPRICE;

    protected byte HPRICEB;

    protected double HPROPW;

    protected byte HRPDVAGE9;

    protected byte HRPDVILO3A;

    protected byte HRPDVMRDF;

    protected byte HRPEDATTN1;

    protected byte HRPEDATTN2;

    protected byte HRPEDATTN3;

    protected byte HRPEDLEVEL;

    protected byte HRPNSSEC3;

    protected boolean HRPSEX;

    protected byte HRTBEV;

    protected byte HSETYPE;

    protected byte HSHARE;

    protected byte HSHAREP;

    protected byte HSHAREP_I;

    protected byte HSHAREP_IFLAG;

    protected byte HSHARE_I;

    protected boolean HSHARE_IFLAG;

    protected byte HVALB;

    protected double HVALUE;

    protected double HVALUE_I;

    protected byte HVALUE_IFLAG;

    protected byte LLORD;

    protected byte MALL2;

    protected byte MALL2_I;

    protected byte MALL2_IFLAG;

    protected byte MALL3;

    protected byte MALL3_I;

    protected byte MALL3_IFLAG;

    protected byte MALLTY2;

    protected byte MALLTY2_I;

    protected byte MALLTY2_IFLAG;

    protected byte MALLTY3;

    protected byte MARRS2;

    protected byte MARRS3;

    protected byte MENDNUM2;

    protected byte MENDNUM2_I;

    protected boolean MENDNUM2_IFLAG;

    protected byte MENDNUM3;

    protected byte MENDNUM3_I;

    protected byte MENDNUM3_IFLAG;

    protected int MENDV11;

    protected int MENDV2;

    protected double MENDV2_I;

    protected byte MENDV2_IFLAG;

    protected int MENDV3;

    protected int MENDV3_I;

    protected byte MENDV3_IFLAG;

    protected int MENDV4;

    protected int MENDV4_I;

    protected byte MENDV4_IFLAG;

    protected int MENDV5;

    protected int MENDV5_I;

    protected boolean MENDV5_IFLAG;

    protected int MENDV6;

    protected int MENDV6_I;

    protected byte MENDV6_IFLAG;

    protected int MENDV7;

    protected int MENDV7_I;

    protected byte MENDV7_IFLAG;

    protected short MENDV8;

    protected boolean MENDVB11;

    protected byte MENDVB2;

    protected byte MENDVB3;

    protected byte MENDVB4;

    protected byte MENDVB6;

    protected byte MENDVB7;

    protected byte MENDW2_I;

    protected byte MENDW2_IFLAG;

    protected byte MENDW3_I;

    protected byte MENDW3_IFLAG;

    protected byte MENDX2;

    protected byte MENDX3;

    protected byte MENDY11;

    protected byte MENDY2;

    protected byte MENDY3;

    protected byte MENDY4;

    protected byte MENDY6;

    protected byte MENDY7;

    protected byte MHOWPY2;

    protected byte MHOWPY3;

    protected byte MINC1;

    protected byte MINC11;

    protected byte MINC2;

    protected byte MINC3;

    protected byte MINC4;

    protected byte MINC5;

    protected byte MINC6;

    protected byte MJNAME01;

    protected byte MJNAME02;

    protected byte MJNAME03;

    protected byte MJNAME04;

    protected byte MJNAME18;

    protected byte MJNAME19;

    protected byte MJNAME20;

    protected byte MJNAME35;

    protected byte MJNAME36;

    protected byte MNAME2;

    protected byte MNAME3;

    protected int MNEG2;

    protected int MNEG2_I;

    protected byte MNEG2_IFLAG;

    protected int MNEG3;

    protected byte MNEGB2;

    protected boolean MNEGB3;

    protected byte MNUMB;

    protected byte MONAME2;

    protected byte MONAME3;

    protected byte MONTH;

    protected byte MPAYB2;

    protected byte MPAYB3;

    protected int MPAYM2;

    protected int MPAYM3;

    protected byte MPP2;

    protected byte MPP3;

    protected byte MREAS01;

    protected byte MREAS02;

    protected byte MREAS03;

    protected byte MREAS04;

    protected byte MREAS05;

    protected byte MREAS06;

    protected byte MREAS07;

    protected byte MREAS12;

    protected byte MREAS13;

    protected byte MREAS23;

    protected byte MTYPE2;

    protected byte MTYPE2_I;

    protected byte MTYPE2_IFLAG;

    protected byte MTYPE3;

    protected byte MTYPE3_I;

    protected byte MTYPE3_IFLAG;

    protected int MVAL2;

    protected int MVAL2_I;

    protected boolean MVAL2_IFLAG;

    protected int MVAL3;

    protected int MVAL3_I;

    protected byte MVAL3_IFLAG;

    protected byte MVALB2;

    protected byte MVALB3;

    protected byte MYLFT2;

    protected byte MYLFT3;

    protected byte NUMADULT;

    protected byte NUMCH18;

    protected byte NUMCHILD;

    protected byte NUMCIVPTR;

    protected byte NUMCPART;

    protected byte NUMHHLDR;

    protected byte NUMMPART;

    protected byte OFINAL;

    protected byte TEN1;

    protected byte TEN1_I;

    protected byte TEN1_IFLAG;

    protected byte TIED;

    protected int TOTMNEG;

    protected double TOTMORT;

    protected double TOTMVAL;

    protected double TOTWLTH;

    protected byte VCARN;

    protected byte VCARN_I;

    protected byte VCARN_IFLAG;

    protected byte VOTYP1;

    protected byte VOTYP1_I;

    protected byte VOTYP2;

    protected byte VOTYP2_I;

    protected byte VOTYP3;

    protected byte VOTYP3_I;

    protected byte VOTYP4;

    protected byte VOTYP4_I;

    protected boolean VOTYP5_I;

    protected int VOVAL;

    protected int VOVAL_I;

    protected boolean VOVAL_IFLAG;

    protected byte VOVLB;

    protected byte VPERS;

    protected int VPERV;

    protected int VPERV_I;

    protected boolean VPERV_IFLAG;

    protected byte VTYPE2;

    protected byte VTYPE2_I;

    protected byte VTYPE_IFLAG;

    protected short YEAR;

    protected final void initACCOM(String s) {
        if (!s.trim().isEmpty()) {
            ACCOM = Byte.parseByte(s);
        } else {
            ACCOM = Byte.MIN_VALUE;
        }
    }

    protected final void initACCOTH(String s) {
        if (!s.trim().isEmpty()) {
            ACCOTH = Byte.parseByte(s);
        } else {
            ACCOTH = Byte.MIN_VALUE;
        }
    }

    protected final void initALLENDW(String s) {
        if (!s.trim().isEmpty()) {
            ALLENDW = Double.parseDouble(s);
        } else {
            ALLENDW = Double.NaN;
        }
    }

    protected final void initALLGD(String s) {
        if (!s.trim().isEmpty()) {
            ALLGD = Integer.parseInt(s);
        } else {
            ALLGD = Integer.MIN_VALUE;
        }
    }

    protected final void initCASEW1(String s) {
        if (!s.trim().isEmpty()) {
            CASEW1 = Short.parseShort(s);
        } else {
            CASEW1 = Short.MIN_VALUE;
        }
    }

    protected final void initDVEQRELVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVEQRELVAL = Double.parseDouble(s);
        } else {
            DVEQRELVAL = Double.NaN;
        }
    }

    protected final void initDVGCOLLV(String s) {
        if (!s.trim().isEmpty()) {
            DVGCOLLV = Integer.parseInt(s);
        } else {
            DVGCOLLV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVHORP(String s) {
        if (!s.trim().isEmpty()) {
            DVHORP = Double.parseDouble(s);
        } else {
            DVHORP = Double.NaN;
        }
    }

    protected final void initDVHSIZE(String s) {
        if (!s.trim().isEmpty()) {
            DVHSIZE = Byte.parseByte(s);
        } else {
            DVHSIZE = Byte.MIN_VALUE;
        }
    }

    protected final void initDVHVALUE(String s) {
        if (!s.trim().isEmpty()) {
            DVHVALUE = Double.parseDouble(s);
        } else {
            DVHVALUE = Double.NaN;
        }
    }

    protected final void initDVPRIRNT(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                DVPRIRNT = false;
            } else {
                DVPRIRNT = true;
            }
        }
    }

    protected final void initDVPROPERTY(String s) {
        if (!s.trim().isEmpty()) {
            DVPROPERTY = Double.parseDouble(s);
        } else {
            DVPROPERTY = Double.NaN;
        }
    }

    protected final void initDVTOTOTHVEHVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVTOTOTHVEHVAL = Integer.parseInt(s);
        } else {
            DVTOTOTHVEHVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initDVTOTPERNPVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVTOTPERNPVAL = Integer.parseInt(s);
        } else {
            DVTOTPERNPVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initDVTOTVEHVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVTOTVEHVAL = Integer.parseInt(s);
        } else {
            DVTOTVEHVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initEINTRAT(String s) {
        if (!s.trim().isEmpty()) {
            EINTRAT = Double.parseDouble(s);
        } else {
            EINTRAT = Double.NaN;
        }
    }

    protected final void initEINTRAT_I(String s) {
        if (!s.trim().isEmpty()) {
            EINTRAT_I = Double.parseDouble(s);
        } else {
            EINTRAT_I = Double.NaN;
        }
    }

    protected final void initEINTRAT_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            EINTRAT_IFLAG = Byte.parseByte(s);
        } else {
            EINTRAT_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initEOTHREG(String s) {
        if (!s.trim().isEmpty()) {
            EOTHREG = Byte.parseByte(s);
        } else {
            EOTHREG = Byte.MIN_VALUE;
        }
    }

    protected final void initEOTHRVA(String s) {
        if (!s.trim().isEmpty()) {
            EOTHRVA = Integer.parseInt(s);
        } else {
            EOTHRVA = Integer.MIN_VALUE;
        }
    }

    protected final void initEOTHRVB(String s) {
        if (!s.trim().isEmpty()) {
            EOTHRVB = Byte.parseByte(s);
        } else {
            EOTHRVB = Byte.MIN_VALUE;
        }
    }

    protected final void initEPRPER(String s) {
        if (!s.trim().isEmpty()) {
            EPRPER = Byte.parseByte(s);
        } else {
            EPRPER = Byte.MIN_VALUE;
        }
    }

    protected final void initEPRVAL(String s) {
        if (!s.trim().isEmpty()) {
            EPRVAL = Integer.parseInt(s);
        } else {
            EPRVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initEPRVPAY(String s) {
        if (!s.trim().isEmpty()) {
            EPRVPAY = Byte.parseByte(s);
        } else {
            EPRVPAY = Byte.MIN_VALUE;
        }
    }

    protected final void initEQVAL(String s) {
        if (!s.trim().isEmpty()) {
            EQVAL = Integer.parseInt(s);
        } else {
            EQVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initEQVALB(String s) {
        if (!s.trim().isEmpty()) {
            EQVALB = Byte.parseByte(s);
        } else {
            EQVALB = Byte.MIN_VALUE;
        }
    }

    protected final void initEQVAL_I(String s) {
        if (!s.trim().isEmpty()) {
            EQVAL_I = Integer.parseInt(s);
        } else {
            EQVAL_I = Integer.MIN_VALUE;
        }
    }

    protected final void initEQVAL_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            EQVAL_IFLAG = Byte.parseByte(s);
        } else {
            EQVAL_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initEQYES(String s) {
        if (!s.trim().isEmpty()) {
            EQYES = Byte.parseByte(s);
        } else {
            EQYES = Byte.MIN_VALUE;
        }
    }

    protected final void initERECTAX(String s) {
        if (!s.trim().isEmpty()) {
            ERECTAX = Byte.parseByte(s);
        } else {
            ERECTAX = Byte.MIN_VALUE;
        }
    }

    protected final void initERVPRP(String s) {
        if (!s.trim().isEmpty()) {
            ERVPRP = Double.parseDouble(s);
        } else {
            ERVPRP = Double.NaN;
        }
    }

    protected final void initERVPRP_I(String s) {
        if (!s.trim().isEmpty()) {
            ERVPRP_I = Double.parseDouble(s);
        } else {
            ERVPRP_I = Double.NaN;
        }
    }

    protected final void initERVPRP_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            ERVPRP_IFLAG = Byte.parseByte(s);
        } else {
            ERVPRP_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initERVRENT(String s) {
        if (!s.trim().isEmpty()) {
            ERVRENT = Byte.parseByte(s);
        } else {
            ERVRENT = Byte.MIN_VALUE;
        }
    }

    protected final void initERVSUM(String s) {
        if (!s.trim().isEmpty()) {
            ERVSUM = Integer.parseInt(s);
        } else {
            ERVSUM = Integer.MIN_VALUE;
        }
    }

    protected final void initERVSUMB(String s) {
        if (!s.trim().isEmpty()) {
            ERVSUMB = Byte.parseByte(s);
        } else {
            ERVSUMB = Byte.MIN_VALUE;
        }
    }

    protected final void initERVTAX(String s) {
        if (!s.trim().isEmpty()) {
            ERVTAX = Byte.parseByte(s);
        } else {
            ERVTAX = Byte.MIN_VALUE;
        }
    }

    protected final void initFLTTYP(String s) {
        if (!s.trim().isEmpty()) {
            FLTTYP = Byte.parseByte(s);
        } else {
            FLTTYP = Byte.MIN_VALUE;
        }
    }

    protected final void initFURN(String s) {
        if (!s.trim().isEmpty()) {
            FURN = Byte.parseByte(s);
        } else {
            FURN = Byte.MIN_VALUE;
        }
    }

    protected final void initGCOLLEC(String s) {
        if (!s.trim().isEmpty()) {
            GCOLLEC = Byte.parseByte(s);
        } else {
            GCOLLEC = Byte.MIN_VALUE;
        }
    }

    protected final void initGCOLLEC_I(String s) {
        if (!s.trim().isEmpty()) {
            GCOLLEC_I = Byte.parseByte(s);
        } else {
            GCOLLEC_I = Byte.MIN_VALUE;
        }
    }

    protected final void initGCOLLEC_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                GCOLLEC_IFLAG = false;
            } else {
                GCOLLEC_IFLAG = true;
            }
        }
    }

    protected final void initGCOLLV(String s) {
        if (!s.trim().isEmpty()) {
            GCOLLV = Integer.parseInt(s);
        } else {
            GCOLLV = Integer.MIN_VALUE;
        }
    }

    protected final void initGCOLLVB(String s) {
        if (!s.trim().isEmpty()) {
            GCOLLVB = Byte.parseByte(s);
        } else {
            GCOLLVB = Byte.MIN_VALUE;
        }
    }

    protected final void initGCOLLV_I(String s) {
        if (!s.trim().isEmpty()) {
            GCOLLV_I = Integer.parseInt(s);
        } else {
            GCOLLV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initGCOLLV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                GCOLLV_IFLAG = false;
            } else {
                GCOLLV_IFLAG = true;
            }
        }
    }

    protected final void initGCONTVB(String s) {
        if (!s.trim().isEmpty()) {
            GCONTVB = Byte.parseByte(s);
        } else {
            GCONTVB = Byte.MIN_VALUE;
        }
    }

    protected final void initGCONTVB_I(String s) {
        if (!s.trim().isEmpty()) {
            GCONTVB_I = Byte.parseByte(s);
        } else {
            GCONTVB_I = Byte.MIN_VALUE;
        }
    }

    protected final void initGCONTVB_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                GCONTVB_IFLAG = false;
            } else {
                GCONTVB_IFLAG = true;
            }
        }
    }

    protected final void initHAGEB(String s) {
        if (!s.trim().isEmpty()) {
            HAGEB = Byte.parseByte(s);
        } else {
            HAGEB = Byte.MIN_VALUE;
        }
    }

    protected final void initHAGEYR(String s) {
        if (!s.trim().isEmpty()) {
            HAGEYR = Short.parseShort(s);
        } else {
            HAGEYR = Short.MIN_VALUE;
        }
    }

    protected final void initHBEDRM(String s) {
        if (!s.trim().isEmpty()) {
            HBEDRM = Byte.parseByte(s);
        } else {
            HBEDRM = Byte.MIN_VALUE;
        }
    }

    protected final void initHBFROM(String s) {
        if (!s.trim().isEmpty()) {
            HBFROM = Byte.parseByte(s);
        } else {
            HBFROM = Byte.MIN_VALUE;
        }
    }

    protected final void initHBUYSE(String s) {
        if (!s.trim().isEmpty()) {
            HBUYSE = Byte.parseByte(s);
        } else {
            HBUYSE = Byte.MIN_VALUE;
        }
    }

    protected final void initHBUYYR(String s) {
        if (!s.trim().isEmpty()) {
            HBUYYR = Short.parseShort(s);
        } else {
            HBUYYR = Short.MIN_VALUE;
        }
    }

    protected final void initHFINWNT_SUM(String s) {
        if (!s.trim().isEmpty()) {
            HFINWNT_SUM = Double.parseDouble(s);
        } else {
            HFINWNT_SUM = Double.NaN;
        }
    }

    protected final void initHFINW_SUM(String s) {
        if (!s.trim().isEmpty()) {
            HFINW_SUM = Double.parseDouble(s);
        } else {
            HFINW_SUM = Double.NaN;
        }
    }

    protected final void initHHOLDTYPE(String s) {
        if (!s.trim().isEmpty()) {
            HHOLDTYPE = Byte.parseByte(s);
        } else {
            HHOLDTYPE = Byte.MIN_VALUE;
        }
    }

    protected final void initHHOSCH(String s) {
        if (!s.trim().isEmpty()) {
            HHOSCH = Byte.parseByte(s);
        } else {
            HHOSCH = Byte.MIN_VALUE;
        }
    }

    protected final void initHHOWN(String s) {
        if (!s.trim().isEmpty()) {
            HHOWN = Byte.parseByte(s);
        } else {
            HHOWN = Byte.MIN_VALUE;
        }
    }

    protected final void initHMORTG(String s) {
        if (!s.trim().isEmpty()) {
            HMORTG = Double.parseDouble(s);
        } else {
            HMORTG = Double.NaN;
        }
    }

    protected final void initHOUSGDST_SUM(String s) {
        if (!s.trim().isEmpty()) {
            HOUSGDST_SUM = Integer.parseInt(s);
        } else {
            HOUSGDST_SUM = Integer.MIN_VALUE;
        }
    }

    protected final void initHOUT(String s) {
        if (!s.trim().isEmpty()) {
            HOUT = Short.parseShort(s);
        } else {
            HOUT = Short.MIN_VALUE;
        }
    }

    protected final void initHPHYSW(String s) {
        if (!s.trim().isEmpty()) {
            HPHYSW = Integer.parseInt(s);
        } else {
            HPHYSW = Integer.MIN_VALUE;
        }
    }

    protected final void initHPRICE(String s) {
        if (!s.trim().isEmpty()) {
            HPRICE = Integer.parseInt(s);
        } else {
            HPRICE = Integer.MIN_VALUE;
        }
    }

    protected final void initHPRICEB(String s) {
        if (!s.trim().isEmpty()) {
            HPRICEB = Byte.parseByte(s);
        } else {
            HPRICEB = Byte.MIN_VALUE;
        }
    }

    protected final void initHPROPW(String s) {
        if (!s.trim().isEmpty()) {
            HPROPW = Double.parseDouble(s);
        } else {
            HPROPW = Double.NaN;
        }
    }

    protected final void initHRPDVAGE9(String s) {
        if (!s.trim().isEmpty()) {
            HRPDVAGE9 = Byte.parseByte(s);
        } else {
            HRPDVAGE9 = Byte.MIN_VALUE;
        }
    }

    protected final void initHRPDVILO3A(String s) {
        if (!s.trim().isEmpty()) {
            HRPDVILO3A = Byte.parseByte(s);
        } else {
            HRPDVILO3A = Byte.MIN_VALUE;
        }
    }

    protected final void initHRPDVMRDF(String s) {
        if (!s.trim().isEmpty()) {
            HRPDVMRDF = Byte.parseByte(s);
        } else {
            HRPDVMRDF = Byte.MIN_VALUE;
        }
    }

    protected final void initHRPEDATTN1(String s) {
        if (!s.trim().isEmpty()) {
            HRPEDATTN1 = Byte.parseByte(s);
        } else {
            HRPEDATTN1 = Byte.MIN_VALUE;
        }
    }

    protected final void initHRPEDATTN2(String s) {
        if (!s.trim().isEmpty()) {
            HRPEDATTN2 = Byte.parseByte(s);
        } else {
            HRPEDATTN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initHRPEDATTN3(String s) {
        if (!s.trim().isEmpty()) {
            HRPEDATTN3 = Byte.parseByte(s);
        } else {
            HRPEDATTN3 = Byte.MIN_VALUE;
        }
    }

    protected final void initHRPEDLEVEL(String s) {
        if (!s.trim().isEmpty()) {
            HRPEDLEVEL = Byte.parseByte(s);
        } else {
            HRPEDLEVEL = Byte.MIN_VALUE;
        }
    }

    protected final void initHRPNSSEC3(String s) {
        if (!s.trim().isEmpty()) {
            HRPNSSEC3 = Byte.parseByte(s);
        } else {
            HRPNSSEC3 = Byte.MIN_VALUE;
        }
    }

    protected final void initHRPSEX(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                HRPSEX = false;
            } else {
                HRPSEX = true;
            }
        }
    }

    protected final void initHRTBEV(String s) {
        if (!s.trim().isEmpty()) {
            HRTBEV = Byte.parseByte(s);
        } else {
            HRTBEV = Byte.MIN_VALUE;
        }
    }

    protected final void initHSETYPE(String s) {
        if (!s.trim().isEmpty()) {
            HSETYPE = Byte.parseByte(s);
        } else {
            HSETYPE = Byte.MIN_VALUE;
        }
    }

    protected final void initHSHARE(String s) {
        if (!s.trim().isEmpty()) {
            HSHARE = Byte.parseByte(s);
        } else {
            HSHARE = Byte.MIN_VALUE;
        }
    }

    protected final void initHSHAREP(String s) {
        if (!s.trim().isEmpty()) {
            HSHAREP = Byte.parseByte(s);
        } else {
            HSHAREP = Byte.MIN_VALUE;
        }
    }

    protected final void initHSHAREP_I(String s) {
        if (!s.trim().isEmpty()) {
            HSHAREP_I = Byte.parseByte(s);
        } else {
            HSHAREP_I = Byte.MIN_VALUE;
        }
    }

    protected final void initHSHAREP_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            HSHAREP_IFLAG = Byte.parseByte(s);
        } else {
            HSHAREP_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initHSHARE_I(String s) {
        if (!s.trim().isEmpty()) {
            HSHARE_I = Byte.parseByte(s);
        } else {
            HSHARE_I = Byte.MIN_VALUE;
        }
    }

    protected final void initHSHARE_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                HSHARE_IFLAG = false;
            } else {
                HSHARE_IFLAG = true;
            }
        }
    }

    protected final void initHVALB(String s) {
        if (!s.trim().isEmpty()) {
            HVALB = Byte.parseByte(s);
        } else {
            HVALB = Byte.MIN_VALUE;
        }
    }

    protected final void initHVALUE(String s) {
        if (!s.trim().isEmpty()) {
            HVALUE = Double.parseDouble(s);
        } else {
            HVALUE = Double.NaN;
        }
    }

    protected final void initHVALUE_I(String s) {
        if (!s.trim().isEmpty()) {
            HVALUE_I = Double.parseDouble(s);
        } else {
            HVALUE_I = Double.NaN;
        }
    }

    protected final void initHVALUE_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            HVALUE_IFLAG = Byte.parseByte(s);
        } else {
            HVALUE_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initLLORD(String s) {
        if (!s.trim().isEmpty()) {
            LLORD = Byte.parseByte(s);
        } else {
            LLORD = Byte.MIN_VALUE;
        }
    }

    protected final void initMALL2(String s) {
        if (!s.trim().isEmpty()) {
            MALL2 = Byte.parseByte(s);
        } else {
            MALL2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMALL2_I(String s) {
        if (!s.trim().isEmpty()) {
            MALL2_I = Byte.parseByte(s);
        } else {
            MALL2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initMALL2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            MALL2_IFLAG = Byte.parseByte(s);
        } else {
            MALL2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initMALL3(String s) {
        if (!s.trim().isEmpty()) {
            MALL3 = Byte.parseByte(s);
        } else {
            MALL3 = Byte.MIN_VALUE;
        }
    }

    protected final void initMALL3_I(String s) {
        if (!s.trim().isEmpty()) {
            MALL3_I = Byte.parseByte(s);
        } else {
            MALL3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initMALL3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            MALL3_IFLAG = Byte.parseByte(s);
        } else {
            MALL3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initMALLTY2(String s) {
        if (!s.trim().isEmpty()) {
            MALLTY2 = Byte.parseByte(s);
        } else {
            MALLTY2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMALLTY2_I(String s) {
        if (!s.trim().isEmpty()) {
            MALLTY2_I = Byte.parseByte(s);
        } else {
            MALLTY2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initMALLTY2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            MALLTY2_IFLAG = Byte.parseByte(s);
        } else {
            MALLTY2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initMALLTY3(String s) {
        if (!s.trim().isEmpty()) {
            MALLTY3 = Byte.parseByte(s);
        } else {
            MALLTY3 = Byte.MIN_VALUE;
        }
    }

    protected final void initMARRS2(String s) {
        if (!s.trim().isEmpty()) {
            MARRS2 = Byte.parseByte(s);
        } else {
            MARRS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMARRS3(String s) {
        if (!s.trim().isEmpty()) {
            MARRS3 = Byte.parseByte(s);
        } else {
            MARRS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDNUM2(String s) {
        if (!s.trim().isEmpty()) {
            MENDNUM2 = Byte.parseByte(s);
        } else {
            MENDNUM2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDNUM2_I(String s) {
        if (!s.trim().isEmpty()) {
            MENDNUM2_I = Byte.parseByte(s);
        } else {
            MENDNUM2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDNUM2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                MENDNUM2_IFLAG = false;
            } else {
                MENDNUM2_IFLAG = true;
            }
        }
    }

    protected final void initMENDNUM3(String s) {
        if (!s.trim().isEmpty()) {
            MENDNUM3 = Byte.parseByte(s);
        } else {
            MENDNUM3 = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDNUM3_I(String s) {
        if (!s.trim().isEmpty()) {
            MENDNUM3_I = Byte.parseByte(s);
        } else {
            MENDNUM3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDNUM3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            MENDNUM3_IFLAG = Byte.parseByte(s);
        } else {
            MENDNUM3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDV11(String s) {
        if (!s.trim().isEmpty()) {
            MENDV11 = Integer.parseInt(s);
        } else {
            MENDV11 = Integer.MIN_VALUE;
        }
    }

    protected final void initMENDV2(String s) {
        if (!s.trim().isEmpty()) {
            MENDV2 = Integer.parseInt(s);
        } else {
            MENDV2 = Integer.MIN_VALUE;
        }
    }

    protected final void initMENDV2_I(String s) {
        if (!s.trim().isEmpty()) {
            MENDV2_I = Double.parseDouble(s);
        } else {
            MENDV2_I = Double.NaN;
        }
    }

    protected final void initMENDV2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            MENDV2_IFLAG = Byte.parseByte(s);
        } else {
            MENDV2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDV3(String s) {
        if (!s.trim().isEmpty()) {
            MENDV3 = Integer.parseInt(s);
        } else {
            MENDV3 = Integer.MIN_VALUE;
        }
    }

    protected final void initMENDV3_I(String s) {
        if (!s.trim().isEmpty()) {
            MENDV3_I = Integer.parseInt(s);
        } else {
            MENDV3_I = Integer.MIN_VALUE;
        }
    }

    protected final void initMENDV3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            MENDV3_IFLAG = Byte.parseByte(s);
        } else {
            MENDV3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDV4(String s) {
        if (!s.trim().isEmpty()) {
            MENDV4 = Integer.parseInt(s);
        } else {
            MENDV4 = Integer.MIN_VALUE;
        }
    }

    protected final void initMENDV4_I(String s) {
        if (!s.trim().isEmpty()) {
            MENDV4_I = Integer.parseInt(s);
        } else {
            MENDV4_I = Integer.MIN_VALUE;
        }
    }

    protected final void initMENDV4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            MENDV4_IFLAG = Byte.parseByte(s);
        } else {
            MENDV4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDV5(String s) {
        if (!s.trim().isEmpty()) {
            MENDV5 = Integer.parseInt(s);
        } else {
            MENDV5 = Integer.MIN_VALUE;
        }
    }

    protected final void initMENDV5_I(String s) {
        if (!s.trim().isEmpty()) {
            MENDV5_I = Integer.parseInt(s);
        } else {
            MENDV5_I = Integer.MIN_VALUE;
        }
    }

    protected final void initMENDV5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                MENDV5_IFLAG = false;
            } else {
                MENDV5_IFLAG = true;
            }
        }
    }

    protected final void initMENDV6(String s) {
        if (!s.trim().isEmpty()) {
            MENDV6 = Integer.parseInt(s);
        } else {
            MENDV6 = Integer.MIN_VALUE;
        }
    }

    protected final void initMENDV6_I(String s) {
        if (!s.trim().isEmpty()) {
            MENDV6_I = Integer.parseInt(s);
        } else {
            MENDV6_I = Integer.MIN_VALUE;
        }
    }

    protected final void initMENDV6_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            MENDV6_IFLAG = Byte.parseByte(s);
        } else {
            MENDV6_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDV7(String s) {
        if (!s.trim().isEmpty()) {
            MENDV7 = Integer.parseInt(s);
        } else {
            MENDV7 = Integer.MIN_VALUE;
        }
    }

    protected final void initMENDV7_I(String s) {
        if (!s.trim().isEmpty()) {
            MENDV7_I = Integer.parseInt(s);
        } else {
            MENDV7_I = Integer.MIN_VALUE;
        }
    }

    protected final void initMENDV7_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            MENDV7_IFLAG = Byte.parseByte(s);
        } else {
            MENDV7_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDV8(String s) {
        if (!s.trim().isEmpty()) {
            MENDV8 = Short.parseShort(s);
        } else {
            MENDV8 = Short.MIN_VALUE;
        }
    }

    protected final void initMENDVB11(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MENDVB11 = false;
            } else {
                MENDVB11 = true;
            }
        }
    }

    protected final void initMENDVB2(String s) {
        if (!s.trim().isEmpty()) {
            MENDVB2 = Byte.parseByte(s);
        } else {
            MENDVB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDVB3(String s) {
        if (!s.trim().isEmpty()) {
            MENDVB3 = Byte.parseByte(s);
        } else {
            MENDVB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDVB4(String s) {
        if (!s.trim().isEmpty()) {
            MENDVB4 = Byte.parseByte(s);
        } else {
            MENDVB4 = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDVB6(String s) {
        if (!s.trim().isEmpty()) {
            MENDVB6 = Byte.parseByte(s);
        } else {
            MENDVB6 = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDVB7(String s) {
        if (!s.trim().isEmpty()) {
            MENDVB7 = Byte.parseByte(s);
        } else {
            MENDVB7 = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDW2_I(String s) {
        if (!s.trim().isEmpty()) {
            MENDW2_I = Byte.parseByte(s);
        } else {
            MENDW2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDW2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            MENDW2_IFLAG = Byte.parseByte(s);
        } else {
            MENDW2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDW3_I(String s) {
        if (!s.trim().isEmpty()) {
            MENDW3_I = Byte.parseByte(s);
        } else {
            MENDW3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDW3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            MENDW3_IFLAG = Byte.parseByte(s);
        } else {
            MENDW3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDX2(String s) {
        if (!s.trim().isEmpty()) {
            MENDX2 = Byte.parseByte(s);
        } else {
            MENDX2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDX3(String s) {
        if (!s.trim().isEmpty()) {
            MENDX3 = Byte.parseByte(s);
        } else {
            MENDX3 = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDY11(String s) {
        if (!s.trim().isEmpty()) {
            MENDY11 = Byte.parseByte(s);
        } else {
            MENDY11 = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDY2(String s) {
        if (!s.trim().isEmpty()) {
            MENDY2 = Byte.parseByte(s);
        } else {
            MENDY2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDY3(String s) {
        if (!s.trim().isEmpty()) {
            MENDY3 = Byte.parseByte(s);
        } else {
            MENDY3 = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDY4(String s) {
        if (!s.trim().isEmpty()) {
            MENDY4 = Byte.parseByte(s);
        } else {
            MENDY4 = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDY6(String s) {
        if (!s.trim().isEmpty()) {
            MENDY6 = Byte.parseByte(s);
        } else {
            MENDY6 = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDY7(String s) {
        if (!s.trim().isEmpty()) {
            MENDY7 = Byte.parseByte(s);
        } else {
            MENDY7 = Byte.MIN_VALUE;
        }
    }

    protected final void initMHOWPY2(String s) {
        if (!s.trim().isEmpty()) {
            MHOWPY2 = Byte.parseByte(s);
        } else {
            MHOWPY2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMHOWPY3(String s) {
        if (!s.trim().isEmpty()) {
            MHOWPY3 = Byte.parseByte(s);
        } else {
            MHOWPY3 = Byte.MIN_VALUE;
        }
    }

    protected final void initMINC1(String s) {
        if (!s.trim().isEmpty()) {
            MINC1 = Byte.parseByte(s);
        } else {
            MINC1 = Byte.MIN_VALUE;
        }
    }

    protected final void initMINC11(String s) {
        if (!s.trim().isEmpty()) {
            MINC11 = Byte.parseByte(s);
        } else {
            MINC11 = Byte.MIN_VALUE;
        }
    }

    protected final void initMINC2(String s) {
        if (!s.trim().isEmpty()) {
            MINC2 = Byte.parseByte(s);
        } else {
            MINC2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMINC3(String s) {
        if (!s.trim().isEmpty()) {
            MINC3 = Byte.parseByte(s);
        } else {
            MINC3 = Byte.MIN_VALUE;
        }
    }

    protected final void initMINC4(String s) {
        if (!s.trim().isEmpty()) {
            MINC4 = Byte.parseByte(s);
        } else {
            MINC4 = Byte.MIN_VALUE;
        }
    }

    protected final void initMINC5(String s) {
        if (!s.trim().isEmpty()) {
            MINC5 = Byte.parseByte(s);
        } else {
            MINC5 = Byte.MIN_VALUE;
        }
    }

    protected final void initMINC6(String s) {
        if (!s.trim().isEmpty()) {
            MINC6 = Byte.parseByte(s);
        } else {
            MINC6 = Byte.MIN_VALUE;
        }
    }

    protected final void initMJNAME01(String s) {
        if (!s.trim().isEmpty()) {
            MJNAME01 = Byte.parseByte(s);
        } else {
            MJNAME01 = Byte.MIN_VALUE;
        }
    }

    protected final void initMJNAME02(String s) {
        if (!s.trim().isEmpty()) {
            MJNAME02 = Byte.parseByte(s);
        } else {
            MJNAME02 = Byte.MIN_VALUE;
        }
    }

    protected final void initMJNAME03(String s) {
        if (!s.trim().isEmpty()) {
            MJNAME03 = Byte.parseByte(s);
        } else {
            MJNAME03 = Byte.MIN_VALUE;
        }
    }

    protected final void initMJNAME04(String s) {
        if (!s.trim().isEmpty()) {
            MJNAME04 = Byte.parseByte(s);
        } else {
            MJNAME04 = Byte.MIN_VALUE;
        }
    }

    protected final void initMJNAME18(String s) {
        if (!s.trim().isEmpty()) {
            MJNAME18 = Byte.parseByte(s);
        } else {
            MJNAME18 = Byte.MIN_VALUE;
        }
    }

    protected final void initMJNAME19(String s) {
        if (!s.trim().isEmpty()) {
            MJNAME19 = Byte.parseByte(s);
        } else {
            MJNAME19 = Byte.MIN_VALUE;
        }
    }

    protected final void initMJNAME20(String s) {
        if (!s.trim().isEmpty()) {
            MJNAME20 = Byte.parseByte(s);
        } else {
            MJNAME20 = Byte.MIN_VALUE;
        }
    }

    protected final void initMJNAME35(String s) {
        if (!s.trim().isEmpty()) {
            MJNAME35 = Byte.parseByte(s);
        } else {
            MJNAME35 = Byte.MIN_VALUE;
        }
    }

    protected final void initMJNAME36(String s) {
        if (!s.trim().isEmpty()) {
            MJNAME36 = Byte.parseByte(s);
        } else {
            MJNAME36 = Byte.MIN_VALUE;
        }
    }

    protected final void initMNAME2(String s) {
        if (!s.trim().isEmpty()) {
            MNAME2 = Byte.parseByte(s);
        } else {
            MNAME2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMNAME3(String s) {
        if (!s.trim().isEmpty()) {
            MNAME3 = Byte.parseByte(s);
        } else {
            MNAME3 = Byte.MIN_VALUE;
        }
    }

    protected final void initMNEG2(String s) {
        if (!s.trim().isEmpty()) {
            MNEG2 = Integer.parseInt(s);
        } else {
            MNEG2 = Integer.MIN_VALUE;
        }
    }

    protected final void initMNEG2_I(String s) {
        if (!s.trim().isEmpty()) {
            MNEG2_I = Integer.parseInt(s);
        } else {
            MNEG2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initMNEG2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            MNEG2_IFLAG = Byte.parseByte(s);
        } else {
            MNEG2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initMNEG3(String s) {
        if (!s.trim().isEmpty()) {
            MNEG3 = Integer.parseInt(s);
        } else {
            MNEG3 = Integer.MIN_VALUE;
        }
    }

    protected final void initMNEGB2(String s) {
        if (!s.trim().isEmpty()) {
            MNEGB2 = Byte.parseByte(s);
        } else {
            MNEGB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMNEGB3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MNEGB3 = false;
            } else {
                MNEGB3 = true;
            }
        }
    }

    protected final void initMNUMB(String s) {
        if (!s.trim().isEmpty()) {
            MNUMB = Byte.parseByte(s);
        } else {
            MNUMB = Byte.MIN_VALUE;
        }
    }

    protected final void initMONAME2(String s) {
        if (!s.trim().isEmpty()) {
            MONAME2 = Byte.parseByte(s);
        } else {
            MONAME2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMONAME3(String s) {
        if (!s.trim().isEmpty()) {
            MONAME3 = Byte.parseByte(s);
        } else {
            MONAME3 = Byte.MIN_VALUE;
        }
    }

    protected final void initMONTH(String s) {
        if (!s.trim().isEmpty()) {
            MONTH = Byte.parseByte(s);
        } else {
            MONTH = Byte.MIN_VALUE;
        }
    }

    protected final void initMPAYB2(String s) {
        if (!s.trim().isEmpty()) {
            MPAYB2 = Byte.parseByte(s);
        } else {
            MPAYB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMPAYB3(String s) {
        if (!s.trim().isEmpty()) {
            MPAYB3 = Byte.parseByte(s);
        } else {
            MPAYB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initMPAYM2(String s) {
        if (!s.trim().isEmpty()) {
            MPAYM2 = Integer.parseInt(s);
        } else {
            MPAYM2 = Integer.MIN_VALUE;
        }
    }

    protected final void initMPAYM3(String s) {
        if (!s.trim().isEmpty()) {
            MPAYM3 = Integer.parseInt(s);
        } else {
            MPAYM3 = Integer.MIN_VALUE;
        }
    }

    protected final void initMPP2(String s) {
        if (!s.trim().isEmpty()) {
            MPP2 = Byte.parseByte(s);
        } else {
            MPP2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMPP3(String s) {
        if (!s.trim().isEmpty()) {
            MPP3 = Byte.parseByte(s);
        } else {
            MPP3 = Byte.MIN_VALUE;
        }
    }

    protected final void initMREAS01(String s) {
        if (!s.trim().isEmpty()) {
            MREAS01 = Byte.parseByte(s);
        } else {
            MREAS01 = Byte.MIN_VALUE;
        }
    }

    protected final void initMREAS02(String s) {
        if (!s.trim().isEmpty()) {
            MREAS02 = Byte.parseByte(s);
        } else {
            MREAS02 = Byte.MIN_VALUE;
        }
    }

    protected final void initMREAS03(String s) {
        if (!s.trim().isEmpty()) {
            MREAS03 = Byte.parseByte(s);
        } else {
            MREAS03 = Byte.MIN_VALUE;
        }
    }

    protected final void initMREAS04(String s) {
        if (!s.trim().isEmpty()) {
            MREAS04 = Byte.parseByte(s);
        } else {
            MREAS04 = Byte.MIN_VALUE;
        }
    }

    protected final void initMREAS05(String s) {
        if (!s.trim().isEmpty()) {
            MREAS05 = Byte.parseByte(s);
        } else {
            MREAS05 = Byte.MIN_VALUE;
        }
    }

    protected final void initMREAS06(String s) {
        if (!s.trim().isEmpty()) {
            MREAS06 = Byte.parseByte(s);
        } else {
            MREAS06 = Byte.MIN_VALUE;
        }
    }

    protected final void initMREAS07(String s) {
        if (!s.trim().isEmpty()) {
            MREAS07 = Byte.parseByte(s);
        } else {
            MREAS07 = Byte.MIN_VALUE;
        }
    }

    protected final void initMREAS12(String s) {
        if (!s.trim().isEmpty()) {
            MREAS12 = Byte.parseByte(s);
        } else {
            MREAS12 = Byte.MIN_VALUE;
        }
    }

    protected final void initMREAS13(String s) {
        if (!s.trim().isEmpty()) {
            MREAS13 = Byte.parseByte(s);
        } else {
            MREAS13 = Byte.MIN_VALUE;
        }
    }

    protected final void initMREAS23(String s) {
        if (!s.trim().isEmpty()) {
            MREAS23 = Byte.parseByte(s);
        } else {
            MREAS23 = Byte.MIN_VALUE;
        }
    }

    protected final void initMTYPE2(String s) {
        if (!s.trim().isEmpty()) {
            MTYPE2 = Byte.parseByte(s);
        } else {
            MTYPE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMTYPE2_I(String s) {
        if (!s.trim().isEmpty()) {
            MTYPE2_I = Byte.parseByte(s);
        } else {
            MTYPE2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initMTYPE2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            MTYPE2_IFLAG = Byte.parseByte(s);
        } else {
            MTYPE2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initMTYPE3(String s) {
        if (!s.trim().isEmpty()) {
            MTYPE3 = Byte.parseByte(s);
        } else {
            MTYPE3 = Byte.MIN_VALUE;
        }
    }

    protected final void initMTYPE3_I(String s) {
        if (!s.trim().isEmpty()) {
            MTYPE3_I = Byte.parseByte(s);
        } else {
            MTYPE3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initMTYPE3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            MTYPE3_IFLAG = Byte.parseByte(s);
        } else {
            MTYPE3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initMVAL2(String s) {
        if (!s.trim().isEmpty()) {
            MVAL2 = Integer.parseInt(s);
        } else {
            MVAL2 = Integer.MIN_VALUE;
        }
    }

    protected final void initMVAL2_I(String s) {
        if (!s.trim().isEmpty()) {
            MVAL2_I = Integer.parseInt(s);
        } else {
            MVAL2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initMVAL2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                MVAL2_IFLAG = false;
            } else {
                MVAL2_IFLAG = true;
            }
        }
    }

    protected final void initMVAL3(String s) {
        if (!s.trim().isEmpty()) {
            MVAL3 = Integer.parseInt(s);
        } else {
            MVAL3 = Integer.MIN_VALUE;
        }
    }

    protected final void initMVAL3_I(String s) {
        if (!s.trim().isEmpty()) {
            MVAL3_I = Integer.parseInt(s);
        } else {
            MVAL3_I = Integer.MIN_VALUE;
        }
    }

    protected final void initMVAL3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            MVAL3_IFLAG = Byte.parseByte(s);
        } else {
            MVAL3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initMVALB2(String s) {
        if (!s.trim().isEmpty()) {
            MVALB2 = Byte.parseByte(s);
        } else {
            MVALB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMVALB3(String s) {
        if (!s.trim().isEmpty()) {
            MVALB3 = Byte.parseByte(s);
        } else {
            MVALB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initMYLFT2(String s) {
        if (!s.trim().isEmpty()) {
            MYLFT2 = Byte.parseByte(s);
        } else {
            MYLFT2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMYLFT3(String s) {
        if (!s.trim().isEmpty()) {
            MYLFT3 = Byte.parseByte(s);
        } else {
            MYLFT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initNUMADULT(String s) {
        if (!s.trim().isEmpty()) {
            NUMADULT = Byte.parseByte(s);
        } else {
            NUMADULT = Byte.MIN_VALUE;
        }
    }

    protected final void initNUMCH18(String s) {
        if (!s.trim().isEmpty()) {
            NUMCH18 = Byte.parseByte(s);
        } else {
            NUMCH18 = Byte.MIN_VALUE;
        }
    }

    protected final void initNUMCHILD(String s) {
        if (!s.trim().isEmpty()) {
            NUMCHILD = Byte.parseByte(s);
        } else {
            NUMCHILD = Byte.MIN_VALUE;
        }
    }

    protected final void initNUMCIVPTR(String s) {
        if (!s.trim().isEmpty()) {
            NUMCIVPTR = Byte.parseByte(s);
        } else {
            NUMCIVPTR = Byte.MIN_VALUE;
        }
    }

    protected final void initNUMCPART(String s) {
        if (!s.trim().isEmpty()) {
            NUMCPART = Byte.parseByte(s);
        } else {
            NUMCPART = Byte.MIN_VALUE;
        }
    }

    protected final void initNUMHHLDR(String s) {
        if (!s.trim().isEmpty()) {
            NUMHHLDR = Byte.parseByte(s);
        } else {
            NUMHHLDR = Byte.MIN_VALUE;
        }
    }

    protected final void initNUMMPART(String s) {
        if (!s.trim().isEmpty()) {
            NUMMPART = Byte.parseByte(s);
        } else {
            NUMMPART = Byte.MIN_VALUE;
        }
    }

    protected final void initOFINAL(String s) {
        if (!s.trim().isEmpty()) {
            OFINAL = Byte.parseByte(s);
        } else {
            OFINAL = Byte.MIN_VALUE;
        }
    }

    protected final void initTEN1(String s) {
        if (!s.trim().isEmpty()) {
            TEN1 = Byte.parseByte(s);
        } else {
            TEN1 = Byte.MIN_VALUE;
        }
    }

    protected final void initTEN1_I(String s) {
        if (!s.trim().isEmpty()) {
            TEN1_I = Byte.parseByte(s);
        } else {
            TEN1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initTEN1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            TEN1_IFLAG = Byte.parseByte(s);
        } else {
            TEN1_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initTIED(String s) {
        if (!s.trim().isEmpty()) {
            TIED = Byte.parseByte(s);
        } else {
            TIED = Byte.MIN_VALUE;
        }
    }

    protected final void initTOTMNEG(String s) {
        if (!s.trim().isEmpty()) {
            TOTMNEG = Integer.parseInt(s);
        } else {
            TOTMNEG = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTMORT(String s) {
        if (!s.trim().isEmpty()) {
            TOTMORT = Double.parseDouble(s);
        } else {
            TOTMORT = Double.NaN;
        }
    }

    protected final void initTOTMVAL(String s) {
        if (!s.trim().isEmpty()) {
            TOTMVAL = Double.parseDouble(s);
        } else {
            TOTMVAL = Double.NaN;
        }
    }

    protected final void initTOTWLTH(String s) {
        if (!s.trim().isEmpty()) {
            TOTWLTH = Double.parseDouble(s);
        } else {
            TOTWLTH = Double.NaN;
        }
    }

    protected final void initVCARN(String s) {
        if (!s.trim().isEmpty()) {
            VCARN = Byte.parseByte(s);
        } else {
            VCARN = Byte.MIN_VALUE;
        }
    }

    protected final void initVCARN_I(String s) {
        if (!s.trim().isEmpty()) {
            VCARN_I = Byte.parseByte(s);
        } else {
            VCARN_I = Byte.MIN_VALUE;
        }
    }

    protected final void initVCARN_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            VCARN_IFLAG = Byte.parseByte(s);
        } else {
            VCARN_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initVOTYP1(String s) {
        if (!s.trim().isEmpty()) {
            VOTYP1 = Byte.parseByte(s);
        } else {
            VOTYP1 = Byte.MIN_VALUE;
        }
    }

    protected final void initVOTYP1_I(String s) {
        if (!s.trim().isEmpty()) {
            VOTYP1_I = Byte.parseByte(s);
        } else {
            VOTYP1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initVOTYP2(String s) {
        if (!s.trim().isEmpty()) {
            VOTYP2 = Byte.parseByte(s);
        } else {
            VOTYP2 = Byte.MIN_VALUE;
        }
    }

    protected final void initVOTYP2_I(String s) {
        if (!s.trim().isEmpty()) {
            VOTYP2_I = Byte.parseByte(s);
        } else {
            VOTYP2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initVOTYP3(String s) {
        if (!s.trim().isEmpty()) {
            VOTYP3 = Byte.parseByte(s);
        } else {
            VOTYP3 = Byte.MIN_VALUE;
        }
    }

    protected final void initVOTYP3_I(String s) {
        if (!s.trim().isEmpty()) {
            VOTYP3_I = Byte.parseByte(s);
        } else {
            VOTYP3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initVOTYP4(String s) {
        if (!s.trim().isEmpty()) {
            VOTYP4 = Byte.parseByte(s);
        } else {
            VOTYP4 = Byte.MIN_VALUE;
        }
    }

    protected final void initVOTYP4_I(String s) {
        if (!s.trim().isEmpty()) {
            VOTYP4_I = Byte.parseByte(s);
        } else {
            VOTYP4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initVOTYP5_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                VOTYP5_I = false;
            } else {
                VOTYP5_I = true;
            }
        }
    }

    protected final void initVOVAL(String s) {
        if (!s.trim().isEmpty()) {
            VOVAL = Integer.parseInt(s);
        } else {
            VOVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initVOVAL_I(String s) {
        if (!s.trim().isEmpty()) {
            VOVAL_I = Integer.parseInt(s);
        } else {
            VOVAL_I = Integer.MIN_VALUE;
        }
    }

    protected final void initVOVAL_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                VOVAL_IFLAG = false;
            } else {
                VOVAL_IFLAG = true;
            }
        }
    }

    protected final void initVOVLB(String s) {
        if (!s.trim().isEmpty()) {
            VOVLB = Byte.parseByte(s);
        } else {
            VOVLB = Byte.MIN_VALUE;
        }
    }

    protected final void initVPERS(String s) {
        if (!s.trim().isEmpty()) {
            VPERS = Byte.parseByte(s);
        } else {
            VPERS = Byte.MIN_VALUE;
        }
    }

    protected final void initVPERV(String s) {
        if (!s.trim().isEmpty()) {
            VPERV = Integer.parseInt(s);
        } else {
            VPERV = Integer.MIN_VALUE;
        }
    }

    protected final void initVPERV_I(String s) {
        if (!s.trim().isEmpty()) {
            VPERV_I = Integer.parseInt(s);
        } else {
            VPERV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initVPERV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                VPERV_IFLAG = false;
            } else {
                VPERV_IFLAG = true;
            }
        }
    }

    protected final void initVTYPE2(String s) {
        if (!s.trim().isEmpty()) {
            VTYPE2 = Byte.parseByte(s);
        } else {
            VTYPE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initVTYPE2_I(String s) {
        if (!s.trim().isEmpty()) {
            VTYPE2_I = Byte.parseByte(s);
        } else {
            VTYPE2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initVTYPE_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            VTYPE_IFLAG = Byte.parseByte(s);
        } else {
            VTYPE_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initYEAR(String s) {
        if (!s.trim().isEmpty()) {
            YEAR = Short.parseShort(s);
        } else {
            YEAR = Short.MIN_VALUE;
        }
    }

    public byte getACCOM() {
        return ACCOM;
    }

    public byte getACCOTH() {
        return ACCOTH;
    }

    public double getALLENDW() {
        return ALLENDW;
    }

    public int getALLGD() {
        return ALLGD;
    }

    public short getCASEW1() {
        return CASEW1;
    }

    public double getDVEQRELVAL() {
        return DVEQRELVAL;
    }

    public int getDVGCOLLV() {
        return DVGCOLLV;
    }

    public double getDVHORP() {
        return DVHORP;
    }

    public byte getDVHSIZE() {
        return DVHSIZE;
    }

    public double getDVHVALUE() {
        return DVHVALUE;
    }

    public boolean getDVPRIRNT() {
        return DVPRIRNT;
    }

    public double getDVPROPERTY() {
        return DVPROPERTY;
    }

    public int getDVTOTOTHVEHVAL() {
        return DVTOTOTHVEHVAL;
    }

    public int getDVTOTPERNPVAL() {
        return DVTOTPERNPVAL;
    }

    public int getDVTOTVEHVAL() {
        return DVTOTVEHVAL;
    }

    public double getEINTRAT() {
        return EINTRAT;
    }

    public double getEINTRAT_I() {
        return EINTRAT_I;
    }

    public byte getEINTRAT_IFLAG() {
        return EINTRAT_IFLAG;
    }

    public byte getEOTHREG() {
        return EOTHREG;
    }

    public int getEOTHRVA() {
        return EOTHRVA;
    }

    public byte getEOTHRVB() {
        return EOTHRVB;
    }

    public byte getEPRPER() {
        return EPRPER;
    }

    public int getEPRVAL() {
        return EPRVAL;
    }

    public byte getEPRVPAY() {
        return EPRVPAY;
    }

    public int getEQVAL() {
        return EQVAL;
    }

    public byte getEQVALB() {
        return EQVALB;
    }

    public int getEQVAL_I() {
        return EQVAL_I;
    }

    public byte getEQVAL_IFLAG() {
        return EQVAL_IFLAG;
    }

    public byte getEQYES() {
        return EQYES;
    }

    public byte getERECTAX() {
        return ERECTAX;
    }

    public double getERVPRP() {
        return ERVPRP;
    }

    public double getERVPRP_I() {
        return ERVPRP_I;
    }

    public byte getERVPRP_IFLAG() {
        return ERVPRP_IFLAG;
    }

    public byte getERVRENT() {
        return ERVRENT;
    }

    public int getERVSUM() {
        return ERVSUM;
    }

    public byte getERVSUMB() {
        return ERVSUMB;
    }

    public byte getERVTAX() {
        return ERVTAX;
    }

    public byte getFLTTYP() {
        return FLTTYP;
    }

    public byte getFURN() {
        return FURN;
    }

    public byte getGCOLLEC() {
        return GCOLLEC;
    }

    public byte getGCOLLEC_I() {
        return GCOLLEC_I;
    }

    public boolean getGCOLLEC_IFLAG() {
        return GCOLLEC_IFLAG;
    }

    public int getGCOLLV() {
        return GCOLLV;
    }

    public byte getGCOLLVB() {
        return GCOLLVB;
    }

    public int getGCOLLV_I() {
        return GCOLLV_I;
    }

    public boolean getGCOLLV_IFLAG() {
        return GCOLLV_IFLAG;
    }

    public byte getGCONTVB() {
        return GCONTVB;
    }

    public byte getGCONTVB_I() {
        return GCONTVB_I;
    }

    public boolean getGCONTVB_IFLAG() {
        return GCONTVB_IFLAG;
    }

    public byte getHAGEB() {
        return HAGEB;
    }

    public short getHAGEYR() {
        return HAGEYR;
    }

    public byte getHBEDRM() {
        return HBEDRM;
    }

    public byte getHBFROM() {
        return HBFROM;
    }

    public byte getHBUYSE() {
        return HBUYSE;
    }

    public short getHBUYYR() {
        return HBUYYR;
    }

    public double getHFINWNT_SUM() {
        return HFINWNT_SUM;
    }

    public double getHFINW_SUM() {
        return HFINW_SUM;
    }

    public byte getHHOLDTYPE() {
        return HHOLDTYPE;
    }

    public byte getHHOSCH() {
        return HHOSCH;
    }

    public byte getHHOWN() {
        return HHOWN;
    }

    public double getHMORTG() {
        return HMORTG;
    }

    public int getHOUSGDST_SUM() {
        return HOUSGDST_SUM;
    }

    public short getHOUT() {
        return HOUT;
    }

    public int getHPHYSW() {
        return HPHYSW;
    }

    public int getHPRICE() {
        return HPRICE;
    }

    public byte getHPRICEB() {
        return HPRICEB;
    }

    public double getHPROPW() {
        return HPROPW;
    }

    public byte getHRPDVAGE9() {
        return HRPDVAGE9;
    }

    public byte getHRPDVILO3A() {
        return HRPDVILO3A;
    }

    public byte getHRPDVMRDF() {
        return HRPDVMRDF;
    }

    public byte getHRPEDATTN1() {
        return HRPEDATTN1;
    }

    public byte getHRPEDATTN2() {
        return HRPEDATTN2;
    }

    public byte getHRPEDATTN3() {
        return HRPEDATTN3;
    }

    public byte getHRPEDLEVEL() {
        return HRPEDLEVEL;
    }

    public byte getHRPNSSEC3() {
        return HRPNSSEC3;
    }

    public boolean getHRPSEX() {
        return HRPSEX;
    }

    public byte getHRTBEV() {
        return HRTBEV;
    }

    public byte getHSETYPE() {
        return HSETYPE;
    }

    public byte getHSHARE() {
        return HSHARE;
    }

    public byte getHSHAREP() {
        return HSHAREP;
    }

    public byte getHSHAREP_I() {
        return HSHAREP_I;
    }

    public byte getHSHAREP_IFLAG() {
        return HSHAREP_IFLAG;
    }

    public byte getHSHARE_I() {
        return HSHARE_I;
    }

    public boolean getHSHARE_IFLAG() {
        return HSHARE_IFLAG;
    }

    public byte getHVALB() {
        return HVALB;
    }

    public double getHVALUE() {
        return HVALUE;
    }

    public double getHVALUE_I() {
        return HVALUE_I;
    }

    public byte getHVALUE_IFLAG() {
        return HVALUE_IFLAG;
    }

    public byte getLLORD() {
        return LLORD;
    }

    public byte getMALL2() {
        return MALL2;
    }

    public byte getMALL2_I() {
        return MALL2_I;
    }

    public byte getMALL2_IFLAG() {
        return MALL2_IFLAG;
    }

    public byte getMALL3() {
        return MALL3;
    }

    public byte getMALL3_I() {
        return MALL3_I;
    }

    public byte getMALL3_IFLAG() {
        return MALL3_IFLAG;
    }

    public byte getMALLTY2() {
        return MALLTY2;
    }

    public byte getMALLTY2_I() {
        return MALLTY2_I;
    }

    public byte getMALLTY2_IFLAG() {
        return MALLTY2_IFLAG;
    }

    public byte getMALLTY3() {
        return MALLTY3;
    }

    public byte getMARRS2() {
        return MARRS2;
    }

    public byte getMARRS3() {
        return MARRS3;
    }

    public byte getMENDNUM2() {
        return MENDNUM2;
    }

    public byte getMENDNUM2_I() {
        return MENDNUM2_I;
    }

    public boolean getMENDNUM2_IFLAG() {
        return MENDNUM2_IFLAG;
    }

    public byte getMENDNUM3() {
        return MENDNUM3;
    }

    public byte getMENDNUM3_I() {
        return MENDNUM3_I;
    }

    public byte getMENDNUM3_IFLAG() {
        return MENDNUM3_IFLAG;
    }

    public int getMENDV11() {
        return MENDV11;
    }

    public int getMENDV2() {
        return MENDV2;
    }

    public double getMENDV2_I() {
        return MENDV2_I;
    }

    public byte getMENDV2_IFLAG() {
        return MENDV2_IFLAG;
    }

    public int getMENDV3() {
        return MENDV3;
    }

    public int getMENDV3_I() {
        return MENDV3_I;
    }

    public byte getMENDV3_IFLAG() {
        return MENDV3_IFLAG;
    }

    public int getMENDV4() {
        return MENDV4;
    }

    public int getMENDV4_I() {
        return MENDV4_I;
    }

    public byte getMENDV4_IFLAG() {
        return MENDV4_IFLAG;
    }

    public int getMENDV5() {
        return MENDV5;
    }

    public int getMENDV5_I() {
        return MENDV5_I;
    }

    public boolean getMENDV5_IFLAG() {
        return MENDV5_IFLAG;
    }

    public int getMENDV6() {
        return MENDV6;
    }

    public int getMENDV6_I() {
        return MENDV6_I;
    }

    public byte getMENDV6_IFLAG() {
        return MENDV6_IFLAG;
    }

    public int getMENDV7() {
        return MENDV7;
    }

    public int getMENDV7_I() {
        return MENDV7_I;
    }

    public byte getMENDV7_IFLAG() {
        return MENDV7_IFLAG;
    }

    public short getMENDV8() {
        return MENDV8;
    }

    public boolean getMENDVB11() {
        return MENDVB11;
    }

    public byte getMENDVB2() {
        return MENDVB2;
    }

    public byte getMENDVB3() {
        return MENDVB3;
    }

    public byte getMENDVB4() {
        return MENDVB4;
    }

    public byte getMENDVB6() {
        return MENDVB6;
    }

    public byte getMENDVB7() {
        return MENDVB7;
    }

    public byte getMENDW2_I() {
        return MENDW2_I;
    }

    public byte getMENDW2_IFLAG() {
        return MENDW2_IFLAG;
    }

    public byte getMENDW3_I() {
        return MENDW3_I;
    }

    public byte getMENDW3_IFLAG() {
        return MENDW3_IFLAG;
    }

    public byte getMENDX2() {
        return MENDX2;
    }

    public byte getMENDX3() {
        return MENDX3;
    }

    public byte getMENDY11() {
        return MENDY11;
    }

    public byte getMENDY2() {
        return MENDY2;
    }

    public byte getMENDY3() {
        return MENDY3;
    }

    public byte getMENDY4() {
        return MENDY4;
    }

    public byte getMENDY6() {
        return MENDY6;
    }

    public byte getMENDY7() {
        return MENDY7;
    }

    public byte getMHOWPY2() {
        return MHOWPY2;
    }

    public byte getMHOWPY3() {
        return MHOWPY3;
    }

    public byte getMINC1() {
        return MINC1;
    }

    public byte getMINC11() {
        return MINC11;
    }

    public byte getMINC2() {
        return MINC2;
    }

    public byte getMINC3() {
        return MINC3;
    }

    public byte getMINC4() {
        return MINC4;
    }

    public byte getMINC5() {
        return MINC5;
    }

    public byte getMINC6() {
        return MINC6;
    }

    public byte getMJNAME01() {
        return MJNAME01;
    }

    public byte getMJNAME02() {
        return MJNAME02;
    }

    public byte getMJNAME03() {
        return MJNAME03;
    }

    public byte getMJNAME04() {
        return MJNAME04;
    }

    public byte getMJNAME18() {
        return MJNAME18;
    }

    public byte getMJNAME19() {
        return MJNAME19;
    }

    public byte getMJNAME20() {
        return MJNAME20;
    }

    public byte getMJNAME35() {
        return MJNAME35;
    }

    public byte getMJNAME36() {
        return MJNAME36;
    }

    public byte getMNAME2() {
        return MNAME2;
    }

    public byte getMNAME3() {
        return MNAME3;
    }

    public int getMNEG2() {
        return MNEG2;
    }

    public int getMNEG2_I() {
        return MNEG2_I;
    }

    public byte getMNEG2_IFLAG() {
        return MNEG2_IFLAG;
    }

    public int getMNEG3() {
        return MNEG3;
    }

    public byte getMNEGB2() {
        return MNEGB2;
    }

    public boolean getMNEGB3() {
        return MNEGB3;
    }

    public byte getMNUMB() {
        return MNUMB;
    }

    public byte getMONAME2() {
        return MONAME2;
    }

    public byte getMONAME3() {
        return MONAME3;
    }

    public byte getMONTH() {
        return MONTH;
    }

    public byte getMPAYB2() {
        return MPAYB2;
    }

    public byte getMPAYB3() {
        return MPAYB3;
    }

    public int getMPAYM2() {
        return MPAYM2;
    }

    public int getMPAYM3() {
        return MPAYM3;
    }

    public byte getMPP2() {
        return MPP2;
    }

    public byte getMPP3() {
        return MPP3;
    }

    public byte getMREAS01() {
        return MREAS01;
    }

    public byte getMREAS02() {
        return MREAS02;
    }

    public byte getMREAS03() {
        return MREAS03;
    }

    public byte getMREAS04() {
        return MREAS04;
    }

    public byte getMREAS05() {
        return MREAS05;
    }

    public byte getMREAS06() {
        return MREAS06;
    }

    public byte getMREAS07() {
        return MREAS07;
    }

    public byte getMREAS12() {
        return MREAS12;
    }

    public byte getMREAS13() {
        return MREAS13;
    }

    public byte getMREAS23() {
        return MREAS23;
    }

    public byte getMTYPE2() {
        return MTYPE2;
    }

    public byte getMTYPE2_I() {
        return MTYPE2_I;
    }

    public byte getMTYPE2_IFLAG() {
        return MTYPE2_IFLAG;
    }

    public byte getMTYPE3() {
        return MTYPE3;
    }

    public byte getMTYPE3_I() {
        return MTYPE3_I;
    }

    public byte getMTYPE3_IFLAG() {
        return MTYPE3_IFLAG;
    }

    public int getMVAL2() {
        return MVAL2;
    }

    public int getMVAL2_I() {
        return MVAL2_I;
    }

    public boolean getMVAL2_IFLAG() {
        return MVAL2_IFLAG;
    }

    public int getMVAL3() {
        return MVAL3;
    }

    public int getMVAL3_I() {
        return MVAL3_I;
    }

    public byte getMVAL3_IFLAG() {
        return MVAL3_IFLAG;
    }

    public byte getMVALB2() {
        return MVALB2;
    }

    public byte getMVALB3() {
        return MVALB3;
    }

    public byte getMYLFT2() {
        return MYLFT2;
    }

    public byte getMYLFT3() {
        return MYLFT3;
    }

    public byte getNUMADULT() {
        return NUMADULT;
    }

    public byte getNUMCH18() {
        return NUMCH18;
    }

    public byte getNUMCHILD() {
        return NUMCHILD;
    }

    public byte getNUMCIVPTR() {
        return NUMCIVPTR;
    }

    public byte getNUMCPART() {
        return NUMCPART;
    }

    public byte getNUMHHLDR() {
        return NUMHHLDR;
    }

    public byte getNUMMPART() {
        return NUMMPART;
    }

    public byte getOFINAL() {
        return OFINAL;
    }

    public byte getTEN1() {
        return TEN1;
    }

    public byte getTEN1_I() {
        return TEN1_I;
    }

    public byte getTEN1_IFLAG() {
        return TEN1_IFLAG;
    }

    public byte getTIED() {
        return TIED;
    }

    public int getTOTMNEG() {
        return TOTMNEG;
    }

    public double getTOTMORT() {
        return TOTMORT;
    }

    public double getTOTMVAL() {
        return TOTMVAL;
    }

    public double getTOTWLTH() {
        return TOTWLTH;
    }

    public byte getVCARN() {
        return VCARN;
    }

    public byte getVCARN_I() {
        return VCARN_I;
    }

    public byte getVCARN_IFLAG() {
        return VCARN_IFLAG;
    }

    public byte getVOTYP1() {
        return VOTYP1;
    }

    public byte getVOTYP1_I() {
        return VOTYP1_I;
    }

    public byte getVOTYP2() {
        return VOTYP2;
    }

    public byte getVOTYP2_I() {
        return VOTYP2_I;
    }

    public byte getVOTYP3() {
        return VOTYP3;
    }

    public byte getVOTYP3_I() {
        return VOTYP3_I;
    }

    public byte getVOTYP4() {
        return VOTYP4;
    }

    public byte getVOTYP4_I() {
        return VOTYP4_I;
    }

    public boolean getVOTYP5_I() {
        return VOTYP5_I;
    }

    public int getVOVAL() {
        return VOVAL;
    }

    public int getVOVAL_I() {
        return VOVAL_I;
    }

    public boolean getVOVAL_IFLAG() {
        return VOVAL_IFLAG;
    }

    public byte getVOVLB() {
        return VOVLB;
    }

    public byte getVPERS() {
        return VPERS;
    }

    public int getVPERV() {
        return VPERV;
    }

    public int getVPERV_I() {
        return VPERV_I;
    }

    public boolean getVPERV_IFLAG() {
        return VPERV_IFLAG;
    }

    public byte getVTYPE2() {
        return VTYPE2;
    }

    public byte getVTYPE2_I() {
        return VTYPE2_I;
    }

    public byte getVTYPE_IFLAG() {
        return VTYPE_IFLAG;
    }

    public short getYEAR() {
        return YEAR;
    }

}
