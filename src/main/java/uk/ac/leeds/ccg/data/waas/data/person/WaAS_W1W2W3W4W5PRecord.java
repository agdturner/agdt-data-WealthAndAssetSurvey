/**
 * Source code generated by uk.ac.leeds.ccg.data.waascg.process.WaASCG_Main
 */

package uk.ac.leeds.ccg.data.waas.data.person;
import uk.ac.leeds.ccg.data.waas.data.id.WaAS_RecordID;
import uk.ac.leeds.ccg.data.Data_Record;

public abstract class WaAS_W1W2W3W4W5PRecord extends Data_Record {


    protected String[] s;

    WaAS_W1W2W3W4W5PRecord(WaAS_RecordID i){
        super(i);
    }
    protected byte ATTEND;

    protected String BACCBEG2;

    protected String BACCBEG3;

    protected byte BACCSA2;

    protected byte BACCSA3;

    protected byte BACCSB2;

    protected byte BACCSB3;

    protected int BBEFORE2;

    protected int BBEFORE3;

    protected int BDEBTS2;

    protected int BDEBTS3;

    protected byte BDIRNI2;

    protected byte BDIRNI3;

    protected byte BDOCS2;

    protected byte BDOCS3;

    protected byte BEMPN2;

    protected byte BEMPN3;

    protected byte BFUND1;

    protected byte BFUND10;

    protected byte BFUND17;

    protected byte BFUND2;

    protected byte BFUND9;

    protected byte BMOREBUS;

    protected byte BNATINS2;

    protected byte BNATINS3;

    protected byte BONTAX;

    protected int BOWED2;

    protected int BOWED3;

    protected byte BOWN2;

    protected byte BOWN3;

    protected byte BPART2;

    protected byte BPART3;

    protected byte BPAST;

    protected int BPROFIT2;

    protected int BPROFIT3;

    protected byte BPROPN2;

    protected byte BPROPN3;

    protected byte BRETIRE2;

    protected byte BRETIRE3;

    protected byte BSELLAB;

    protected int BSELLAM;

    protected byte BSELLTX;

    protected short BSELLYR;

    protected byte BSIZE2;

    protected byte BSIZE3;

    protected byte BSTART2;

    protected byte BSTART3;

    protected byte BTAX2;

    protected byte BTAX3;

    protected byte BTYPE2;

    protected byte BTYPE3;

    protected int BVAL2;

    protected int BVAL3;

    protected byte BVALB2;

    protected int BWORTH;

    protected byte BWORTHB;

    protected short BYEAR2;

    protected short BYEAR3;

    protected byte CACTF;

    protected byte CACTF_I;

    protected byte CACTF_IFLAG;

    protected short CACTV;

    protected short CACTV_I;

    protected byte CACTV_IFLAG;

    protected byte CASAV;

    protected byte CASAV_I;

    protected byte CASAV_IFLAG;

    protected short CASEW1;

    protected byte CASVB;

    protected int CASVV;

    protected int CASVV_I;

    protected byte CASVV_IFLAG;

    protected byte COURSE;

    protected byte DBURD;

    protected byte DBURDA;

    protected int DCAMC2;

    protected int DCAMC3;

    protected short DCAMD2;

    protected short DCAMD3;

    protected int DCAMOS2;

    protected int DCAMOS3;

    protected short DCAMP2;

    protected short DCAMP3;

    protected byte DCANU;

    protected byte DCANY;

    protected byte DCCOS2;

    protected byte DCCOS3;

    protected byte DCCSP2;

    protected byte DCCSP3;

    protected byte DCESB2;

    protected byte DCESB3;

    protected byte DCINZ2;

    protected byte DCINZ3;

    protected byte DCNAM2;

    protected byte DCNAM3;

    protected int DCOINV2;

    protected int DCOINV2_I;

    protected byte DCOINV2_IFLAG;

    protected short DCOINV3;

    protected short DCOINV3_I;

    protected byte DCOINV3_IFLAG;

    protected byte DCOINVB2;

    protected byte DCOINVB3;

    protected byte DCONM1;

    protected byte DCONM2;

    protected byte DCONM3;

    protected byte DCONM4;

    protected byte DCONM5;

    protected byte DCONM6;

    protected int DCOSHV2;

    protected int DCOSHV2_I;

    protected byte DCOSHV2_IFLAG;

    protected short DCOSHV3;

    protected byte DCOSHVB2;

    protected byte DCPER2;

    protected byte DCPER3;

    protected byte DCREC2;

    protected byte DCREC3;

    protected byte DCRSP2;

    protected byte DCRSP3;

    protected short DHBAMT01;

    protected short DHBAMT01_I;

    protected byte DHBAMT01_IFLAG;

    protected short DHBAMT02;

    protected short DHBAMT02_I;

    protected byte DHBAMT02_IFLAG;

    protected short DHBAMT03;

    protected short DHBAMT03_I;

    protected byte DHBAMT03_IFLAG;

    protected short DHBAMT04;

    protected short DHBAMT04_I;

    protected byte DHBAMT04_IFLAG;

    protected short DHBAMT05;

    protected short DHBAMT05_I;

    protected byte DHBAMT05_IFLAG;

    protected short DHBAMT06;

    protected short DHBAMT06_I;

    protected byte DHBAMT06_IFLAG;

    protected short DHBAMT07;

    protected short DHBAMT07_I;

    protected byte DHBAMT07_IFLAG;

    protected short DHBAMT08;

    protected short DHBAMT08_I;

    protected byte DHBAMT08_IFLAG;

    protected int DHBAMT09;

    protected int DHBAMT09_I;

    protected byte DHBAMT09_IFLAG;

    protected short DHBAMT10;

    protected short DHBAMT10_I;

    protected byte DHBAMT10_IFLAG;

    protected int DHBAMT11;

    protected int DHBAMT11_I;

    protected byte DHBAMT11_IFLAG;

    protected byte DHBANY01;

    protected byte DHBANY01_I;

    protected byte DHBANY01_IFLAG;

    protected byte DHBANY02;

    protected byte DHBANY02_I;

    protected byte DHBANY02_IFLAG;

    protected byte DHBANY03;

    protected byte DHBANY03_I;

    protected byte DHBANY03_IFLAG;

    protected byte DHBANY04;

    protected byte DHBANY04_I;

    protected byte DHBANY04_IFLAG;

    protected byte DHBANY05;

    protected byte DHBANY05_I;

    protected byte DHBANY05_IFLAG;

    protected byte DHBANY06;

    protected byte DHBANY06_I;

    protected byte DHBANY06_IFLAG;

    protected byte DHBANY07;

    protected byte DHBANY07_I;

    protected byte DHBANY07_IFLAG;

    protected byte DHBEST01;

    protected byte DHBEST02;

    protected byte DHBEST03;

    protected byte DHBEST04;

    protected byte DHBEST05;

    protected byte DHBEST06;

    protected byte DHBEST07;

    protected byte DHBEST08;

    protected byte DHBEST09;

    protected byte DHBEST10;

    protected byte DHBEST11;

    protected byte DHBFIX;

    protected byte DHPANY1;

    protected byte DHPANY1_I;

    protected byte DHPANY1_IFLAG;

    protected byte DHPANY2;

    protected byte DHPANY2_I;

    protected byte DHPANY2_IFLAG;

    protected byte DHPANY3;

    protected byte DHPANY3_I;

    protected byte DHPANY3_IFLAG;

    protected byte DHPBEH2;

    protected byte DHPBEH2_I;

    protected byte DHPBEH2_IFLAG;

    protected byte DHPEST2;

    protected short DHPINS2;

    protected short DHPINS2_I;

    protected byte DHPINS2_IFLAG;

    protected byte DHPINT2;

    protected byte DHPNUM;

    protected byte DHPNUM_I;

    protected byte DHPNUM_IFLAG;

    protected byte DHPOFT2;

    protected byte DHPOFT2_I;

    protected byte DHPOFT2_IFLAG;

    protected short DHPOWE2;

    protected short DHPOWE2_I;

    protected byte DHPOWE2_IFLAG;

    protected byte DHPWEST2;

    protected byte DHPWHNM2;

    protected byte DHPWHNM2_I;

    protected byte DHPWHNM2_IFLAG;

    protected short DHPWHNY2;

    protected short DHPWHNY2_I;

    protected byte DHPWHNY2_IFLAG;

    protected byte DISEVER;

    protected byte DISTYPE1;

    protected byte DISTYPE2;

    protected byte DISTYPE3;

    protected byte DISTYPE4;

    protected byte DISTYPE5;

    protected byte DISTYPE6;

    protected byte DISTYPE7;

    protected byte DISTYPE8;

    protected byte DISTYPE9;

    protected byte DLANY;

    protected byte DLANY_I;

    protected byte DLANY_IFLAG;

    protected byte DLBEH2;

    protected byte DLBEH2_I;

    protected byte DLBEH2_IFLAG;

    protected byte DLBEH3;

    protected byte DLBEH3_I;

    protected byte DLBEH3_IFLAG;

    protected byte DLBEH4;

    protected byte DLBEH4_I;

    protected byte DLBEH4_IFLAG;

    protected byte DLBEH5;

    protected byte DLBEH5_I;

    protected byte DLBEH5_IFLAG;

    protected byte DLEST2;

    protected byte DLEST3;

    protected byte DLEST4;

    protected short DLINS2;

    protected double DLINS2_I;

    protected byte DLINS2_IFLAG;

    protected short DLINS3;

    protected short DLINS3_I;

    protected byte DLINS3_IFLAG;

    protected short DLINS4;

    protected double DLINS4_I;

    protected byte DLINS4_IFLAG;

    protected short DLINS5;

    protected short DLINS5_I;

    protected byte DLINS5_IFLAG;

    protected byte DLINT2;

    protected byte DLINT3;

    protected byte DLINT4;

    protected byte DLINT5;

    protected byte DLNUM;

    protected byte DLNUM_I;

    protected byte DLNUM_IFLAG;

    protected byte DLOFT2;

    protected byte DLOFT2_I;

    protected byte DLOFT2_IFLAG;

    protected byte DLOFT3;

    protected byte DLOFT3_I;

    protected byte DLOFT3_IFLAG;

    protected byte DLOFT4;

    protected byte DLOFT4_I;

    protected byte DLOFT4_IFLAG;

    protected byte DLOFT5;

    protected byte DLOFT5_I;

    protected byte DLOFT5_IFLAG;

    protected int DLOWE2;

    protected int DLOWE2_I;

    protected byte DLOWE2_IFLAG;

    protected short DLOWE3;

    protected short DLOWE3_I;

    protected byte DLOWE3_IFLAG;

    protected short DLOWE4;

    protected short DLOWE4_I;

    protected byte DLOWE4_IFLAG;

    protected short DLOWE5;

    protected short DLOWE5_I;

    protected byte DLOWE5_IFLAG;

    protected byte DLSEC2;

    protected byte DLSEC3;

    protected byte DLSEC4;

    protected byte DLSEC5;

    protected byte DLTYPE2;

    protected byte DLTYPE2_I;

    protected byte DLTYPE2_IFLAG;

    protected byte DLTYPE3;

    protected byte DLTYPE3_I;

    protected byte DLTYPE3_IFLAG;

    protected byte DLTYPE4;

    protected byte DLTYPE4_I;

    protected byte DLTYPE4_IFLAG;

    protected byte DLTYPE5;

    protected byte DLTYPE5_I;

    protected byte DLTYPE5_IFLAG;

    protected byte DLWEST2;

    protected byte DLWEST3;

    protected byte DLWEST4;

    protected byte DLWEST5;

    protected byte DLWHNM2;

    protected byte DLWHNM2_I;

    protected byte DLWHNM2_IFLAG;

    protected byte DLWHNM3;

    protected byte DLWHNM3_I;

    protected byte DLWHNM3_IFLAG;

    protected byte DLWHNM4;

    protected byte DLWHNM4_I;

    protected byte DLWHNM4_IFLAG;

    protected byte DLWHNM5;

    protected byte DLWHNM5_I;

    protected byte DLWHNM5_IFLAG;

    protected short DLWHNY2;

    protected short DLWHNY2_I;

    protected byte DLWHNY2_IFLAG;

    protected short DLWHNY3;

    protected short DLWHNY3_I;

    protected byte DLWHNY3_IFLAG;

    protected short DLWHNY4;

    protected short DLWHNY4_I;

    protected byte DLWHNY4_IFLAG;

    protected short DLWHNY5;

    protected short DLWHNY5_I;

    protected byte DLWHNY5_IFLAG;

    protected byte DLWHY1;

    protected byte DLWHY10;

    protected byte DLWHY15;

    protected byte DLWHY16;

    protected byte DLWHY2;

    protected byte DLWHY22;

    protected byte DLWHY23;

    protected byte DLWHY3;

    protected byte DLWHY4;

    protected byte DLWHY5;

    protected byte DLWHY8;

    protected byte DLWHY9;

    protected byte DMOANY;

    protected byte DMOANY_I;

    protected byte DMOANY_IFLAG;

    protected byte DMOBEH2;

    protected byte DMOBEH2_I;

    protected byte DMOBEH2_IFLAG;

    protected byte DMOEST2;

    protected short DMOINS2;

    protected short DMOINS2_I;

    protected byte DMOINS2_IFLAG;

    protected byte DMOINT2;

    protected byte DMONUM;

    protected byte DMONUM_I;

    protected byte DMONUM_IFLAG;

    protected byte DMOOFT2;

    protected byte DMOOFT2_I;

    protected byte DMOOFT2_IFLAG;

    protected short DMOOWE2;

    protected short DMOOWE2_I;

    protected byte DMOOWE2_IFLAG;

    protected byte DMOWEST2;

    protected byte DMOWHNM2;

    protected byte DMOWHNM2_I;

    protected byte DMOWHNM2_IFLAG;

    protected short DMOWHNY2;

    protected short DMOWHNY2_I;

    protected byte DMOWHNY2_IFLAG;

    protected short DSAMC2;

    protected short DSAMC3;

    protected short DSAMD2;

    protected short DSAMD3;

    protected short DSAMOS2;

    protected short DSAMOS3;

    protected short DSAMP2;

    protected short DSAMP3;

    protected byte DSANU1;

    protected byte DSANU2;

    protected byte DSANY1;

    protected byte DSANY2;

    protected byte DSCOS2;

    protected byte DSCOS3;

    protected byte DSCSP2;

    protected byte DSCSP3;

    protected byte DSESB2;

    protected byte DSESB3;

    protected int DSLAMT2;

    protected double DSLAMT2_I;

    protected byte DSLAMT2_IFLAG;

    protected short DSLAMT3;

    protected short DSLAMT3_I;

    protected byte DSLAMT3_IFLAG;

    protected short DSLAMT4;

    protected short DSLAMT4_I;

    protected byte DSLAMT4_IFLAG;

    protected short DSLAMT5;

    protected short DSLAMT5_I;

    protected byte DSLAMT5_IFLAG;

    protected byte DSLEST2;

    protected byte DSLEST3;

    protected byte DSLEST4;

    protected boolean DSLEST5;

    protected byte DSLPAY2;

    protected byte DSLPAY3;

    protected byte DSLPAY4;

    protected boolean DSLPAY5;

    protected byte DSNAM2;

    protected byte DSNAM3;

    protected byte DSONM1;

    protected byte DSONM2;

    protected byte DSONM3;

    protected byte DSONM4;

    protected byte DSONM5;

    protected byte DSONM6;

    protected byte DSPER2;

    protected byte DSREC2;

    protected byte DSREC3;

    protected String DTJBL;

    protected byte DVAGE17;

    protected byte DVANYARR;

    protected short DVCACTV;

    protected int DVCASVV;

    protected byte DVCHMARR;

    protected int DVCISAV;

    protected int DVCOINV2;

    protected short DVCOINV3;

    protected byte DVCRTARR;

    protected byte DVCTARR;

    protected double DVDBINC1;

    protected double DVDBINC2;

    protected double DVDBINC3;

    protected double DVDBINCALL;

    protected double DVDBLUMP1;

    protected double DVDBLUMP2;

    protected double DVDBLUMP3;

    protected double DVDBRWEALTHVAL;

    protected short DVDHPOWE2;

    protected int DVDLOWE2;

    protected short DVDLOWE3;

    protected short DVDLOWE4;

    protected short DVDLOWE5;

    protected short DVDMOOWE2;

    protected byte DVELARR;

    protected int DVFBONDV;

    protected int DVFCINVAL;

    protected int DVFCOLLV;

    protected int DVFEOPTV;

    protected int DVFESHAV;

    protected int DVFGLTFOV;

    protected int DVFGLTUKV;

    protected int DVFINFLV;

    protected int DVFINFV;

    protected int DVFINVOTV;

    protected int DVFLFENV;

    protected int DVFLFFSV;

    protected int DVFLFSIV;

    protected int DVFLFTEV;

    protected int DVFNSVAL;

    protected int DVFSHOSV;

    protected int DVFSHUKV;

    protected int DVFSINVAL;

    protected byte DVGASARR;

    protected double DVGRSPAY;

    protected boolean DVHASAVC;

    protected byte DVHASDB;

    protected boolean DVHASDC;

    protected boolean DVHASPFCUR;

    protected boolean DVHASPFD;

    protected byte DVHASPP;

    protected byte DVHPAR;

    protected int DVIISAV;

    protected byte DVILO3A;

    protected byte DVILO4A;

    protected byte DVJB12ML;

    protected int DVKISAV;

    protected byte DVMRDF;

    protected double DVNETPAY;

    protected byte DVOTHARR;

    protected double DVPAVCUV;

    protected double DVPFCURVAL;

    protected int DVPFDDV;

    protected double DVPINPVAL;

    protected double DVPPVAL;

    protected byte DVRNTARR;

    protected double DVSHCVAL;

    protected double DVSHODVAL2;

    protected short DVSHODVAL3;

    protected double DVSHSVAL;

    protected double DVSPEN;

    protected byte DVTAXARR;

    protected byte DVTELARR;

    protected double DVVALDBLUM;

    protected double DVVALDBT;

    protected double DVVALDCOS;

    protected double DVVALPBLUM;

    protected byte DVVATARR;

    protected byte DVWATARR;

    protected byte EDATTN1;

    protected byte EDATTN2;

    protected byte EDATTN3;

    protected byte EDLEVEL;

    protected byte EMPN;

    protected short EMPSTY;

    protected byte EMSHAR1;

    protected byte EMSHAR2;

    protected byte EMSHAR3;

    protected byte ENROLL;

    protected byte EVERWK;

    protected byte FBONDTY1;

    protected byte FBONDTY2;

    protected byte FBONDTY3;

    protected int FBONDV;

    protected byte FBONDVB;

    protected int FBONDV_I;

    protected byte FBONDV_IFLAG;

    protected byte FCACSH;

    protected byte FCACSH_I;

    protected byte FCACSH_IFLAG;

    protected int FCINVAL;

    protected int FCINVAL_I;

    protected byte FCINVAL_IFLAG;

    protected byte FCINVLB;

    protected byte FCISAB;

    protected int FCISAV;

    protected int FCISAV_I;

    protected byte FCISAV_IFLAG;

    protected byte FCNUMIN;

    protected byte FCNUMIN_I;

    protected byte FCNUMIN_IFLAG;

    protected byte FCNUMSH;

    protected byte FCNUMSH_I;

    protected byte FCNUMSH_IFLAG;

    protected int FCOLLV;

    protected byte FCOLLVB;

    protected int FCOLLV_I;

    protected byte FCOLLV_IFLAG;

    protected byte FCOVDIF;

    protected byte FCOVDIN;

    protected byte FCOVDIN_I;

    protected byte FCOVDIN_IFLAG;

    protected byte FCOVDSH;

    protected byte FCOVDSH_I;

    protected byte FCOVDSH_IFLAG;

    protected byte FCOVNIN;

    protected byte FCOVNIN_I;

    protected byte FCOVNIN_IFLAG;

    protected byte FCOVNSH;

    protected byte FCOVNSH_I;

    protected byte FCOVNSH_IFLAG;

    protected int FCSHVAL;

    protected int FCSHVAL_I;

    protected byte FCSHVAL_IFLAG;

    protected byte FCSHVLB;

    protected byte FCSUPPR;

    protected int FEOPTV;

    protected int FEOPTV_I;

    protected byte FEOPTV_IFLAG;

    protected byte FEOPVB;

    protected byte FESHA;

    protected int FESHAV;

    protected int FESHAV_I;

    protected byte FESHAV_IFLAG;

    protected byte FESHA_I;

    protected byte FESHA_IFLAG;

    protected byte FESHVB;

    protected byte FGFOVB;

    protected byte FGILTS1;

    protected byte FGILTS1_I;

    protected byte FGILTS1_IFLAG;

    protected byte FGILTS2;

    protected byte FGILTS2_I;

    protected byte FGILTS2_IFLAG;

    protected byte FGILTS3;

    protected byte FGILTS3_I;

    protected byte FGILTS3_IFLAG;

    protected byte FGILTS4;

    protected byte FGILTS4_I;

    protected byte FGILTS4_IFLAG;

    protected int FGLTFOV;

    protected int FGLTFOV_I;

    protected byte FGLTFOV_IFLAG;

    protected int FGLTUKV;

    protected int FGLTUKV_I;

    protected byte FGLTUKV_IFLAG;

    protected byte FGUKVB;

    protected byte FIISAB;

    protected int FIISAV;

    protected int FIISAV_I;

    protected byte FIISAV_IFLAG;

    protected byte FINCVB;

    protected int FINFLV;

    protected int FINFLV_I;

    protected byte FINFLV_IFLAG;

    protected byte FINFSAV1;

    protected byte FINFSAV1_I;

    protected byte FINFSAV1_IFLAG;

    protected byte FINFSAV2;

    protected byte FINFSAV2_I;

    protected byte FINFSAV2_IFLAG;

    protected byte FINFSAV3;

    protected byte FINFSAV3_I;

    protected byte FINFSAV3_IFLAG;

    protected byte FINFSAV4;

    protected byte FINFSAV4_I;

    protected byte FINFSAV4_IFLAG;

    protected int FINFV;

    protected byte FINFVB;

    protected int FINFV_I;

    protected byte FINFV_IFLAG;

    protected byte FINS;

    protected int FINSV;

    protected int FINSV_I;

    protected byte FINSV_IFLAG;

    protected byte FINS_I;

    protected byte FINS_IFLAG;

    protected int FINVOTV;

    protected int FINVOTV_I;

    protected byte FINVOTV_IFLAG;

    protected byte FINVOVB;

    protected byte FINVTY01;

    protected byte FINVTY01_I;

    protected byte FINVTY02;

    protected byte FINVTY02_I;

    protected byte FINVTY03;

    protected byte FINVTY03_I;

    protected byte FINVTY04;

    protected byte FINVTY04_I;

    protected byte FINVTY05;

    protected byte FINVTY05_I;

    protected byte FINVTY06;

    protected byte FINVTY06_I;

    protected byte FINVTY07;

    protected byte FINVTY07_I;

    protected byte FINVTY08;

    protected byte FINVTY08_I;

    protected byte FINVTY09;

    protected byte FINVTY09_I;

    protected byte FINVTY10;

    protected byte FINVTY10_I;

    protected byte FINVTY11;

    protected byte FINVTY11_I;

    protected byte FISA1;

    protected byte FISA1_I;

    protected byte FISA1_IFLAG;

    protected byte FISA2;

    protected byte FISA2_I;

    protected byte FISA2_IFLAG;

    protected byte FKISAB;

    protected int FKISAV;

    protected int FKISAV_I;

    protected byte FKISAV_IFLAG;

    protected int FLFENV;

    protected byte FLFENVB;

    protected int FLFENV_I;

    protected byte FLFENV_IFLAG;

    protected int FLFFSV;

    protected byte FLFFSVB;

    protected int FLFFSV_I;

    protected byte FLFFSV_IFLAG;

    protected int FLFSIV;

    protected byte FLFSIVB;

    protected int FLFSIV_I;

    protected byte FLFSIV_IFLAG;

    protected int FLFTEV;

    protected byte FLFTEVB;

    protected int FLFTEV_I;

    protected byte FLFTEV_IFLAG;

    protected double FLNOS1;

    protected double FLNOS2;

    protected double FLNOS3;

    protected double FLNOS4;

    protected byte FLOANVB;

    protected byte FLPROD1;

    protected byte FLPROD1_I;

    protected byte FLPROD1_IFLAG;

    protected byte FLPROD2;

    protected byte FLPROD2_I;

    protected byte FLPROD2_IFLAG;

    protected byte FLPROD3;

    protected byte FLPROD3_I;

    protected byte FLPROD3_IFLAG;

    protected boolean FLPROD4;

    protected boolean FLPROD4_I;

    protected byte FLPROD4_IFLAG;

    protected byte FNSAV1;

    protected byte FNSAV2;

    protected byte FNSAV3;

    protected byte FNSAV4;

    protected int FNSVAL_I;

    protected byte FNSVAL_IFLAG;

    protected byte FNSVB;

    protected byte FSACSH;

    protected byte FSACSH_I;

    protected byte FSACSH_IFLAG;

    protected byte FSHARE1;

    protected byte FSHARE1_I;

    protected byte FSHARE1_IFLAG;

    protected byte FSHARE2;

    protected byte FSHARE2_I;

    protected byte FSHARE2_IFLAG;

    protected byte FSHARE3;

    protected byte FSHARE3_I;

    protected byte FSHARE3_IFLAG;

    protected int FSHOSV;

    protected byte FSHOSVB;

    protected int FSHOSV_I;

    protected byte FSHOSV_IFLAG;

    protected int FSHUKV;

    protected byte FSHUKVB;

    protected int FSHUKV_I;

    protected byte FSHUKV_IFLAG;

    protected int FSINVAL;

    protected int FSINVAL_I;

    protected byte FSINVAL_IFLAG;

    protected byte FSINVLB;

    protected byte FSNUMIN;

    protected byte FSNUMIN_I;

    protected byte FSNUMIN_IFLAG;

    protected byte FSNUMSH;

    protected byte FSNUMSH_I;

    protected byte FSNUMSH_IFLAG;

    protected byte FSOSHAV;

    protected byte FSOSVLB;

    protected int FSSHVAL;

    protected double FSSHVAL_I;

    protected byte FSSHVAL_IFLAG;

    protected byte FSSHVLB;

    protected byte FSSUPPR;

    protected byte FSTYPIN1;

    protected byte FSTYPIN2;

    protected byte FSTYPIN3;

    protected byte FSTYPSH1;

    protected byte FSTYPSH2;

    protected byte FSTYPSH3;

    protected boolean FSTYPSH4;

    protected byte FTED;

    protected byte FTED19;

    protected byte FTPTWK;

    protected byte GRSESM;

    protected byte GRSESP;

    protected boolean HASCHD;

    protected boolean HASDEP;

    protected boolean HASNDEP;

    protected int HOUSGDST;

    protected double HPLFT2;

    protected double HPOS1;

    protected double HPOS2;

    protected byte IGDS1;

    protected byte IGDS10;

    protected byte IGDS11;

    protected byte IGDS15;

    protected byte IGDS2;

    protected byte IGDS3;

    protected byte IGDS4;

    protected byte IGDS5;

    protected byte IGDS8;

    protected byte IGDS9;

    protected byte IGFVALB;

    protected byte IHRCNUM;

    protected byte IHRECNT;

    protected byte IHSE1;

    protected byte IHSE2;

    protected byte IHSE7;

    protected byte ILACB;

    protected byte ILGIFT;

    protected byte ILIFB;

    protected byte ILINB;

    protected byte ILLLIM;

    protected byte ILOTB;

    protected byte ILRDB;

    protected byte ILUMP;

    protected byte ILUMTY1;

    protected byte ILUMTY2;

    protected byte ILUMTY3;

    protected byte ILUPB;

    protected int ILUPP;

    protected byte ILWNB;

    protected byte IOUT1;

    protected boolean ISDEP;

    protected boolean ISHRP;

    protected boolean ISHRPPART;

    protected boolean ISNDEP;

    protected byte IVALB2;

    protected byte IVALB3;

    protected byte IWAT1;

    protected byte IWAT13;

    protected byte IWAT2;

    protected byte IWAT3;

    protected byte IWAT4;

    protected byte IWAT5;

    protected byte IWAT7;

    protected byte IWHO2;

    protected byte IWHO3;

    protected byte JBAWAY;

    protected byte JOBNO;

    protected byte LKTIME;

    protected double LNLFT2;

    protected double LNLFT3;

    protected double LNLFT4;

    protected double LNLFT5;

    protected double LNOS1;

    protected double LNOS2;

    protected double LNOS3;

    protected double LNOS4;

    protected double LNOS5;

    protected byte LOOKED;

    protected byte LSILL;

    protected byte MARBEF;

    protected double MOLFT2;

    protected byte MONTH;

    protected double MOOS1;

    protected double MOOS2;

    protected byte NSSEC3;

    protected byte NSSEC5;

    protected double NSSEC8;

    protected double NSSECB;

    protected byte OCSVR1;

    protected byte OCSVR2;

    protected byte OCSVR3;

    protected byte OCSVR4;

    protected byte OCSVR5;

    protected byte OCSVR6;

    protected byte OCSVR7;

    protected byte OCSVR8;

    protected byte OINTEND;

    protected byte OLARGE;

    protected byte OLEFT;

    protected byte OLEFTDO;

    protected byte OLONG;

    protected byte OLONGYR;

    protected byte ONETEN;

    protected byte OPENS01;

    protected byte OPENS02;

    protected byte OPENS03;

    protected byte OPENS04;

    protected byte OPENS05;

    protected byte OPENS06;

    protected byte OPENS07;

    protected byte OPENS08;

    protected byte ORETINC;

    protected byte ORISKA;

    protected byte ORISKC;

    protected byte ORUNDO01;

    protected byte ORUNDO02;

    protected byte ORUNDO03;

    protected byte ORUNDO04;

    protected byte ORUNDO05;

    protected byte ORUNDO06;

    protected byte ORUNDO07;

    protected byte ORUNDO08;

    protected byte ORUNOUT;

    protected byte OSITUAT;

    protected byte OSTANDL;

    protected byte OTHSRC1;

    protected byte OTHSRC1_I;

    protected boolean OTHSRC1_IFLAG;

    protected byte OTHSRC2;

    protected byte OTHSRC2_I;

    protected boolean OTHSRC2_IFLAG;

    protected byte OTHSRC3;

    protected byte OTHSRC3_I;

    protected boolean OTHSRC3_IFLAG;

    protected byte OTRUST01;

    protected byte OTRUST02;

    protected byte OTRUST03;

    protected byte OTRUST04;

    protected byte OTRUST05;

    protected byte OTRUST06;

    protected byte OTRUST07;

    protected byte OTRUST08;

    protected byte OTRUST09;

    protected byte OTRUST10;

    protected byte OTRUST11;

    protected byte OTRUST12;

    protected byte OTRUST13;

    protected byte OTRUST14;

    protected byte OUNDER;

    protected byte OWNBUS;

    protected byte PAGERET;

    protected boolean PARTNER;

    protected byte PARTNO;

    protected byte PAYBON;

    protected byte PAYESM;

    protected byte PAYESP;

    protected byte PAYINC1;

    protected byte PAYINC2;

    protected byte PAYINC3;

    protected byte PAYINC4;

    protected byte PAYINC5;

    protected byte PAYINC6;

    protected byte PAYPER;

    protected byte PAYSLP;

    protected byte PEARLRS;

    protected byte PEMELG;

    protected byte PEMELG_I;

    protected byte PEMELG_IFLAG;

    protected byte PEMMEM;

    protected byte PEMMEM_I;

    protected boolean PEMMEM_IFLAG;

    protected byte PEMOFF;

    protected byte PEMOFF_I;

    protected boolean PEMOFF_IFLAG;

    protected byte PERSONW1;

    protected byte PERSPROX;

    protected byte PEVERC;

    protected byte PEVERC_I;

    protected boolean PEVERC_IFLAG;

    protected byte PEVERNC;

    protected byte PEVERNC_I;

    protected boolean PEVERNC_IFLAG;

    protected byte PEXPRET;

    protected byte PFNUM;

    protected byte PFNUM_I;

    protected boolean PFNUM_IFLAG;

    protected byte PFULRET;

    protected double PINCINP;

    protected byte POCNMSC;

    protected byte POCNMSC_I;

    protected boolean POCNMSC_IFLAG;

    protected byte PPRNMSC;

    protected byte PPRNMSC_I;

    protected boolean PPRNMSC_IFLAG;

    protected byte PPYSTP10;

    protected byte PRETAIN;

    protected byte PRETAIN_I;

    protected boolean PRETAIN_IFLAG;

    protected byte PSCHM_F;

    protected byte PSCHM_F_I;

    protected boolean PSCHM_F_IFLAG;

    protected byte PSCHM_S;

    protected byte PSCHM_S_I;

    protected boolean PSCHM_S_IFLAG;

    protected byte PSCHM_T;

    protected byte PSCHM_T_I;

    protected boolean PSCHM_T_IFLAG;

    protected byte PSIT;

    protected byte PSITF;

    protected double PWEXPA;

    protected int PWEXPA_I;

    protected boolean PWEXPA_IFLAG;

    protected byte PWEXPH;

    protected byte PWEXPH_I;

    protected boolean PWEXPH_IFLAG;

    protected byte PWID;

    protected byte PWIDFUT;

    protected byte PWIDFUT_I;

    protected boolean PWIDFUT_IFLAG;

    protected byte P_FLAG1;

    protected byte P_FLAG3;

    protected byte P_FLAG4;

    protected byte QHEALTH1;

    protected byte QUALCHK;

    protected byte REGLRPY1;

    protected byte REGLRPY2;

    protected byte RELBUS;

    protected byte RENTPAY;

    protected byte SCHEMEET;

    protected byte SEAMK;

    protected byte SEESM;

    protected byte SEESW;

    protected byte SELECTAD;

    protected byte SEMN;

    protected short SEMPSTY;

    protected byte SEPEL;

    protected byte SEPER;

    protected boolean SEX;

    protected boolean SINGPAR;

    protected byte SJEMP1;

    protected byte SJEMP2;

    protected byte SJOB2;

    protected byte SOLO;

    protected byte STARTJ;

    protected byte STAT;

    protected byte STAT_I;

    protected byte SVISE;

    protected byte TBENEF;

    protected byte TBENNUM;

    protected byte TEA;

    protected byte TINTRO;

    protected double TOTPEN;

    protected byte TSETT;

    protected byte TYPE;

    protected byte UNMTYP;

    protected byte UNUMBD;

    protected byte UNUMBD_I;

    protected boolean UNUMBD_IFLAG;

    protected byte UNUMHS;

    protected byte UNUMHS_I;

    protected boolean UNUMHS_IFLAG;

    protected byte UNUMLA;

    protected byte UNUMLA_I;

    protected boolean UNUMLA_IFLAG;

    protected byte UNUMOV;

    protected byte UNUMOV_I;

    protected boolean UNUMOV_IFLAG;

    protected byte UNUMRE;

    protected byte UNUMRE_I;

    protected boolean UNUMRE_IFLAG;

    protected byte UPROP1;

    protected byte UPROP1_I;

    protected byte UPROP2;

    protected byte UPROP2_I;

    protected byte UPROP3;

    protected byte UPROP3_I;

    protected byte UPROP4;

    protected byte UPROP4_I;

    protected byte UPRSH1;

    protected byte UPRSH2;

    protected byte UPRSH3;

    protected byte UPRSH4;

    protected byte UPRSH5;

    protected byte WORKAGE;

    protected byte WRKING;

    protected byte XINSOL;

    protected byte XINTYP;

    protected short YEAR;

    protected byte YINACT;

    protected final void initATTEND(String s) {
        if (!s.trim().isEmpty()) {
            ATTEND = Byte.parseByte(s);
        } else {
            ATTEND = Byte.MIN_VALUE;
        }
    }

    protected final void initBACCBEG2(String s) {
        if (!s.trim().isEmpty()) {
            BACCBEG2 = s;
        }
    }

    protected final void initBACCBEG3(String s) {
        if (!s.trim().isEmpty()) {
            BACCBEG3 = s;
        }
    }

    protected final void initBACCSA2(String s) {
        if (!s.trim().isEmpty()) {
            BACCSA2 = Byte.parseByte(s);
        } else {
            BACCSA2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBACCSA3(String s) {
        if (!s.trim().isEmpty()) {
            BACCSA3 = Byte.parseByte(s);
        } else {
            BACCSA3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBACCSB2(String s) {
        if (!s.trim().isEmpty()) {
            BACCSB2 = Byte.parseByte(s);
        } else {
            BACCSB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBACCSB3(String s) {
        if (!s.trim().isEmpty()) {
            BACCSB3 = Byte.parseByte(s);
        } else {
            BACCSB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBBEFORE2(String s) {
        if (!s.trim().isEmpty()) {
            BBEFORE2 = Integer.parseInt(s);
        } else {
            BBEFORE2 = Integer.MIN_VALUE;
        }
    }

    protected final void initBBEFORE3(String s) {
        if (!s.trim().isEmpty()) {
            BBEFORE3 = Integer.parseInt(s);
        } else {
            BBEFORE3 = Integer.MIN_VALUE;
        }
    }

    protected final void initBDEBTS2(String s) {
        if (!s.trim().isEmpty()) {
            BDEBTS2 = Integer.parseInt(s);
        } else {
            BDEBTS2 = Integer.MIN_VALUE;
        }
    }

    protected final void initBDEBTS3(String s) {
        if (!s.trim().isEmpty()) {
            BDEBTS3 = Integer.parseInt(s);
        } else {
            BDEBTS3 = Integer.MIN_VALUE;
        }
    }

    protected final void initBDIRNI2(String s) {
        if (!s.trim().isEmpty()) {
            BDIRNI2 = Byte.parseByte(s);
        } else {
            BDIRNI2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBDIRNI3(String s) {
        if (!s.trim().isEmpty()) {
            BDIRNI3 = Byte.parseByte(s);
        } else {
            BDIRNI3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBDOCS2(String s) {
        if (!s.trim().isEmpty()) {
            BDOCS2 = Byte.parseByte(s);
        } else {
            BDOCS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBDOCS3(String s) {
        if (!s.trim().isEmpty()) {
            BDOCS3 = Byte.parseByte(s);
        } else {
            BDOCS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBEMPN2(String s) {
        if (!s.trim().isEmpty()) {
            BEMPN2 = Byte.parseByte(s);
        } else {
            BEMPN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBEMPN3(String s) {
        if (!s.trim().isEmpty()) {
            BEMPN3 = Byte.parseByte(s);
        } else {
            BEMPN3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBFUND1(String s) {
        if (!s.trim().isEmpty()) {
            BFUND1 = Byte.parseByte(s);
        } else {
            BFUND1 = Byte.MIN_VALUE;
        }
    }

    protected final void initBFUND10(String s) {
        if (!s.trim().isEmpty()) {
            BFUND10 = Byte.parseByte(s);
        } else {
            BFUND10 = Byte.MIN_VALUE;
        }
    }

    protected final void initBFUND17(String s) {
        if (!s.trim().isEmpty()) {
            BFUND17 = Byte.parseByte(s);
        } else {
            BFUND17 = Byte.MIN_VALUE;
        }
    }

    protected final void initBFUND2(String s) {
        if (!s.trim().isEmpty()) {
            BFUND2 = Byte.parseByte(s);
        } else {
            BFUND2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBFUND9(String s) {
        if (!s.trim().isEmpty()) {
            BFUND9 = Byte.parseByte(s);
        } else {
            BFUND9 = Byte.MIN_VALUE;
        }
    }

    protected final void initBMOREBUS(String s) {
        if (!s.trim().isEmpty()) {
            BMOREBUS = Byte.parseByte(s);
        } else {
            BMOREBUS = Byte.MIN_VALUE;
        }
    }

    protected final void initBNATINS2(String s) {
        if (!s.trim().isEmpty()) {
            BNATINS2 = Byte.parseByte(s);
        } else {
            BNATINS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBNATINS3(String s) {
        if (!s.trim().isEmpty()) {
            BNATINS3 = Byte.parseByte(s);
        } else {
            BNATINS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBONTAX(String s) {
        if (!s.trim().isEmpty()) {
            BONTAX = Byte.parseByte(s);
        } else {
            BONTAX = Byte.MIN_VALUE;
        }
    }

    protected final void initBOWED2(String s) {
        if (!s.trim().isEmpty()) {
            BOWED2 = Integer.parseInt(s);
        } else {
            BOWED2 = Integer.MIN_VALUE;
        }
    }

    protected final void initBOWED3(String s) {
        if (!s.trim().isEmpty()) {
            BOWED3 = Integer.parseInt(s);
        } else {
            BOWED3 = Integer.MIN_VALUE;
        }
    }

    protected final void initBOWN2(String s) {
        if (!s.trim().isEmpty()) {
            BOWN2 = Byte.parseByte(s);
        } else {
            BOWN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBOWN3(String s) {
        if (!s.trim().isEmpty()) {
            BOWN3 = Byte.parseByte(s);
        } else {
            BOWN3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPART2(String s) {
        if (!s.trim().isEmpty()) {
            BPART2 = Byte.parseByte(s);
        } else {
            BPART2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPART3(String s) {
        if (!s.trim().isEmpty()) {
            BPART3 = Byte.parseByte(s);
        } else {
            BPART3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPAST(String s) {
        if (!s.trim().isEmpty()) {
            BPAST = Byte.parseByte(s);
        } else {
            BPAST = Byte.MIN_VALUE;
        }
    }

    protected final void initBPROFIT2(String s) {
        if (!s.trim().isEmpty()) {
            BPROFIT2 = Integer.parseInt(s);
        } else {
            BPROFIT2 = Integer.MIN_VALUE;
        }
    }

    protected final void initBPROFIT3(String s) {
        if (!s.trim().isEmpty()) {
            BPROFIT3 = Integer.parseInt(s);
        } else {
            BPROFIT3 = Integer.MIN_VALUE;
        }
    }

    protected final void initBPROPN2(String s) {
        if (!s.trim().isEmpty()) {
            BPROPN2 = Byte.parseByte(s);
        } else {
            BPROPN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBPROPN3(String s) {
        if (!s.trim().isEmpty()) {
            BPROPN3 = Byte.parseByte(s);
        } else {
            BPROPN3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBRETIRE2(String s) {
        if (!s.trim().isEmpty()) {
            BRETIRE2 = Byte.parseByte(s);
        } else {
            BRETIRE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBRETIRE3(String s) {
        if (!s.trim().isEmpty()) {
            BRETIRE3 = Byte.parseByte(s);
        } else {
            BRETIRE3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBSELLAB(String s) {
        if (!s.trim().isEmpty()) {
            BSELLAB = Byte.parseByte(s);
        } else {
            BSELLAB = Byte.MIN_VALUE;
        }
    }

    protected final void initBSELLAM(String s) {
        if (!s.trim().isEmpty()) {
            BSELLAM = Integer.parseInt(s);
        } else {
            BSELLAM = Integer.MIN_VALUE;
        }
    }

    protected final void initBSELLTX(String s) {
        if (!s.trim().isEmpty()) {
            BSELLTX = Byte.parseByte(s);
        } else {
            BSELLTX = Byte.MIN_VALUE;
        }
    }

    protected final void initBSELLYR(String s) {
        if (!s.trim().isEmpty()) {
            BSELLYR = Short.parseShort(s);
        } else {
            BSELLYR = Short.MIN_VALUE;
        }
    }

    protected final void initBSIZE2(String s) {
        if (!s.trim().isEmpty()) {
            BSIZE2 = Byte.parseByte(s);
        } else {
            BSIZE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBSIZE3(String s) {
        if (!s.trim().isEmpty()) {
            BSIZE3 = Byte.parseByte(s);
        } else {
            BSIZE3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBSTART2(String s) {
        if (!s.trim().isEmpty()) {
            BSTART2 = Byte.parseByte(s);
        } else {
            BSTART2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBSTART3(String s) {
        if (!s.trim().isEmpty()) {
            BSTART3 = Byte.parseByte(s);
        } else {
            BSTART3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBTAX2(String s) {
        if (!s.trim().isEmpty()) {
            BTAX2 = Byte.parseByte(s);
        } else {
            BTAX2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBTAX3(String s) {
        if (!s.trim().isEmpty()) {
            BTAX3 = Byte.parseByte(s);
        } else {
            BTAX3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBTYPE2(String s) {
        if (!s.trim().isEmpty()) {
            BTYPE2 = Byte.parseByte(s);
        } else {
            BTYPE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBTYPE3(String s) {
        if (!s.trim().isEmpty()) {
            BTYPE3 = Byte.parseByte(s);
        } else {
            BTYPE3 = Byte.MIN_VALUE;
        }
    }

    protected final void initBVAL2(String s) {
        if (!s.trim().isEmpty()) {
            BVAL2 = Integer.parseInt(s);
        } else {
            BVAL2 = Integer.MIN_VALUE;
        }
    }

    protected final void initBVAL3(String s) {
        if (!s.trim().isEmpty()) {
            BVAL3 = Integer.parseInt(s);
        } else {
            BVAL3 = Integer.MIN_VALUE;
        }
    }

    protected final void initBVALB2(String s) {
        if (!s.trim().isEmpty()) {
            BVALB2 = Byte.parseByte(s);
        } else {
            BVALB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initBWORTH(String s) {
        if (!s.trim().isEmpty()) {
            BWORTH = Integer.parseInt(s);
        } else {
            BWORTH = Integer.MIN_VALUE;
        }
    }

    protected final void initBWORTHB(String s) {
        if (!s.trim().isEmpty()) {
            BWORTHB = Byte.parseByte(s);
        } else {
            BWORTHB = Byte.MIN_VALUE;
        }
    }

    protected final void initBYEAR2(String s) {
        if (!s.trim().isEmpty()) {
            BYEAR2 = Short.parseShort(s);
        } else {
            BYEAR2 = Short.MIN_VALUE;
        }
    }

    protected final void initBYEAR3(String s) {
        if (!s.trim().isEmpty()) {
            BYEAR3 = Short.parseShort(s);
        } else {
            BYEAR3 = Short.MIN_VALUE;
        }
    }

    protected final void initCACTF(String s) {
        if (!s.trim().isEmpty()) {
            CACTF = Byte.parseByte(s);
        } else {
            CACTF = Byte.MIN_VALUE;
        }
    }

    protected final void initCACTF_I(String s) {
        if (!s.trim().isEmpty()) {
            CACTF_I = Byte.parseByte(s);
        } else {
            CACTF_I = Byte.MIN_VALUE;
        }
    }

    protected final void initCACTF_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            CACTF_IFLAG = Byte.parseByte(s);
        } else {
            CACTF_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initCACTV(String s) {
        if (!s.trim().isEmpty()) {
            CACTV = Short.parseShort(s);
        } else {
            CACTV = Short.MIN_VALUE;
        }
    }

    protected final void initCACTV_I(String s) {
        if (!s.trim().isEmpty()) {
            CACTV_I = Short.parseShort(s);
        } else {
            CACTV_I = Short.MIN_VALUE;
        }
    }

    protected final void initCACTV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            CACTV_IFLAG = Byte.parseByte(s);
        } else {
            CACTV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initCASAV(String s) {
        if (!s.trim().isEmpty()) {
            CASAV = Byte.parseByte(s);
        } else {
            CASAV = Byte.MIN_VALUE;
        }
    }

    protected final void initCASAV_I(String s) {
        if (!s.trim().isEmpty()) {
            CASAV_I = Byte.parseByte(s);
        } else {
            CASAV_I = Byte.MIN_VALUE;
        }
    }

    protected final void initCASAV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            CASAV_IFLAG = Byte.parseByte(s);
        } else {
            CASAV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initCASEW1(String s) {
        if (!s.trim().isEmpty()) {
            CASEW1 = Short.parseShort(s);
        } else {
            CASEW1 = Short.MIN_VALUE;
        }
    }

    protected final void initCASVB(String s) {
        if (!s.trim().isEmpty()) {
            CASVB = Byte.parseByte(s);
        } else {
            CASVB = Byte.MIN_VALUE;
        }
    }

    protected final void initCASVV(String s) {
        if (!s.trim().isEmpty()) {
            CASVV = Integer.parseInt(s);
        } else {
            CASVV = Integer.MIN_VALUE;
        }
    }

    protected final void initCASVV_I(String s) {
        if (!s.trim().isEmpty()) {
            CASVV_I = Integer.parseInt(s);
        } else {
            CASVV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initCASVV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            CASVV_IFLAG = Byte.parseByte(s);
        } else {
            CASVV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initCOURSE(String s) {
        if (!s.trim().isEmpty()) {
            COURSE = Byte.parseByte(s);
        } else {
            COURSE = Byte.MIN_VALUE;
        }
    }

    protected final void initDBURD(String s) {
        if (!s.trim().isEmpty()) {
            DBURD = Byte.parseByte(s);
        } else {
            DBURD = Byte.MIN_VALUE;
        }
    }

    protected final void initDBURDA(String s) {
        if (!s.trim().isEmpty()) {
            DBURDA = Byte.parseByte(s);
        } else {
            DBURDA = Byte.MIN_VALUE;
        }
    }

    protected final void initDCAMC2(String s) {
        if (!s.trim().isEmpty()) {
            DCAMC2 = Integer.parseInt(s);
        } else {
            DCAMC2 = Integer.MIN_VALUE;
        }
    }

    protected final void initDCAMC3(String s) {
        if (!s.trim().isEmpty()) {
            DCAMC3 = Integer.parseInt(s);
        } else {
            DCAMC3 = Integer.MIN_VALUE;
        }
    }

    protected final void initDCAMD2(String s) {
        if (!s.trim().isEmpty()) {
            DCAMD2 = Short.parseShort(s);
        } else {
            DCAMD2 = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMD3(String s) {
        if (!s.trim().isEmpty()) {
            DCAMD3 = Short.parseShort(s);
        } else {
            DCAMD3 = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMOS2(String s) {
        if (!s.trim().isEmpty()) {
            DCAMOS2 = Integer.parseInt(s);
        } else {
            DCAMOS2 = Integer.MIN_VALUE;
        }
    }

    protected final void initDCAMOS3(String s) {
        if (!s.trim().isEmpty()) {
            DCAMOS3 = Integer.parseInt(s);
        } else {
            DCAMOS3 = Integer.MIN_VALUE;
        }
    }

    protected final void initDCAMP2(String s) {
        if (!s.trim().isEmpty()) {
            DCAMP2 = Short.parseShort(s);
        } else {
            DCAMP2 = Short.MIN_VALUE;
        }
    }

    protected final void initDCAMP3(String s) {
        if (!s.trim().isEmpty()) {
            DCAMP3 = Short.parseShort(s);
        } else {
            DCAMP3 = Short.MIN_VALUE;
        }
    }

    protected final void initDCANU(String s) {
        if (!s.trim().isEmpty()) {
            DCANU = Byte.parseByte(s);
        } else {
            DCANU = Byte.MIN_VALUE;
        }
    }

    protected final void initDCANY(String s) {
        if (!s.trim().isEmpty()) {
            DCANY = Byte.parseByte(s);
        } else {
            DCANY = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCOS2(String s) {
        if (!s.trim().isEmpty()) {
            DCCOS2 = Byte.parseByte(s);
        } else {
            DCCOS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCOS3(String s) {
        if (!s.trim().isEmpty()) {
            DCCOS3 = Byte.parseByte(s);
        } else {
            DCCOS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCSP2(String s) {
        if (!s.trim().isEmpty()) {
            DCCSP2 = Byte.parseByte(s);
        } else {
            DCCSP2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCCSP3(String s) {
        if (!s.trim().isEmpty()) {
            DCCSP3 = Byte.parseByte(s);
        } else {
            DCCSP3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCESB2(String s) {
        if (!s.trim().isEmpty()) {
            DCESB2 = Byte.parseByte(s);
        } else {
            DCESB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCESB3(String s) {
        if (!s.trim().isEmpty()) {
            DCESB3 = Byte.parseByte(s);
        } else {
            DCESB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCINZ2(String s) {
        if (!s.trim().isEmpty()) {
            DCINZ2 = Byte.parseByte(s);
        } else {
            DCINZ2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCINZ3(String s) {
        if (!s.trim().isEmpty()) {
            DCINZ3 = Byte.parseByte(s);
        } else {
            DCINZ3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNAM2(String s) {
        if (!s.trim().isEmpty()) {
            DCNAM2 = Byte.parseByte(s);
        } else {
            DCNAM2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCNAM3(String s) {
        if (!s.trim().isEmpty()) {
            DCNAM3 = Byte.parseByte(s);
        } else {
            DCNAM3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCOINV2(String s) {
        if (!s.trim().isEmpty()) {
            DCOINV2 = Integer.parseInt(s);
        } else {
            DCOINV2 = Integer.MIN_VALUE;
        }
    }

    protected final void initDCOINV2_I(String s) {
        if (!s.trim().isEmpty()) {
            DCOINV2_I = Integer.parseInt(s);
        } else {
            DCOINV2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initDCOINV2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCOINV2_IFLAG = Byte.parseByte(s);
        } else {
            DCOINV2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCOINV3(String s) {
        if (!s.trim().isEmpty()) {
            DCOINV3 = Short.parseShort(s);
        } else {
            DCOINV3 = Short.MIN_VALUE;
        }
    }

    protected final void initDCOINV3_I(String s) {
        if (!s.trim().isEmpty()) {
            DCOINV3_I = Short.parseShort(s);
        } else {
            DCOINV3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDCOINV3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCOINV3_IFLAG = Byte.parseByte(s);
        } else {
            DCOINV3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCOINVB2(String s) {
        if (!s.trim().isEmpty()) {
            DCOINVB2 = Byte.parseByte(s);
        } else {
            DCOINVB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCOINVB3(String s) {
        if (!s.trim().isEmpty()) {
            DCOINVB3 = Byte.parseByte(s);
        } else {
            DCOINVB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM1(String s) {
        if (!s.trim().isEmpty()) {
            DCONM1 = Byte.parseByte(s);
        } else {
            DCONM1 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM2(String s) {
        if (!s.trim().isEmpty()) {
            DCONM2 = Byte.parseByte(s);
        } else {
            DCONM2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM3(String s) {
        if (!s.trim().isEmpty()) {
            DCONM3 = Byte.parseByte(s);
        } else {
            DCONM3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM4(String s) {
        if (!s.trim().isEmpty()) {
            DCONM4 = Byte.parseByte(s);
        } else {
            DCONM4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM5(String s) {
        if (!s.trim().isEmpty()) {
            DCONM5 = Byte.parseByte(s);
        } else {
            DCONM5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCONM6(String s) {
        if (!s.trim().isEmpty()) {
            DCONM6 = Byte.parseByte(s);
        } else {
            DCONM6 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCOSHV2(String s) {
        if (!s.trim().isEmpty()) {
            DCOSHV2 = Integer.parseInt(s);
        } else {
            DCOSHV2 = Integer.MIN_VALUE;
        }
    }

    protected final void initDCOSHV2_I(String s) {
        if (!s.trim().isEmpty()) {
            DCOSHV2_I = Integer.parseInt(s);
        } else {
            DCOSHV2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initDCOSHV2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DCOSHV2_IFLAG = Byte.parseByte(s);
        } else {
            DCOSHV2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDCOSHV3(String s) {
        if (!s.trim().isEmpty()) {
            DCOSHV3 = Short.parseShort(s);
        } else {
            DCOSHV3 = Short.MIN_VALUE;
        }
    }

    protected final void initDCOSHVB2(String s) {
        if (!s.trim().isEmpty()) {
            DCOSHVB2 = Byte.parseByte(s);
        } else {
            DCOSHVB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCPER2(String s) {
        if (!s.trim().isEmpty()) {
            DCPER2 = Byte.parseByte(s);
        } else {
            DCPER2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCPER3(String s) {
        if (!s.trim().isEmpty()) {
            DCPER3 = Byte.parseByte(s);
        } else {
            DCPER3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCREC2(String s) {
        if (!s.trim().isEmpty()) {
            DCREC2 = Byte.parseByte(s);
        } else {
            DCREC2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCREC3(String s) {
        if (!s.trim().isEmpty()) {
            DCREC3 = Byte.parseByte(s);
        } else {
            DCREC3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCRSP2(String s) {
        if (!s.trim().isEmpty()) {
            DCRSP2 = Byte.parseByte(s);
        } else {
            DCRSP2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDCRSP3(String s) {
        if (!s.trim().isEmpty()) {
            DCRSP3 = Byte.parseByte(s);
        } else {
            DCRSP3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBAMT01(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT01 = Short.parseShort(s);
        } else {
            DHBAMT01 = Short.MIN_VALUE;
        }
    }

    protected final void initDHBAMT01_I(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT01_I = Short.parseShort(s);
        } else {
            DHBAMT01_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHBAMT01_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT01_IFLAG = Byte.parseByte(s);
        } else {
            DHBAMT01_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBAMT02(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT02 = Short.parseShort(s);
        } else {
            DHBAMT02 = Short.MIN_VALUE;
        }
    }

    protected final void initDHBAMT02_I(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT02_I = Short.parseShort(s);
        } else {
            DHBAMT02_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHBAMT02_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT02_IFLAG = Byte.parseByte(s);
        } else {
            DHBAMT02_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBAMT03(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT03 = Short.parseShort(s);
        } else {
            DHBAMT03 = Short.MIN_VALUE;
        }
    }

    protected final void initDHBAMT03_I(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT03_I = Short.parseShort(s);
        } else {
            DHBAMT03_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHBAMT03_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT03_IFLAG = Byte.parseByte(s);
        } else {
            DHBAMT03_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBAMT04(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT04 = Short.parseShort(s);
        } else {
            DHBAMT04 = Short.MIN_VALUE;
        }
    }

    protected final void initDHBAMT04_I(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT04_I = Short.parseShort(s);
        } else {
            DHBAMT04_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHBAMT04_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT04_IFLAG = Byte.parseByte(s);
        } else {
            DHBAMT04_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBAMT05(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT05 = Short.parseShort(s);
        } else {
            DHBAMT05 = Short.MIN_VALUE;
        }
    }

    protected final void initDHBAMT05_I(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT05_I = Short.parseShort(s);
        } else {
            DHBAMT05_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHBAMT05_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT05_IFLAG = Byte.parseByte(s);
        } else {
            DHBAMT05_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBAMT06(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT06 = Short.parseShort(s);
        } else {
            DHBAMT06 = Short.MIN_VALUE;
        }
    }

    protected final void initDHBAMT06_I(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT06_I = Short.parseShort(s);
        } else {
            DHBAMT06_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHBAMT06_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT06_IFLAG = Byte.parseByte(s);
        } else {
            DHBAMT06_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBAMT07(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT07 = Short.parseShort(s);
        } else {
            DHBAMT07 = Short.MIN_VALUE;
        }
    }

    protected final void initDHBAMT07_I(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT07_I = Short.parseShort(s);
        } else {
            DHBAMT07_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHBAMT07_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT07_IFLAG = Byte.parseByte(s);
        } else {
            DHBAMT07_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBAMT08(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT08 = Short.parseShort(s);
        } else {
            DHBAMT08 = Short.MIN_VALUE;
        }
    }

    protected final void initDHBAMT08_I(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT08_I = Short.parseShort(s);
        } else {
            DHBAMT08_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHBAMT08_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT08_IFLAG = Byte.parseByte(s);
        } else {
            DHBAMT08_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBAMT09(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT09 = Integer.parseInt(s);
        } else {
            DHBAMT09 = Integer.MIN_VALUE;
        }
    }

    protected final void initDHBAMT09_I(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT09_I = Integer.parseInt(s);
        } else {
            DHBAMT09_I = Integer.MIN_VALUE;
        }
    }

    protected final void initDHBAMT09_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT09_IFLAG = Byte.parseByte(s);
        } else {
            DHBAMT09_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBAMT10(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT10 = Short.parseShort(s);
        } else {
            DHBAMT10 = Short.MIN_VALUE;
        }
    }

    protected final void initDHBAMT10_I(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT10_I = Short.parseShort(s);
        } else {
            DHBAMT10_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHBAMT10_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT10_IFLAG = Byte.parseByte(s);
        } else {
            DHBAMT10_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBAMT11(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT11 = Integer.parseInt(s);
        } else {
            DHBAMT11 = Integer.MIN_VALUE;
        }
    }

    protected final void initDHBAMT11_I(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT11_I = Integer.parseInt(s);
        } else {
            DHBAMT11_I = Integer.MIN_VALUE;
        }
    }

    protected final void initDHBAMT11_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHBAMT11_IFLAG = Byte.parseByte(s);
        } else {
            DHBAMT11_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBANY01(String s) {
        if (!s.trim().isEmpty()) {
            DHBANY01 = Byte.parseByte(s);
        } else {
            DHBANY01 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBANY01_I(String s) {
        if (!s.trim().isEmpty()) {
            DHBANY01_I = Byte.parseByte(s);
        } else {
            DHBANY01_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBANY01_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHBANY01_IFLAG = Byte.parseByte(s);
        } else {
            DHBANY01_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBANY02(String s) {
        if (!s.trim().isEmpty()) {
            DHBANY02 = Byte.parseByte(s);
        } else {
            DHBANY02 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBANY02_I(String s) {
        if (!s.trim().isEmpty()) {
            DHBANY02_I = Byte.parseByte(s);
        } else {
            DHBANY02_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBANY02_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHBANY02_IFLAG = Byte.parseByte(s);
        } else {
            DHBANY02_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBANY03(String s) {
        if (!s.trim().isEmpty()) {
            DHBANY03 = Byte.parseByte(s);
        } else {
            DHBANY03 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBANY03_I(String s) {
        if (!s.trim().isEmpty()) {
            DHBANY03_I = Byte.parseByte(s);
        } else {
            DHBANY03_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBANY03_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHBANY03_IFLAG = Byte.parseByte(s);
        } else {
            DHBANY03_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBANY04(String s) {
        if (!s.trim().isEmpty()) {
            DHBANY04 = Byte.parseByte(s);
        } else {
            DHBANY04 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBANY04_I(String s) {
        if (!s.trim().isEmpty()) {
            DHBANY04_I = Byte.parseByte(s);
        } else {
            DHBANY04_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBANY04_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHBANY04_IFLAG = Byte.parseByte(s);
        } else {
            DHBANY04_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBANY05(String s) {
        if (!s.trim().isEmpty()) {
            DHBANY05 = Byte.parseByte(s);
        } else {
            DHBANY05 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBANY05_I(String s) {
        if (!s.trim().isEmpty()) {
            DHBANY05_I = Byte.parseByte(s);
        } else {
            DHBANY05_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBANY05_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHBANY05_IFLAG = Byte.parseByte(s);
        } else {
            DHBANY05_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBANY06(String s) {
        if (!s.trim().isEmpty()) {
            DHBANY06 = Byte.parseByte(s);
        } else {
            DHBANY06 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBANY06_I(String s) {
        if (!s.trim().isEmpty()) {
            DHBANY06_I = Byte.parseByte(s);
        } else {
            DHBANY06_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBANY06_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHBANY06_IFLAG = Byte.parseByte(s);
        } else {
            DHBANY06_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBANY07(String s) {
        if (!s.trim().isEmpty()) {
            DHBANY07 = Byte.parseByte(s);
        } else {
            DHBANY07 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBANY07_I(String s) {
        if (!s.trim().isEmpty()) {
            DHBANY07_I = Byte.parseByte(s);
        } else {
            DHBANY07_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBANY07_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHBANY07_IFLAG = Byte.parseByte(s);
        } else {
            DHBANY07_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBEST01(String s) {
        if (!s.trim().isEmpty()) {
            DHBEST01 = Byte.parseByte(s);
        } else {
            DHBEST01 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBEST02(String s) {
        if (!s.trim().isEmpty()) {
            DHBEST02 = Byte.parseByte(s);
        } else {
            DHBEST02 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBEST03(String s) {
        if (!s.trim().isEmpty()) {
            DHBEST03 = Byte.parseByte(s);
        } else {
            DHBEST03 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBEST04(String s) {
        if (!s.trim().isEmpty()) {
            DHBEST04 = Byte.parseByte(s);
        } else {
            DHBEST04 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBEST05(String s) {
        if (!s.trim().isEmpty()) {
            DHBEST05 = Byte.parseByte(s);
        } else {
            DHBEST05 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBEST06(String s) {
        if (!s.trim().isEmpty()) {
            DHBEST06 = Byte.parseByte(s);
        } else {
            DHBEST06 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBEST07(String s) {
        if (!s.trim().isEmpty()) {
            DHBEST07 = Byte.parseByte(s);
        } else {
            DHBEST07 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBEST08(String s) {
        if (!s.trim().isEmpty()) {
            DHBEST08 = Byte.parseByte(s);
        } else {
            DHBEST08 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBEST09(String s) {
        if (!s.trim().isEmpty()) {
            DHBEST09 = Byte.parseByte(s);
        } else {
            DHBEST09 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBEST10(String s) {
        if (!s.trim().isEmpty()) {
            DHBEST10 = Byte.parseByte(s);
        } else {
            DHBEST10 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBEST11(String s) {
        if (!s.trim().isEmpty()) {
            DHBEST11 = Byte.parseByte(s);
        } else {
            DHBEST11 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHBFIX(String s) {
        if (!s.trim().isEmpty()) {
            DHBFIX = Byte.parseByte(s);
        } else {
            DHBFIX = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPANY1(String s) {
        if (!s.trim().isEmpty()) {
            DHPANY1 = Byte.parseByte(s);
        } else {
            DHPANY1 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPANY1_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPANY1_I = Byte.parseByte(s);
        } else {
            DHPANY1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPANY1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPANY1_IFLAG = Byte.parseByte(s);
        } else {
            DHPANY1_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPANY2(String s) {
        if (!s.trim().isEmpty()) {
            DHPANY2 = Byte.parseByte(s);
        } else {
            DHPANY2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPANY2_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPANY2_I = Byte.parseByte(s);
        } else {
            DHPANY2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPANY2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPANY2_IFLAG = Byte.parseByte(s);
        } else {
            DHPANY2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPANY3(String s) {
        if (!s.trim().isEmpty()) {
            DHPANY3 = Byte.parseByte(s);
        } else {
            DHPANY3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPANY3_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPANY3_I = Byte.parseByte(s);
        } else {
            DHPANY3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPANY3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPANY3_IFLAG = Byte.parseByte(s);
        } else {
            DHPANY3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPBEH2(String s) {
        if (!s.trim().isEmpty()) {
            DHPBEH2 = Byte.parseByte(s);
        } else {
            DHPBEH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPBEH2_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPBEH2_I = Byte.parseByte(s);
        } else {
            DHPBEH2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPBEH2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPBEH2_IFLAG = Byte.parseByte(s);
        } else {
            DHPBEH2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPEST2(String s) {
        if (!s.trim().isEmpty()) {
            DHPEST2 = Byte.parseByte(s);
        } else {
            DHPEST2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPINS2(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS2 = Short.parseShort(s);
        } else {
            DHPINS2 = Short.MIN_VALUE;
        }
    }

    protected final void initDHPINS2_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS2_I = Short.parseShort(s);
        } else {
            DHPINS2_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPINS2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPINS2_IFLAG = Byte.parseByte(s);
        } else {
            DHPINS2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPINT2(String s) {
        if (!s.trim().isEmpty()) {
            DHPINT2 = Byte.parseByte(s);
        } else {
            DHPINT2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPNUM(String s) {
        if (!s.trim().isEmpty()) {
            DHPNUM = Byte.parseByte(s);
        } else {
            DHPNUM = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPNUM_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPNUM_I = Byte.parseByte(s);
        } else {
            DHPNUM_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPNUM_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPNUM_IFLAG = Byte.parseByte(s);
        } else {
            DHPNUM_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT2(String s) {
        if (!s.trim().isEmpty()) {
            DHPOFT2 = Byte.parseByte(s);
        } else {
            DHPOFT2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT2_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPOFT2_I = Byte.parseByte(s);
        } else {
            DHPOFT2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOFT2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPOFT2_IFLAG = Byte.parseByte(s);
        } else {
            DHPOFT2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPOWE2(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE2 = Short.parseShort(s);
        } else {
            DHPOWE2 = Short.MIN_VALUE;
        }
    }

    protected final void initDHPOWE2_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE2_I = Short.parseShort(s);
        } else {
            DHPOWE2_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPOWE2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPOWE2_IFLAG = Byte.parseByte(s);
        } else {
            DHPOWE2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWEST2(String s) {
        if (!s.trim().isEmpty()) {
            DHPWEST2 = Byte.parseByte(s);
        } else {
            DHPWEST2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM2(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM2 = Byte.parseByte(s);
        } else {
            DHPWHNM2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM2_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM2_I = Byte.parseByte(s);
        } else {
            DHPWHNM2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNM2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNM2_IFLAG = Byte.parseByte(s);
        } else {
            DHPWHNM2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY2(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY2 = Short.parseShort(s);
        } else {
            DHPWHNY2 = Short.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY2_I(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY2_I = Short.parseShort(s);
        } else {
            DHPWHNY2_I = Short.MIN_VALUE;
        }
    }

    protected final void initDHPWHNY2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DHPWHNY2_IFLAG = Byte.parseByte(s);
        } else {
            DHPWHNY2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDISEVER(String s) {
        if (!s.trim().isEmpty()) {
            DISEVER = Byte.parseByte(s);
        } else {
            DISEVER = Byte.MIN_VALUE;
        }
    }

    protected final void initDISTYPE1(String s) {
        if (!s.trim().isEmpty()) {
            DISTYPE1 = Byte.parseByte(s);
        } else {
            DISTYPE1 = Byte.MIN_VALUE;
        }
    }

    protected final void initDISTYPE2(String s) {
        if (!s.trim().isEmpty()) {
            DISTYPE2 = Byte.parseByte(s);
        } else {
            DISTYPE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDISTYPE3(String s) {
        if (!s.trim().isEmpty()) {
            DISTYPE3 = Byte.parseByte(s);
        } else {
            DISTYPE3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDISTYPE4(String s) {
        if (!s.trim().isEmpty()) {
            DISTYPE4 = Byte.parseByte(s);
        } else {
            DISTYPE4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDISTYPE5(String s) {
        if (!s.trim().isEmpty()) {
            DISTYPE5 = Byte.parseByte(s);
        } else {
            DISTYPE5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDISTYPE6(String s) {
        if (!s.trim().isEmpty()) {
            DISTYPE6 = Byte.parseByte(s);
        } else {
            DISTYPE6 = Byte.MIN_VALUE;
        }
    }

    protected final void initDISTYPE7(String s) {
        if (!s.trim().isEmpty()) {
            DISTYPE7 = Byte.parseByte(s);
        } else {
            DISTYPE7 = Byte.MIN_VALUE;
        }
    }

    protected final void initDISTYPE8(String s) {
        if (!s.trim().isEmpty()) {
            DISTYPE8 = Byte.parseByte(s);
        } else {
            DISTYPE8 = Byte.MIN_VALUE;
        }
    }

    protected final void initDISTYPE9(String s) {
        if (!s.trim().isEmpty()) {
            DISTYPE9 = Byte.parseByte(s);
        } else {
            DISTYPE9 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLANY(String s) {
        if (!s.trim().isEmpty()) {
            DLANY = Byte.parseByte(s);
        } else {
            DLANY = Byte.MIN_VALUE;
        }
    }

    protected final void initDLANY_I(String s) {
        if (!s.trim().isEmpty()) {
            DLANY_I = Byte.parseByte(s);
        } else {
            DLANY_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLANY_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLANY_IFLAG = Byte.parseByte(s);
        } else {
            DLANY_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLBEH2(String s) {
        if (!s.trim().isEmpty()) {
            DLBEH2 = Byte.parseByte(s);
        } else {
            DLBEH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLBEH2_I(String s) {
        if (!s.trim().isEmpty()) {
            DLBEH2_I = Byte.parseByte(s);
        } else {
            DLBEH2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLBEH2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLBEH2_IFLAG = Byte.parseByte(s);
        } else {
            DLBEH2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLBEH3(String s) {
        if (!s.trim().isEmpty()) {
            DLBEH3 = Byte.parseByte(s);
        } else {
            DLBEH3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLBEH3_I(String s) {
        if (!s.trim().isEmpty()) {
            DLBEH3_I = Byte.parseByte(s);
        } else {
            DLBEH3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLBEH3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLBEH3_IFLAG = Byte.parseByte(s);
        } else {
            DLBEH3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLBEH4(String s) {
        if (!s.trim().isEmpty()) {
            DLBEH4 = Byte.parseByte(s);
        } else {
            DLBEH4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLBEH4_I(String s) {
        if (!s.trim().isEmpty()) {
            DLBEH4_I = Byte.parseByte(s);
        } else {
            DLBEH4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLBEH4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLBEH4_IFLAG = Byte.parseByte(s);
        } else {
            DLBEH4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLBEH5(String s) {
        if (!s.trim().isEmpty()) {
            DLBEH5 = Byte.parseByte(s);
        } else {
            DLBEH5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLBEH5_I(String s) {
        if (!s.trim().isEmpty()) {
            DLBEH5_I = Byte.parseByte(s);
        } else {
            DLBEH5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLBEH5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLBEH5_IFLAG = Byte.parseByte(s);
        } else {
            DLBEH5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLEST2(String s) {
        if (!s.trim().isEmpty()) {
            DLEST2 = Byte.parseByte(s);
        } else {
            DLEST2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLEST3(String s) {
        if (!s.trim().isEmpty()) {
            DLEST3 = Byte.parseByte(s);
        } else {
            DLEST3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLEST4(String s) {
        if (!s.trim().isEmpty()) {
            DLEST4 = Byte.parseByte(s);
        } else {
            DLEST4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLINS2(String s) {
        if (!s.trim().isEmpty()) {
            DLINS2 = Short.parseShort(s);
        } else {
            DLINS2 = Short.MIN_VALUE;
        }
    }

    protected final void initDLINS2_I(String s) {
        if (!s.trim().isEmpty()) {
            DLINS2_I = Double.parseDouble(s);
        } else {
            DLINS2_I = Double.NaN;
        }
    }

    protected final void initDLINS2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLINS2_IFLAG = Byte.parseByte(s);
        } else {
            DLINS2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLINS3(String s) {
        if (!s.trim().isEmpty()) {
            DLINS3 = Short.parseShort(s);
        } else {
            DLINS3 = Short.MIN_VALUE;
        }
    }

    protected final void initDLINS3_I(String s) {
        if (!s.trim().isEmpty()) {
            DLINS3_I = Short.parseShort(s);
        } else {
            DLINS3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDLINS3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLINS3_IFLAG = Byte.parseByte(s);
        } else {
            DLINS3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLINS4(String s) {
        if (!s.trim().isEmpty()) {
            DLINS4 = Short.parseShort(s);
        } else {
            DLINS4 = Short.MIN_VALUE;
        }
    }

    protected final void initDLINS4_I(String s) {
        if (!s.trim().isEmpty()) {
            DLINS4_I = Double.parseDouble(s);
        } else {
            DLINS4_I = Double.NaN;
        }
    }

    protected final void initDLINS4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLINS4_IFLAG = Byte.parseByte(s);
        } else {
            DLINS4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLINS5(String s) {
        if (!s.trim().isEmpty()) {
            DLINS5 = Short.parseShort(s);
        } else {
            DLINS5 = Short.MIN_VALUE;
        }
    }

    protected final void initDLINS5_I(String s) {
        if (!s.trim().isEmpty()) {
            DLINS5_I = Short.parseShort(s);
        } else {
            DLINS5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDLINS5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLINS5_IFLAG = Byte.parseByte(s);
        } else {
            DLINS5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLINT2(String s) {
        if (!s.trim().isEmpty()) {
            DLINT2 = Byte.parseByte(s);
        } else {
            DLINT2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLINT3(String s) {
        if (!s.trim().isEmpty()) {
            DLINT3 = Byte.parseByte(s);
        } else {
            DLINT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLINT4(String s) {
        if (!s.trim().isEmpty()) {
            DLINT4 = Byte.parseByte(s);
        } else {
            DLINT4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLINT5(String s) {
        if (!s.trim().isEmpty()) {
            DLINT5 = Byte.parseByte(s);
        } else {
            DLINT5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLNUM(String s) {
        if (!s.trim().isEmpty()) {
            DLNUM = Byte.parseByte(s);
        } else {
            DLNUM = Byte.MIN_VALUE;
        }
    }

    protected final void initDLNUM_I(String s) {
        if (!s.trim().isEmpty()) {
            DLNUM_I = Byte.parseByte(s);
        } else {
            DLNUM_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLNUM_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLNUM_IFLAG = Byte.parseByte(s);
        } else {
            DLNUM_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOFT2(String s) {
        if (!s.trim().isEmpty()) {
            DLOFT2 = Byte.parseByte(s);
        } else {
            DLOFT2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOFT2_I(String s) {
        if (!s.trim().isEmpty()) {
            DLOFT2_I = Byte.parseByte(s);
        } else {
            DLOFT2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOFT2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLOFT2_IFLAG = Byte.parseByte(s);
        } else {
            DLOFT2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOFT3(String s) {
        if (!s.trim().isEmpty()) {
            DLOFT3 = Byte.parseByte(s);
        } else {
            DLOFT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOFT3_I(String s) {
        if (!s.trim().isEmpty()) {
            DLOFT3_I = Byte.parseByte(s);
        } else {
            DLOFT3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOFT3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLOFT3_IFLAG = Byte.parseByte(s);
        } else {
            DLOFT3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOFT4(String s) {
        if (!s.trim().isEmpty()) {
            DLOFT4 = Byte.parseByte(s);
        } else {
            DLOFT4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOFT4_I(String s) {
        if (!s.trim().isEmpty()) {
            DLOFT4_I = Byte.parseByte(s);
        } else {
            DLOFT4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOFT4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLOFT4_IFLAG = Byte.parseByte(s);
        } else {
            DLOFT4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOFT5(String s) {
        if (!s.trim().isEmpty()) {
            DLOFT5 = Byte.parseByte(s);
        } else {
            DLOFT5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOFT5_I(String s) {
        if (!s.trim().isEmpty()) {
            DLOFT5_I = Byte.parseByte(s);
        } else {
            DLOFT5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOFT5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLOFT5_IFLAG = Byte.parseByte(s);
        } else {
            DLOFT5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOWE2(String s) {
        if (!s.trim().isEmpty()) {
            DLOWE2 = Integer.parseInt(s);
        } else {
            DLOWE2 = Integer.MIN_VALUE;
        }
    }

    protected final void initDLOWE2_I(String s) {
        if (!s.trim().isEmpty()) {
            DLOWE2_I = Integer.parseInt(s);
        } else {
            DLOWE2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initDLOWE2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLOWE2_IFLAG = Byte.parseByte(s);
        } else {
            DLOWE2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOWE3(String s) {
        if (!s.trim().isEmpty()) {
            DLOWE3 = Short.parseShort(s);
        } else {
            DLOWE3 = Short.MIN_VALUE;
        }
    }

    protected final void initDLOWE3_I(String s) {
        if (!s.trim().isEmpty()) {
            DLOWE3_I = Short.parseShort(s);
        } else {
            DLOWE3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDLOWE3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLOWE3_IFLAG = Byte.parseByte(s);
        } else {
            DLOWE3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOWE4(String s) {
        if (!s.trim().isEmpty()) {
            DLOWE4 = Short.parseShort(s);
        } else {
            DLOWE4 = Short.MIN_VALUE;
        }
    }

    protected final void initDLOWE4_I(String s) {
        if (!s.trim().isEmpty()) {
            DLOWE4_I = Short.parseShort(s);
        } else {
            DLOWE4_I = Short.MIN_VALUE;
        }
    }

    protected final void initDLOWE4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLOWE4_IFLAG = Byte.parseByte(s);
        } else {
            DLOWE4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLOWE5(String s) {
        if (!s.trim().isEmpty()) {
            DLOWE5 = Short.parseShort(s);
        } else {
            DLOWE5 = Short.MIN_VALUE;
        }
    }

    protected final void initDLOWE5_I(String s) {
        if (!s.trim().isEmpty()) {
            DLOWE5_I = Short.parseShort(s);
        } else {
            DLOWE5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDLOWE5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLOWE5_IFLAG = Byte.parseByte(s);
        } else {
            DLOWE5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLSEC2(String s) {
        if (!s.trim().isEmpty()) {
            DLSEC2 = Byte.parseByte(s);
        } else {
            DLSEC2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLSEC3(String s) {
        if (!s.trim().isEmpty()) {
            DLSEC3 = Byte.parseByte(s);
        } else {
            DLSEC3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLSEC4(String s) {
        if (!s.trim().isEmpty()) {
            DLSEC4 = Byte.parseByte(s);
        } else {
            DLSEC4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLSEC5(String s) {
        if (!s.trim().isEmpty()) {
            DLSEC5 = Byte.parseByte(s);
        } else {
            DLSEC5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLTYPE2(String s) {
        if (!s.trim().isEmpty()) {
            DLTYPE2 = Byte.parseByte(s);
        } else {
            DLTYPE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLTYPE2_I(String s) {
        if (!s.trim().isEmpty()) {
            DLTYPE2_I = Byte.parseByte(s);
        } else {
            DLTYPE2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLTYPE2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLTYPE2_IFLAG = Byte.parseByte(s);
        } else {
            DLTYPE2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLTYPE3(String s) {
        if (!s.trim().isEmpty()) {
            DLTYPE3 = Byte.parseByte(s);
        } else {
            DLTYPE3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLTYPE3_I(String s) {
        if (!s.trim().isEmpty()) {
            DLTYPE3_I = Byte.parseByte(s);
        } else {
            DLTYPE3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLTYPE3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLTYPE3_IFLAG = Byte.parseByte(s);
        } else {
            DLTYPE3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLTYPE4(String s) {
        if (!s.trim().isEmpty()) {
            DLTYPE4 = Byte.parseByte(s);
        } else {
            DLTYPE4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLTYPE4_I(String s) {
        if (!s.trim().isEmpty()) {
            DLTYPE4_I = Byte.parseByte(s);
        } else {
            DLTYPE4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLTYPE4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLTYPE4_IFLAG = Byte.parseByte(s);
        } else {
            DLTYPE4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLTYPE5(String s) {
        if (!s.trim().isEmpty()) {
            DLTYPE5 = Byte.parseByte(s);
        } else {
            DLTYPE5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLTYPE5_I(String s) {
        if (!s.trim().isEmpty()) {
            DLTYPE5_I = Byte.parseByte(s);
        } else {
            DLTYPE5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLTYPE5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLTYPE5_IFLAG = Byte.parseByte(s);
        } else {
            DLTYPE5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWEST2(String s) {
        if (!s.trim().isEmpty()) {
            DLWEST2 = Byte.parseByte(s);
        } else {
            DLWEST2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWEST3(String s) {
        if (!s.trim().isEmpty()) {
            DLWEST3 = Byte.parseByte(s);
        } else {
            DLWEST3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWEST4(String s) {
        if (!s.trim().isEmpty()) {
            DLWEST4 = Byte.parseByte(s);
        } else {
            DLWEST4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWEST5(String s) {
        if (!s.trim().isEmpty()) {
            DLWEST5 = Byte.parseByte(s);
        } else {
            DLWEST5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHNM2(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNM2 = Byte.parseByte(s);
        } else {
            DLWHNM2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHNM2_I(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNM2_I = Byte.parseByte(s);
        } else {
            DLWHNM2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHNM2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNM2_IFLAG = Byte.parseByte(s);
        } else {
            DLWHNM2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHNM3(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNM3 = Byte.parseByte(s);
        } else {
            DLWHNM3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHNM3_I(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNM3_I = Byte.parseByte(s);
        } else {
            DLWHNM3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHNM3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNM3_IFLAG = Byte.parseByte(s);
        } else {
            DLWHNM3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHNM4(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNM4 = Byte.parseByte(s);
        } else {
            DLWHNM4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHNM4_I(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNM4_I = Byte.parseByte(s);
        } else {
            DLWHNM4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHNM4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNM4_IFLAG = Byte.parseByte(s);
        } else {
            DLWHNM4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHNM5(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNM5 = Byte.parseByte(s);
        } else {
            DLWHNM5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHNM5_I(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNM5_I = Byte.parseByte(s);
        } else {
            DLWHNM5_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHNM5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNM5_IFLAG = Byte.parseByte(s);
        } else {
            DLWHNM5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHNY2(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNY2 = Short.parseShort(s);
        } else {
            DLWHNY2 = Short.MIN_VALUE;
        }
    }

    protected final void initDLWHNY2_I(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNY2_I = Short.parseShort(s);
        } else {
            DLWHNY2_I = Short.MIN_VALUE;
        }
    }

    protected final void initDLWHNY2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNY2_IFLAG = Byte.parseByte(s);
        } else {
            DLWHNY2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHNY3(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNY3 = Short.parseShort(s);
        } else {
            DLWHNY3 = Short.MIN_VALUE;
        }
    }

    protected final void initDLWHNY3_I(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNY3_I = Short.parseShort(s);
        } else {
            DLWHNY3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDLWHNY3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNY3_IFLAG = Byte.parseByte(s);
        } else {
            DLWHNY3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHNY4(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNY4 = Short.parseShort(s);
        } else {
            DLWHNY4 = Short.MIN_VALUE;
        }
    }

    protected final void initDLWHNY4_I(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNY4_I = Short.parseShort(s);
        } else {
            DLWHNY4_I = Short.MIN_VALUE;
        }
    }

    protected final void initDLWHNY4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNY4_IFLAG = Byte.parseByte(s);
        } else {
            DLWHNY4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHNY5(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNY5 = Short.parseShort(s);
        } else {
            DLWHNY5 = Short.MIN_VALUE;
        }
    }

    protected final void initDLWHNY5_I(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNY5_I = Short.parseShort(s);
        } else {
            DLWHNY5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDLWHNY5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DLWHNY5_IFLAG = Byte.parseByte(s);
        } else {
            DLWHNY5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHY1(String s) {
        if (!s.trim().isEmpty()) {
            DLWHY1 = Byte.parseByte(s);
        } else {
            DLWHY1 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHY10(String s) {
        if (!s.trim().isEmpty()) {
            DLWHY10 = Byte.parseByte(s);
        } else {
            DLWHY10 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHY15(String s) {
        if (!s.trim().isEmpty()) {
            DLWHY15 = Byte.parseByte(s);
        } else {
            DLWHY15 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHY16(String s) {
        if (!s.trim().isEmpty()) {
            DLWHY16 = Byte.parseByte(s);
        } else {
            DLWHY16 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHY2(String s) {
        if (!s.trim().isEmpty()) {
            DLWHY2 = Byte.parseByte(s);
        } else {
            DLWHY2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHY22(String s) {
        if (!s.trim().isEmpty()) {
            DLWHY22 = Byte.parseByte(s);
        } else {
            DLWHY22 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHY23(String s) {
        if (!s.trim().isEmpty()) {
            DLWHY23 = Byte.parseByte(s);
        } else {
            DLWHY23 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHY3(String s) {
        if (!s.trim().isEmpty()) {
            DLWHY3 = Byte.parseByte(s);
        } else {
            DLWHY3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHY4(String s) {
        if (!s.trim().isEmpty()) {
            DLWHY4 = Byte.parseByte(s);
        } else {
            DLWHY4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHY5(String s) {
        if (!s.trim().isEmpty()) {
            DLWHY5 = Byte.parseByte(s);
        } else {
            DLWHY5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHY8(String s) {
        if (!s.trim().isEmpty()) {
            DLWHY8 = Byte.parseByte(s);
        } else {
            DLWHY8 = Byte.MIN_VALUE;
        }
    }

    protected final void initDLWHY9(String s) {
        if (!s.trim().isEmpty()) {
            DLWHY9 = Byte.parseByte(s);
        } else {
            DLWHY9 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOANY(String s) {
        if (!s.trim().isEmpty()) {
            DMOANY = Byte.parseByte(s);
        } else {
            DMOANY = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOANY_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOANY_I = Byte.parseByte(s);
        } else {
            DMOANY_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOANY_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOANY_IFLAG = Byte.parseByte(s);
        } else {
            DMOANY_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOBEH2(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH2 = Byte.parseByte(s);
        } else {
            DMOBEH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOBEH2_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH2_I = Byte.parseByte(s);
        } else {
            DMOBEH2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOBEH2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOBEH2_IFLAG = Byte.parseByte(s);
        } else {
            DMOBEH2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOEST2(String s) {
        if (!s.trim().isEmpty()) {
            DMOEST2 = Byte.parseByte(s);
        } else {
            DMOEST2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOINS2(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS2 = Short.parseShort(s);
        } else {
            DMOINS2 = Short.MIN_VALUE;
        }
    }

    protected final void initDMOINS2_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS2_I = Short.parseShort(s);
        } else {
            DMOINS2_I = Short.MIN_VALUE;
        }
    }

    protected final void initDMOINS2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOINS2_IFLAG = Byte.parseByte(s);
        } else {
            DMOINS2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOINT2(String s) {
        if (!s.trim().isEmpty()) {
            DMOINT2 = Byte.parseByte(s);
        } else {
            DMOINT2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMONUM(String s) {
        if (!s.trim().isEmpty()) {
            DMONUM = Byte.parseByte(s);
        } else {
            DMONUM = Byte.MIN_VALUE;
        }
    }

    protected final void initDMONUM_I(String s) {
        if (!s.trim().isEmpty()) {
            DMONUM_I = Byte.parseByte(s);
        } else {
            DMONUM_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMONUM_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMONUM_IFLAG = Byte.parseByte(s);
        } else {
            DMONUM_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOFT2(String s) {
        if (!s.trim().isEmpty()) {
            DMOOFT2 = Byte.parseByte(s);
        } else {
            DMOOFT2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOFT2_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOOFT2_I = Byte.parseByte(s);
        } else {
            DMOOFT2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOFT2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOOFT2_IFLAG = Byte.parseByte(s);
        } else {
            DMOOFT2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOOWE2(String s) {
        if (!s.trim().isEmpty()) {
            DMOOWE2 = Short.parseShort(s);
        } else {
            DMOOWE2 = Short.MIN_VALUE;
        }
    }

    protected final void initDMOOWE2_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOOWE2_I = Short.parseShort(s);
        } else {
            DMOOWE2_I = Short.MIN_VALUE;
        }
    }

    protected final void initDMOOWE2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOOWE2_IFLAG = Byte.parseByte(s);
        } else {
            DMOOWE2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWEST2(String s) {
        if (!s.trim().isEmpty()) {
            DMOWEST2 = Byte.parseByte(s);
        } else {
            DMOWEST2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM2(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM2 = Byte.parseByte(s);
        } else {
            DMOWHNM2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM2_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM2_I = Byte.parseByte(s);
        } else {
            DMOWHNM2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNM2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNM2_IFLAG = Byte.parseByte(s);
        } else {
            DMOWHNM2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY2(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY2 = Short.parseShort(s);
        } else {
            DMOWHNY2 = Short.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY2_I(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY2_I = Short.parseShort(s);
        } else {
            DMOWHNY2_I = Short.MIN_VALUE;
        }
    }

    protected final void initDMOWHNY2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DMOWHNY2_IFLAG = Byte.parseByte(s);
        } else {
            DMOWHNY2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSAMC2(String s) {
        if (!s.trim().isEmpty()) {
            DSAMC2 = Short.parseShort(s);
        } else {
            DSAMC2 = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMC3(String s) {
        if (!s.trim().isEmpty()) {
            DSAMC3 = Short.parseShort(s);
        } else {
            DSAMC3 = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMD2(String s) {
        if (!s.trim().isEmpty()) {
            DSAMD2 = Short.parseShort(s);
        } else {
            DSAMD2 = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMD3(String s) {
        if (!s.trim().isEmpty()) {
            DSAMD3 = Short.parseShort(s);
        } else {
            DSAMD3 = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMOS2(String s) {
        if (!s.trim().isEmpty()) {
            DSAMOS2 = Short.parseShort(s);
        } else {
            DSAMOS2 = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMOS3(String s) {
        if (!s.trim().isEmpty()) {
            DSAMOS3 = Short.parseShort(s);
        } else {
            DSAMOS3 = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMP2(String s) {
        if (!s.trim().isEmpty()) {
            DSAMP2 = Short.parseShort(s);
        } else {
            DSAMP2 = Short.MIN_VALUE;
        }
    }

    protected final void initDSAMP3(String s) {
        if (!s.trim().isEmpty()) {
            DSAMP3 = Short.parseShort(s);
        } else {
            DSAMP3 = Short.MIN_VALUE;
        }
    }

    protected final void initDSANU1(String s) {
        if (!s.trim().isEmpty()) {
            DSANU1 = Byte.parseByte(s);
        } else {
            DSANU1 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSANU2(String s) {
        if (!s.trim().isEmpty()) {
            DSANU2 = Byte.parseByte(s);
        } else {
            DSANU2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSANY1(String s) {
        if (!s.trim().isEmpty()) {
            DSANY1 = Byte.parseByte(s);
        } else {
            DSANY1 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSANY2(String s) {
        if (!s.trim().isEmpty()) {
            DSANY2 = Byte.parseByte(s);
        } else {
            DSANY2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCOS2(String s) {
        if (!s.trim().isEmpty()) {
            DSCOS2 = Byte.parseByte(s);
        } else {
            DSCOS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCOS3(String s) {
        if (!s.trim().isEmpty()) {
            DSCOS3 = Byte.parseByte(s);
        } else {
            DSCOS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCSP2(String s) {
        if (!s.trim().isEmpty()) {
            DSCSP2 = Byte.parseByte(s);
        } else {
            DSCSP2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSCSP3(String s) {
        if (!s.trim().isEmpty()) {
            DSCSP3 = Byte.parseByte(s);
        } else {
            DSCSP3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSESB2(String s) {
        if (!s.trim().isEmpty()) {
            DSESB2 = Byte.parseByte(s);
        } else {
            DSESB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSESB3(String s) {
        if (!s.trim().isEmpty()) {
            DSESB3 = Byte.parseByte(s);
        } else {
            DSESB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSLAMT2(String s) {
        if (!s.trim().isEmpty()) {
            DSLAMT2 = Integer.parseInt(s);
        } else {
            DSLAMT2 = Integer.MIN_VALUE;
        }
    }

    protected final void initDSLAMT2_I(String s) {
        if (!s.trim().isEmpty()) {
            DSLAMT2_I = Double.parseDouble(s);
        } else {
            DSLAMT2_I = Double.NaN;
        }
    }

    protected final void initDSLAMT2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSLAMT2_IFLAG = Byte.parseByte(s);
        } else {
            DSLAMT2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSLAMT3(String s) {
        if (!s.trim().isEmpty()) {
            DSLAMT3 = Short.parseShort(s);
        } else {
            DSLAMT3 = Short.MIN_VALUE;
        }
    }

    protected final void initDSLAMT3_I(String s) {
        if (!s.trim().isEmpty()) {
            DSLAMT3_I = Short.parseShort(s);
        } else {
            DSLAMT3_I = Short.MIN_VALUE;
        }
    }

    protected final void initDSLAMT3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSLAMT3_IFLAG = Byte.parseByte(s);
        } else {
            DSLAMT3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSLAMT4(String s) {
        if (!s.trim().isEmpty()) {
            DSLAMT4 = Short.parseShort(s);
        } else {
            DSLAMT4 = Short.MIN_VALUE;
        }
    }

    protected final void initDSLAMT4_I(String s) {
        if (!s.trim().isEmpty()) {
            DSLAMT4_I = Short.parseShort(s);
        } else {
            DSLAMT4_I = Short.MIN_VALUE;
        }
    }

    protected final void initDSLAMT4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSLAMT4_IFLAG = Byte.parseByte(s);
        } else {
            DSLAMT4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSLAMT5(String s) {
        if (!s.trim().isEmpty()) {
            DSLAMT5 = Short.parseShort(s);
        } else {
            DSLAMT5 = Short.MIN_VALUE;
        }
    }

    protected final void initDSLAMT5_I(String s) {
        if (!s.trim().isEmpty()) {
            DSLAMT5_I = Short.parseShort(s);
        } else {
            DSLAMT5_I = Short.MIN_VALUE;
        }
    }

    protected final void initDSLAMT5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            DSLAMT5_IFLAG = Byte.parseByte(s);
        } else {
            DSLAMT5_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initDSLEST2(String s) {
        if (!s.trim().isEmpty()) {
            DSLEST2 = Byte.parseByte(s);
        } else {
            DSLEST2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSLEST3(String s) {
        if (!s.trim().isEmpty()) {
            DSLEST3 = Byte.parseByte(s);
        } else {
            DSLEST3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSLEST4(String s) {
        if (!s.trim().isEmpty()) {
            DSLEST4 = Byte.parseByte(s);
        } else {
            DSLEST4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSLEST5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DSLEST5 = false;
            } else {
                DSLEST5 = true;
            }
        }
    }

    protected final void initDSLPAY2(String s) {
        if (!s.trim().isEmpty()) {
            DSLPAY2 = Byte.parseByte(s);
        } else {
            DSLPAY2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSLPAY3(String s) {
        if (!s.trim().isEmpty()) {
            DSLPAY3 = Byte.parseByte(s);
        } else {
            DSLPAY3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSLPAY4(String s) {
        if (!s.trim().isEmpty()) {
            DSLPAY4 = Byte.parseByte(s);
        } else {
            DSLPAY4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSLPAY5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                DSLPAY5 = false;
            } else {
                DSLPAY5 = true;
            }
        }
    }

    protected final void initDSNAM2(String s) {
        if (!s.trim().isEmpty()) {
            DSNAM2 = Byte.parseByte(s);
        } else {
            DSNAM2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSNAM3(String s) {
        if (!s.trim().isEmpty()) {
            DSNAM3 = Byte.parseByte(s);
        } else {
            DSNAM3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSONM1(String s) {
        if (!s.trim().isEmpty()) {
            DSONM1 = Byte.parseByte(s);
        } else {
            DSONM1 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSONM2(String s) {
        if (!s.trim().isEmpty()) {
            DSONM2 = Byte.parseByte(s);
        } else {
            DSONM2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSONM3(String s) {
        if (!s.trim().isEmpty()) {
            DSONM3 = Byte.parseByte(s);
        } else {
            DSONM3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSONM4(String s) {
        if (!s.trim().isEmpty()) {
            DSONM4 = Byte.parseByte(s);
        } else {
            DSONM4 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSONM5(String s) {
        if (!s.trim().isEmpty()) {
            DSONM5 = Byte.parseByte(s);
        } else {
            DSONM5 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSONM6(String s) {
        if (!s.trim().isEmpty()) {
            DSONM6 = Byte.parseByte(s);
        } else {
            DSONM6 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSPER2(String s) {
        if (!s.trim().isEmpty()) {
            DSPER2 = Byte.parseByte(s);
        } else {
            DSPER2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSREC2(String s) {
        if (!s.trim().isEmpty()) {
            DSREC2 = Byte.parseByte(s);
        } else {
            DSREC2 = Byte.MIN_VALUE;
        }
    }

    protected final void initDSREC3(String s) {
        if (!s.trim().isEmpty()) {
            DSREC3 = Byte.parseByte(s);
        } else {
            DSREC3 = Byte.MIN_VALUE;
        }
    }

    protected final void initDTJBL(String s) {
        if (!s.trim().isEmpty()) {
            DTJBL = s;
        }
    }

    protected final void initDVAGE17(String s) {
        if (!s.trim().isEmpty()) {
            DVAGE17 = Byte.parseByte(s);
        } else {
            DVAGE17 = Byte.MIN_VALUE;
        }
    }

    protected final void initDVANYARR(String s) {
        if (!s.trim().isEmpty()) {
            DVANYARR = Byte.parseByte(s);
        } else {
            DVANYARR = Byte.MIN_VALUE;
        }
    }

    protected final void initDVCACTV(String s) {
        if (!s.trim().isEmpty()) {
            DVCACTV = Short.parseShort(s);
        } else {
            DVCACTV = Short.MIN_VALUE;
        }
    }

    protected final void initDVCASVV(String s) {
        if (!s.trim().isEmpty()) {
            DVCASVV = Integer.parseInt(s);
        } else {
            DVCASVV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVCHMARR(String s) {
        if (!s.trim().isEmpty()) {
            DVCHMARR = Byte.parseByte(s);
        } else {
            DVCHMARR = Byte.MIN_VALUE;
        }
    }

    protected final void initDVCISAV(String s) {
        if (!s.trim().isEmpty()) {
            DVCISAV = Integer.parseInt(s);
        } else {
            DVCISAV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVCOINV2(String s) {
        if (!s.trim().isEmpty()) {
            DVCOINV2 = Integer.parseInt(s);
        } else {
            DVCOINV2 = Integer.MIN_VALUE;
        }
    }

    protected final void initDVCOINV3(String s) {
        if (!s.trim().isEmpty()) {
            DVCOINV3 = Short.parseShort(s);
        } else {
            DVCOINV3 = Short.MIN_VALUE;
        }
    }

    protected final void initDVCRTARR(String s) {
        if (!s.trim().isEmpty()) {
            DVCRTARR = Byte.parseByte(s);
        } else {
            DVCRTARR = Byte.MIN_VALUE;
        }
    }

    protected final void initDVCTARR(String s) {
        if (!s.trim().isEmpty()) {
            DVCTARR = Byte.parseByte(s);
        } else {
            DVCTARR = Byte.MIN_VALUE;
        }
    }

    protected final void initDVDBINC1(String s) {
        if (!s.trim().isEmpty()) {
            DVDBINC1 = Double.parseDouble(s);
        } else {
            DVDBINC1 = Double.NaN;
        }
    }

    protected final void initDVDBINC2(String s) {
        if (!s.trim().isEmpty()) {
            DVDBINC2 = Double.parseDouble(s);
        } else {
            DVDBINC2 = Double.NaN;
        }
    }

    protected final void initDVDBINC3(String s) {
        if (!s.trim().isEmpty()) {
            DVDBINC3 = Double.parseDouble(s);
        } else {
            DVDBINC3 = Double.NaN;
        }
    }

    protected final void initDVDBINCALL(String s) {
        if (!s.trim().isEmpty()) {
            DVDBINCALL = Double.parseDouble(s);
        } else {
            DVDBINCALL = Double.NaN;
        }
    }

    protected final void initDVDBLUMP1(String s) {
        if (!s.trim().isEmpty()) {
            DVDBLUMP1 = Double.parseDouble(s);
        } else {
            DVDBLUMP1 = Double.NaN;
        }
    }

    protected final void initDVDBLUMP2(String s) {
        if (!s.trim().isEmpty()) {
            DVDBLUMP2 = Double.parseDouble(s);
        } else {
            DVDBLUMP2 = Double.NaN;
        }
    }

    protected final void initDVDBLUMP3(String s) {
        if (!s.trim().isEmpty()) {
            DVDBLUMP3 = Double.parseDouble(s);
        } else {
            DVDBLUMP3 = Double.NaN;
        }
    }

    protected final void initDVDBRWEALTHVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVDBRWEALTHVAL = Double.parseDouble(s);
        } else {
            DVDBRWEALTHVAL = Double.NaN;
        }
    }

    protected final void initDVDHPOWE2(String s) {
        if (!s.trim().isEmpty()) {
            DVDHPOWE2 = Short.parseShort(s);
        } else {
            DVDHPOWE2 = Short.MIN_VALUE;
        }
    }

    protected final void initDVDLOWE2(String s) {
        if (!s.trim().isEmpty()) {
            DVDLOWE2 = Integer.parseInt(s);
        } else {
            DVDLOWE2 = Integer.MIN_VALUE;
        }
    }

    protected final void initDVDLOWE3(String s) {
        if (!s.trim().isEmpty()) {
            DVDLOWE3 = Short.parseShort(s);
        } else {
            DVDLOWE3 = Short.MIN_VALUE;
        }
    }

    protected final void initDVDLOWE4(String s) {
        if (!s.trim().isEmpty()) {
            DVDLOWE4 = Short.parseShort(s);
        } else {
            DVDLOWE4 = Short.MIN_VALUE;
        }
    }

    protected final void initDVDLOWE5(String s) {
        if (!s.trim().isEmpty()) {
            DVDLOWE5 = Short.parseShort(s);
        } else {
            DVDLOWE5 = Short.MIN_VALUE;
        }
    }

    protected final void initDVDMOOWE2(String s) {
        if (!s.trim().isEmpty()) {
            DVDMOOWE2 = Short.parseShort(s);
        } else {
            DVDMOOWE2 = Short.MIN_VALUE;
        }
    }

    protected final void initDVELARR(String s) {
        if (!s.trim().isEmpty()) {
            DVELARR = Byte.parseByte(s);
        } else {
            DVELARR = Byte.MIN_VALUE;
        }
    }

    protected final void initDVFBONDV(String s) {
        if (!s.trim().isEmpty()) {
            DVFBONDV = Integer.parseInt(s);
        } else {
            DVFBONDV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFCINVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVFCINVAL = Integer.parseInt(s);
        } else {
            DVFCINVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFCOLLV(String s) {
        if (!s.trim().isEmpty()) {
            DVFCOLLV = Integer.parseInt(s);
        } else {
            DVFCOLLV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFEOPTV(String s) {
        if (!s.trim().isEmpty()) {
            DVFEOPTV = Integer.parseInt(s);
        } else {
            DVFEOPTV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFESHAV(String s) {
        if (!s.trim().isEmpty()) {
            DVFESHAV = Integer.parseInt(s);
        } else {
            DVFESHAV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFGLTFOV(String s) {
        if (!s.trim().isEmpty()) {
            DVFGLTFOV = Integer.parseInt(s);
        } else {
            DVFGLTFOV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFGLTUKV(String s) {
        if (!s.trim().isEmpty()) {
            DVFGLTUKV = Integer.parseInt(s);
        } else {
            DVFGLTUKV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFINFLV(String s) {
        if (!s.trim().isEmpty()) {
            DVFINFLV = Integer.parseInt(s);
        } else {
            DVFINFLV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFINFV(String s) {
        if (!s.trim().isEmpty()) {
            DVFINFV = Integer.parseInt(s);
        } else {
            DVFINFV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFINVOTV(String s) {
        if (!s.trim().isEmpty()) {
            DVFINVOTV = Integer.parseInt(s);
        } else {
            DVFINVOTV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFLFENV(String s) {
        if (!s.trim().isEmpty()) {
            DVFLFENV = Integer.parseInt(s);
        } else {
            DVFLFENV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFLFFSV(String s) {
        if (!s.trim().isEmpty()) {
            DVFLFFSV = Integer.parseInt(s);
        } else {
            DVFLFFSV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFLFSIV(String s) {
        if (!s.trim().isEmpty()) {
            DVFLFSIV = Integer.parseInt(s);
        } else {
            DVFLFSIV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFLFTEV(String s) {
        if (!s.trim().isEmpty()) {
            DVFLFTEV = Integer.parseInt(s);
        } else {
            DVFLFTEV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFNSVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVFNSVAL = Integer.parseInt(s);
        } else {
            DVFNSVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFSHOSV(String s) {
        if (!s.trim().isEmpty()) {
            DVFSHOSV = Integer.parseInt(s);
        } else {
            DVFSHOSV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFSHUKV(String s) {
        if (!s.trim().isEmpty()) {
            DVFSHUKV = Integer.parseInt(s);
        } else {
            DVFSHUKV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFSINVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVFSINVAL = Integer.parseInt(s);
        } else {
            DVFSINVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initDVGASARR(String s) {
        if (!s.trim().isEmpty()) {
            DVGASARR = Byte.parseByte(s);
        } else {
            DVGASARR = Byte.MIN_VALUE;
        }
    }

    protected final void initDVGRSPAY(String s) {
        if (!s.trim().isEmpty()) {
            DVGRSPAY = Double.parseDouble(s);
        } else {
            DVGRSPAY = Double.NaN;
        }
    }

    protected final void initDVHASAVC(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVHASAVC = false;
            } else {
                DVHASAVC = true;
            }
        }
    }

    protected final void initDVHASDB(String s) {
        if (!s.trim().isEmpty()) {
            DVHASDB = Byte.parseByte(s);
        } else {
            DVHASDB = Byte.MIN_VALUE;
        }
    }

    protected final void initDVHASDC(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                DVHASDC = false;
            } else {
                DVHASDC = true;
            }
        }
    }

    protected final void initDVHASPFCUR(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                DVHASPFCUR = false;
            } else {
                DVHASPFCUR = true;
            }
        }
    }

    protected final void initDVHASPFD(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                DVHASPFD = false;
            } else {
                DVHASPFD = true;
            }
        }
    }

    protected final void initDVHASPP(String s) {
        if (!s.trim().isEmpty()) {
            DVHASPP = Byte.parseByte(s);
        } else {
            DVHASPP = Byte.MIN_VALUE;
        }
    }

    protected final void initDVHPAR(String s) {
        if (!s.trim().isEmpty()) {
            DVHPAR = Byte.parseByte(s);
        } else {
            DVHPAR = Byte.MIN_VALUE;
        }
    }

    protected final void initDVIISAV(String s) {
        if (!s.trim().isEmpty()) {
            DVIISAV = Integer.parseInt(s);
        } else {
            DVIISAV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVILO3A(String s) {
        if (!s.trim().isEmpty()) {
            DVILO3A = Byte.parseByte(s);
        } else {
            DVILO3A = Byte.MIN_VALUE;
        }
    }

    protected final void initDVILO4A(String s) {
        if (!s.trim().isEmpty()) {
            DVILO4A = Byte.parseByte(s);
        } else {
            DVILO4A = Byte.MIN_VALUE;
        }
    }

    protected final void initDVJB12ML(String s) {
        if (!s.trim().isEmpty()) {
            DVJB12ML = Byte.parseByte(s);
        } else {
            DVJB12ML = Byte.MIN_VALUE;
        }
    }

    protected final void initDVKISAV(String s) {
        if (!s.trim().isEmpty()) {
            DVKISAV = Integer.parseInt(s);
        } else {
            DVKISAV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVMRDF(String s) {
        if (!s.trim().isEmpty()) {
            DVMRDF = Byte.parseByte(s);
        } else {
            DVMRDF = Byte.MIN_VALUE;
        }
    }

    protected final void initDVNETPAY(String s) {
        if (!s.trim().isEmpty()) {
            DVNETPAY = Double.parseDouble(s);
        } else {
            DVNETPAY = Double.NaN;
        }
    }

    protected final void initDVOTHARR(String s) {
        if (!s.trim().isEmpty()) {
            DVOTHARR = Byte.parseByte(s);
        } else {
            DVOTHARR = Byte.MIN_VALUE;
        }
    }

    protected final void initDVPAVCUV(String s) {
        if (!s.trim().isEmpty()) {
            DVPAVCUV = Double.parseDouble(s);
        } else {
            DVPAVCUV = Double.NaN;
        }
    }

    protected final void initDVPFCURVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVPFCURVAL = Double.parseDouble(s);
        } else {
            DVPFCURVAL = Double.NaN;
        }
    }

    protected final void initDVPFDDV(String s) {
        if (!s.trim().isEmpty()) {
            DVPFDDV = Integer.parseInt(s);
        } else {
            DVPFDDV = Integer.MIN_VALUE;
        }
    }

    protected final void initDVPINPVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVPINPVAL = Double.parseDouble(s);
        } else {
            DVPINPVAL = Double.NaN;
        }
    }

    protected final void initDVPPVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVPPVAL = Double.parseDouble(s);
        } else {
            DVPPVAL = Double.NaN;
        }
    }

    protected final void initDVRNTARR(String s) {
        if (!s.trim().isEmpty()) {
            DVRNTARR = Byte.parseByte(s);
        } else {
            DVRNTARR = Byte.MIN_VALUE;
        }
    }

    protected final void initDVSHCVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVSHCVAL = Double.parseDouble(s);
        } else {
            DVSHCVAL = Double.NaN;
        }
    }

    protected final void initDVSHODVAL2(String s) {
        if (!s.trim().isEmpty()) {
            DVSHODVAL2 = Double.parseDouble(s);
        } else {
            DVSHODVAL2 = Double.NaN;
        }
    }

    protected final void initDVSHODVAL3(String s) {
        if (!s.trim().isEmpty()) {
            DVSHODVAL3 = Short.parseShort(s);
        } else {
            DVSHODVAL3 = Short.MIN_VALUE;
        }
    }

    protected final void initDVSHSVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVSHSVAL = Double.parseDouble(s);
        } else {
            DVSHSVAL = Double.NaN;
        }
    }

    protected final void initDVSPEN(String s) {
        if (!s.trim().isEmpty()) {
            DVSPEN = Double.parseDouble(s);
        } else {
            DVSPEN = Double.NaN;
        }
    }

    protected final void initDVTAXARR(String s) {
        if (!s.trim().isEmpty()) {
            DVTAXARR = Byte.parseByte(s);
        } else {
            DVTAXARR = Byte.MIN_VALUE;
        }
    }

    protected final void initDVTELARR(String s) {
        if (!s.trim().isEmpty()) {
            DVTELARR = Byte.parseByte(s);
        } else {
            DVTELARR = Byte.MIN_VALUE;
        }
    }

    protected final void initDVVALDBLUM(String s) {
        if (!s.trim().isEmpty()) {
            DVVALDBLUM = Double.parseDouble(s);
        } else {
            DVVALDBLUM = Double.NaN;
        }
    }

    protected final void initDVVALDBT(String s) {
        if (!s.trim().isEmpty()) {
            DVVALDBT = Double.parseDouble(s);
        } else {
            DVVALDBT = Double.NaN;
        }
    }

    protected final void initDVVALDCOS(String s) {
        if (!s.trim().isEmpty()) {
            DVVALDCOS = Double.parseDouble(s);
        } else {
            DVVALDCOS = Double.NaN;
        }
    }

    protected final void initDVVALPBLUM(String s) {
        if (!s.trim().isEmpty()) {
            DVVALPBLUM = Double.parseDouble(s);
        } else {
            DVVALPBLUM = Double.NaN;
        }
    }

    protected final void initDVVATARR(String s) {
        if (!s.trim().isEmpty()) {
            DVVATARR = Byte.parseByte(s);
        } else {
            DVVATARR = Byte.MIN_VALUE;
        }
    }

    protected final void initDVWATARR(String s) {
        if (!s.trim().isEmpty()) {
            DVWATARR = Byte.parseByte(s);
        } else {
            DVWATARR = Byte.MIN_VALUE;
        }
    }

    protected final void initEDATTN1(String s) {
        if (!s.trim().isEmpty()) {
            EDATTN1 = Byte.parseByte(s);
        } else {
            EDATTN1 = Byte.MIN_VALUE;
        }
    }

    protected final void initEDATTN2(String s) {
        if (!s.trim().isEmpty()) {
            EDATTN2 = Byte.parseByte(s);
        } else {
            EDATTN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initEDATTN3(String s) {
        if (!s.trim().isEmpty()) {
            EDATTN3 = Byte.parseByte(s);
        } else {
            EDATTN3 = Byte.MIN_VALUE;
        }
    }

    protected final void initEDLEVEL(String s) {
        if (!s.trim().isEmpty()) {
            EDLEVEL = Byte.parseByte(s);
        } else {
            EDLEVEL = Byte.MIN_VALUE;
        }
    }

    protected final void initEMPN(String s) {
        if (!s.trim().isEmpty()) {
            EMPN = Byte.parseByte(s);
        } else {
            EMPN = Byte.MIN_VALUE;
        }
    }

    protected final void initEMPSTY(String s) {
        if (!s.trim().isEmpty()) {
            EMPSTY = Short.parseShort(s);
        } else {
            EMPSTY = Short.MIN_VALUE;
        }
    }

    protected final void initEMSHAR1(String s) {
        if (!s.trim().isEmpty()) {
            EMSHAR1 = Byte.parseByte(s);
        } else {
            EMSHAR1 = Byte.MIN_VALUE;
        }
    }

    protected final void initEMSHAR2(String s) {
        if (!s.trim().isEmpty()) {
            EMSHAR2 = Byte.parseByte(s);
        } else {
            EMSHAR2 = Byte.MIN_VALUE;
        }
    }

    protected final void initEMSHAR3(String s) {
        if (!s.trim().isEmpty()) {
            EMSHAR3 = Byte.parseByte(s);
        } else {
            EMSHAR3 = Byte.MIN_VALUE;
        }
    }

    protected final void initENROLL(String s) {
        if (!s.trim().isEmpty()) {
            ENROLL = Byte.parseByte(s);
        } else {
            ENROLL = Byte.MIN_VALUE;
        }
    }

    protected final void initEVERWK(String s) {
        if (!s.trim().isEmpty()) {
            EVERWK = Byte.parseByte(s);
        } else {
            EVERWK = Byte.MIN_VALUE;
        }
    }

    protected final void initFBONDTY1(String s) {
        if (!s.trim().isEmpty()) {
            FBONDTY1 = Byte.parseByte(s);
        } else {
            FBONDTY1 = Byte.MIN_VALUE;
        }
    }

    protected final void initFBONDTY2(String s) {
        if (!s.trim().isEmpty()) {
            FBONDTY2 = Byte.parseByte(s);
        } else {
            FBONDTY2 = Byte.MIN_VALUE;
        }
    }

    protected final void initFBONDTY3(String s) {
        if (!s.trim().isEmpty()) {
            FBONDTY3 = Byte.parseByte(s);
        } else {
            FBONDTY3 = Byte.MIN_VALUE;
        }
    }

    protected final void initFBONDV(String s) {
        if (!s.trim().isEmpty()) {
            FBONDV = Integer.parseInt(s);
        } else {
            FBONDV = Integer.MIN_VALUE;
        }
    }

    protected final void initFBONDVB(String s) {
        if (!s.trim().isEmpty()) {
            FBONDVB = Byte.parseByte(s);
        } else {
            FBONDVB = Byte.MIN_VALUE;
        }
    }

    protected final void initFBONDV_I(String s) {
        if (!s.trim().isEmpty()) {
            FBONDV_I = Integer.parseInt(s);
        } else {
            FBONDV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFBONDV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FBONDV_IFLAG = Byte.parseByte(s);
        } else {
            FBONDV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFCACSH(String s) {
        if (!s.trim().isEmpty()) {
            FCACSH = Byte.parseByte(s);
        } else {
            FCACSH = Byte.MIN_VALUE;
        }
    }

    protected final void initFCACSH_I(String s) {
        if (!s.trim().isEmpty()) {
            FCACSH_I = Byte.parseByte(s);
        } else {
            FCACSH_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFCACSH_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FCACSH_IFLAG = Byte.parseByte(s);
        } else {
            FCACSH_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFCINVAL(String s) {
        if (!s.trim().isEmpty()) {
            FCINVAL = Integer.parseInt(s);
        } else {
            FCINVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initFCINVAL_I(String s) {
        if (!s.trim().isEmpty()) {
            FCINVAL_I = Integer.parseInt(s);
        } else {
            FCINVAL_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFCINVAL_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FCINVAL_IFLAG = Byte.parseByte(s);
        } else {
            FCINVAL_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFCINVLB(String s) {
        if (!s.trim().isEmpty()) {
            FCINVLB = Byte.parseByte(s);
        } else {
            FCINVLB = Byte.MIN_VALUE;
        }
    }

    protected final void initFCISAB(String s) {
        if (!s.trim().isEmpty()) {
            FCISAB = Byte.parseByte(s);
        } else {
            FCISAB = Byte.MIN_VALUE;
        }
    }

    protected final void initFCISAV(String s) {
        if (!s.trim().isEmpty()) {
            FCISAV = Integer.parseInt(s);
        } else {
            FCISAV = Integer.MIN_VALUE;
        }
    }

    protected final void initFCISAV_I(String s) {
        if (!s.trim().isEmpty()) {
            FCISAV_I = Integer.parseInt(s);
        } else {
            FCISAV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFCISAV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FCISAV_IFLAG = Byte.parseByte(s);
        } else {
            FCISAV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFCNUMIN(String s) {
        if (!s.trim().isEmpty()) {
            FCNUMIN = Byte.parseByte(s);
        } else {
            FCNUMIN = Byte.MIN_VALUE;
        }
    }

    protected final void initFCNUMIN_I(String s) {
        if (!s.trim().isEmpty()) {
            FCNUMIN_I = Byte.parseByte(s);
        } else {
            FCNUMIN_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFCNUMIN_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FCNUMIN_IFLAG = Byte.parseByte(s);
        } else {
            FCNUMIN_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFCNUMSH(String s) {
        if (!s.trim().isEmpty()) {
            FCNUMSH = Byte.parseByte(s);
        } else {
            FCNUMSH = Byte.MIN_VALUE;
        }
    }

    protected final void initFCNUMSH_I(String s) {
        if (!s.trim().isEmpty()) {
            FCNUMSH_I = Byte.parseByte(s);
        } else {
            FCNUMSH_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFCNUMSH_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FCNUMSH_IFLAG = Byte.parseByte(s);
        } else {
            FCNUMSH_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFCOLLV(String s) {
        if (!s.trim().isEmpty()) {
            FCOLLV = Integer.parseInt(s);
        } else {
            FCOLLV = Integer.MIN_VALUE;
        }
    }

    protected final void initFCOLLVB(String s) {
        if (!s.trim().isEmpty()) {
            FCOLLVB = Byte.parseByte(s);
        } else {
            FCOLLVB = Byte.MIN_VALUE;
        }
    }

    protected final void initFCOLLV_I(String s) {
        if (!s.trim().isEmpty()) {
            FCOLLV_I = Integer.parseInt(s);
        } else {
            FCOLLV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFCOLLV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FCOLLV_IFLAG = Byte.parseByte(s);
        } else {
            FCOLLV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFCOVDIF(String s) {
        if (!s.trim().isEmpty()) {
            FCOVDIF = Byte.parseByte(s);
        } else {
            FCOVDIF = Byte.MIN_VALUE;
        }
    }

    protected final void initFCOVDIN(String s) {
        if (!s.trim().isEmpty()) {
            FCOVDIN = Byte.parseByte(s);
        } else {
            FCOVDIN = Byte.MIN_VALUE;
        }
    }

    protected final void initFCOVDIN_I(String s) {
        if (!s.trim().isEmpty()) {
            FCOVDIN_I = Byte.parseByte(s);
        } else {
            FCOVDIN_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFCOVDIN_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FCOVDIN_IFLAG = Byte.parseByte(s);
        } else {
            FCOVDIN_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFCOVDSH(String s) {
        if (!s.trim().isEmpty()) {
            FCOVDSH = Byte.parseByte(s);
        } else {
            FCOVDSH = Byte.MIN_VALUE;
        }
    }

    protected final void initFCOVDSH_I(String s) {
        if (!s.trim().isEmpty()) {
            FCOVDSH_I = Byte.parseByte(s);
        } else {
            FCOVDSH_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFCOVDSH_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FCOVDSH_IFLAG = Byte.parseByte(s);
        } else {
            FCOVDSH_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFCOVNIN(String s) {
        if (!s.trim().isEmpty()) {
            FCOVNIN = Byte.parseByte(s);
        } else {
            FCOVNIN = Byte.MIN_VALUE;
        }
    }

    protected final void initFCOVNIN_I(String s) {
        if (!s.trim().isEmpty()) {
            FCOVNIN_I = Byte.parseByte(s);
        } else {
            FCOVNIN_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFCOVNIN_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FCOVNIN_IFLAG = Byte.parseByte(s);
        } else {
            FCOVNIN_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFCOVNSH(String s) {
        if (!s.trim().isEmpty()) {
            FCOVNSH = Byte.parseByte(s);
        } else {
            FCOVNSH = Byte.MIN_VALUE;
        }
    }

    protected final void initFCOVNSH_I(String s) {
        if (!s.trim().isEmpty()) {
            FCOVNSH_I = Byte.parseByte(s);
        } else {
            FCOVNSH_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFCOVNSH_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FCOVNSH_IFLAG = Byte.parseByte(s);
        } else {
            FCOVNSH_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFCSHVAL(String s) {
        if (!s.trim().isEmpty()) {
            FCSHVAL = Integer.parseInt(s);
        } else {
            FCSHVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initFCSHVAL_I(String s) {
        if (!s.trim().isEmpty()) {
            FCSHVAL_I = Integer.parseInt(s);
        } else {
            FCSHVAL_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFCSHVAL_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FCSHVAL_IFLAG = Byte.parseByte(s);
        } else {
            FCSHVAL_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFCSHVLB(String s) {
        if (!s.trim().isEmpty()) {
            FCSHVLB = Byte.parseByte(s);
        } else {
            FCSHVLB = Byte.MIN_VALUE;
        }
    }

    protected final void initFCSUPPR(String s) {
        if (!s.trim().isEmpty()) {
            FCSUPPR = Byte.parseByte(s);
        } else {
            FCSUPPR = Byte.MIN_VALUE;
        }
    }

    protected final void initFEOPTV(String s) {
        if (!s.trim().isEmpty()) {
            FEOPTV = Integer.parseInt(s);
        } else {
            FEOPTV = Integer.MIN_VALUE;
        }
    }

    protected final void initFEOPTV_I(String s) {
        if (!s.trim().isEmpty()) {
            FEOPTV_I = Integer.parseInt(s);
        } else {
            FEOPTV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFEOPTV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FEOPTV_IFLAG = Byte.parseByte(s);
        } else {
            FEOPTV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFEOPVB(String s) {
        if (!s.trim().isEmpty()) {
            FEOPVB = Byte.parseByte(s);
        } else {
            FEOPVB = Byte.MIN_VALUE;
        }
    }

    protected final void initFESHA(String s) {
        if (!s.trim().isEmpty()) {
            FESHA = Byte.parseByte(s);
        } else {
            FESHA = Byte.MIN_VALUE;
        }
    }

    protected final void initFESHAV(String s) {
        if (!s.trim().isEmpty()) {
            FESHAV = Integer.parseInt(s);
        } else {
            FESHAV = Integer.MIN_VALUE;
        }
    }

    protected final void initFESHAV_I(String s) {
        if (!s.trim().isEmpty()) {
            FESHAV_I = Integer.parseInt(s);
        } else {
            FESHAV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFESHAV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FESHAV_IFLAG = Byte.parseByte(s);
        } else {
            FESHAV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFESHA_I(String s) {
        if (!s.trim().isEmpty()) {
            FESHA_I = Byte.parseByte(s);
        } else {
            FESHA_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFESHA_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FESHA_IFLAG = Byte.parseByte(s);
        } else {
            FESHA_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFESHVB(String s) {
        if (!s.trim().isEmpty()) {
            FESHVB = Byte.parseByte(s);
        } else {
            FESHVB = Byte.MIN_VALUE;
        }
    }

    protected final void initFGFOVB(String s) {
        if (!s.trim().isEmpty()) {
            FGFOVB = Byte.parseByte(s);
        } else {
            FGFOVB = Byte.MIN_VALUE;
        }
    }

    protected final void initFGILTS1(String s) {
        if (!s.trim().isEmpty()) {
            FGILTS1 = Byte.parseByte(s);
        } else {
            FGILTS1 = Byte.MIN_VALUE;
        }
    }

    protected final void initFGILTS1_I(String s) {
        if (!s.trim().isEmpty()) {
            FGILTS1_I = Byte.parseByte(s);
        } else {
            FGILTS1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFGILTS1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FGILTS1_IFLAG = Byte.parseByte(s);
        } else {
            FGILTS1_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFGILTS2(String s) {
        if (!s.trim().isEmpty()) {
            FGILTS2 = Byte.parseByte(s);
        } else {
            FGILTS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initFGILTS2_I(String s) {
        if (!s.trim().isEmpty()) {
            FGILTS2_I = Byte.parseByte(s);
        } else {
            FGILTS2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFGILTS2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FGILTS2_IFLAG = Byte.parseByte(s);
        } else {
            FGILTS2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFGILTS3(String s) {
        if (!s.trim().isEmpty()) {
            FGILTS3 = Byte.parseByte(s);
        } else {
            FGILTS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initFGILTS3_I(String s) {
        if (!s.trim().isEmpty()) {
            FGILTS3_I = Byte.parseByte(s);
        } else {
            FGILTS3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFGILTS3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FGILTS3_IFLAG = Byte.parseByte(s);
        } else {
            FGILTS3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFGILTS4(String s) {
        if (!s.trim().isEmpty()) {
            FGILTS4 = Byte.parseByte(s);
        } else {
            FGILTS4 = Byte.MIN_VALUE;
        }
    }

    protected final void initFGILTS4_I(String s) {
        if (!s.trim().isEmpty()) {
            FGILTS4_I = Byte.parseByte(s);
        } else {
            FGILTS4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFGILTS4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FGILTS4_IFLAG = Byte.parseByte(s);
        } else {
            FGILTS4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFGLTFOV(String s) {
        if (!s.trim().isEmpty()) {
            FGLTFOV = Integer.parseInt(s);
        } else {
            FGLTFOV = Integer.MIN_VALUE;
        }
    }

    protected final void initFGLTFOV_I(String s) {
        if (!s.trim().isEmpty()) {
            FGLTFOV_I = Integer.parseInt(s);
        } else {
            FGLTFOV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFGLTFOV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FGLTFOV_IFLAG = Byte.parseByte(s);
        } else {
            FGLTFOV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFGLTUKV(String s) {
        if (!s.trim().isEmpty()) {
            FGLTUKV = Integer.parseInt(s);
        } else {
            FGLTUKV = Integer.MIN_VALUE;
        }
    }

    protected final void initFGLTUKV_I(String s) {
        if (!s.trim().isEmpty()) {
            FGLTUKV_I = Integer.parseInt(s);
        } else {
            FGLTUKV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFGLTUKV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FGLTUKV_IFLAG = Byte.parseByte(s);
        } else {
            FGLTUKV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFGUKVB(String s) {
        if (!s.trim().isEmpty()) {
            FGUKVB = Byte.parseByte(s);
        } else {
            FGUKVB = Byte.MIN_VALUE;
        }
    }

    protected final void initFIISAB(String s) {
        if (!s.trim().isEmpty()) {
            FIISAB = Byte.parseByte(s);
        } else {
            FIISAB = Byte.MIN_VALUE;
        }
    }

    protected final void initFIISAV(String s) {
        if (!s.trim().isEmpty()) {
            FIISAV = Integer.parseInt(s);
        } else {
            FIISAV = Integer.MIN_VALUE;
        }
    }

    protected final void initFIISAV_I(String s) {
        if (!s.trim().isEmpty()) {
            FIISAV_I = Integer.parseInt(s);
        } else {
            FIISAV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFIISAV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FIISAV_IFLAG = Byte.parseByte(s);
        } else {
            FIISAV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINCVB(String s) {
        if (!s.trim().isEmpty()) {
            FINCVB = Byte.parseByte(s);
        } else {
            FINCVB = Byte.MIN_VALUE;
        }
    }

    protected final void initFINFLV(String s) {
        if (!s.trim().isEmpty()) {
            FINFLV = Integer.parseInt(s);
        } else {
            FINFLV = Integer.MIN_VALUE;
        }
    }

    protected final void initFINFLV_I(String s) {
        if (!s.trim().isEmpty()) {
            FINFLV_I = Integer.parseInt(s);
        } else {
            FINFLV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFINFLV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINFLV_IFLAG = Byte.parseByte(s);
        } else {
            FINFLV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINFSAV1(String s) {
        if (!s.trim().isEmpty()) {
            FINFSAV1 = Byte.parseByte(s);
        } else {
            FINFSAV1 = Byte.MIN_VALUE;
        }
    }

    protected final void initFINFSAV1_I(String s) {
        if (!s.trim().isEmpty()) {
            FINFSAV1_I = Byte.parseByte(s);
        } else {
            FINFSAV1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFINFSAV1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINFSAV1_IFLAG = Byte.parseByte(s);
        } else {
            FINFSAV1_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINFSAV2(String s) {
        if (!s.trim().isEmpty()) {
            FINFSAV2 = Byte.parseByte(s);
        } else {
            FINFSAV2 = Byte.MIN_VALUE;
        }
    }

    protected final void initFINFSAV2_I(String s) {
        if (!s.trim().isEmpty()) {
            FINFSAV2_I = Byte.parseByte(s);
        } else {
            FINFSAV2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFINFSAV2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINFSAV2_IFLAG = Byte.parseByte(s);
        } else {
            FINFSAV2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINFSAV3(String s) {
        if (!s.trim().isEmpty()) {
            FINFSAV3 = Byte.parseByte(s);
        } else {
            FINFSAV3 = Byte.MIN_VALUE;
        }
    }

    protected final void initFINFSAV3_I(String s) {
        if (!s.trim().isEmpty()) {
            FINFSAV3_I = Byte.parseByte(s);
        } else {
            FINFSAV3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFINFSAV3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINFSAV3_IFLAG = Byte.parseByte(s);
        } else {
            FINFSAV3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINFSAV4(String s) {
        if (!s.trim().isEmpty()) {
            FINFSAV4 = Byte.parseByte(s);
        } else {
            FINFSAV4 = Byte.MIN_VALUE;
        }
    }

    protected final void initFINFSAV4_I(String s) {
        if (!s.trim().isEmpty()) {
            FINFSAV4_I = Byte.parseByte(s);
        } else {
            FINFSAV4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFINFSAV4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINFSAV4_IFLAG = Byte.parseByte(s);
        } else {
            FINFSAV4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINFV(String s) {
        if (!s.trim().isEmpty()) {
            FINFV = Integer.parseInt(s);
        } else {
            FINFV = Integer.MIN_VALUE;
        }
    }

    protected final void initFINFVB(String s) {
        if (!s.trim().isEmpty()) {
            FINFVB = Byte.parseByte(s);
        } else {
            FINFVB = Byte.MIN_VALUE;
        }
    }

    protected final void initFINFV_I(String s) {
        if (!s.trim().isEmpty()) {
            FINFV_I = Integer.parseInt(s);
        } else {
            FINFV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFINFV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINFV_IFLAG = Byte.parseByte(s);
        } else {
            FINFV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINS(String s) {
        if (!s.trim().isEmpty()) {
            FINS = Byte.parseByte(s);
        } else {
            FINS = Byte.MIN_VALUE;
        }
    }

    protected final void initFINSV(String s) {
        if (!s.trim().isEmpty()) {
            FINSV = Integer.parseInt(s);
        } else {
            FINSV = Integer.MIN_VALUE;
        }
    }

    protected final void initFINSV_I(String s) {
        if (!s.trim().isEmpty()) {
            FINSV_I = Integer.parseInt(s);
        } else {
            FINSV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFINSV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINSV_IFLAG = Byte.parseByte(s);
        } else {
            FINSV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINS_I(String s) {
        if (!s.trim().isEmpty()) {
            FINS_I = Byte.parseByte(s);
        } else {
            FINS_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFINS_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINS_IFLAG = Byte.parseByte(s);
        } else {
            FINS_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVOTV(String s) {
        if (!s.trim().isEmpty()) {
            FINVOTV = Integer.parseInt(s);
        } else {
            FINVOTV = Integer.MIN_VALUE;
        }
    }

    protected final void initFINVOTV_I(String s) {
        if (!s.trim().isEmpty()) {
            FINVOTV_I = Integer.parseInt(s);
        } else {
            FINVOTV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFINVOTV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FINVOTV_IFLAG = Byte.parseByte(s);
        } else {
            FINVOTV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVOVB(String s) {
        if (!s.trim().isEmpty()) {
            FINVOVB = Byte.parseByte(s);
        } else {
            FINVOVB = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY01(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY01 = Byte.parseByte(s);
        } else {
            FINVTY01 = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY01_I(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY01_I = Byte.parseByte(s);
        } else {
            FINVTY01_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY02(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY02 = Byte.parseByte(s);
        } else {
            FINVTY02 = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY02_I(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY02_I = Byte.parseByte(s);
        } else {
            FINVTY02_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY03(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY03 = Byte.parseByte(s);
        } else {
            FINVTY03 = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY03_I(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY03_I = Byte.parseByte(s);
        } else {
            FINVTY03_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY04(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY04 = Byte.parseByte(s);
        } else {
            FINVTY04 = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY04_I(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY04_I = Byte.parseByte(s);
        } else {
            FINVTY04_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY05(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY05 = Byte.parseByte(s);
        } else {
            FINVTY05 = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY05_I(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY05_I = Byte.parseByte(s);
        } else {
            FINVTY05_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY06(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY06 = Byte.parseByte(s);
        } else {
            FINVTY06 = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY06_I(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY06_I = Byte.parseByte(s);
        } else {
            FINVTY06_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY07(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY07 = Byte.parseByte(s);
        } else {
            FINVTY07 = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY07_I(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY07_I = Byte.parseByte(s);
        } else {
            FINVTY07_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY08(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY08 = Byte.parseByte(s);
        } else {
            FINVTY08 = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY08_I(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY08_I = Byte.parseByte(s);
        } else {
            FINVTY08_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY09(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY09 = Byte.parseByte(s);
        } else {
            FINVTY09 = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY09_I(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY09_I = Byte.parseByte(s);
        } else {
            FINVTY09_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY10(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY10 = Byte.parseByte(s);
        } else {
            FINVTY10 = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY10_I(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY10_I = Byte.parseByte(s);
        } else {
            FINVTY10_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY11(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY11 = Byte.parseByte(s);
        } else {
            FINVTY11 = Byte.MIN_VALUE;
        }
    }

    protected final void initFINVTY11_I(String s) {
        if (!s.trim().isEmpty()) {
            FINVTY11_I = Byte.parseByte(s);
        } else {
            FINVTY11_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFISA1(String s) {
        if (!s.trim().isEmpty()) {
            FISA1 = Byte.parseByte(s);
        } else {
            FISA1 = Byte.MIN_VALUE;
        }
    }

    protected final void initFISA1_I(String s) {
        if (!s.trim().isEmpty()) {
            FISA1_I = Byte.parseByte(s);
        } else {
            FISA1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFISA1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FISA1_IFLAG = Byte.parseByte(s);
        } else {
            FISA1_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFISA2(String s) {
        if (!s.trim().isEmpty()) {
            FISA2 = Byte.parseByte(s);
        } else {
            FISA2 = Byte.MIN_VALUE;
        }
    }

    protected final void initFISA2_I(String s) {
        if (!s.trim().isEmpty()) {
            FISA2_I = Byte.parseByte(s);
        } else {
            FISA2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFISA2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FISA2_IFLAG = Byte.parseByte(s);
        } else {
            FISA2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFKISAB(String s) {
        if (!s.trim().isEmpty()) {
            FKISAB = Byte.parseByte(s);
        } else {
            FKISAB = Byte.MIN_VALUE;
        }
    }

    protected final void initFKISAV(String s) {
        if (!s.trim().isEmpty()) {
            FKISAV = Integer.parseInt(s);
        } else {
            FKISAV = Integer.MIN_VALUE;
        }
    }

    protected final void initFKISAV_I(String s) {
        if (!s.trim().isEmpty()) {
            FKISAV_I = Integer.parseInt(s);
        } else {
            FKISAV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFKISAV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FKISAV_IFLAG = Byte.parseByte(s);
        } else {
            FKISAV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFLFENV(String s) {
        if (!s.trim().isEmpty()) {
            FLFENV = Integer.parseInt(s);
        } else {
            FLFENV = Integer.MIN_VALUE;
        }
    }

    protected final void initFLFENVB(String s) {
        if (!s.trim().isEmpty()) {
            FLFENVB = Byte.parseByte(s);
        } else {
            FLFENVB = Byte.MIN_VALUE;
        }
    }

    protected final void initFLFENV_I(String s) {
        if (!s.trim().isEmpty()) {
            FLFENV_I = Integer.parseInt(s);
        } else {
            FLFENV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFLFENV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FLFENV_IFLAG = Byte.parseByte(s);
        } else {
            FLFENV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFLFFSV(String s) {
        if (!s.trim().isEmpty()) {
            FLFFSV = Integer.parseInt(s);
        } else {
            FLFFSV = Integer.MIN_VALUE;
        }
    }

    protected final void initFLFFSVB(String s) {
        if (!s.trim().isEmpty()) {
            FLFFSVB = Byte.parseByte(s);
        } else {
            FLFFSVB = Byte.MIN_VALUE;
        }
    }

    protected final void initFLFFSV_I(String s) {
        if (!s.trim().isEmpty()) {
            FLFFSV_I = Integer.parseInt(s);
        } else {
            FLFFSV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFLFFSV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FLFFSV_IFLAG = Byte.parseByte(s);
        } else {
            FLFFSV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFLFSIV(String s) {
        if (!s.trim().isEmpty()) {
            FLFSIV = Integer.parseInt(s);
        } else {
            FLFSIV = Integer.MIN_VALUE;
        }
    }

    protected final void initFLFSIVB(String s) {
        if (!s.trim().isEmpty()) {
            FLFSIVB = Byte.parseByte(s);
        } else {
            FLFSIVB = Byte.MIN_VALUE;
        }
    }

    protected final void initFLFSIV_I(String s) {
        if (!s.trim().isEmpty()) {
            FLFSIV_I = Integer.parseInt(s);
        } else {
            FLFSIV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFLFSIV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FLFSIV_IFLAG = Byte.parseByte(s);
        } else {
            FLFSIV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFLFTEV(String s) {
        if (!s.trim().isEmpty()) {
            FLFTEV = Integer.parseInt(s);
        } else {
            FLFTEV = Integer.MIN_VALUE;
        }
    }

    protected final void initFLFTEVB(String s) {
        if (!s.trim().isEmpty()) {
            FLFTEVB = Byte.parseByte(s);
        } else {
            FLFTEVB = Byte.MIN_VALUE;
        }
    }

    protected final void initFLFTEV_I(String s) {
        if (!s.trim().isEmpty()) {
            FLFTEV_I = Integer.parseInt(s);
        } else {
            FLFTEV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFLFTEV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FLFTEV_IFLAG = Byte.parseByte(s);
        } else {
            FLFTEV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFLNOS1(String s) {
        if (!s.trim().isEmpty()) {
            FLNOS1 = Double.parseDouble(s);
        } else {
            FLNOS1 = Double.NaN;
        }
    }

    protected final void initFLNOS2(String s) {
        if (!s.trim().isEmpty()) {
            FLNOS2 = Double.parseDouble(s);
        } else {
            FLNOS2 = Double.NaN;
        }
    }

    protected final void initFLNOS3(String s) {
        if (!s.trim().isEmpty()) {
            FLNOS3 = Double.parseDouble(s);
        } else {
            FLNOS3 = Double.NaN;
        }
    }

    protected final void initFLNOS4(String s) {
        if (!s.trim().isEmpty()) {
            FLNOS4 = Double.parseDouble(s);
        } else {
            FLNOS4 = Double.NaN;
        }
    }

    protected final void initFLOANVB(String s) {
        if (!s.trim().isEmpty()) {
            FLOANVB = Byte.parseByte(s);
        } else {
            FLOANVB = Byte.MIN_VALUE;
        }
    }

    protected final void initFLPROD1(String s) {
        if (!s.trim().isEmpty()) {
            FLPROD1 = Byte.parseByte(s);
        } else {
            FLPROD1 = Byte.MIN_VALUE;
        }
    }

    protected final void initFLPROD1_I(String s) {
        if (!s.trim().isEmpty()) {
            FLPROD1_I = Byte.parseByte(s);
        } else {
            FLPROD1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFLPROD1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FLPROD1_IFLAG = Byte.parseByte(s);
        } else {
            FLPROD1_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFLPROD2(String s) {
        if (!s.trim().isEmpty()) {
            FLPROD2 = Byte.parseByte(s);
        } else {
            FLPROD2 = Byte.MIN_VALUE;
        }
    }

    protected final void initFLPROD2_I(String s) {
        if (!s.trim().isEmpty()) {
            FLPROD2_I = Byte.parseByte(s);
        } else {
            FLPROD2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFLPROD2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FLPROD2_IFLAG = Byte.parseByte(s);
        } else {
            FLPROD2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFLPROD3(String s) {
        if (!s.trim().isEmpty()) {
            FLPROD3 = Byte.parseByte(s);
        } else {
            FLPROD3 = Byte.MIN_VALUE;
        }
    }

    protected final void initFLPROD3_I(String s) {
        if (!s.trim().isEmpty()) {
            FLPROD3_I = Byte.parseByte(s);
        } else {
            FLPROD3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFLPROD3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FLPROD3_IFLAG = Byte.parseByte(s);
        } else {
            FLPROD3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFLPROD4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                FLPROD4 = false;
            } else {
                FLPROD4 = true;
            }
        }
    }

    protected final void initFLPROD4_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                FLPROD4_I = false;
            } else {
                FLPROD4_I = true;
            }
        }
    }

    protected final void initFLPROD4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FLPROD4_IFLAG = Byte.parseByte(s);
        } else {
            FLPROD4_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFNSAV1(String s) {
        if (!s.trim().isEmpty()) {
            FNSAV1 = Byte.parseByte(s);
        } else {
            FNSAV1 = Byte.MIN_VALUE;
        }
    }

    protected final void initFNSAV2(String s) {
        if (!s.trim().isEmpty()) {
            FNSAV2 = Byte.parseByte(s);
        } else {
            FNSAV2 = Byte.MIN_VALUE;
        }
    }

    protected final void initFNSAV3(String s) {
        if (!s.trim().isEmpty()) {
            FNSAV3 = Byte.parseByte(s);
        } else {
            FNSAV3 = Byte.MIN_VALUE;
        }
    }

    protected final void initFNSAV4(String s) {
        if (!s.trim().isEmpty()) {
            FNSAV4 = Byte.parseByte(s);
        } else {
            FNSAV4 = Byte.MIN_VALUE;
        }
    }

    protected final void initFNSVAL_I(String s) {
        if (!s.trim().isEmpty()) {
            FNSVAL_I = Integer.parseInt(s);
        } else {
            FNSVAL_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFNSVAL_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FNSVAL_IFLAG = Byte.parseByte(s);
        } else {
            FNSVAL_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFNSVB(String s) {
        if (!s.trim().isEmpty()) {
            FNSVB = Byte.parseByte(s);
        } else {
            FNSVB = Byte.MIN_VALUE;
        }
    }

    protected final void initFSACSH(String s) {
        if (!s.trim().isEmpty()) {
            FSACSH = Byte.parseByte(s);
        } else {
            FSACSH = Byte.MIN_VALUE;
        }
    }

    protected final void initFSACSH_I(String s) {
        if (!s.trim().isEmpty()) {
            FSACSH_I = Byte.parseByte(s);
        } else {
            FSACSH_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFSACSH_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FSACSH_IFLAG = Byte.parseByte(s);
        } else {
            FSACSH_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFSHARE1(String s) {
        if (!s.trim().isEmpty()) {
            FSHARE1 = Byte.parseByte(s);
        } else {
            FSHARE1 = Byte.MIN_VALUE;
        }
    }

    protected final void initFSHARE1_I(String s) {
        if (!s.trim().isEmpty()) {
            FSHARE1_I = Byte.parseByte(s);
        } else {
            FSHARE1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFSHARE1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FSHARE1_IFLAG = Byte.parseByte(s);
        } else {
            FSHARE1_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFSHARE2(String s) {
        if (!s.trim().isEmpty()) {
            FSHARE2 = Byte.parseByte(s);
        } else {
            FSHARE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initFSHARE2_I(String s) {
        if (!s.trim().isEmpty()) {
            FSHARE2_I = Byte.parseByte(s);
        } else {
            FSHARE2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFSHARE2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FSHARE2_IFLAG = Byte.parseByte(s);
        } else {
            FSHARE2_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFSHARE3(String s) {
        if (!s.trim().isEmpty()) {
            FSHARE3 = Byte.parseByte(s);
        } else {
            FSHARE3 = Byte.MIN_VALUE;
        }
    }

    protected final void initFSHARE3_I(String s) {
        if (!s.trim().isEmpty()) {
            FSHARE3_I = Byte.parseByte(s);
        } else {
            FSHARE3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFSHARE3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FSHARE3_IFLAG = Byte.parseByte(s);
        } else {
            FSHARE3_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFSHOSV(String s) {
        if (!s.trim().isEmpty()) {
            FSHOSV = Integer.parseInt(s);
        } else {
            FSHOSV = Integer.MIN_VALUE;
        }
    }

    protected final void initFSHOSVB(String s) {
        if (!s.trim().isEmpty()) {
            FSHOSVB = Byte.parseByte(s);
        } else {
            FSHOSVB = Byte.MIN_VALUE;
        }
    }

    protected final void initFSHOSV_I(String s) {
        if (!s.trim().isEmpty()) {
            FSHOSV_I = Integer.parseInt(s);
        } else {
            FSHOSV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFSHOSV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FSHOSV_IFLAG = Byte.parseByte(s);
        } else {
            FSHOSV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFSHUKV(String s) {
        if (!s.trim().isEmpty()) {
            FSHUKV = Integer.parseInt(s);
        } else {
            FSHUKV = Integer.MIN_VALUE;
        }
    }

    protected final void initFSHUKVB(String s) {
        if (!s.trim().isEmpty()) {
            FSHUKVB = Byte.parseByte(s);
        } else {
            FSHUKVB = Byte.MIN_VALUE;
        }
    }

    protected final void initFSHUKV_I(String s) {
        if (!s.trim().isEmpty()) {
            FSHUKV_I = Integer.parseInt(s);
        } else {
            FSHUKV_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFSHUKV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FSHUKV_IFLAG = Byte.parseByte(s);
        } else {
            FSHUKV_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFSINVAL(String s) {
        if (!s.trim().isEmpty()) {
            FSINVAL = Integer.parseInt(s);
        } else {
            FSINVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initFSINVAL_I(String s) {
        if (!s.trim().isEmpty()) {
            FSINVAL_I = Integer.parseInt(s);
        } else {
            FSINVAL_I = Integer.MIN_VALUE;
        }
    }

    protected final void initFSINVAL_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FSINVAL_IFLAG = Byte.parseByte(s);
        } else {
            FSINVAL_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFSINVLB(String s) {
        if (!s.trim().isEmpty()) {
            FSINVLB = Byte.parseByte(s);
        } else {
            FSINVLB = Byte.MIN_VALUE;
        }
    }

    protected final void initFSNUMIN(String s) {
        if (!s.trim().isEmpty()) {
            FSNUMIN = Byte.parseByte(s);
        } else {
            FSNUMIN = Byte.MIN_VALUE;
        }
    }

    protected final void initFSNUMIN_I(String s) {
        if (!s.trim().isEmpty()) {
            FSNUMIN_I = Byte.parseByte(s);
        } else {
            FSNUMIN_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFSNUMIN_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FSNUMIN_IFLAG = Byte.parseByte(s);
        } else {
            FSNUMIN_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFSNUMSH(String s) {
        if (!s.trim().isEmpty()) {
            FSNUMSH = Byte.parseByte(s);
        } else {
            FSNUMSH = Byte.MIN_VALUE;
        }
    }

    protected final void initFSNUMSH_I(String s) {
        if (!s.trim().isEmpty()) {
            FSNUMSH_I = Byte.parseByte(s);
        } else {
            FSNUMSH_I = Byte.MIN_VALUE;
        }
    }

    protected final void initFSNUMSH_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FSNUMSH_IFLAG = Byte.parseByte(s);
        } else {
            FSNUMSH_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFSOSHAV(String s) {
        if (!s.trim().isEmpty()) {
            FSOSHAV = Byte.parseByte(s);
        } else {
            FSOSHAV = Byte.MIN_VALUE;
        }
    }

    protected final void initFSOSVLB(String s) {
        if (!s.trim().isEmpty()) {
            FSOSVLB = Byte.parseByte(s);
        } else {
            FSOSVLB = Byte.MIN_VALUE;
        }
    }

    protected final void initFSSHVAL(String s) {
        if (!s.trim().isEmpty()) {
            FSSHVAL = Integer.parseInt(s);
        } else {
            FSSHVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initFSSHVAL_I(String s) {
        if (!s.trim().isEmpty()) {
            FSSHVAL_I = Double.parseDouble(s);
        } else {
            FSSHVAL_I = Double.NaN;
        }
    }

    protected final void initFSSHVAL_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            FSSHVAL_IFLAG = Byte.parseByte(s);
        } else {
            FSSHVAL_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initFSSHVLB(String s) {
        if (!s.trim().isEmpty()) {
            FSSHVLB = Byte.parseByte(s);
        } else {
            FSSHVLB = Byte.MIN_VALUE;
        }
    }

    protected final void initFSSUPPR(String s) {
        if (!s.trim().isEmpty()) {
            FSSUPPR = Byte.parseByte(s);
        } else {
            FSSUPPR = Byte.MIN_VALUE;
        }
    }

    protected final void initFSTYPIN1(String s) {
        if (!s.trim().isEmpty()) {
            FSTYPIN1 = Byte.parseByte(s);
        } else {
            FSTYPIN1 = Byte.MIN_VALUE;
        }
    }

    protected final void initFSTYPIN2(String s) {
        if (!s.trim().isEmpty()) {
            FSTYPIN2 = Byte.parseByte(s);
        } else {
            FSTYPIN2 = Byte.MIN_VALUE;
        }
    }

    protected final void initFSTYPIN3(String s) {
        if (!s.trim().isEmpty()) {
            FSTYPIN3 = Byte.parseByte(s);
        } else {
            FSTYPIN3 = Byte.MIN_VALUE;
        }
    }

    protected final void initFSTYPSH1(String s) {
        if (!s.trim().isEmpty()) {
            FSTYPSH1 = Byte.parseByte(s);
        } else {
            FSTYPSH1 = Byte.MIN_VALUE;
        }
    }

    protected final void initFSTYPSH2(String s) {
        if (!s.trim().isEmpty()) {
            FSTYPSH2 = Byte.parseByte(s);
        } else {
            FSTYPSH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initFSTYPSH3(String s) {
        if (!s.trim().isEmpty()) {
            FSTYPSH3 = Byte.parseByte(s);
        } else {
            FSTYPSH3 = Byte.MIN_VALUE;
        }
    }

    protected final void initFSTYPSH4(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                FSTYPSH4 = false;
            } else {
                FSTYPSH4 = true;
            }
        }
    }

    protected final void initFTED(String s) {
        if (!s.trim().isEmpty()) {
            FTED = Byte.parseByte(s);
        } else {
            FTED = Byte.MIN_VALUE;
        }
    }

    protected final void initFTED19(String s) {
        if (!s.trim().isEmpty()) {
            FTED19 = Byte.parseByte(s);
        } else {
            FTED19 = Byte.MIN_VALUE;
        }
    }

    protected final void initFTPTWK(String s) {
        if (!s.trim().isEmpty()) {
            FTPTWK = Byte.parseByte(s);
        } else {
            FTPTWK = Byte.MIN_VALUE;
        }
    }

    protected final void initGRSESM(String s) {
        if (!s.trim().isEmpty()) {
            GRSESM = Byte.parseByte(s);
        } else {
            GRSESM = Byte.MIN_VALUE;
        }
    }

    protected final void initGRSESP(String s) {
        if (!s.trim().isEmpty()) {
            GRSESP = Byte.parseByte(s);
        } else {
            GRSESP = Byte.MIN_VALUE;
        }
    }

    protected final void initHASCHD(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                HASCHD = false;
            } else {
                HASCHD = true;
            }
        }
    }

    protected final void initHASDEP(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                HASDEP = false;
            } else {
                HASDEP = true;
            }
        }
    }

    protected final void initHASNDEP(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                HASNDEP = false;
            } else {
                HASNDEP = true;
            }
        }
    }

    protected final void initHOUSGDST(String s) {
        if (!s.trim().isEmpty()) {
            HOUSGDST = Integer.parseInt(s);
        } else {
            HOUSGDST = Integer.MIN_VALUE;
        }
    }

    protected final void initHPLFT2(String s) {
        if (!s.trim().isEmpty()) {
            HPLFT2 = Double.parseDouble(s);
        } else {
            HPLFT2 = Double.NaN;
        }
    }

    protected final void initHPOS1(String s) {
        if (!s.trim().isEmpty()) {
            HPOS1 = Double.parseDouble(s);
        } else {
            HPOS1 = Double.NaN;
        }
    }

    protected final void initHPOS2(String s) {
        if (!s.trim().isEmpty()) {
            HPOS2 = Double.parseDouble(s);
        } else {
            HPOS2 = Double.NaN;
        }
    }

    protected final void initIGDS1(String s) {
        if (!s.trim().isEmpty()) {
            IGDS1 = Byte.parseByte(s);
        } else {
            IGDS1 = Byte.MIN_VALUE;
        }
    }

    protected final void initIGDS10(String s) {
        if (!s.trim().isEmpty()) {
            IGDS10 = Byte.parseByte(s);
        } else {
            IGDS10 = Byte.MIN_VALUE;
        }
    }

    protected final void initIGDS11(String s) {
        if (!s.trim().isEmpty()) {
            IGDS11 = Byte.parseByte(s);
        } else {
            IGDS11 = Byte.MIN_VALUE;
        }
    }

    protected final void initIGDS15(String s) {
        if (!s.trim().isEmpty()) {
            IGDS15 = Byte.parseByte(s);
        } else {
            IGDS15 = Byte.MIN_VALUE;
        }
    }

    protected final void initIGDS2(String s) {
        if (!s.trim().isEmpty()) {
            IGDS2 = Byte.parseByte(s);
        } else {
            IGDS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initIGDS3(String s) {
        if (!s.trim().isEmpty()) {
            IGDS3 = Byte.parseByte(s);
        } else {
            IGDS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initIGDS4(String s) {
        if (!s.trim().isEmpty()) {
            IGDS4 = Byte.parseByte(s);
        } else {
            IGDS4 = Byte.MIN_VALUE;
        }
    }

    protected final void initIGDS5(String s) {
        if (!s.trim().isEmpty()) {
            IGDS5 = Byte.parseByte(s);
        } else {
            IGDS5 = Byte.MIN_VALUE;
        }
    }

    protected final void initIGDS8(String s) {
        if (!s.trim().isEmpty()) {
            IGDS8 = Byte.parseByte(s);
        } else {
            IGDS8 = Byte.MIN_VALUE;
        }
    }

    protected final void initIGDS9(String s) {
        if (!s.trim().isEmpty()) {
            IGDS9 = Byte.parseByte(s);
        } else {
            IGDS9 = Byte.MIN_VALUE;
        }
    }

    protected final void initIGFVALB(String s) {
        if (!s.trim().isEmpty()) {
            IGFVALB = Byte.parseByte(s);
        } else {
            IGFVALB = Byte.MIN_VALUE;
        }
    }

    protected final void initIHRCNUM(String s) {
        if (!s.trim().isEmpty()) {
            IHRCNUM = Byte.parseByte(s);
        } else {
            IHRCNUM = Byte.MIN_VALUE;
        }
    }

    protected final void initIHRECNT(String s) {
        if (!s.trim().isEmpty()) {
            IHRECNT = Byte.parseByte(s);
        } else {
            IHRECNT = Byte.MIN_VALUE;
        }
    }

    protected final void initIHSE1(String s) {
        if (!s.trim().isEmpty()) {
            IHSE1 = Byte.parseByte(s);
        } else {
            IHSE1 = Byte.MIN_VALUE;
        }
    }

    protected final void initIHSE2(String s) {
        if (!s.trim().isEmpty()) {
            IHSE2 = Byte.parseByte(s);
        } else {
            IHSE2 = Byte.MIN_VALUE;
        }
    }

    protected final void initIHSE7(String s) {
        if (!s.trim().isEmpty()) {
            IHSE7 = Byte.parseByte(s);
        } else {
            IHSE7 = Byte.MIN_VALUE;
        }
    }

    protected final void initILACB(String s) {
        if (!s.trim().isEmpty()) {
            ILACB = Byte.parseByte(s);
        } else {
            ILACB = Byte.MIN_VALUE;
        }
    }

    protected final void initILGIFT(String s) {
        if (!s.trim().isEmpty()) {
            ILGIFT = Byte.parseByte(s);
        } else {
            ILGIFT = Byte.MIN_VALUE;
        }
    }

    protected final void initILIFB(String s) {
        if (!s.trim().isEmpty()) {
            ILIFB = Byte.parseByte(s);
        } else {
            ILIFB = Byte.MIN_VALUE;
        }
    }

    protected final void initILINB(String s) {
        if (!s.trim().isEmpty()) {
            ILINB = Byte.parseByte(s);
        } else {
            ILINB = Byte.MIN_VALUE;
        }
    }

    protected final void initILLLIM(String s) {
        if (!s.trim().isEmpty()) {
            ILLLIM = Byte.parseByte(s);
        } else {
            ILLLIM = Byte.MIN_VALUE;
        }
    }

    protected final void initILOTB(String s) {
        if (!s.trim().isEmpty()) {
            ILOTB = Byte.parseByte(s);
        } else {
            ILOTB = Byte.MIN_VALUE;
        }
    }

    protected final void initILRDB(String s) {
        if (!s.trim().isEmpty()) {
            ILRDB = Byte.parseByte(s);
        } else {
            ILRDB = Byte.MIN_VALUE;
        }
    }

    protected final void initILUMP(String s) {
        if (!s.trim().isEmpty()) {
            ILUMP = Byte.parseByte(s);
        } else {
            ILUMP = Byte.MIN_VALUE;
        }
    }

    protected final void initILUMTY1(String s) {
        if (!s.trim().isEmpty()) {
            ILUMTY1 = Byte.parseByte(s);
        } else {
            ILUMTY1 = Byte.MIN_VALUE;
        }
    }

    protected final void initILUMTY2(String s) {
        if (!s.trim().isEmpty()) {
            ILUMTY2 = Byte.parseByte(s);
        } else {
            ILUMTY2 = Byte.MIN_VALUE;
        }
    }

    protected final void initILUMTY3(String s) {
        if (!s.trim().isEmpty()) {
            ILUMTY3 = Byte.parseByte(s);
        } else {
            ILUMTY3 = Byte.MIN_VALUE;
        }
    }

    protected final void initILUPB(String s) {
        if (!s.trim().isEmpty()) {
            ILUPB = Byte.parseByte(s);
        } else {
            ILUPB = Byte.MIN_VALUE;
        }
    }

    protected final void initILUPP(String s) {
        if (!s.trim().isEmpty()) {
            ILUPP = Integer.parseInt(s);
        } else {
            ILUPP = Integer.MIN_VALUE;
        }
    }

    protected final void initILWNB(String s) {
        if (!s.trim().isEmpty()) {
            ILWNB = Byte.parseByte(s);
        } else {
            ILWNB = Byte.MIN_VALUE;
        }
    }

    protected final void initIOUT1(String s) {
        if (!s.trim().isEmpty()) {
            IOUT1 = Byte.parseByte(s);
        } else {
            IOUT1 = Byte.MIN_VALUE;
        }
    }

    protected final void initISDEP(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                ISDEP = false;
            } else {
                ISDEP = true;
            }
        }
    }

    protected final void initISHRP(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                ISHRP = false;
            } else {
                ISHRP = true;
            }
        }
    }

    protected final void initISHRPPART(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                ISHRPPART = false;
            } else {
                ISHRPPART = true;
            }
        }
    }

    protected final void initISNDEP(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                ISNDEP = false;
            } else {
                ISNDEP = true;
            }
        }
    }

    protected final void initIVALB2(String s) {
        if (!s.trim().isEmpty()) {
            IVALB2 = Byte.parseByte(s);
        } else {
            IVALB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initIVALB3(String s) {
        if (!s.trim().isEmpty()) {
            IVALB3 = Byte.parseByte(s);
        } else {
            IVALB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initIWAT1(String s) {
        if (!s.trim().isEmpty()) {
            IWAT1 = Byte.parseByte(s);
        } else {
            IWAT1 = Byte.MIN_VALUE;
        }
    }

    protected final void initIWAT13(String s) {
        if (!s.trim().isEmpty()) {
            IWAT13 = Byte.parseByte(s);
        } else {
            IWAT13 = Byte.MIN_VALUE;
        }
    }

    protected final void initIWAT2(String s) {
        if (!s.trim().isEmpty()) {
            IWAT2 = Byte.parseByte(s);
        } else {
            IWAT2 = Byte.MIN_VALUE;
        }
    }

    protected final void initIWAT3(String s) {
        if (!s.trim().isEmpty()) {
            IWAT3 = Byte.parseByte(s);
        } else {
            IWAT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initIWAT4(String s) {
        if (!s.trim().isEmpty()) {
            IWAT4 = Byte.parseByte(s);
        } else {
            IWAT4 = Byte.MIN_VALUE;
        }
    }

    protected final void initIWAT5(String s) {
        if (!s.trim().isEmpty()) {
            IWAT5 = Byte.parseByte(s);
        } else {
            IWAT5 = Byte.MIN_VALUE;
        }
    }

    protected final void initIWAT7(String s) {
        if (!s.trim().isEmpty()) {
            IWAT7 = Byte.parseByte(s);
        } else {
            IWAT7 = Byte.MIN_VALUE;
        }
    }

    protected final void initIWHO2(String s) {
        if (!s.trim().isEmpty()) {
            IWHO2 = Byte.parseByte(s);
        } else {
            IWHO2 = Byte.MIN_VALUE;
        }
    }

    protected final void initIWHO3(String s) {
        if (!s.trim().isEmpty()) {
            IWHO3 = Byte.parseByte(s);
        } else {
            IWHO3 = Byte.MIN_VALUE;
        }
    }

    protected final void initJBAWAY(String s) {
        if (!s.trim().isEmpty()) {
            JBAWAY = Byte.parseByte(s);
        } else {
            JBAWAY = Byte.MIN_VALUE;
        }
    }

    protected final void initJOBNO(String s) {
        if (!s.trim().isEmpty()) {
            JOBNO = Byte.parseByte(s);
        } else {
            JOBNO = Byte.MIN_VALUE;
        }
    }

    protected final void initLKTIME(String s) {
        if (!s.trim().isEmpty()) {
            LKTIME = Byte.parseByte(s);
        } else {
            LKTIME = Byte.MIN_VALUE;
        }
    }

    protected final void initLNLFT2(String s) {
        if (!s.trim().isEmpty()) {
            LNLFT2 = Double.parseDouble(s);
        } else {
            LNLFT2 = Double.NaN;
        }
    }

    protected final void initLNLFT3(String s) {
        if (!s.trim().isEmpty()) {
            LNLFT3 = Double.parseDouble(s);
        } else {
            LNLFT3 = Double.NaN;
        }
    }

    protected final void initLNLFT4(String s) {
        if (!s.trim().isEmpty()) {
            LNLFT4 = Double.parseDouble(s);
        } else {
            LNLFT4 = Double.NaN;
        }
    }

    protected final void initLNLFT5(String s) {
        if (!s.trim().isEmpty()) {
            LNLFT5 = Double.parseDouble(s);
        } else {
            LNLFT5 = Double.NaN;
        }
    }

    protected final void initLNOS1(String s) {
        if (!s.trim().isEmpty()) {
            LNOS1 = Double.parseDouble(s);
        } else {
            LNOS1 = Double.NaN;
        }
    }

    protected final void initLNOS2(String s) {
        if (!s.trim().isEmpty()) {
            LNOS2 = Double.parseDouble(s);
        } else {
            LNOS2 = Double.NaN;
        }
    }

    protected final void initLNOS3(String s) {
        if (!s.trim().isEmpty()) {
            LNOS3 = Double.parseDouble(s);
        } else {
            LNOS3 = Double.NaN;
        }
    }

    protected final void initLNOS4(String s) {
        if (!s.trim().isEmpty()) {
            LNOS4 = Double.parseDouble(s);
        } else {
            LNOS4 = Double.NaN;
        }
    }

    protected final void initLNOS5(String s) {
        if (!s.trim().isEmpty()) {
            LNOS5 = Double.parseDouble(s);
        } else {
            LNOS5 = Double.NaN;
        }
    }

    protected final void initLOOKED(String s) {
        if (!s.trim().isEmpty()) {
            LOOKED = Byte.parseByte(s);
        } else {
            LOOKED = Byte.MIN_VALUE;
        }
    }

    protected final void initLSILL(String s) {
        if (!s.trim().isEmpty()) {
            LSILL = Byte.parseByte(s);
        } else {
            LSILL = Byte.MIN_VALUE;
        }
    }

    protected final void initMARBEF(String s) {
        if (!s.trim().isEmpty()) {
            MARBEF = Byte.parseByte(s);
        } else {
            MARBEF = Byte.MIN_VALUE;
        }
    }

    protected final void initMOLFT2(String s) {
        if (!s.trim().isEmpty()) {
            MOLFT2 = Double.parseDouble(s);
        } else {
            MOLFT2 = Double.NaN;
        }
    }

    protected final void initMONTH(String s) {
        if (!s.trim().isEmpty()) {
            MONTH = Byte.parseByte(s);
        } else {
            MONTH = Byte.MIN_VALUE;
        }
    }

    protected final void initMOOS1(String s) {
        if (!s.trim().isEmpty()) {
            MOOS1 = Double.parseDouble(s);
        } else {
            MOOS1 = Double.NaN;
        }
    }

    protected final void initMOOS2(String s) {
        if (!s.trim().isEmpty()) {
            MOOS2 = Double.parseDouble(s);
        } else {
            MOOS2 = Double.NaN;
        }
    }

    protected final void initNSSEC3(String s) {
        if (!s.trim().isEmpty()) {
            NSSEC3 = Byte.parseByte(s);
        } else {
            NSSEC3 = Byte.MIN_VALUE;
        }
    }

    protected final void initNSSEC5(String s) {
        if (!s.trim().isEmpty()) {
            NSSEC5 = Byte.parseByte(s);
        } else {
            NSSEC5 = Byte.MIN_VALUE;
        }
    }

    protected final void initNSSEC8(String s) {
        if (!s.trim().isEmpty()) {
            NSSEC8 = Double.parseDouble(s);
        } else {
            NSSEC8 = Double.NaN;
        }
    }

    protected final void initNSSECB(String s) {
        if (!s.trim().isEmpty()) {
            NSSECB = Double.parseDouble(s);
        } else {
            NSSECB = Double.NaN;
        }
    }

    protected final void initOCSVR1(String s) {
        if (!s.trim().isEmpty()) {
            OCSVR1 = Byte.parseByte(s);
        } else {
            OCSVR1 = Byte.MIN_VALUE;
        }
    }

    protected final void initOCSVR2(String s) {
        if (!s.trim().isEmpty()) {
            OCSVR2 = Byte.parseByte(s);
        } else {
            OCSVR2 = Byte.MIN_VALUE;
        }
    }

    protected final void initOCSVR3(String s) {
        if (!s.trim().isEmpty()) {
            OCSVR3 = Byte.parseByte(s);
        } else {
            OCSVR3 = Byte.MIN_VALUE;
        }
    }

    protected final void initOCSVR4(String s) {
        if (!s.trim().isEmpty()) {
            OCSVR4 = Byte.parseByte(s);
        } else {
            OCSVR4 = Byte.MIN_VALUE;
        }
    }

    protected final void initOCSVR5(String s) {
        if (!s.trim().isEmpty()) {
            OCSVR5 = Byte.parseByte(s);
        } else {
            OCSVR5 = Byte.MIN_VALUE;
        }
    }

    protected final void initOCSVR6(String s) {
        if (!s.trim().isEmpty()) {
            OCSVR6 = Byte.parseByte(s);
        } else {
            OCSVR6 = Byte.MIN_VALUE;
        }
    }

    protected final void initOCSVR7(String s) {
        if (!s.trim().isEmpty()) {
            OCSVR7 = Byte.parseByte(s);
        } else {
            OCSVR7 = Byte.MIN_VALUE;
        }
    }

    protected final void initOCSVR8(String s) {
        if (!s.trim().isEmpty()) {
            OCSVR8 = Byte.parseByte(s);
        } else {
            OCSVR8 = Byte.MIN_VALUE;
        }
    }

    protected final void initOINTEND(String s) {
        if (!s.trim().isEmpty()) {
            OINTEND = Byte.parseByte(s);
        } else {
            OINTEND = Byte.MIN_VALUE;
        }
    }

    protected final void initOLARGE(String s) {
        if (!s.trim().isEmpty()) {
            OLARGE = Byte.parseByte(s);
        } else {
            OLARGE = Byte.MIN_VALUE;
        }
    }

    protected final void initOLEFT(String s) {
        if (!s.trim().isEmpty()) {
            OLEFT = Byte.parseByte(s);
        } else {
            OLEFT = Byte.MIN_VALUE;
        }
    }

    protected final void initOLEFTDO(String s) {
        if (!s.trim().isEmpty()) {
            OLEFTDO = Byte.parseByte(s);
        } else {
            OLEFTDO = Byte.MIN_VALUE;
        }
    }

    protected final void initOLONG(String s) {
        if (!s.trim().isEmpty()) {
            OLONG = Byte.parseByte(s);
        } else {
            OLONG = Byte.MIN_VALUE;
        }
    }

    protected final void initOLONGYR(String s) {
        if (!s.trim().isEmpty()) {
            OLONGYR = Byte.parseByte(s);
        } else {
            OLONGYR = Byte.MIN_VALUE;
        }
    }

    protected final void initONETEN(String s) {
        if (!s.trim().isEmpty()) {
            ONETEN = Byte.parseByte(s);
        } else {
            ONETEN = Byte.MIN_VALUE;
        }
    }

    protected final void initOPENS01(String s) {
        if (!s.trim().isEmpty()) {
            OPENS01 = Byte.parseByte(s);
        } else {
            OPENS01 = Byte.MIN_VALUE;
        }
    }

    protected final void initOPENS02(String s) {
        if (!s.trim().isEmpty()) {
            OPENS02 = Byte.parseByte(s);
        } else {
            OPENS02 = Byte.MIN_VALUE;
        }
    }

    protected final void initOPENS03(String s) {
        if (!s.trim().isEmpty()) {
            OPENS03 = Byte.parseByte(s);
        } else {
            OPENS03 = Byte.MIN_VALUE;
        }
    }

    protected final void initOPENS04(String s) {
        if (!s.trim().isEmpty()) {
            OPENS04 = Byte.parseByte(s);
        } else {
            OPENS04 = Byte.MIN_VALUE;
        }
    }

    protected final void initOPENS05(String s) {
        if (!s.trim().isEmpty()) {
            OPENS05 = Byte.parseByte(s);
        } else {
            OPENS05 = Byte.MIN_VALUE;
        }
    }

    protected final void initOPENS06(String s) {
        if (!s.trim().isEmpty()) {
            OPENS06 = Byte.parseByte(s);
        } else {
            OPENS06 = Byte.MIN_VALUE;
        }
    }

    protected final void initOPENS07(String s) {
        if (!s.trim().isEmpty()) {
            OPENS07 = Byte.parseByte(s);
        } else {
            OPENS07 = Byte.MIN_VALUE;
        }
    }

    protected final void initOPENS08(String s) {
        if (!s.trim().isEmpty()) {
            OPENS08 = Byte.parseByte(s);
        } else {
            OPENS08 = Byte.MIN_VALUE;
        }
    }

    protected final void initORETINC(String s) {
        if (!s.trim().isEmpty()) {
            ORETINC = Byte.parseByte(s);
        } else {
            ORETINC = Byte.MIN_VALUE;
        }
    }

    protected final void initORISKA(String s) {
        if (!s.trim().isEmpty()) {
            ORISKA = Byte.parseByte(s);
        } else {
            ORISKA = Byte.MIN_VALUE;
        }
    }

    protected final void initORISKC(String s) {
        if (!s.trim().isEmpty()) {
            ORISKC = Byte.parseByte(s);
        } else {
            ORISKC = Byte.MIN_VALUE;
        }
    }

    protected final void initORUNDO01(String s) {
        if (!s.trim().isEmpty()) {
            ORUNDO01 = Byte.parseByte(s);
        } else {
            ORUNDO01 = Byte.MIN_VALUE;
        }
    }

    protected final void initORUNDO02(String s) {
        if (!s.trim().isEmpty()) {
            ORUNDO02 = Byte.parseByte(s);
        } else {
            ORUNDO02 = Byte.MIN_VALUE;
        }
    }

    protected final void initORUNDO03(String s) {
        if (!s.trim().isEmpty()) {
            ORUNDO03 = Byte.parseByte(s);
        } else {
            ORUNDO03 = Byte.MIN_VALUE;
        }
    }

    protected final void initORUNDO04(String s) {
        if (!s.trim().isEmpty()) {
            ORUNDO04 = Byte.parseByte(s);
        } else {
            ORUNDO04 = Byte.MIN_VALUE;
        }
    }

    protected final void initORUNDO05(String s) {
        if (!s.trim().isEmpty()) {
            ORUNDO05 = Byte.parseByte(s);
        } else {
            ORUNDO05 = Byte.MIN_VALUE;
        }
    }

    protected final void initORUNDO06(String s) {
        if (!s.trim().isEmpty()) {
            ORUNDO06 = Byte.parseByte(s);
        } else {
            ORUNDO06 = Byte.MIN_VALUE;
        }
    }

    protected final void initORUNDO07(String s) {
        if (!s.trim().isEmpty()) {
            ORUNDO07 = Byte.parseByte(s);
        } else {
            ORUNDO07 = Byte.MIN_VALUE;
        }
    }

    protected final void initORUNDO08(String s) {
        if (!s.trim().isEmpty()) {
            ORUNDO08 = Byte.parseByte(s);
        } else {
            ORUNDO08 = Byte.MIN_VALUE;
        }
    }

    protected final void initORUNOUT(String s) {
        if (!s.trim().isEmpty()) {
            ORUNOUT = Byte.parseByte(s);
        } else {
            ORUNOUT = Byte.MIN_VALUE;
        }
    }

    protected final void initOSITUAT(String s) {
        if (!s.trim().isEmpty()) {
            OSITUAT = Byte.parseByte(s);
        } else {
            OSITUAT = Byte.MIN_VALUE;
        }
    }

    protected final void initOSTANDL(String s) {
        if (!s.trim().isEmpty()) {
            OSTANDL = Byte.parseByte(s);
        } else {
            OSTANDL = Byte.MIN_VALUE;
        }
    }

    protected final void initOTHSRC1(String s) {
        if (!s.trim().isEmpty()) {
            OTHSRC1 = Byte.parseByte(s);
        } else {
            OTHSRC1 = Byte.MIN_VALUE;
        }
    }

    protected final void initOTHSRC1_I(String s) {
        if (!s.trim().isEmpty()) {
            OTHSRC1_I = Byte.parseByte(s);
        } else {
            OTHSRC1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initOTHSRC1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                OTHSRC1_IFLAG = false;
            } else {
                OTHSRC1_IFLAG = true;
            }
        }
    }

    protected final void initOTHSRC2(String s) {
        if (!s.trim().isEmpty()) {
            OTHSRC2 = Byte.parseByte(s);
        } else {
            OTHSRC2 = Byte.MIN_VALUE;
        }
    }

    protected final void initOTHSRC2_I(String s) {
        if (!s.trim().isEmpty()) {
            OTHSRC2_I = Byte.parseByte(s);
        } else {
            OTHSRC2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initOTHSRC2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                OTHSRC2_IFLAG = false;
            } else {
                OTHSRC2_IFLAG = true;
            }
        }
    }

    protected final void initOTHSRC3(String s) {
        if (!s.trim().isEmpty()) {
            OTHSRC3 = Byte.parseByte(s);
        } else {
            OTHSRC3 = Byte.MIN_VALUE;
        }
    }

    protected final void initOTHSRC3_I(String s) {
        if (!s.trim().isEmpty()) {
            OTHSRC3_I = Byte.parseByte(s);
        } else {
            OTHSRC3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initOTHSRC3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                OTHSRC3_IFLAG = false;
            } else {
                OTHSRC3_IFLAG = true;
            }
        }
    }

    protected final void initOTRUST01(String s) {
        if (!s.trim().isEmpty()) {
            OTRUST01 = Byte.parseByte(s);
        } else {
            OTRUST01 = Byte.MIN_VALUE;
        }
    }

    protected final void initOTRUST02(String s) {
        if (!s.trim().isEmpty()) {
            OTRUST02 = Byte.parseByte(s);
        } else {
            OTRUST02 = Byte.MIN_VALUE;
        }
    }

    protected final void initOTRUST03(String s) {
        if (!s.trim().isEmpty()) {
            OTRUST03 = Byte.parseByte(s);
        } else {
            OTRUST03 = Byte.MIN_VALUE;
        }
    }

    protected final void initOTRUST04(String s) {
        if (!s.trim().isEmpty()) {
            OTRUST04 = Byte.parseByte(s);
        } else {
            OTRUST04 = Byte.MIN_VALUE;
        }
    }

    protected final void initOTRUST05(String s) {
        if (!s.trim().isEmpty()) {
            OTRUST05 = Byte.parseByte(s);
        } else {
            OTRUST05 = Byte.MIN_VALUE;
        }
    }

    protected final void initOTRUST06(String s) {
        if (!s.trim().isEmpty()) {
            OTRUST06 = Byte.parseByte(s);
        } else {
            OTRUST06 = Byte.MIN_VALUE;
        }
    }

    protected final void initOTRUST07(String s) {
        if (!s.trim().isEmpty()) {
            OTRUST07 = Byte.parseByte(s);
        } else {
            OTRUST07 = Byte.MIN_VALUE;
        }
    }

    protected final void initOTRUST08(String s) {
        if (!s.trim().isEmpty()) {
            OTRUST08 = Byte.parseByte(s);
        } else {
            OTRUST08 = Byte.MIN_VALUE;
        }
    }

    protected final void initOTRUST09(String s) {
        if (!s.trim().isEmpty()) {
            OTRUST09 = Byte.parseByte(s);
        } else {
            OTRUST09 = Byte.MIN_VALUE;
        }
    }

    protected final void initOTRUST10(String s) {
        if (!s.trim().isEmpty()) {
            OTRUST10 = Byte.parseByte(s);
        } else {
            OTRUST10 = Byte.MIN_VALUE;
        }
    }

    protected final void initOTRUST11(String s) {
        if (!s.trim().isEmpty()) {
            OTRUST11 = Byte.parseByte(s);
        } else {
            OTRUST11 = Byte.MIN_VALUE;
        }
    }

    protected final void initOTRUST12(String s) {
        if (!s.trim().isEmpty()) {
            OTRUST12 = Byte.parseByte(s);
        } else {
            OTRUST12 = Byte.MIN_VALUE;
        }
    }

    protected final void initOTRUST13(String s) {
        if (!s.trim().isEmpty()) {
            OTRUST13 = Byte.parseByte(s);
        } else {
            OTRUST13 = Byte.MIN_VALUE;
        }
    }

    protected final void initOTRUST14(String s) {
        if (!s.trim().isEmpty()) {
            OTRUST14 = Byte.parseByte(s);
        } else {
            OTRUST14 = Byte.MIN_VALUE;
        }
    }

    protected final void initOUNDER(String s) {
        if (!s.trim().isEmpty()) {
            OUNDER = Byte.parseByte(s);
        } else {
            OUNDER = Byte.MIN_VALUE;
        }
    }

    protected final void initOWNBUS(String s) {
        if (!s.trim().isEmpty()) {
            OWNBUS = Byte.parseByte(s);
        } else {
            OWNBUS = Byte.MIN_VALUE;
        }
    }

    protected final void initPAGERET(String s) {
        if (!s.trim().isEmpty()) {
            PAGERET = Byte.parseByte(s);
        } else {
            PAGERET = Byte.MIN_VALUE;
        }
    }

    protected final void initPARTNER(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                PARTNER = false;
            } else {
                PARTNER = true;
            }
        }
    }

    protected final void initPARTNO(String s) {
        if (!s.trim().isEmpty()) {
            PARTNO = Byte.parseByte(s);
        } else {
            PARTNO = Byte.MIN_VALUE;
        }
    }

    protected final void initPAYBON(String s) {
        if (!s.trim().isEmpty()) {
            PAYBON = Byte.parseByte(s);
        } else {
            PAYBON = Byte.MIN_VALUE;
        }
    }

    protected final void initPAYESM(String s) {
        if (!s.trim().isEmpty()) {
            PAYESM = Byte.parseByte(s);
        } else {
            PAYESM = Byte.MIN_VALUE;
        }
    }

    protected final void initPAYESP(String s) {
        if (!s.trim().isEmpty()) {
            PAYESP = Byte.parseByte(s);
        } else {
            PAYESP = Byte.MIN_VALUE;
        }
    }

    protected final void initPAYINC1(String s) {
        if (!s.trim().isEmpty()) {
            PAYINC1 = Byte.parseByte(s);
        } else {
            PAYINC1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPAYINC2(String s) {
        if (!s.trim().isEmpty()) {
            PAYINC2 = Byte.parseByte(s);
        } else {
            PAYINC2 = Byte.MIN_VALUE;
        }
    }

    protected final void initPAYINC3(String s) {
        if (!s.trim().isEmpty()) {
            PAYINC3 = Byte.parseByte(s);
        } else {
            PAYINC3 = Byte.MIN_VALUE;
        }
    }

    protected final void initPAYINC4(String s) {
        if (!s.trim().isEmpty()) {
            PAYINC4 = Byte.parseByte(s);
        } else {
            PAYINC4 = Byte.MIN_VALUE;
        }
    }

    protected final void initPAYINC5(String s) {
        if (!s.trim().isEmpty()) {
            PAYINC5 = Byte.parseByte(s);
        } else {
            PAYINC5 = Byte.MIN_VALUE;
        }
    }

    protected final void initPAYINC6(String s) {
        if (!s.trim().isEmpty()) {
            PAYINC6 = Byte.parseByte(s);
        } else {
            PAYINC6 = Byte.MIN_VALUE;
        }
    }

    protected final void initPAYPER(String s) {
        if (!s.trim().isEmpty()) {
            PAYPER = Byte.parseByte(s);
        } else {
            PAYPER = Byte.MIN_VALUE;
        }
    }

    protected final void initPAYSLP(String s) {
        if (!s.trim().isEmpty()) {
            PAYSLP = Byte.parseByte(s);
        } else {
            PAYSLP = Byte.MIN_VALUE;
        }
    }

    protected final void initPEARLRS(String s) {
        if (!s.trim().isEmpty()) {
            PEARLRS = Byte.parseByte(s);
        } else {
            PEARLRS = Byte.MIN_VALUE;
        }
    }

    protected final void initPEMELG(String s) {
        if (!s.trim().isEmpty()) {
            PEMELG = Byte.parseByte(s);
        } else {
            PEMELG = Byte.MIN_VALUE;
        }
    }

    protected final void initPEMELG_I(String s) {
        if (!s.trim().isEmpty()) {
            PEMELG_I = Byte.parseByte(s);
        } else {
            PEMELG_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPEMELG_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            PEMELG_IFLAG = Byte.parseByte(s);
        } else {
            PEMELG_IFLAG = Byte.MIN_VALUE;
        }
    }

    protected final void initPEMMEM(String s) {
        if (!s.trim().isEmpty()) {
            PEMMEM = Byte.parseByte(s);
        } else {
            PEMMEM = Byte.MIN_VALUE;
        }
    }

    protected final void initPEMMEM_I(String s) {
        if (!s.trim().isEmpty()) {
            PEMMEM_I = Byte.parseByte(s);
        } else {
            PEMMEM_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPEMMEM_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PEMMEM_IFLAG = false;
            } else {
                PEMMEM_IFLAG = true;
            }
        }
    }

    protected final void initPEMOFF(String s) {
        if (!s.trim().isEmpty()) {
            PEMOFF = Byte.parseByte(s);
        } else {
            PEMOFF = Byte.MIN_VALUE;
        }
    }

    protected final void initPEMOFF_I(String s) {
        if (!s.trim().isEmpty()) {
            PEMOFF_I = Byte.parseByte(s);
        } else {
            PEMOFF_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPEMOFF_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PEMOFF_IFLAG = false;
            } else {
                PEMOFF_IFLAG = true;
            }
        }
    }

    protected final void initPERSONW1(String s) {
        if (!s.trim().isEmpty()) {
            PERSONW1 = Byte.parseByte(s);
        } else {
            PERSONW1 = Byte.MIN_VALUE;
        }
    }

    protected final void initPERSPROX(String s) {
        if (!s.trim().isEmpty()) {
            PERSPROX = Byte.parseByte(s);
        } else {
            PERSPROX = Byte.MIN_VALUE;
        }
    }

    protected final void initPEVERC(String s) {
        if (!s.trim().isEmpty()) {
            PEVERC = Byte.parseByte(s);
        } else {
            PEVERC = Byte.MIN_VALUE;
        }
    }

    protected final void initPEVERC_I(String s) {
        if (!s.trim().isEmpty()) {
            PEVERC_I = Byte.parseByte(s);
        } else {
            PEVERC_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPEVERC_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PEVERC_IFLAG = false;
            } else {
                PEVERC_IFLAG = true;
            }
        }
    }

    protected final void initPEVERNC(String s) {
        if (!s.trim().isEmpty()) {
            PEVERNC = Byte.parseByte(s);
        } else {
            PEVERNC = Byte.MIN_VALUE;
        }
    }

    protected final void initPEVERNC_I(String s) {
        if (!s.trim().isEmpty()) {
            PEVERNC_I = Byte.parseByte(s);
        } else {
            PEVERNC_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPEVERNC_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PEVERNC_IFLAG = false;
            } else {
                PEVERNC_IFLAG = true;
            }
        }
    }

    protected final void initPEXPRET(String s) {
        if (!s.trim().isEmpty()) {
            PEXPRET = Byte.parseByte(s);
        } else {
            PEXPRET = Byte.MIN_VALUE;
        }
    }

    protected final void initPFNUM(String s) {
        if (!s.trim().isEmpty()) {
            PFNUM = Byte.parseByte(s);
        } else {
            PFNUM = Byte.MIN_VALUE;
        }
    }

    protected final void initPFNUM_I(String s) {
        if (!s.trim().isEmpty()) {
            PFNUM_I = Byte.parseByte(s);
        } else {
            PFNUM_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPFNUM_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PFNUM_IFLAG = false;
            } else {
                PFNUM_IFLAG = true;
            }
        }
    }

    protected final void initPFULRET(String s) {
        if (!s.trim().isEmpty()) {
            PFULRET = Byte.parseByte(s);
        } else {
            PFULRET = Byte.MIN_VALUE;
        }
    }

    protected final void initPINCINP(String s) {
        if (!s.trim().isEmpty()) {
            PINCINP = Double.parseDouble(s);
        } else {
            PINCINP = Double.NaN;
        }
    }

    protected final void initPOCNMSC(String s) {
        if (!s.trim().isEmpty()) {
            POCNMSC = Byte.parseByte(s);
        } else {
            POCNMSC = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNMSC_I(String s) {
        if (!s.trim().isEmpty()) {
            POCNMSC_I = Byte.parseByte(s);
        } else {
            POCNMSC_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPOCNMSC_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                POCNMSC_IFLAG = false;
            } else {
                POCNMSC_IFLAG = true;
            }
        }
    }

    protected final void initPPRNMSC(String s) {
        if (!s.trim().isEmpty()) {
            PPRNMSC = Byte.parseByte(s);
        } else {
            PPRNMSC = Byte.MIN_VALUE;
        }
    }

    protected final void initPPRNMSC_I(String s) {
        if (!s.trim().isEmpty()) {
            PPRNMSC_I = Byte.parseByte(s);
        } else {
            PPRNMSC_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPPRNMSC_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PPRNMSC_IFLAG = false;
            } else {
                PPRNMSC_IFLAG = true;
            }
        }
    }

    protected final void initPPYSTP10(String s) {
        if (!s.trim().isEmpty()) {
            PPYSTP10 = Byte.parseByte(s);
        } else {
            PPYSTP10 = Byte.MIN_VALUE;
        }
    }

    protected final void initPRETAIN(String s) {
        if (!s.trim().isEmpty()) {
            PRETAIN = Byte.parseByte(s);
        } else {
            PRETAIN = Byte.MIN_VALUE;
        }
    }

    protected final void initPRETAIN_I(String s) {
        if (!s.trim().isEmpty()) {
            PRETAIN_I = Byte.parseByte(s);
        } else {
            PRETAIN_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPRETAIN_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PRETAIN_IFLAG = false;
            } else {
                PRETAIN_IFLAG = true;
            }
        }
    }

    protected final void initPSCHM_F(String s) {
        if (!s.trim().isEmpty()) {
            PSCHM_F = Byte.parseByte(s);
        } else {
            PSCHM_F = Byte.MIN_VALUE;
        }
    }

    protected final void initPSCHM_F_I(String s) {
        if (!s.trim().isEmpty()) {
            PSCHM_F_I = Byte.parseByte(s);
        } else {
            PSCHM_F_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPSCHM_F_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PSCHM_F_IFLAG = false;
            } else {
                PSCHM_F_IFLAG = true;
            }
        }
    }

    protected final void initPSCHM_S(String s) {
        if (!s.trim().isEmpty()) {
            PSCHM_S = Byte.parseByte(s);
        } else {
            PSCHM_S = Byte.MIN_VALUE;
        }
    }

    protected final void initPSCHM_S_I(String s) {
        if (!s.trim().isEmpty()) {
            PSCHM_S_I = Byte.parseByte(s);
        } else {
            PSCHM_S_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPSCHM_S_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PSCHM_S_IFLAG = false;
            } else {
                PSCHM_S_IFLAG = true;
            }
        }
    }

    protected final void initPSCHM_T(String s) {
        if (!s.trim().isEmpty()) {
            PSCHM_T = Byte.parseByte(s);
        } else {
            PSCHM_T = Byte.MIN_VALUE;
        }
    }

    protected final void initPSCHM_T_I(String s) {
        if (!s.trim().isEmpty()) {
            PSCHM_T_I = Byte.parseByte(s);
        } else {
            PSCHM_T_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPSCHM_T_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PSCHM_T_IFLAG = false;
            } else {
                PSCHM_T_IFLAG = true;
            }
        }
    }

    protected final void initPSIT(String s) {
        if (!s.trim().isEmpty()) {
            PSIT = Byte.parseByte(s);
        } else {
            PSIT = Byte.MIN_VALUE;
        }
    }

    protected final void initPSITF(String s) {
        if (!s.trim().isEmpty()) {
            PSITF = Byte.parseByte(s);
        } else {
            PSITF = Byte.MIN_VALUE;
        }
    }

    protected final void initPWEXPA(String s) {
        if (!s.trim().isEmpty()) {
            PWEXPA = Double.parseDouble(s);
        } else {
            PWEXPA = Double.NaN;
        }
    }

    protected final void initPWEXPA_I(String s) {
        if (!s.trim().isEmpty()) {
            PWEXPA_I = Integer.parseInt(s);
        } else {
            PWEXPA_I = Integer.MIN_VALUE;
        }
    }

    protected final void initPWEXPA_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PWEXPA_IFLAG = false;
            } else {
                PWEXPA_IFLAG = true;
            }
        }
    }

    protected final void initPWEXPH(String s) {
        if (!s.trim().isEmpty()) {
            PWEXPH = Byte.parseByte(s);
        } else {
            PWEXPH = Byte.MIN_VALUE;
        }
    }

    protected final void initPWEXPH_I(String s) {
        if (!s.trim().isEmpty()) {
            PWEXPH_I = Byte.parseByte(s);
        } else {
            PWEXPH_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPWEXPH_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PWEXPH_IFLAG = false;
            } else {
                PWEXPH_IFLAG = true;
            }
        }
    }

    protected final void initPWID(String s) {
        if (!s.trim().isEmpty()) {
            PWID = Byte.parseByte(s);
        } else {
            PWID = Byte.MIN_VALUE;
        }
    }

    protected final void initPWIDFUT(String s) {
        if (!s.trim().isEmpty()) {
            PWIDFUT = Byte.parseByte(s);
        } else {
            PWIDFUT = Byte.MIN_VALUE;
        }
    }

    protected final void initPWIDFUT_I(String s) {
        if (!s.trim().isEmpty()) {
            PWIDFUT_I = Byte.parseByte(s);
        } else {
            PWIDFUT_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPWIDFUT_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                PWIDFUT_IFLAG = false;
            } else {
                PWIDFUT_IFLAG = true;
            }
        }
    }

    protected final void initP_FLAG1(String s) {
        if (!s.trim().isEmpty()) {
            P_FLAG1 = Byte.parseByte(s);
        } else {
            P_FLAG1 = Byte.MIN_VALUE;
        }
    }

    protected final void initP_FLAG3(String s) {
        if (!s.trim().isEmpty()) {
            P_FLAG3 = Byte.parseByte(s);
        } else {
            P_FLAG3 = Byte.MIN_VALUE;
        }
    }

    protected final void initP_FLAG4(String s) {
        if (!s.trim().isEmpty()) {
            P_FLAG4 = Byte.parseByte(s);
        } else {
            P_FLAG4 = Byte.MIN_VALUE;
        }
    }

    protected final void initQHEALTH1(String s) {
        if (!s.trim().isEmpty()) {
            QHEALTH1 = Byte.parseByte(s);
        } else {
            QHEALTH1 = Byte.MIN_VALUE;
        }
    }

    protected final void initQUALCHK(String s) {
        if (!s.trim().isEmpty()) {
            QUALCHK = Byte.parseByte(s);
        } else {
            QUALCHK = Byte.MIN_VALUE;
        }
    }

    protected final void initREGLRPY1(String s) {
        if (!s.trim().isEmpty()) {
            REGLRPY1 = Byte.parseByte(s);
        } else {
            REGLRPY1 = Byte.MIN_VALUE;
        }
    }

    protected final void initREGLRPY2(String s) {
        if (!s.trim().isEmpty()) {
            REGLRPY2 = Byte.parseByte(s);
        } else {
            REGLRPY2 = Byte.MIN_VALUE;
        }
    }

    protected final void initRELBUS(String s) {
        if (!s.trim().isEmpty()) {
            RELBUS = Byte.parseByte(s);
        } else {
            RELBUS = Byte.MIN_VALUE;
        }
    }

    protected final void initRENTPAY(String s) {
        if (!s.trim().isEmpty()) {
            RENTPAY = Byte.parseByte(s);
        } else {
            RENTPAY = Byte.MIN_VALUE;
        }
    }

    protected final void initSCHEMEET(String s) {
        if (!s.trim().isEmpty()) {
            SCHEMEET = Byte.parseByte(s);
        } else {
            SCHEMEET = Byte.MIN_VALUE;
        }
    }

    protected final void initSEAMK(String s) {
        if (!s.trim().isEmpty()) {
            SEAMK = Byte.parseByte(s);
        } else {
            SEAMK = Byte.MIN_VALUE;
        }
    }

    protected final void initSEESM(String s) {
        if (!s.trim().isEmpty()) {
            SEESM = Byte.parseByte(s);
        } else {
            SEESM = Byte.MIN_VALUE;
        }
    }

    protected final void initSEESW(String s) {
        if (!s.trim().isEmpty()) {
            SEESW = Byte.parseByte(s);
        } else {
            SEESW = Byte.MIN_VALUE;
        }
    }

    protected final void initSELECTAD(String s) {
        if (!s.trim().isEmpty()) {
            SELECTAD = Byte.parseByte(s);
        } else {
            SELECTAD = Byte.MIN_VALUE;
        }
    }

    protected final void initSEMN(String s) {
        if (!s.trim().isEmpty()) {
            SEMN = Byte.parseByte(s);
        } else {
            SEMN = Byte.MIN_VALUE;
        }
    }

    protected final void initSEMPSTY(String s) {
        if (!s.trim().isEmpty()) {
            SEMPSTY = Short.parseShort(s);
        } else {
            SEMPSTY = Short.MIN_VALUE;
        }
    }

    protected final void initSEPEL(String s) {
        if (!s.trim().isEmpty()) {
            SEPEL = Byte.parseByte(s);
        } else {
            SEPEL = Byte.MIN_VALUE;
        }
    }

    protected final void initSEPER(String s) {
        if (!s.trim().isEmpty()) {
            SEPER = Byte.parseByte(s);
        } else {
            SEPER = Byte.MIN_VALUE;
        }
    }

    protected final void initSEX(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                SEX = false;
            } else {
                SEX = true;
            }
        }
    }

    protected final void initSINGPAR(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                SINGPAR = false;
            } else {
                SINGPAR = true;
            }
        }
    }

    protected final void initSJEMP1(String s) {
        if (!s.trim().isEmpty()) {
            SJEMP1 = Byte.parseByte(s);
        } else {
            SJEMP1 = Byte.MIN_VALUE;
        }
    }

    protected final void initSJEMP2(String s) {
        if (!s.trim().isEmpty()) {
            SJEMP2 = Byte.parseByte(s);
        } else {
            SJEMP2 = Byte.MIN_VALUE;
        }
    }

    protected final void initSJOB2(String s) {
        if (!s.trim().isEmpty()) {
            SJOB2 = Byte.parseByte(s);
        } else {
            SJOB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initSOLO(String s) {
        if (!s.trim().isEmpty()) {
            SOLO = Byte.parseByte(s);
        } else {
            SOLO = Byte.MIN_VALUE;
        }
    }

    protected final void initSTARTJ(String s) {
        if (!s.trim().isEmpty()) {
            STARTJ = Byte.parseByte(s);
        } else {
            STARTJ = Byte.MIN_VALUE;
        }
    }

    protected final void initSTAT(String s) {
        if (!s.trim().isEmpty()) {
            STAT = Byte.parseByte(s);
        } else {
            STAT = Byte.MIN_VALUE;
        }
    }

    protected final void initSTAT_I(String s) {
        if (!s.trim().isEmpty()) {
            STAT_I = Byte.parseByte(s);
        } else {
            STAT_I = Byte.MIN_VALUE;
        }
    }

    protected final void initSVISE(String s) {
        if (!s.trim().isEmpty()) {
            SVISE = Byte.parseByte(s);
        } else {
            SVISE = Byte.MIN_VALUE;
        }
    }

    protected final void initTBENEF(String s) {
        if (!s.trim().isEmpty()) {
            TBENEF = Byte.parseByte(s);
        } else {
            TBENEF = Byte.MIN_VALUE;
        }
    }

    protected final void initTBENNUM(String s) {
        if (!s.trim().isEmpty()) {
            TBENNUM = Byte.parseByte(s);
        } else {
            TBENNUM = Byte.MIN_VALUE;
        }
    }

    protected final void initTEA(String s) {
        if (!s.trim().isEmpty()) {
            TEA = Byte.parseByte(s);
        } else {
            TEA = Byte.MIN_VALUE;
        }
    }

    protected final void initTINTRO(String s) {
        if (!s.trim().isEmpty()) {
            TINTRO = Byte.parseByte(s);
        } else {
            TINTRO = Byte.MIN_VALUE;
        }
    }

    protected final void initTOTPEN(String s) {
        if (!s.trim().isEmpty()) {
            TOTPEN = Double.parseDouble(s);
        } else {
            TOTPEN = Double.NaN;
        }
    }

    protected final void initTSETT(String s) {
        if (!s.trim().isEmpty()) {
            TSETT = Byte.parseByte(s);
        } else {
            TSETT = Byte.MIN_VALUE;
        }
    }

    protected final void initTYPE(String s) {
        if (!s.trim().isEmpty()) {
            TYPE = Byte.parseByte(s);
        } else {
            TYPE = Byte.MIN_VALUE;
        }
    }

    protected final void initUNMTYP(String s) {
        if (!s.trim().isEmpty()) {
            UNMTYP = Byte.parseByte(s);
        } else {
            UNMTYP = Byte.MIN_VALUE;
        }
    }

    protected final void initUNUMBD(String s) {
        if (!s.trim().isEmpty()) {
            UNUMBD = Byte.parseByte(s);
        } else {
            UNUMBD = Byte.MIN_VALUE;
        }
    }

    protected final void initUNUMBD_I(String s) {
        if (!s.trim().isEmpty()) {
            UNUMBD_I = Byte.parseByte(s);
        } else {
            UNUMBD_I = Byte.MIN_VALUE;
        }
    }

    protected final void initUNUMBD_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                UNUMBD_IFLAG = false;
            } else {
                UNUMBD_IFLAG = true;
            }
        }
    }

    protected final void initUNUMHS(String s) {
        if (!s.trim().isEmpty()) {
            UNUMHS = Byte.parseByte(s);
        } else {
            UNUMHS = Byte.MIN_VALUE;
        }
    }

    protected final void initUNUMHS_I(String s) {
        if (!s.trim().isEmpty()) {
            UNUMHS_I = Byte.parseByte(s);
        } else {
            UNUMHS_I = Byte.MIN_VALUE;
        }
    }

    protected final void initUNUMHS_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                UNUMHS_IFLAG = false;
            } else {
                UNUMHS_IFLAG = true;
            }
        }
    }

    protected final void initUNUMLA(String s) {
        if (!s.trim().isEmpty()) {
            UNUMLA = Byte.parseByte(s);
        } else {
            UNUMLA = Byte.MIN_VALUE;
        }
    }

    protected final void initUNUMLA_I(String s) {
        if (!s.trim().isEmpty()) {
            UNUMLA_I = Byte.parseByte(s);
        } else {
            UNUMLA_I = Byte.MIN_VALUE;
        }
    }

    protected final void initUNUMLA_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                UNUMLA_IFLAG = false;
            } else {
                UNUMLA_IFLAG = true;
            }
        }
    }

    protected final void initUNUMOV(String s) {
        if (!s.trim().isEmpty()) {
            UNUMOV = Byte.parseByte(s);
        } else {
            UNUMOV = Byte.MIN_VALUE;
        }
    }

    protected final void initUNUMOV_I(String s) {
        if (!s.trim().isEmpty()) {
            UNUMOV_I = Byte.parseByte(s);
        } else {
            UNUMOV_I = Byte.MIN_VALUE;
        }
    }

    protected final void initUNUMOV_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                UNUMOV_IFLAG = false;
            } else {
                UNUMOV_IFLAG = true;
            }
        }
    }

    protected final void initUNUMRE(String s) {
        if (!s.trim().isEmpty()) {
            UNUMRE = Byte.parseByte(s);
        } else {
            UNUMRE = Byte.MIN_VALUE;
        }
    }

    protected final void initUNUMRE_I(String s) {
        if (!s.trim().isEmpty()) {
            UNUMRE_I = Byte.parseByte(s);
        } else {
            UNUMRE_I = Byte.MIN_VALUE;
        }
    }

    protected final void initUNUMRE_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                UNUMRE_IFLAG = false;
            } else {
                UNUMRE_IFLAG = true;
            }
        }
    }

    protected final void initUPROP1(String s) {
        if (!s.trim().isEmpty()) {
            UPROP1 = Byte.parseByte(s);
        } else {
            UPROP1 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPROP1_I(String s) {
        if (!s.trim().isEmpty()) {
            UPROP1_I = Byte.parseByte(s);
        } else {
            UPROP1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initUPROP2(String s) {
        if (!s.trim().isEmpty()) {
            UPROP2 = Byte.parseByte(s);
        } else {
            UPROP2 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPROP2_I(String s) {
        if (!s.trim().isEmpty()) {
            UPROP2_I = Byte.parseByte(s);
        } else {
            UPROP2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initUPROP3(String s) {
        if (!s.trim().isEmpty()) {
            UPROP3 = Byte.parseByte(s);
        } else {
            UPROP3 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPROP3_I(String s) {
        if (!s.trim().isEmpty()) {
            UPROP3_I = Byte.parseByte(s);
        } else {
            UPROP3_I = Byte.MIN_VALUE;
        }
    }

    protected final void initUPROP4(String s) {
        if (!s.trim().isEmpty()) {
            UPROP4 = Byte.parseByte(s);
        } else {
            UPROP4 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPROP4_I(String s) {
        if (!s.trim().isEmpty()) {
            UPROP4_I = Byte.parseByte(s);
        } else {
            UPROP4_I = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH1(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH1 = Byte.parseByte(s);
        } else {
            UPRSH1 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH2(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH2 = Byte.parseByte(s);
        } else {
            UPRSH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH3(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH3 = Byte.parseByte(s);
        } else {
            UPRSH3 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH4(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH4 = Byte.parseByte(s);
        } else {
            UPRSH4 = Byte.MIN_VALUE;
        }
    }

    protected final void initUPRSH5(String s) {
        if (!s.trim().isEmpty()) {
            UPRSH5 = Byte.parseByte(s);
        } else {
            UPRSH5 = Byte.MIN_VALUE;
        }
    }

    protected final void initWORKAGE(String s) {
        if (!s.trim().isEmpty()) {
            WORKAGE = Byte.parseByte(s);
        } else {
            WORKAGE = Byte.MIN_VALUE;
        }
    }

    protected final void initWRKING(String s) {
        if (!s.trim().isEmpty()) {
            WRKING = Byte.parseByte(s);
        } else {
            WRKING = Byte.MIN_VALUE;
        }
    }

    protected final void initXINSOL(String s) {
        if (!s.trim().isEmpty()) {
            XINSOL = Byte.parseByte(s);
        } else {
            XINSOL = Byte.MIN_VALUE;
        }
    }

    protected final void initXINTYP(String s) {
        if (!s.trim().isEmpty()) {
            XINTYP = Byte.parseByte(s);
        } else {
            XINTYP = Byte.MIN_VALUE;
        }
    }

    protected final void initYEAR(String s) {
        if (!s.trim().isEmpty()) {
            YEAR = Short.parseShort(s);
        } else {
            YEAR = Short.MIN_VALUE;
        }
    }

    protected final void initYINACT(String s) {
        if (!s.trim().isEmpty()) {
            YINACT = Byte.parseByte(s);
        } else {
            YINACT = Byte.MIN_VALUE;
        }
    }

    public byte getATTEND() {
        return ATTEND;
    }

    public String getBACCBEG2() {
        return BACCBEG2;
    }

    public String getBACCBEG3() {
        return BACCBEG3;
    }

    public byte getBACCSA2() {
        return BACCSA2;
    }

    public byte getBACCSA3() {
        return BACCSA3;
    }

    public byte getBACCSB2() {
        return BACCSB2;
    }

    public byte getBACCSB3() {
        return BACCSB3;
    }

    public int getBBEFORE2() {
        return BBEFORE2;
    }

    public int getBBEFORE3() {
        return BBEFORE3;
    }

    public int getBDEBTS2() {
        return BDEBTS2;
    }

    public int getBDEBTS3() {
        return BDEBTS3;
    }

    public byte getBDIRNI2() {
        return BDIRNI2;
    }

    public byte getBDIRNI3() {
        return BDIRNI3;
    }

    public byte getBDOCS2() {
        return BDOCS2;
    }

    public byte getBDOCS3() {
        return BDOCS3;
    }

    public byte getBEMPN2() {
        return BEMPN2;
    }

    public byte getBEMPN3() {
        return BEMPN3;
    }

    public byte getBFUND1() {
        return BFUND1;
    }

    public byte getBFUND10() {
        return BFUND10;
    }

    public byte getBFUND17() {
        return BFUND17;
    }

    public byte getBFUND2() {
        return BFUND2;
    }

    public byte getBFUND9() {
        return BFUND9;
    }

    public byte getBMOREBUS() {
        return BMOREBUS;
    }

    public byte getBNATINS2() {
        return BNATINS2;
    }

    public byte getBNATINS3() {
        return BNATINS3;
    }

    public byte getBONTAX() {
        return BONTAX;
    }

    public int getBOWED2() {
        return BOWED2;
    }

    public int getBOWED3() {
        return BOWED3;
    }

    public byte getBOWN2() {
        return BOWN2;
    }

    public byte getBOWN3() {
        return BOWN3;
    }

    public byte getBPART2() {
        return BPART2;
    }

    public byte getBPART3() {
        return BPART3;
    }

    public byte getBPAST() {
        return BPAST;
    }

    public int getBPROFIT2() {
        return BPROFIT2;
    }

    public int getBPROFIT3() {
        return BPROFIT3;
    }

    public byte getBPROPN2() {
        return BPROPN2;
    }

    public byte getBPROPN3() {
        return BPROPN3;
    }

    public byte getBRETIRE2() {
        return BRETIRE2;
    }

    public byte getBRETIRE3() {
        return BRETIRE3;
    }

    public byte getBSELLAB() {
        return BSELLAB;
    }

    public int getBSELLAM() {
        return BSELLAM;
    }

    public byte getBSELLTX() {
        return BSELLTX;
    }

    public short getBSELLYR() {
        return BSELLYR;
    }

    public byte getBSIZE2() {
        return BSIZE2;
    }

    public byte getBSIZE3() {
        return BSIZE3;
    }

    public byte getBSTART2() {
        return BSTART2;
    }

    public byte getBSTART3() {
        return BSTART3;
    }

    public byte getBTAX2() {
        return BTAX2;
    }

    public byte getBTAX3() {
        return BTAX3;
    }

    public byte getBTYPE2() {
        return BTYPE2;
    }

    public byte getBTYPE3() {
        return BTYPE3;
    }

    public int getBVAL2() {
        return BVAL2;
    }

    public int getBVAL3() {
        return BVAL3;
    }

    public byte getBVALB2() {
        return BVALB2;
    }

    public int getBWORTH() {
        return BWORTH;
    }

    public byte getBWORTHB() {
        return BWORTHB;
    }

    public short getBYEAR2() {
        return BYEAR2;
    }

    public short getBYEAR3() {
        return BYEAR3;
    }

    public byte getCACTF() {
        return CACTF;
    }

    public byte getCACTF_I() {
        return CACTF_I;
    }

    public byte getCACTF_IFLAG() {
        return CACTF_IFLAG;
    }

    public short getCACTV() {
        return CACTV;
    }

    public short getCACTV_I() {
        return CACTV_I;
    }

    public byte getCACTV_IFLAG() {
        return CACTV_IFLAG;
    }

    public byte getCASAV() {
        return CASAV;
    }

    public byte getCASAV_I() {
        return CASAV_I;
    }

    public byte getCASAV_IFLAG() {
        return CASAV_IFLAG;
    }

    public short getCASEW1() {
        return CASEW1;
    }

    public byte getCASVB() {
        return CASVB;
    }

    public int getCASVV() {
        return CASVV;
    }

    public int getCASVV_I() {
        return CASVV_I;
    }

    public byte getCASVV_IFLAG() {
        return CASVV_IFLAG;
    }

    public byte getCOURSE() {
        return COURSE;
    }

    public byte getDBURD() {
        return DBURD;
    }

    public byte getDBURDA() {
        return DBURDA;
    }

    public int getDCAMC2() {
        return DCAMC2;
    }

    public int getDCAMC3() {
        return DCAMC3;
    }

    public short getDCAMD2() {
        return DCAMD2;
    }

    public short getDCAMD3() {
        return DCAMD3;
    }

    public int getDCAMOS2() {
        return DCAMOS2;
    }

    public int getDCAMOS3() {
        return DCAMOS3;
    }

    public short getDCAMP2() {
        return DCAMP2;
    }

    public short getDCAMP3() {
        return DCAMP3;
    }

    public byte getDCANU() {
        return DCANU;
    }

    public byte getDCANY() {
        return DCANY;
    }

    public byte getDCCOS2() {
        return DCCOS2;
    }

    public byte getDCCOS3() {
        return DCCOS3;
    }

    public byte getDCCSP2() {
        return DCCSP2;
    }

    public byte getDCCSP3() {
        return DCCSP3;
    }

    public byte getDCESB2() {
        return DCESB2;
    }

    public byte getDCESB3() {
        return DCESB3;
    }

    public byte getDCINZ2() {
        return DCINZ2;
    }

    public byte getDCINZ3() {
        return DCINZ3;
    }

    public byte getDCNAM2() {
        return DCNAM2;
    }

    public byte getDCNAM3() {
        return DCNAM3;
    }

    public int getDCOINV2() {
        return DCOINV2;
    }

    public int getDCOINV2_I() {
        return DCOINV2_I;
    }

    public byte getDCOINV2_IFLAG() {
        return DCOINV2_IFLAG;
    }

    public short getDCOINV3() {
        return DCOINV3;
    }

    public short getDCOINV3_I() {
        return DCOINV3_I;
    }

    public byte getDCOINV3_IFLAG() {
        return DCOINV3_IFLAG;
    }

    public byte getDCOINVB2() {
        return DCOINVB2;
    }

    public byte getDCOINVB3() {
        return DCOINVB3;
    }

    public byte getDCONM1() {
        return DCONM1;
    }

    public byte getDCONM2() {
        return DCONM2;
    }

    public byte getDCONM3() {
        return DCONM3;
    }

    public byte getDCONM4() {
        return DCONM4;
    }

    public byte getDCONM5() {
        return DCONM5;
    }

    public byte getDCONM6() {
        return DCONM6;
    }

    public int getDCOSHV2() {
        return DCOSHV2;
    }

    public int getDCOSHV2_I() {
        return DCOSHV2_I;
    }

    public byte getDCOSHV2_IFLAG() {
        return DCOSHV2_IFLAG;
    }

    public short getDCOSHV3() {
        return DCOSHV3;
    }

    public byte getDCOSHVB2() {
        return DCOSHVB2;
    }

    public byte getDCPER2() {
        return DCPER2;
    }

    public byte getDCPER3() {
        return DCPER3;
    }

    public byte getDCREC2() {
        return DCREC2;
    }

    public byte getDCREC3() {
        return DCREC3;
    }

    public byte getDCRSP2() {
        return DCRSP2;
    }

    public byte getDCRSP3() {
        return DCRSP3;
    }

    public short getDHBAMT01() {
        return DHBAMT01;
    }

    public short getDHBAMT01_I() {
        return DHBAMT01_I;
    }

    public byte getDHBAMT01_IFLAG() {
        return DHBAMT01_IFLAG;
    }

    public short getDHBAMT02() {
        return DHBAMT02;
    }

    public short getDHBAMT02_I() {
        return DHBAMT02_I;
    }

    public byte getDHBAMT02_IFLAG() {
        return DHBAMT02_IFLAG;
    }

    public short getDHBAMT03() {
        return DHBAMT03;
    }

    public short getDHBAMT03_I() {
        return DHBAMT03_I;
    }

    public byte getDHBAMT03_IFLAG() {
        return DHBAMT03_IFLAG;
    }

    public short getDHBAMT04() {
        return DHBAMT04;
    }

    public short getDHBAMT04_I() {
        return DHBAMT04_I;
    }

    public byte getDHBAMT04_IFLAG() {
        return DHBAMT04_IFLAG;
    }

    public short getDHBAMT05() {
        return DHBAMT05;
    }

    public short getDHBAMT05_I() {
        return DHBAMT05_I;
    }

    public byte getDHBAMT05_IFLAG() {
        return DHBAMT05_IFLAG;
    }

    public short getDHBAMT06() {
        return DHBAMT06;
    }

    public short getDHBAMT06_I() {
        return DHBAMT06_I;
    }

    public byte getDHBAMT06_IFLAG() {
        return DHBAMT06_IFLAG;
    }

    public short getDHBAMT07() {
        return DHBAMT07;
    }

    public short getDHBAMT07_I() {
        return DHBAMT07_I;
    }

    public byte getDHBAMT07_IFLAG() {
        return DHBAMT07_IFLAG;
    }

    public short getDHBAMT08() {
        return DHBAMT08;
    }

    public short getDHBAMT08_I() {
        return DHBAMT08_I;
    }

    public byte getDHBAMT08_IFLAG() {
        return DHBAMT08_IFLAG;
    }

    public int getDHBAMT09() {
        return DHBAMT09;
    }

    public int getDHBAMT09_I() {
        return DHBAMT09_I;
    }

    public byte getDHBAMT09_IFLAG() {
        return DHBAMT09_IFLAG;
    }

    public short getDHBAMT10() {
        return DHBAMT10;
    }

    public short getDHBAMT10_I() {
        return DHBAMT10_I;
    }

    public byte getDHBAMT10_IFLAG() {
        return DHBAMT10_IFLAG;
    }

    public int getDHBAMT11() {
        return DHBAMT11;
    }

    public int getDHBAMT11_I() {
        return DHBAMT11_I;
    }

    public byte getDHBAMT11_IFLAG() {
        return DHBAMT11_IFLAG;
    }

    public byte getDHBANY01() {
        return DHBANY01;
    }

    public byte getDHBANY01_I() {
        return DHBANY01_I;
    }

    public byte getDHBANY01_IFLAG() {
        return DHBANY01_IFLAG;
    }

    public byte getDHBANY02() {
        return DHBANY02;
    }

    public byte getDHBANY02_I() {
        return DHBANY02_I;
    }

    public byte getDHBANY02_IFLAG() {
        return DHBANY02_IFLAG;
    }

    public byte getDHBANY03() {
        return DHBANY03;
    }

    public byte getDHBANY03_I() {
        return DHBANY03_I;
    }

    public byte getDHBANY03_IFLAG() {
        return DHBANY03_IFLAG;
    }

    public byte getDHBANY04() {
        return DHBANY04;
    }

    public byte getDHBANY04_I() {
        return DHBANY04_I;
    }

    public byte getDHBANY04_IFLAG() {
        return DHBANY04_IFLAG;
    }

    public byte getDHBANY05() {
        return DHBANY05;
    }

    public byte getDHBANY05_I() {
        return DHBANY05_I;
    }

    public byte getDHBANY05_IFLAG() {
        return DHBANY05_IFLAG;
    }

    public byte getDHBANY06() {
        return DHBANY06;
    }

    public byte getDHBANY06_I() {
        return DHBANY06_I;
    }

    public byte getDHBANY06_IFLAG() {
        return DHBANY06_IFLAG;
    }

    public byte getDHBANY07() {
        return DHBANY07;
    }

    public byte getDHBANY07_I() {
        return DHBANY07_I;
    }

    public byte getDHBANY07_IFLAG() {
        return DHBANY07_IFLAG;
    }

    public byte getDHBEST01() {
        return DHBEST01;
    }

    public byte getDHBEST02() {
        return DHBEST02;
    }

    public byte getDHBEST03() {
        return DHBEST03;
    }

    public byte getDHBEST04() {
        return DHBEST04;
    }

    public byte getDHBEST05() {
        return DHBEST05;
    }

    public byte getDHBEST06() {
        return DHBEST06;
    }

    public byte getDHBEST07() {
        return DHBEST07;
    }

    public byte getDHBEST08() {
        return DHBEST08;
    }

    public byte getDHBEST09() {
        return DHBEST09;
    }

    public byte getDHBEST10() {
        return DHBEST10;
    }

    public byte getDHBEST11() {
        return DHBEST11;
    }

    public byte getDHBFIX() {
        return DHBFIX;
    }

    public byte getDHPANY1() {
        return DHPANY1;
    }

    public byte getDHPANY1_I() {
        return DHPANY1_I;
    }

    public byte getDHPANY1_IFLAG() {
        return DHPANY1_IFLAG;
    }

    public byte getDHPANY2() {
        return DHPANY2;
    }

    public byte getDHPANY2_I() {
        return DHPANY2_I;
    }

    public byte getDHPANY2_IFLAG() {
        return DHPANY2_IFLAG;
    }

    public byte getDHPANY3() {
        return DHPANY3;
    }

    public byte getDHPANY3_I() {
        return DHPANY3_I;
    }

    public byte getDHPANY3_IFLAG() {
        return DHPANY3_IFLAG;
    }

    public byte getDHPBEH2() {
        return DHPBEH2;
    }

    public byte getDHPBEH2_I() {
        return DHPBEH2_I;
    }

    public byte getDHPBEH2_IFLAG() {
        return DHPBEH2_IFLAG;
    }

    public byte getDHPEST2() {
        return DHPEST2;
    }

    public short getDHPINS2() {
        return DHPINS2;
    }

    public short getDHPINS2_I() {
        return DHPINS2_I;
    }

    public byte getDHPINS2_IFLAG() {
        return DHPINS2_IFLAG;
    }

    public byte getDHPINT2() {
        return DHPINT2;
    }

    public byte getDHPNUM() {
        return DHPNUM;
    }

    public byte getDHPNUM_I() {
        return DHPNUM_I;
    }

    public byte getDHPNUM_IFLAG() {
        return DHPNUM_IFLAG;
    }

    public byte getDHPOFT2() {
        return DHPOFT2;
    }

    public byte getDHPOFT2_I() {
        return DHPOFT2_I;
    }

    public byte getDHPOFT2_IFLAG() {
        return DHPOFT2_IFLAG;
    }

    public short getDHPOWE2() {
        return DHPOWE2;
    }

    public short getDHPOWE2_I() {
        return DHPOWE2_I;
    }

    public byte getDHPOWE2_IFLAG() {
        return DHPOWE2_IFLAG;
    }

    public byte getDHPWEST2() {
        return DHPWEST2;
    }

    public byte getDHPWHNM2() {
        return DHPWHNM2;
    }

    public byte getDHPWHNM2_I() {
        return DHPWHNM2_I;
    }

    public byte getDHPWHNM2_IFLAG() {
        return DHPWHNM2_IFLAG;
    }

    public short getDHPWHNY2() {
        return DHPWHNY2;
    }

    public short getDHPWHNY2_I() {
        return DHPWHNY2_I;
    }

    public byte getDHPWHNY2_IFLAG() {
        return DHPWHNY2_IFLAG;
    }

    public byte getDISEVER() {
        return DISEVER;
    }

    public byte getDISTYPE1() {
        return DISTYPE1;
    }

    public byte getDISTYPE2() {
        return DISTYPE2;
    }

    public byte getDISTYPE3() {
        return DISTYPE3;
    }

    public byte getDISTYPE4() {
        return DISTYPE4;
    }

    public byte getDISTYPE5() {
        return DISTYPE5;
    }

    public byte getDISTYPE6() {
        return DISTYPE6;
    }

    public byte getDISTYPE7() {
        return DISTYPE7;
    }

    public byte getDISTYPE8() {
        return DISTYPE8;
    }

    public byte getDISTYPE9() {
        return DISTYPE9;
    }

    public byte getDLANY() {
        return DLANY;
    }

    public byte getDLANY_I() {
        return DLANY_I;
    }

    public byte getDLANY_IFLAG() {
        return DLANY_IFLAG;
    }

    public byte getDLBEH2() {
        return DLBEH2;
    }

    public byte getDLBEH2_I() {
        return DLBEH2_I;
    }

    public byte getDLBEH2_IFLAG() {
        return DLBEH2_IFLAG;
    }

    public byte getDLBEH3() {
        return DLBEH3;
    }

    public byte getDLBEH3_I() {
        return DLBEH3_I;
    }

    public byte getDLBEH3_IFLAG() {
        return DLBEH3_IFLAG;
    }

    public byte getDLBEH4() {
        return DLBEH4;
    }

    public byte getDLBEH4_I() {
        return DLBEH4_I;
    }

    public byte getDLBEH4_IFLAG() {
        return DLBEH4_IFLAG;
    }

    public byte getDLBEH5() {
        return DLBEH5;
    }

    public byte getDLBEH5_I() {
        return DLBEH5_I;
    }

    public byte getDLBEH5_IFLAG() {
        return DLBEH5_IFLAG;
    }

    public byte getDLEST2() {
        return DLEST2;
    }

    public byte getDLEST3() {
        return DLEST3;
    }

    public byte getDLEST4() {
        return DLEST4;
    }

    public short getDLINS2() {
        return DLINS2;
    }

    public double getDLINS2_I() {
        return DLINS2_I;
    }

    public byte getDLINS2_IFLAG() {
        return DLINS2_IFLAG;
    }

    public short getDLINS3() {
        return DLINS3;
    }

    public short getDLINS3_I() {
        return DLINS3_I;
    }

    public byte getDLINS3_IFLAG() {
        return DLINS3_IFLAG;
    }

    public short getDLINS4() {
        return DLINS4;
    }

    public double getDLINS4_I() {
        return DLINS4_I;
    }

    public byte getDLINS4_IFLAG() {
        return DLINS4_IFLAG;
    }

    public short getDLINS5() {
        return DLINS5;
    }

    public short getDLINS5_I() {
        return DLINS5_I;
    }

    public byte getDLINS5_IFLAG() {
        return DLINS5_IFLAG;
    }

    public byte getDLINT2() {
        return DLINT2;
    }

    public byte getDLINT3() {
        return DLINT3;
    }

    public byte getDLINT4() {
        return DLINT4;
    }

    public byte getDLINT5() {
        return DLINT5;
    }

    public byte getDLNUM() {
        return DLNUM;
    }

    public byte getDLNUM_I() {
        return DLNUM_I;
    }

    public byte getDLNUM_IFLAG() {
        return DLNUM_IFLAG;
    }

    public byte getDLOFT2() {
        return DLOFT2;
    }

    public byte getDLOFT2_I() {
        return DLOFT2_I;
    }

    public byte getDLOFT2_IFLAG() {
        return DLOFT2_IFLAG;
    }

    public byte getDLOFT3() {
        return DLOFT3;
    }

    public byte getDLOFT3_I() {
        return DLOFT3_I;
    }

    public byte getDLOFT3_IFLAG() {
        return DLOFT3_IFLAG;
    }

    public byte getDLOFT4() {
        return DLOFT4;
    }

    public byte getDLOFT4_I() {
        return DLOFT4_I;
    }

    public byte getDLOFT4_IFLAG() {
        return DLOFT4_IFLAG;
    }

    public byte getDLOFT5() {
        return DLOFT5;
    }

    public byte getDLOFT5_I() {
        return DLOFT5_I;
    }

    public byte getDLOFT5_IFLAG() {
        return DLOFT5_IFLAG;
    }

    public int getDLOWE2() {
        return DLOWE2;
    }

    public int getDLOWE2_I() {
        return DLOWE2_I;
    }

    public byte getDLOWE2_IFLAG() {
        return DLOWE2_IFLAG;
    }

    public short getDLOWE3() {
        return DLOWE3;
    }

    public short getDLOWE3_I() {
        return DLOWE3_I;
    }

    public byte getDLOWE3_IFLAG() {
        return DLOWE3_IFLAG;
    }

    public short getDLOWE4() {
        return DLOWE4;
    }

    public short getDLOWE4_I() {
        return DLOWE4_I;
    }

    public byte getDLOWE4_IFLAG() {
        return DLOWE4_IFLAG;
    }

    public short getDLOWE5() {
        return DLOWE5;
    }

    public short getDLOWE5_I() {
        return DLOWE5_I;
    }

    public byte getDLOWE5_IFLAG() {
        return DLOWE5_IFLAG;
    }

    public byte getDLSEC2() {
        return DLSEC2;
    }

    public byte getDLSEC3() {
        return DLSEC3;
    }

    public byte getDLSEC4() {
        return DLSEC4;
    }

    public byte getDLSEC5() {
        return DLSEC5;
    }

    public byte getDLTYPE2() {
        return DLTYPE2;
    }

    public byte getDLTYPE2_I() {
        return DLTYPE2_I;
    }

    public byte getDLTYPE2_IFLAG() {
        return DLTYPE2_IFLAG;
    }

    public byte getDLTYPE3() {
        return DLTYPE3;
    }

    public byte getDLTYPE3_I() {
        return DLTYPE3_I;
    }

    public byte getDLTYPE3_IFLAG() {
        return DLTYPE3_IFLAG;
    }

    public byte getDLTYPE4() {
        return DLTYPE4;
    }

    public byte getDLTYPE4_I() {
        return DLTYPE4_I;
    }

    public byte getDLTYPE4_IFLAG() {
        return DLTYPE4_IFLAG;
    }

    public byte getDLTYPE5() {
        return DLTYPE5;
    }

    public byte getDLTYPE5_I() {
        return DLTYPE5_I;
    }

    public byte getDLTYPE5_IFLAG() {
        return DLTYPE5_IFLAG;
    }

    public byte getDLWEST2() {
        return DLWEST2;
    }

    public byte getDLWEST3() {
        return DLWEST3;
    }

    public byte getDLWEST4() {
        return DLWEST4;
    }

    public byte getDLWEST5() {
        return DLWEST5;
    }

    public byte getDLWHNM2() {
        return DLWHNM2;
    }

    public byte getDLWHNM2_I() {
        return DLWHNM2_I;
    }

    public byte getDLWHNM2_IFLAG() {
        return DLWHNM2_IFLAG;
    }

    public byte getDLWHNM3() {
        return DLWHNM3;
    }

    public byte getDLWHNM3_I() {
        return DLWHNM3_I;
    }

    public byte getDLWHNM3_IFLAG() {
        return DLWHNM3_IFLAG;
    }

    public byte getDLWHNM4() {
        return DLWHNM4;
    }

    public byte getDLWHNM4_I() {
        return DLWHNM4_I;
    }

    public byte getDLWHNM4_IFLAG() {
        return DLWHNM4_IFLAG;
    }

    public byte getDLWHNM5() {
        return DLWHNM5;
    }

    public byte getDLWHNM5_I() {
        return DLWHNM5_I;
    }

    public byte getDLWHNM5_IFLAG() {
        return DLWHNM5_IFLAG;
    }

    public short getDLWHNY2() {
        return DLWHNY2;
    }

    public short getDLWHNY2_I() {
        return DLWHNY2_I;
    }

    public byte getDLWHNY2_IFLAG() {
        return DLWHNY2_IFLAG;
    }

    public short getDLWHNY3() {
        return DLWHNY3;
    }

    public short getDLWHNY3_I() {
        return DLWHNY3_I;
    }

    public byte getDLWHNY3_IFLAG() {
        return DLWHNY3_IFLAG;
    }

    public short getDLWHNY4() {
        return DLWHNY4;
    }

    public short getDLWHNY4_I() {
        return DLWHNY4_I;
    }

    public byte getDLWHNY4_IFLAG() {
        return DLWHNY4_IFLAG;
    }

    public short getDLWHNY5() {
        return DLWHNY5;
    }

    public short getDLWHNY5_I() {
        return DLWHNY5_I;
    }

    public byte getDLWHNY5_IFLAG() {
        return DLWHNY5_IFLAG;
    }

    public byte getDLWHY1() {
        return DLWHY1;
    }

    public byte getDLWHY10() {
        return DLWHY10;
    }

    public byte getDLWHY15() {
        return DLWHY15;
    }

    public byte getDLWHY16() {
        return DLWHY16;
    }

    public byte getDLWHY2() {
        return DLWHY2;
    }

    public byte getDLWHY22() {
        return DLWHY22;
    }

    public byte getDLWHY23() {
        return DLWHY23;
    }

    public byte getDLWHY3() {
        return DLWHY3;
    }

    public byte getDLWHY4() {
        return DLWHY4;
    }

    public byte getDLWHY5() {
        return DLWHY5;
    }

    public byte getDLWHY8() {
        return DLWHY8;
    }

    public byte getDLWHY9() {
        return DLWHY9;
    }

    public byte getDMOANY() {
        return DMOANY;
    }

    public byte getDMOANY_I() {
        return DMOANY_I;
    }

    public byte getDMOANY_IFLAG() {
        return DMOANY_IFLAG;
    }

    public byte getDMOBEH2() {
        return DMOBEH2;
    }

    public byte getDMOBEH2_I() {
        return DMOBEH2_I;
    }

    public byte getDMOBEH2_IFLAG() {
        return DMOBEH2_IFLAG;
    }

    public byte getDMOEST2() {
        return DMOEST2;
    }

    public short getDMOINS2() {
        return DMOINS2;
    }

    public short getDMOINS2_I() {
        return DMOINS2_I;
    }

    public byte getDMOINS2_IFLAG() {
        return DMOINS2_IFLAG;
    }

    public byte getDMOINT2() {
        return DMOINT2;
    }

    public byte getDMONUM() {
        return DMONUM;
    }

    public byte getDMONUM_I() {
        return DMONUM_I;
    }

    public byte getDMONUM_IFLAG() {
        return DMONUM_IFLAG;
    }

    public byte getDMOOFT2() {
        return DMOOFT2;
    }

    public byte getDMOOFT2_I() {
        return DMOOFT2_I;
    }

    public byte getDMOOFT2_IFLAG() {
        return DMOOFT2_IFLAG;
    }

    public short getDMOOWE2() {
        return DMOOWE2;
    }

    public short getDMOOWE2_I() {
        return DMOOWE2_I;
    }

    public byte getDMOOWE2_IFLAG() {
        return DMOOWE2_IFLAG;
    }

    public byte getDMOWEST2() {
        return DMOWEST2;
    }

    public byte getDMOWHNM2() {
        return DMOWHNM2;
    }

    public byte getDMOWHNM2_I() {
        return DMOWHNM2_I;
    }

    public byte getDMOWHNM2_IFLAG() {
        return DMOWHNM2_IFLAG;
    }

    public short getDMOWHNY2() {
        return DMOWHNY2;
    }

    public short getDMOWHNY2_I() {
        return DMOWHNY2_I;
    }

    public byte getDMOWHNY2_IFLAG() {
        return DMOWHNY2_IFLAG;
    }

    public short getDSAMC2() {
        return DSAMC2;
    }

    public short getDSAMC3() {
        return DSAMC3;
    }

    public short getDSAMD2() {
        return DSAMD2;
    }

    public short getDSAMD3() {
        return DSAMD3;
    }

    public short getDSAMOS2() {
        return DSAMOS2;
    }

    public short getDSAMOS3() {
        return DSAMOS3;
    }

    public short getDSAMP2() {
        return DSAMP2;
    }

    public short getDSAMP3() {
        return DSAMP3;
    }

    public byte getDSANU1() {
        return DSANU1;
    }

    public byte getDSANU2() {
        return DSANU2;
    }

    public byte getDSANY1() {
        return DSANY1;
    }

    public byte getDSANY2() {
        return DSANY2;
    }

    public byte getDSCOS2() {
        return DSCOS2;
    }

    public byte getDSCOS3() {
        return DSCOS3;
    }

    public byte getDSCSP2() {
        return DSCSP2;
    }

    public byte getDSCSP3() {
        return DSCSP3;
    }

    public byte getDSESB2() {
        return DSESB2;
    }

    public byte getDSESB3() {
        return DSESB3;
    }

    public int getDSLAMT2() {
        return DSLAMT2;
    }

    public double getDSLAMT2_I() {
        return DSLAMT2_I;
    }

    public byte getDSLAMT2_IFLAG() {
        return DSLAMT2_IFLAG;
    }

    public short getDSLAMT3() {
        return DSLAMT3;
    }

    public short getDSLAMT3_I() {
        return DSLAMT3_I;
    }

    public byte getDSLAMT3_IFLAG() {
        return DSLAMT3_IFLAG;
    }

    public short getDSLAMT4() {
        return DSLAMT4;
    }

    public short getDSLAMT4_I() {
        return DSLAMT4_I;
    }

    public byte getDSLAMT4_IFLAG() {
        return DSLAMT4_IFLAG;
    }

    public short getDSLAMT5() {
        return DSLAMT5;
    }

    public short getDSLAMT5_I() {
        return DSLAMT5_I;
    }

    public byte getDSLAMT5_IFLAG() {
        return DSLAMT5_IFLAG;
    }

    public byte getDSLEST2() {
        return DSLEST2;
    }

    public byte getDSLEST3() {
        return DSLEST3;
    }

    public byte getDSLEST4() {
        return DSLEST4;
    }

    public boolean getDSLEST5() {
        return DSLEST5;
    }

    public byte getDSLPAY2() {
        return DSLPAY2;
    }

    public byte getDSLPAY3() {
        return DSLPAY3;
    }

    public byte getDSLPAY4() {
        return DSLPAY4;
    }

    public boolean getDSLPAY5() {
        return DSLPAY5;
    }

    public byte getDSNAM2() {
        return DSNAM2;
    }

    public byte getDSNAM3() {
        return DSNAM3;
    }

    public byte getDSONM1() {
        return DSONM1;
    }

    public byte getDSONM2() {
        return DSONM2;
    }

    public byte getDSONM3() {
        return DSONM3;
    }

    public byte getDSONM4() {
        return DSONM4;
    }

    public byte getDSONM5() {
        return DSONM5;
    }

    public byte getDSONM6() {
        return DSONM6;
    }

    public byte getDSPER2() {
        return DSPER2;
    }

    public byte getDSREC2() {
        return DSREC2;
    }

    public byte getDSREC3() {
        return DSREC3;
    }

    public String getDTJBL() {
        return DTJBL;
    }

    public byte getDVAGE17() {
        return DVAGE17;
    }

    public byte getDVANYARR() {
        return DVANYARR;
    }

    public short getDVCACTV() {
        return DVCACTV;
    }

    public int getDVCASVV() {
        return DVCASVV;
    }

    public byte getDVCHMARR() {
        return DVCHMARR;
    }

    public int getDVCISAV() {
        return DVCISAV;
    }

    public int getDVCOINV2() {
        return DVCOINV2;
    }

    public short getDVCOINV3() {
        return DVCOINV3;
    }

    public byte getDVCRTARR() {
        return DVCRTARR;
    }

    public byte getDVCTARR() {
        return DVCTARR;
    }

    public double getDVDBINC1() {
        return DVDBINC1;
    }

    public double getDVDBINC2() {
        return DVDBINC2;
    }

    public double getDVDBINC3() {
        return DVDBINC3;
    }

    public double getDVDBINCALL() {
        return DVDBINCALL;
    }

    public double getDVDBLUMP1() {
        return DVDBLUMP1;
    }

    public double getDVDBLUMP2() {
        return DVDBLUMP2;
    }

    public double getDVDBLUMP3() {
        return DVDBLUMP3;
    }

    public double getDVDBRWEALTHVAL() {
        return DVDBRWEALTHVAL;
    }

    public short getDVDHPOWE2() {
        return DVDHPOWE2;
    }

    public int getDVDLOWE2() {
        return DVDLOWE2;
    }

    public short getDVDLOWE3() {
        return DVDLOWE3;
    }

    public short getDVDLOWE4() {
        return DVDLOWE4;
    }

    public short getDVDLOWE5() {
        return DVDLOWE5;
    }

    public short getDVDMOOWE2() {
        return DVDMOOWE2;
    }

    public byte getDVELARR() {
        return DVELARR;
    }

    public int getDVFBONDV() {
        return DVFBONDV;
    }

    public int getDVFCINVAL() {
        return DVFCINVAL;
    }

    public int getDVFCOLLV() {
        return DVFCOLLV;
    }

    public int getDVFEOPTV() {
        return DVFEOPTV;
    }

    public int getDVFESHAV() {
        return DVFESHAV;
    }

    public int getDVFGLTFOV() {
        return DVFGLTFOV;
    }

    public int getDVFGLTUKV() {
        return DVFGLTUKV;
    }

    public int getDVFINFLV() {
        return DVFINFLV;
    }

    public int getDVFINFV() {
        return DVFINFV;
    }

    public int getDVFINVOTV() {
        return DVFINVOTV;
    }

    public int getDVFLFENV() {
        return DVFLFENV;
    }

    public int getDVFLFFSV() {
        return DVFLFFSV;
    }

    public int getDVFLFSIV() {
        return DVFLFSIV;
    }

    public int getDVFLFTEV() {
        return DVFLFTEV;
    }

    public int getDVFNSVAL() {
        return DVFNSVAL;
    }

    public int getDVFSHOSV() {
        return DVFSHOSV;
    }

    public int getDVFSHUKV() {
        return DVFSHUKV;
    }

    public int getDVFSINVAL() {
        return DVFSINVAL;
    }

    public byte getDVGASARR() {
        return DVGASARR;
    }

    public double getDVGRSPAY() {
        return DVGRSPAY;
    }

    public boolean getDVHASAVC() {
        return DVHASAVC;
    }

    public byte getDVHASDB() {
        return DVHASDB;
    }

    public boolean getDVHASDC() {
        return DVHASDC;
    }

    public boolean getDVHASPFCUR() {
        return DVHASPFCUR;
    }

    public boolean getDVHASPFD() {
        return DVHASPFD;
    }

    public byte getDVHASPP() {
        return DVHASPP;
    }

    public byte getDVHPAR() {
        return DVHPAR;
    }

    public int getDVIISAV() {
        return DVIISAV;
    }

    public byte getDVILO3A() {
        return DVILO3A;
    }

    public byte getDVILO4A() {
        return DVILO4A;
    }

    public byte getDVJB12ML() {
        return DVJB12ML;
    }

    public int getDVKISAV() {
        return DVKISAV;
    }

    public byte getDVMRDF() {
        return DVMRDF;
    }

    public double getDVNETPAY() {
        return DVNETPAY;
    }

    public byte getDVOTHARR() {
        return DVOTHARR;
    }

    public double getDVPAVCUV() {
        return DVPAVCUV;
    }

    public double getDVPFCURVAL() {
        return DVPFCURVAL;
    }

    public int getDVPFDDV() {
        return DVPFDDV;
    }

    public double getDVPINPVAL() {
        return DVPINPVAL;
    }

    public double getDVPPVAL() {
        return DVPPVAL;
    }

    public byte getDVRNTARR() {
        return DVRNTARR;
    }

    public double getDVSHCVAL() {
        return DVSHCVAL;
    }

    public double getDVSHODVAL2() {
        return DVSHODVAL2;
    }

    public short getDVSHODVAL3() {
        return DVSHODVAL3;
    }

    public double getDVSHSVAL() {
        return DVSHSVAL;
    }

    public double getDVSPEN() {
        return DVSPEN;
    }

    public byte getDVTAXARR() {
        return DVTAXARR;
    }

    public byte getDVTELARR() {
        return DVTELARR;
    }

    public double getDVVALDBLUM() {
        return DVVALDBLUM;
    }

    public double getDVVALDBT() {
        return DVVALDBT;
    }

    public double getDVVALDCOS() {
        return DVVALDCOS;
    }

    public double getDVVALPBLUM() {
        return DVVALPBLUM;
    }

    public byte getDVVATARR() {
        return DVVATARR;
    }

    public byte getDVWATARR() {
        return DVWATARR;
    }

    public byte getEDATTN1() {
        return EDATTN1;
    }

    public byte getEDATTN2() {
        return EDATTN2;
    }

    public byte getEDATTN3() {
        return EDATTN3;
    }

    public byte getEDLEVEL() {
        return EDLEVEL;
    }

    public byte getEMPN() {
        return EMPN;
    }

    public short getEMPSTY() {
        return EMPSTY;
    }

    public byte getEMSHAR1() {
        return EMSHAR1;
    }

    public byte getEMSHAR2() {
        return EMSHAR2;
    }

    public byte getEMSHAR3() {
        return EMSHAR3;
    }

    public byte getENROLL() {
        return ENROLL;
    }

    public byte getEVERWK() {
        return EVERWK;
    }

    public byte getFBONDTY1() {
        return FBONDTY1;
    }

    public byte getFBONDTY2() {
        return FBONDTY2;
    }

    public byte getFBONDTY3() {
        return FBONDTY3;
    }

    public int getFBONDV() {
        return FBONDV;
    }

    public byte getFBONDVB() {
        return FBONDVB;
    }

    public int getFBONDV_I() {
        return FBONDV_I;
    }

    public byte getFBONDV_IFLAG() {
        return FBONDV_IFLAG;
    }

    public byte getFCACSH() {
        return FCACSH;
    }

    public byte getFCACSH_I() {
        return FCACSH_I;
    }

    public byte getFCACSH_IFLAG() {
        return FCACSH_IFLAG;
    }

    public int getFCINVAL() {
        return FCINVAL;
    }

    public int getFCINVAL_I() {
        return FCINVAL_I;
    }

    public byte getFCINVAL_IFLAG() {
        return FCINVAL_IFLAG;
    }

    public byte getFCINVLB() {
        return FCINVLB;
    }

    public byte getFCISAB() {
        return FCISAB;
    }

    public int getFCISAV() {
        return FCISAV;
    }

    public int getFCISAV_I() {
        return FCISAV_I;
    }

    public byte getFCISAV_IFLAG() {
        return FCISAV_IFLAG;
    }

    public byte getFCNUMIN() {
        return FCNUMIN;
    }

    public byte getFCNUMIN_I() {
        return FCNUMIN_I;
    }

    public byte getFCNUMIN_IFLAG() {
        return FCNUMIN_IFLAG;
    }

    public byte getFCNUMSH() {
        return FCNUMSH;
    }

    public byte getFCNUMSH_I() {
        return FCNUMSH_I;
    }

    public byte getFCNUMSH_IFLAG() {
        return FCNUMSH_IFLAG;
    }

    public int getFCOLLV() {
        return FCOLLV;
    }

    public byte getFCOLLVB() {
        return FCOLLVB;
    }

    public int getFCOLLV_I() {
        return FCOLLV_I;
    }

    public byte getFCOLLV_IFLAG() {
        return FCOLLV_IFLAG;
    }

    public byte getFCOVDIF() {
        return FCOVDIF;
    }

    public byte getFCOVDIN() {
        return FCOVDIN;
    }

    public byte getFCOVDIN_I() {
        return FCOVDIN_I;
    }

    public byte getFCOVDIN_IFLAG() {
        return FCOVDIN_IFLAG;
    }

    public byte getFCOVDSH() {
        return FCOVDSH;
    }

    public byte getFCOVDSH_I() {
        return FCOVDSH_I;
    }

    public byte getFCOVDSH_IFLAG() {
        return FCOVDSH_IFLAG;
    }

    public byte getFCOVNIN() {
        return FCOVNIN;
    }

    public byte getFCOVNIN_I() {
        return FCOVNIN_I;
    }

    public byte getFCOVNIN_IFLAG() {
        return FCOVNIN_IFLAG;
    }

    public byte getFCOVNSH() {
        return FCOVNSH;
    }

    public byte getFCOVNSH_I() {
        return FCOVNSH_I;
    }

    public byte getFCOVNSH_IFLAG() {
        return FCOVNSH_IFLAG;
    }

    public int getFCSHVAL() {
        return FCSHVAL;
    }

    public int getFCSHVAL_I() {
        return FCSHVAL_I;
    }

    public byte getFCSHVAL_IFLAG() {
        return FCSHVAL_IFLAG;
    }

    public byte getFCSHVLB() {
        return FCSHVLB;
    }

    public byte getFCSUPPR() {
        return FCSUPPR;
    }

    public int getFEOPTV() {
        return FEOPTV;
    }

    public int getFEOPTV_I() {
        return FEOPTV_I;
    }

    public byte getFEOPTV_IFLAG() {
        return FEOPTV_IFLAG;
    }

    public byte getFEOPVB() {
        return FEOPVB;
    }

    public byte getFESHA() {
        return FESHA;
    }

    public int getFESHAV() {
        return FESHAV;
    }

    public int getFESHAV_I() {
        return FESHAV_I;
    }

    public byte getFESHAV_IFLAG() {
        return FESHAV_IFLAG;
    }

    public byte getFESHA_I() {
        return FESHA_I;
    }

    public byte getFESHA_IFLAG() {
        return FESHA_IFLAG;
    }

    public byte getFESHVB() {
        return FESHVB;
    }

    public byte getFGFOVB() {
        return FGFOVB;
    }

    public byte getFGILTS1() {
        return FGILTS1;
    }

    public byte getFGILTS1_I() {
        return FGILTS1_I;
    }

    public byte getFGILTS1_IFLAG() {
        return FGILTS1_IFLAG;
    }

    public byte getFGILTS2() {
        return FGILTS2;
    }

    public byte getFGILTS2_I() {
        return FGILTS2_I;
    }

    public byte getFGILTS2_IFLAG() {
        return FGILTS2_IFLAG;
    }

    public byte getFGILTS3() {
        return FGILTS3;
    }

    public byte getFGILTS3_I() {
        return FGILTS3_I;
    }

    public byte getFGILTS3_IFLAG() {
        return FGILTS3_IFLAG;
    }

    public byte getFGILTS4() {
        return FGILTS4;
    }

    public byte getFGILTS4_I() {
        return FGILTS4_I;
    }

    public byte getFGILTS4_IFLAG() {
        return FGILTS4_IFLAG;
    }

    public int getFGLTFOV() {
        return FGLTFOV;
    }

    public int getFGLTFOV_I() {
        return FGLTFOV_I;
    }

    public byte getFGLTFOV_IFLAG() {
        return FGLTFOV_IFLAG;
    }

    public int getFGLTUKV() {
        return FGLTUKV;
    }

    public int getFGLTUKV_I() {
        return FGLTUKV_I;
    }

    public byte getFGLTUKV_IFLAG() {
        return FGLTUKV_IFLAG;
    }

    public byte getFGUKVB() {
        return FGUKVB;
    }

    public byte getFIISAB() {
        return FIISAB;
    }

    public int getFIISAV() {
        return FIISAV;
    }

    public int getFIISAV_I() {
        return FIISAV_I;
    }

    public byte getFIISAV_IFLAG() {
        return FIISAV_IFLAG;
    }

    public byte getFINCVB() {
        return FINCVB;
    }

    public int getFINFLV() {
        return FINFLV;
    }

    public int getFINFLV_I() {
        return FINFLV_I;
    }

    public byte getFINFLV_IFLAG() {
        return FINFLV_IFLAG;
    }

    public byte getFINFSAV1() {
        return FINFSAV1;
    }

    public byte getFINFSAV1_I() {
        return FINFSAV1_I;
    }

    public byte getFINFSAV1_IFLAG() {
        return FINFSAV1_IFLAG;
    }

    public byte getFINFSAV2() {
        return FINFSAV2;
    }

    public byte getFINFSAV2_I() {
        return FINFSAV2_I;
    }

    public byte getFINFSAV2_IFLAG() {
        return FINFSAV2_IFLAG;
    }

    public byte getFINFSAV3() {
        return FINFSAV3;
    }

    public byte getFINFSAV3_I() {
        return FINFSAV3_I;
    }

    public byte getFINFSAV3_IFLAG() {
        return FINFSAV3_IFLAG;
    }

    public byte getFINFSAV4() {
        return FINFSAV4;
    }

    public byte getFINFSAV4_I() {
        return FINFSAV4_I;
    }

    public byte getFINFSAV4_IFLAG() {
        return FINFSAV4_IFLAG;
    }

    public int getFINFV() {
        return FINFV;
    }

    public byte getFINFVB() {
        return FINFVB;
    }

    public int getFINFV_I() {
        return FINFV_I;
    }

    public byte getFINFV_IFLAG() {
        return FINFV_IFLAG;
    }

    public byte getFINS() {
        return FINS;
    }

    public int getFINSV() {
        return FINSV;
    }

    public int getFINSV_I() {
        return FINSV_I;
    }

    public byte getFINSV_IFLAG() {
        return FINSV_IFLAG;
    }

    public byte getFINS_I() {
        return FINS_I;
    }

    public byte getFINS_IFLAG() {
        return FINS_IFLAG;
    }

    public int getFINVOTV() {
        return FINVOTV;
    }

    public int getFINVOTV_I() {
        return FINVOTV_I;
    }

    public byte getFINVOTV_IFLAG() {
        return FINVOTV_IFLAG;
    }

    public byte getFINVOVB() {
        return FINVOVB;
    }

    public byte getFINVTY01() {
        return FINVTY01;
    }

    public byte getFINVTY01_I() {
        return FINVTY01_I;
    }

    public byte getFINVTY02() {
        return FINVTY02;
    }

    public byte getFINVTY02_I() {
        return FINVTY02_I;
    }

    public byte getFINVTY03() {
        return FINVTY03;
    }

    public byte getFINVTY03_I() {
        return FINVTY03_I;
    }

    public byte getFINVTY04() {
        return FINVTY04;
    }

    public byte getFINVTY04_I() {
        return FINVTY04_I;
    }

    public byte getFINVTY05() {
        return FINVTY05;
    }

    public byte getFINVTY05_I() {
        return FINVTY05_I;
    }

    public byte getFINVTY06() {
        return FINVTY06;
    }

    public byte getFINVTY06_I() {
        return FINVTY06_I;
    }

    public byte getFINVTY07() {
        return FINVTY07;
    }

    public byte getFINVTY07_I() {
        return FINVTY07_I;
    }

    public byte getFINVTY08() {
        return FINVTY08;
    }

    public byte getFINVTY08_I() {
        return FINVTY08_I;
    }

    public byte getFINVTY09() {
        return FINVTY09;
    }

    public byte getFINVTY09_I() {
        return FINVTY09_I;
    }

    public byte getFINVTY10() {
        return FINVTY10;
    }

    public byte getFINVTY10_I() {
        return FINVTY10_I;
    }

    public byte getFINVTY11() {
        return FINVTY11;
    }

    public byte getFINVTY11_I() {
        return FINVTY11_I;
    }

    public byte getFISA1() {
        return FISA1;
    }

    public byte getFISA1_I() {
        return FISA1_I;
    }

    public byte getFISA1_IFLAG() {
        return FISA1_IFLAG;
    }

    public byte getFISA2() {
        return FISA2;
    }

    public byte getFISA2_I() {
        return FISA2_I;
    }

    public byte getFISA2_IFLAG() {
        return FISA2_IFLAG;
    }

    public byte getFKISAB() {
        return FKISAB;
    }

    public int getFKISAV() {
        return FKISAV;
    }

    public int getFKISAV_I() {
        return FKISAV_I;
    }

    public byte getFKISAV_IFLAG() {
        return FKISAV_IFLAG;
    }

    public int getFLFENV() {
        return FLFENV;
    }

    public byte getFLFENVB() {
        return FLFENVB;
    }

    public int getFLFENV_I() {
        return FLFENV_I;
    }

    public byte getFLFENV_IFLAG() {
        return FLFENV_IFLAG;
    }

    public int getFLFFSV() {
        return FLFFSV;
    }

    public byte getFLFFSVB() {
        return FLFFSVB;
    }

    public int getFLFFSV_I() {
        return FLFFSV_I;
    }

    public byte getFLFFSV_IFLAG() {
        return FLFFSV_IFLAG;
    }

    public int getFLFSIV() {
        return FLFSIV;
    }

    public byte getFLFSIVB() {
        return FLFSIVB;
    }

    public int getFLFSIV_I() {
        return FLFSIV_I;
    }

    public byte getFLFSIV_IFLAG() {
        return FLFSIV_IFLAG;
    }

    public int getFLFTEV() {
        return FLFTEV;
    }

    public byte getFLFTEVB() {
        return FLFTEVB;
    }

    public int getFLFTEV_I() {
        return FLFTEV_I;
    }

    public byte getFLFTEV_IFLAG() {
        return FLFTEV_IFLAG;
    }

    public double getFLNOS1() {
        return FLNOS1;
    }

    public double getFLNOS2() {
        return FLNOS2;
    }

    public double getFLNOS3() {
        return FLNOS3;
    }

    public double getFLNOS4() {
        return FLNOS4;
    }

    public byte getFLOANVB() {
        return FLOANVB;
    }

    public byte getFLPROD1() {
        return FLPROD1;
    }

    public byte getFLPROD1_I() {
        return FLPROD1_I;
    }

    public byte getFLPROD1_IFLAG() {
        return FLPROD1_IFLAG;
    }

    public byte getFLPROD2() {
        return FLPROD2;
    }

    public byte getFLPROD2_I() {
        return FLPROD2_I;
    }

    public byte getFLPROD2_IFLAG() {
        return FLPROD2_IFLAG;
    }

    public byte getFLPROD3() {
        return FLPROD3;
    }

    public byte getFLPROD3_I() {
        return FLPROD3_I;
    }

    public byte getFLPROD3_IFLAG() {
        return FLPROD3_IFLAG;
    }

    public boolean getFLPROD4() {
        return FLPROD4;
    }

    public boolean getFLPROD4_I() {
        return FLPROD4_I;
    }

    public byte getFLPROD4_IFLAG() {
        return FLPROD4_IFLAG;
    }

    public byte getFNSAV1() {
        return FNSAV1;
    }

    public byte getFNSAV2() {
        return FNSAV2;
    }

    public byte getFNSAV3() {
        return FNSAV3;
    }

    public byte getFNSAV4() {
        return FNSAV4;
    }

    public int getFNSVAL_I() {
        return FNSVAL_I;
    }

    public byte getFNSVAL_IFLAG() {
        return FNSVAL_IFLAG;
    }

    public byte getFNSVB() {
        return FNSVB;
    }

    public byte getFSACSH() {
        return FSACSH;
    }

    public byte getFSACSH_I() {
        return FSACSH_I;
    }

    public byte getFSACSH_IFLAG() {
        return FSACSH_IFLAG;
    }

    public byte getFSHARE1() {
        return FSHARE1;
    }

    public byte getFSHARE1_I() {
        return FSHARE1_I;
    }

    public byte getFSHARE1_IFLAG() {
        return FSHARE1_IFLAG;
    }

    public byte getFSHARE2() {
        return FSHARE2;
    }

    public byte getFSHARE2_I() {
        return FSHARE2_I;
    }

    public byte getFSHARE2_IFLAG() {
        return FSHARE2_IFLAG;
    }

    public byte getFSHARE3() {
        return FSHARE3;
    }

    public byte getFSHARE3_I() {
        return FSHARE3_I;
    }

    public byte getFSHARE3_IFLAG() {
        return FSHARE3_IFLAG;
    }

    public int getFSHOSV() {
        return FSHOSV;
    }

    public byte getFSHOSVB() {
        return FSHOSVB;
    }

    public int getFSHOSV_I() {
        return FSHOSV_I;
    }

    public byte getFSHOSV_IFLAG() {
        return FSHOSV_IFLAG;
    }

    public int getFSHUKV() {
        return FSHUKV;
    }

    public byte getFSHUKVB() {
        return FSHUKVB;
    }

    public int getFSHUKV_I() {
        return FSHUKV_I;
    }

    public byte getFSHUKV_IFLAG() {
        return FSHUKV_IFLAG;
    }

    public int getFSINVAL() {
        return FSINVAL;
    }

    public int getFSINVAL_I() {
        return FSINVAL_I;
    }

    public byte getFSINVAL_IFLAG() {
        return FSINVAL_IFLAG;
    }

    public byte getFSINVLB() {
        return FSINVLB;
    }

    public byte getFSNUMIN() {
        return FSNUMIN;
    }

    public byte getFSNUMIN_I() {
        return FSNUMIN_I;
    }

    public byte getFSNUMIN_IFLAG() {
        return FSNUMIN_IFLAG;
    }

    public byte getFSNUMSH() {
        return FSNUMSH;
    }

    public byte getFSNUMSH_I() {
        return FSNUMSH_I;
    }

    public byte getFSNUMSH_IFLAG() {
        return FSNUMSH_IFLAG;
    }

    public byte getFSOSHAV() {
        return FSOSHAV;
    }

    public byte getFSOSVLB() {
        return FSOSVLB;
    }

    public int getFSSHVAL() {
        return FSSHVAL;
    }

    public double getFSSHVAL_I() {
        return FSSHVAL_I;
    }

    public byte getFSSHVAL_IFLAG() {
        return FSSHVAL_IFLAG;
    }

    public byte getFSSHVLB() {
        return FSSHVLB;
    }

    public byte getFSSUPPR() {
        return FSSUPPR;
    }

    public byte getFSTYPIN1() {
        return FSTYPIN1;
    }

    public byte getFSTYPIN2() {
        return FSTYPIN2;
    }

    public byte getFSTYPIN3() {
        return FSTYPIN3;
    }

    public byte getFSTYPSH1() {
        return FSTYPSH1;
    }

    public byte getFSTYPSH2() {
        return FSTYPSH2;
    }

    public byte getFSTYPSH3() {
        return FSTYPSH3;
    }

    public boolean getFSTYPSH4() {
        return FSTYPSH4;
    }

    public byte getFTED() {
        return FTED;
    }

    public byte getFTED19() {
        return FTED19;
    }

    public byte getFTPTWK() {
        return FTPTWK;
    }

    public byte getGRSESM() {
        return GRSESM;
    }

    public byte getGRSESP() {
        return GRSESP;
    }

    public boolean getHASCHD() {
        return HASCHD;
    }

    public boolean getHASDEP() {
        return HASDEP;
    }

    public boolean getHASNDEP() {
        return HASNDEP;
    }

    public int getHOUSGDST() {
        return HOUSGDST;
    }

    public double getHPLFT2() {
        return HPLFT2;
    }

    public double getHPOS1() {
        return HPOS1;
    }

    public double getHPOS2() {
        return HPOS2;
    }

    public byte getIGDS1() {
        return IGDS1;
    }

    public byte getIGDS10() {
        return IGDS10;
    }

    public byte getIGDS11() {
        return IGDS11;
    }

    public byte getIGDS15() {
        return IGDS15;
    }

    public byte getIGDS2() {
        return IGDS2;
    }

    public byte getIGDS3() {
        return IGDS3;
    }

    public byte getIGDS4() {
        return IGDS4;
    }

    public byte getIGDS5() {
        return IGDS5;
    }

    public byte getIGDS8() {
        return IGDS8;
    }

    public byte getIGDS9() {
        return IGDS9;
    }

    public byte getIGFVALB() {
        return IGFVALB;
    }

    public byte getIHRCNUM() {
        return IHRCNUM;
    }

    public byte getIHRECNT() {
        return IHRECNT;
    }

    public byte getIHSE1() {
        return IHSE1;
    }

    public byte getIHSE2() {
        return IHSE2;
    }

    public byte getIHSE7() {
        return IHSE7;
    }

    public byte getILACB() {
        return ILACB;
    }

    public byte getILGIFT() {
        return ILGIFT;
    }

    public byte getILIFB() {
        return ILIFB;
    }

    public byte getILINB() {
        return ILINB;
    }

    public byte getILLLIM() {
        return ILLLIM;
    }

    public byte getILOTB() {
        return ILOTB;
    }

    public byte getILRDB() {
        return ILRDB;
    }

    public byte getILUMP() {
        return ILUMP;
    }

    public byte getILUMTY1() {
        return ILUMTY1;
    }

    public byte getILUMTY2() {
        return ILUMTY2;
    }

    public byte getILUMTY3() {
        return ILUMTY3;
    }

    public byte getILUPB() {
        return ILUPB;
    }

    public int getILUPP() {
        return ILUPP;
    }

    public byte getILWNB() {
        return ILWNB;
    }

    public byte getIOUT1() {
        return IOUT1;
    }

    public boolean getISDEP() {
        return ISDEP;
    }

    public boolean getISHRP() {
        return ISHRP;
    }

    public boolean getISHRPPART() {
        return ISHRPPART;
    }

    public boolean getISNDEP() {
        return ISNDEP;
    }

    public byte getIVALB2() {
        return IVALB2;
    }

    public byte getIVALB3() {
        return IVALB3;
    }

    public byte getIWAT1() {
        return IWAT1;
    }

    public byte getIWAT13() {
        return IWAT13;
    }

    public byte getIWAT2() {
        return IWAT2;
    }

    public byte getIWAT3() {
        return IWAT3;
    }

    public byte getIWAT4() {
        return IWAT4;
    }

    public byte getIWAT5() {
        return IWAT5;
    }

    public byte getIWAT7() {
        return IWAT7;
    }

    public byte getIWHO2() {
        return IWHO2;
    }

    public byte getIWHO3() {
        return IWHO3;
    }

    public byte getJBAWAY() {
        return JBAWAY;
    }

    public byte getJOBNO() {
        return JOBNO;
    }

    public byte getLKTIME() {
        return LKTIME;
    }

    public double getLNLFT2() {
        return LNLFT2;
    }

    public double getLNLFT3() {
        return LNLFT3;
    }

    public double getLNLFT4() {
        return LNLFT4;
    }

    public double getLNLFT5() {
        return LNLFT5;
    }

    public double getLNOS1() {
        return LNOS1;
    }

    public double getLNOS2() {
        return LNOS2;
    }

    public double getLNOS3() {
        return LNOS3;
    }

    public double getLNOS4() {
        return LNOS4;
    }

    public double getLNOS5() {
        return LNOS5;
    }

    public byte getLOOKED() {
        return LOOKED;
    }

    public byte getLSILL() {
        return LSILL;
    }

    public byte getMARBEF() {
        return MARBEF;
    }

    public double getMOLFT2() {
        return MOLFT2;
    }

    public byte getMONTH() {
        return MONTH;
    }

    public double getMOOS1() {
        return MOOS1;
    }

    public double getMOOS2() {
        return MOOS2;
    }

    public byte getNSSEC3() {
        return NSSEC3;
    }

    public byte getNSSEC5() {
        return NSSEC5;
    }

    public double getNSSEC8() {
        return NSSEC8;
    }

    public double getNSSECB() {
        return NSSECB;
    }

    public byte getOCSVR1() {
        return OCSVR1;
    }

    public byte getOCSVR2() {
        return OCSVR2;
    }

    public byte getOCSVR3() {
        return OCSVR3;
    }

    public byte getOCSVR4() {
        return OCSVR4;
    }

    public byte getOCSVR5() {
        return OCSVR5;
    }

    public byte getOCSVR6() {
        return OCSVR6;
    }

    public byte getOCSVR7() {
        return OCSVR7;
    }

    public byte getOCSVR8() {
        return OCSVR8;
    }

    public byte getOINTEND() {
        return OINTEND;
    }

    public byte getOLARGE() {
        return OLARGE;
    }

    public byte getOLEFT() {
        return OLEFT;
    }

    public byte getOLEFTDO() {
        return OLEFTDO;
    }

    public byte getOLONG() {
        return OLONG;
    }

    public byte getOLONGYR() {
        return OLONGYR;
    }

    public byte getONETEN() {
        return ONETEN;
    }

    public byte getOPENS01() {
        return OPENS01;
    }

    public byte getOPENS02() {
        return OPENS02;
    }

    public byte getOPENS03() {
        return OPENS03;
    }

    public byte getOPENS04() {
        return OPENS04;
    }

    public byte getOPENS05() {
        return OPENS05;
    }

    public byte getOPENS06() {
        return OPENS06;
    }

    public byte getOPENS07() {
        return OPENS07;
    }

    public byte getOPENS08() {
        return OPENS08;
    }

    public byte getORETINC() {
        return ORETINC;
    }

    public byte getORISKA() {
        return ORISKA;
    }

    public byte getORISKC() {
        return ORISKC;
    }

    public byte getORUNDO01() {
        return ORUNDO01;
    }

    public byte getORUNDO02() {
        return ORUNDO02;
    }

    public byte getORUNDO03() {
        return ORUNDO03;
    }

    public byte getORUNDO04() {
        return ORUNDO04;
    }

    public byte getORUNDO05() {
        return ORUNDO05;
    }

    public byte getORUNDO06() {
        return ORUNDO06;
    }

    public byte getORUNDO07() {
        return ORUNDO07;
    }

    public byte getORUNDO08() {
        return ORUNDO08;
    }

    public byte getORUNOUT() {
        return ORUNOUT;
    }

    public byte getOSITUAT() {
        return OSITUAT;
    }

    public byte getOSTANDL() {
        return OSTANDL;
    }

    public byte getOTHSRC1() {
        return OTHSRC1;
    }

    public byte getOTHSRC1_I() {
        return OTHSRC1_I;
    }

    public boolean getOTHSRC1_IFLAG() {
        return OTHSRC1_IFLAG;
    }

    public byte getOTHSRC2() {
        return OTHSRC2;
    }

    public byte getOTHSRC2_I() {
        return OTHSRC2_I;
    }

    public boolean getOTHSRC2_IFLAG() {
        return OTHSRC2_IFLAG;
    }

    public byte getOTHSRC3() {
        return OTHSRC3;
    }

    public byte getOTHSRC3_I() {
        return OTHSRC3_I;
    }

    public boolean getOTHSRC3_IFLAG() {
        return OTHSRC3_IFLAG;
    }

    public byte getOTRUST01() {
        return OTRUST01;
    }

    public byte getOTRUST02() {
        return OTRUST02;
    }

    public byte getOTRUST03() {
        return OTRUST03;
    }

    public byte getOTRUST04() {
        return OTRUST04;
    }

    public byte getOTRUST05() {
        return OTRUST05;
    }

    public byte getOTRUST06() {
        return OTRUST06;
    }

    public byte getOTRUST07() {
        return OTRUST07;
    }

    public byte getOTRUST08() {
        return OTRUST08;
    }

    public byte getOTRUST09() {
        return OTRUST09;
    }

    public byte getOTRUST10() {
        return OTRUST10;
    }

    public byte getOTRUST11() {
        return OTRUST11;
    }

    public byte getOTRUST12() {
        return OTRUST12;
    }

    public byte getOTRUST13() {
        return OTRUST13;
    }

    public byte getOTRUST14() {
        return OTRUST14;
    }

    public byte getOUNDER() {
        return OUNDER;
    }

    public byte getOWNBUS() {
        return OWNBUS;
    }

    public byte getPAGERET() {
        return PAGERET;
    }

    public boolean getPARTNER() {
        return PARTNER;
    }

    public byte getPARTNO() {
        return PARTNO;
    }

    public byte getPAYBON() {
        return PAYBON;
    }

    public byte getPAYESM() {
        return PAYESM;
    }

    public byte getPAYESP() {
        return PAYESP;
    }

    public byte getPAYINC1() {
        return PAYINC1;
    }

    public byte getPAYINC2() {
        return PAYINC2;
    }

    public byte getPAYINC3() {
        return PAYINC3;
    }

    public byte getPAYINC4() {
        return PAYINC4;
    }

    public byte getPAYINC5() {
        return PAYINC5;
    }

    public byte getPAYINC6() {
        return PAYINC6;
    }

    public byte getPAYPER() {
        return PAYPER;
    }

    public byte getPAYSLP() {
        return PAYSLP;
    }

    public byte getPEARLRS() {
        return PEARLRS;
    }

    public byte getPEMELG() {
        return PEMELG;
    }

    public byte getPEMELG_I() {
        return PEMELG_I;
    }

    public byte getPEMELG_IFLAG() {
        return PEMELG_IFLAG;
    }

    public byte getPEMMEM() {
        return PEMMEM;
    }

    public byte getPEMMEM_I() {
        return PEMMEM_I;
    }

    public boolean getPEMMEM_IFLAG() {
        return PEMMEM_IFLAG;
    }

    public byte getPEMOFF() {
        return PEMOFF;
    }

    public byte getPEMOFF_I() {
        return PEMOFF_I;
    }

    public boolean getPEMOFF_IFLAG() {
        return PEMOFF_IFLAG;
    }

    public byte getPERSONW1() {
        return PERSONW1;
    }

    public byte getPERSPROX() {
        return PERSPROX;
    }

    public byte getPEVERC() {
        return PEVERC;
    }

    public byte getPEVERC_I() {
        return PEVERC_I;
    }

    public boolean getPEVERC_IFLAG() {
        return PEVERC_IFLAG;
    }

    public byte getPEVERNC() {
        return PEVERNC;
    }

    public byte getPEVERNC_I() {
        return PEVERNC_I;
    }

    public boolean getPEVERNC_IFLAG() {
        return PEVERNC_IFLAG;
    }

    public byte getPEXPRET() {
        return PEXPRET;
    }

    public byte getPFNUM() {
        return PFNUM;
    }

    public byte getPFNUM_I() {
        return PFNUM_I;
    }

    public boolean getPFNUM_IFLAG() {
        return PFNUM_IFLAG;
    }

    public byte getPFULRET() {
        return PFULRET;
    }

    public double getPINCINP() {
        return PINCINP;
    }

    public byte getPOCNMSC() {
        return POCNMSC;
    }

    public byte getPOCNMSC_I() {
        return POCNMSC_I;
    }

    public boolean getPOCNMSC_IFLAG() {
        return POCNMSC_IFLAG;
    }

    public byte getPPRNMSC() {
        return PPRNMSC;
    }

    public byte getPPRNMSC_I() {
        return PPRNMSC_I;
    }

    public boolean getPPRNMSC_IFLAG() {
        return PPRNMSC_IFLAG;
    }

    public byte getPPYSTP10() {
        return PPYSTP10;
    }

    public byte getPRETAIN() {
        return PRETAIN;
    }

    public byte getPRETAIN_I() {
        return PRETAIN_I;
    }

    public boolean getPRETAIN_IFLAG() {
        return PRETAIN_IFLAG;
    }

    public byte getPSCHM_F() {
        return PSCHM_F;
    }

    public byte getPSCHM_F_I() {
        return PSCHM_F_I;
    }

    public boolean getPSCHM_F_IFLAG() {
        return PSCHM_F_IFLAG;
    }

    public byte getPSCHM_S() {
        return PSCHM_S;
    }

    public byte getPSCHM_S_I() {
        return PSCHM_S_I;
    }

    public boolean getPSCHM_S_IFLAG() {
        return PSCHM_S_IFLAG;
    }

    public byte getPSCHM_T() {
        return PSCHM_T;
    }

    public byte getPSCHM_T_I() {
        return PSCHM_T_I;
    }

    public boolean getPSCHM_T_IFLAG() {
        return PSCHM_T_IFLAG;
    }

    public byte getPSIT() {
        return PSIT;
    }

    public byte getPSITF() {
        return PSITF;
    }

    public double getPWEXPA() {
        return PWEXPA;
    }

    public int getPWEXPA_I() {
        return PWEXPA_I;
    }

    public boolean getPWEXPA_IFLAG() {
        return PWEXPA_IFLAG;
    }

    public byte getPWEXPH() {
        return PWEXPH;
    }

    public byte getPWEXPH_I() {
        return PWEXPH_I;
    }

    public boolean getPWEXPH_IFLAG() {
        return PWEXPH_IFLAG;
    }

    public byte getPWID() {
        return PWID;
    }

    public byte getPWIDFUT() {
        return PWIDFUT;
    }

    public byte getPWIDFUT_I() {
        return PWIDFUT_I;
    }

    public boolean getPWIDFUT_IFLAG() {
        return PWIDFUT_IFLAG;
    }

    public byte getP_FLAG1() {
        return P_FLAG1;
    }

    public byte getP_FLAG3() {
        return P_FLAG3;
    }

    public byte getP_FLAG4() {
        return P_FLAG4;
    }

    public byte getQHEALTH1() {
        return QHEALTH1;
    }

    public byte getQUALCHK() {
        return QUALCHK;
    }

    public byte getREGLRPY1() {
        return REGLRPY1;
    }

    public byte getREGLRPY2() {
        return REGLRPY2;
    }

    public byte getRELBUS() {
        return RELBUS;
    }

    public byte getRENTPAY() {
        return RENTPAY;
    }

    public byte getSCHEMEET() {
        return SCHEMEET;
    }

    public byte getSEAMK() {
        return SEAMK;
    }

    public byte getSEESM() {
        return SEESM;
    }

    public byte getSEESW() {
        return SEESW;
    }

    public byte getSELECTAD() {
        return SELECTAD;
    }

    public byte getSEMN() {
        return SEMN;
    }

    public short getSEMPSTY() {
        return SEMPSTY;
    }

    public byte getSEPEL() {
        return SEPEL;
    }

    public byte getSEPER() {
        return SEPER;
    }

    public boolean getSEX() {
        return SEX;
    }

    public boolean getSINGPAR() {
        return SINGPAR;
    }

    public byte getSJEMP1() {
        return SJEMP1;
    }

    public byte getSJEMP2() {
        return SJEMP2;
    }

    public byte getSJOB2() {
        return SJOB2;
    }

    public byte getSOLO() {
        return SOLO;
    }

    public byte getSTARTJ() {
        return STARTJ;
    }

    public byte getSTAT() {
        return STAT;
    }

    public byte getSTAT_I() {
        return STAT_I;
    }

    public byte getSVISE() {
        return SVISE;
    }

    public byte getTBENEF() {
        return TBENEF;
    }

    public byte getTBENNUM() {
        return TBENNUM;
    }

    public byte getTEA() {
        return TEA;
    }

    public byte getTINTRO() {
        return TINTRO;
    }

    public double getTOTPEN() {
        return TOTPEN;
    }

    public byte getTSETT() {
        return TSETT;
    }

    public byte getTYPE() {
        return TYPE;
    }

    public byte getUNMTYP() {
        return UNMTYP;
    }

    public byte getUNUMBD() {
        return UNUMBD;
    }

    public byte getUNUMBD_I() {
        return UNUMBD_I;
    }

    public boolean getUNUMBD_IFLAG() {
        return UNUMBD_IFLAG;
    }

    public byte getUNUMHS() {
        return UNUMHS;
    }

    public byte getUNUMHS_I() {
        return UNUMHS_I;
    }

    public boolean getUNUMHS_IFLAG() {
        return UNUMHS_IFLAG;
    }

    public byte getUNUMLA() {
        return UNUMLA;
    }

    public byte getUNUMLA_I() {
        return UNUMLA_I;
    }

    public boolean getUNUMLA_IFLAG() {
        return UNUMLA_IFLAG;
    }

    public byte getUNUMOV() {
        return UNUMOV;
    }

    public byte getUNUMOV_I() {
        return UNUMOV_I;
    }

    public boolean getUNUMOV_IFLAG() {
        return UNUMOV_IFLAG;
    }

    public byte getUNUMRE() {
        return UNUMRE;
    }

    public byte getUNUMRE_I() {
        return UNUMRE_I;
    }

    public boolean getUNUMRE_IFLAG() {
        return UNUMRE_IFLAG;
    }

    public byte getUPROP1() {
        return UPROP1;
    }

    public byte getUPROP1_I() {
        return UPROP1_I;
    }

    public byte getUPROP2() {
        return UPROP2;
    }

    public byte getUPROP2_I() {
        return UPROP2_I;
    }

    public byte getUPROP3() {
        return UPROP3;
    }

    public byte getUPROP3_I() {
        return UPROP3_I;
    }

    public byte getUPROP4() {
        return UPROP4;
    }

    public byte getUPROP4_I() {
        return UPROP4_I;
    }

    public byte getUPRSH1() {
        return UPRSH1;
    }

    public byte getUPRSH2() {
        return UPRSH2;
    }

    public byte getUPRSH3() {
        return UPRSH3;
    }

    public byte getUPRSH4() {
        return UPRSH4;
    }

    public byte getUPRSH5() {
        return UPRSH5;
    }

    public byte getWORKAGE() {
        return WORKAGE;
    }

    public byte getWRKING() {
        return WRKING;
    }

    public byte getXINSOL() {
        return XINSOL;
    }

    public byte getXINTYP() {
        return XINTYP;
    }

    public short getYEAR() {
        return YEAR;
    }

    public byte getYINACT() {
        return YINACT;
    }

}
