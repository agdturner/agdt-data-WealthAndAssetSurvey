/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.waascg.process.WaASCG_Main
 */

package uk.ac.leeds.ccg.andyt.generic.data.waas.data.hhold;
import uk.ac.leeds.ccg.andyt.generic.data.waas.data.id.WaAS_RecordID;

public class WaAS_W4HRecord extends WaAS_W4W5HRecord {

    protected short AREA;

    protected short AREAW3;

    protected int DVERECANNUAL;

    protected short DVERVRECANNUAL;

    protected int DVTOTALLBENANNUAL_AGGR;

    protected int DVTOTCARVAL;

    protected int DVTOTMOTBVAL;

    protected int DVTOTVANVAL;

    protected byte EQREAS1;

    protected byte EQREAS2;

    protected byte EQREAS3;

    protected byte EQREAS4;

    protected boolean HINTRO;

    protected byte HRPDVAGE15;

    protected byte LENDTY1;

    protected byte LENDTY2;

    protected boolean LENDTY3;

    protected boolean OAC_GROUP;

    protected boolean OAC_SUBGROUP;

    protected boolean OAC_SUPERGROUP;

    protected int VESTV1;

    protected int VESTV1_I;

    protected boolean VESTV1_IFLAG;

    protected int VESTV2;

    protected int VESTV2_I;

    protected boolean VESTV2_IFLAG;

    protected byte VESVB1;

    protected byte VESVB2;

    protected byte VESVB3;

    protected String VOTYO;

    protected boolean VTYPE2_IFLAG;

    protected byte VTYPE_I;

    protected double W4XSHHWGT;

    protected final void initAREA(String s) {
        if (!s.trim().isEmpty()) {
            AREA = Short.parseShort(s);
        } else {
            AREA = Short.MIN_VALUE;
        }
    }

    protected final void initAREAW3(String s) {
        if (!s.trim().isEmpty()) {
            AREAW3 = Short.parseShort(s);
        } else {
            AREAW3 = Short.MIN_VALUE;
        }
    }

    protected final void initDVERECANNUAL(String s) {
        if (!s.trim().isEmpty()) {
            DVERECANNUAL = Integer.parseInt(s);
        } else {
            DVERECANNUAL = Integer.MIN_VALUE;
        }
    }

    protected final void initDVERVRECANNUAL(String s) {
        if (!s.trim().isEmpty()) {
            DVERVRECANNUAL = Short.parseShort(s);
        } else {
            DVERVRECANNUAL = Short.MIN_VALUE;
        }
    }

    protected final void initDVTOTALLBENANNUAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVTOTALLBENANNUAL_AGGR = Integer.parseInt(s);
        } else {
            DVTOTALLBENANNUAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVTOTCARVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVTOTCARVAL = Integer.parseInt(s);
        } else {
            DVTOTCARVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initDVTOTMOTBVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVTOTMOTBVAL = Integer.parseInt(s);
        } else {
            DVTOTMOTBVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initDVTOTVANVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVTOTVANVAL = Integer.parseInt(s);
        } else {
            DVTOTVANVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initEQREAS1(String s) {
        if (!s.trim().isEmpty()) {
            EQREAS1 = Byte.parseByte(s);
        } else {
            EQREAS1 = Byte.MIN_VALUE;
        }
    }

    protected final void initEQREAS2(String s) {
        if (!s.trim().isEmpty()) {
            EQREAS2 = Byte.parseByte(s);
        } else {
            EQREAS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initEQREAS3(String s) {
        if (!s.trim().isEmpty()) {
            EQREAS3 = Byte.parseByte(s);
        } else {
            EQREAS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initEQREAS4(String s) {
        if (!s.trim().isEmpty()) {
            EQREAS4 = Byte.parseByte(s);
        } else {
            EQREAS4 = Byte.MIN_VALUE;
        }
    }

    protected final void initHINTRO(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                HINTRO = false;
            } else {
                HINTRO = true;
            }
        }
    }

    protected final void initHRPDVAGE15(String s) {
        if (!s.trim().isEmpty()) {
            HRPDVAGE15 = Byte.parseByte(s);
        } else {
            HRPDVAGE15 = Byte.MIN_VALUE;
        }
    }

    protected final void initLENDTY1(String s) {
        if (!s.trim().isEmpty()) {
            LENDTY1 = Byte.parseByte(s);
        } else {
            LENDTY1 = Byte.MIN_VALUE;
        }
    }

    protected final void initLENDTY2(String s) {
        if (!s.trim().isEmpty()) {
            LENDTY2 = Byte.parseByte(s);
        } else {
            LENDTY2 = Byte.MIN_VALUE;
        }
    }

    protected final void initLENDTY3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                LENDTY3 = false;
            } else {
                LENDTY3 = true;
            }
        }
    }

    protected final void initOAC_GROUP(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            OAC_GROUP = false;
        }
    }

    protected final void initOAC_SUBGROUP(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            OAC_SUBGROUP = false;
        }
    }

    protected final void initOAC_SUPERGROUP(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -6) {
                OAC_SUPERGROUP = false;
            } else {
                OAC_SUPERGROUP = true;
            }
        }
    }

    protected final void initVESTV1(String s) {
        if (!s.trim().isEmpty()) {
            VESTV1 = Integer.parseInt(s);
        } else {
            VESTV1 = Integer.MIN_VALUE;
        }
    }

    protected final void initVESTV1_I(String s) {
        if (!s.trim().isEmpty()) {
            VESTV1_I = Integer.parseInt(s);
        } else {
            VESTV1_I = Integer.MIN_VALUE;
        }
    }

    protected final void initVESTV1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                VESTV1_IFLAG = false;
            } else {
                VESTV1_IFLAG = true;
            }
        }
    }

    protected final void initVESTV2(String s) {
        if (!s.trim().isEmpty()) {
            VESTV2 = Integer.parseInt(s);
        } else {
            VESTV2 = Integer.MIN_VALUE;
        }
    }

    protected final void initVESTV2_I(String s) {
        if (!s.trim().isEmpty()) {
            VESTV2_I = Integer.parseInt(s);
        } else {
            VESTV2_I = Integer.MIN_VALUE;
        }
    }

    protected final void initVESTV2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                VESTV2_IFLAG = false;
            } else {
                VESTV2_IFLAG = true;
            }
        }
    }

    protected final void initVESVB1(String s) {
        if (!s.trim().isEmpty()) {
            VESVB1 = Byte.parseByte(s);
        } else {
            VESVB1 = Byte.MIN_VALUE;
        }
    }

    protected final void initVESVB2(String s) {
        if (!s.trim().isEmpty()) {
            VESVB2 = Byte.parseByte(s);
        } else {
            VESVB2 = Byte.MIN_VALUE;
        }
    }

    protected final void initVESVB3(String s) {
        if (!s.trim().isEmpty()) {
            VESVB3 = Byte.parseByte(s);
        } else {
            VESVB3 = Byte.MIN_VALUE;
        }
    }

    protected final void initVOTYO(String s) {
        if (!s.trim().isEmpty()) {
            VOTYO = s;
        }
    }

    protected final void initVTYPE2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                VTYPE2_IFLAG = false;
            } else {
                VTYPE2_IFLAG = true;
            }
        }
    }

    protected final void initVTYPE_I(String s) {
        if (!s.trim().isEmpty()) {
            VTYPE_I = Byte.parseByte(s);
        } else {
            VTYPE_I = Byte.MIN_VALUE;
        }
    }

    protected final void initW4XSHHWGT(String s) {
        if (!s.trim().isEmpty()) {
            W4XSHHWGT = Double.parseDouble(s);
        } else {
            W4XSHHWGT = Double.NaN;
        }
    }

    public short getAREA() {
        return AREA;
    }

    public short getAREAW3() {
        return AREAW3;
    }

    public int getDVERECANNUAL() {
        return DVERECANNUAL;
    }

    public short getDVERVRECANNUAL() {
        return DVERVRECANNUAL;
    }

    public int getDVTOTALLBENANNUAL_AGGR() {
        return DVTOTALLBENANNUAL_AGGR;
    }

    public int getDVTOTCARVAL() {
        return DVTOTCARVAL;
    }

    public int getDVTOTMOTBVAL() {
        return DVTOTMOTBVAL;
    }

    public int getDVTOTVANVAL() {
        return DVTOTVANVAL;
    }

    public byte getEQREAS1() {
        return EQREAS1;
    }

    public byte getEQREAS2() {
        return EQREAS2;
    }

    public byte getEQREAS3() {
        return EQREAS3;
    }

    public byte getEQREAS4() {
        return EQREAS4;
    }

    public boolean getHINTRO() {
        return HINTRO;
    }

    public byte getHRPDVAGE15() {
        return HRPDVAGE15;
    }

    public byte getLENDTY1() {
        return LENDTY1;
    }

    public byte getLENDTY2() {
        return LENDTY2;
    }

    public boolean getLENDTY3() {
        return LENDTY3;
    }

    public boolean getOAC_GROUP() {
        return OAC_GROUP;
    }

    public boolean getOAC_SUBGROUP() {
        return OAC_SUBGROUP;
    }

    public boolean getOAC_SUPERGROUP() {
        return OAC_SUPERGROUP;
    }

    public int getVESTV1() {
        return VESTV1;
    }

    public int getVESTV1_I() {
        return VESTV1_I;
    }

    public boolean getVESTV1_IFLAG() {
        return VESTV1_IFLAG;
    }

    public int getVESTV2() {
        return VESTV2;
    }

    public int getVESTV2_I() {
        return VESTV2_I;
    }

    public boolean getVESTV2_IFLAG() {
        return VESTV2_IFLAG;
    }

    public byte getVESVB1() {
        return VESVB1;
    }

    public byte getVESVB2() {
        return VESVB2;
    }

    public byte getVESVB3() {
        return VESVB3;
    }

    public String getVOTYO() {
        return VOTYO;
    }

    public boolean getVTYPE2_IFLAG() {
        return VTYPE2_IFLAG;
    }

    public byte getVTYPE_I() {
        return VTYPE_I;
    }

    public double getW4XSHHWGT() {
        return W4XSHHWGT;
    }


    public WaAS_W4HRecord(WaAS_RecordID i, String line) {
        super(i);
        s = line.split("\t");
        initCASEW4(s[0]);
        initYEAR(s[1]);
        initMONTH(s[2]);
        initCASEW3(s[3]);
        initYEARW3(s[4]);
        initMONTHW3(s[5]);
        initCASEW2(s[6]);
        initYEARW2(s[7]);
        initMONTHW2(s[8]);
        initCASEW1(s[9]);
        initYEARW1(s[10]);
        initMONTHW1(s[11]);
        initAREAW3(s[12]);
        initAREA(s[13]);
        initHOUT(s[14]);
        initW4XSHHWGT(s[15]);
        initACCOM(s[16]);
        initFLTTYP(s[17]);
        initACCOTH(s[18]);
        initTEN1(s[19]);
        initTIED(s[20]);
        initLLORD(s[21]);
        initFURN(s[22]);
        initDVPRIRNT(s[23]);
        initHHOWN(s[24]);
        initHINTRO(s[25]);
        initHAGEB(s[26]);
        initHAGEYR(s[27]);
        initHBUYYR(s[28]);
        initHBUYSE(s[29]);
        initHSHARE(s[30]);
        initHSHAREP(s[31]);
        initHPRICE(s[32]);
        initHPRICEB(s[33]);
        initHBFROM(s[34]);
        initHRTBEV(s[35]);
        initHHOSCH(s[36]);
        initHVALUE(s[37]);
        initHVALB(s[38]);
        initHEXT1(s[39]);
        initHEXT2(s[40]);
        initHEXT3(s[41]);
        initHEXT4(s[42]);
        initMNUMBN(s[43]);
        initMNUMB(s[44]);
        initMW2CHK1(s[45]);
        initMW2CHK2(s[46]);
        initMW2CHK3(s[47]);
        initMEXTN(s[48]);
        initMEXTRS1(s[49]);
        initMEXTRS2(s[50]);
        initMEXTRS3(s[51]);
        initMCHGE(s[52]);
        initMCHGENUM(s[53]);
        initMNUMBO(s[54]);
        initMNAME1(s[55]);
        initMONAME1(s[56]);
        initMJNAME01(s[57]);
        initMJNAME02(s[58]);
        initMJNAME03(s[59]);
        initMJNAME04(s[60]);
        initMREAS01(s[61]);
        initMREAS02(s[62]);
        initMREAS03(s[63]);
        initMREAS04(s[64]);
        initMREAS05(s[65]);
        initMREAS06(s[66]);
        initMREAS07(s[67]);
        initMTYPE1(s[68]);
        initMENDW1(s[69]);
        initMENDNUM1(s[70]);
        initMALL1(s[71]);
        initMALLTY1(s[72]);
        initMVAL1(s[73]);
        initMVALB1(s[74]);
        initMNEG1(s[75]);
        initMNEGB1(s[76]);
        initMENDV1(s[77]);
        initMENDVB1(s[78]);
        initMENDY1(s[79]);
        initMENDV2(s[80]);
        initMENDVB2(s[81]);
        initMENDY2(s[82]);
        initMENDV3(s[83]);
        initMENDVB3(s[84]);
        initMENDY3(s[85]);
        initMENDV4(s[86]);
        initMENDVB4(s[87]);
        initMENDY4(s[88]);
        initMENDV5(s[89]);
        initMENDX1(s[90]);
        initMINVW1(s[91]);
        initMINVW2(s[92]);
        initMINVW3(s[93]);
        initMPOLICY1(s[94]);
        initMPOLICY2(s[95]);
        initMYLFT1(s[96]);
        initMYIFCH1(s[97]);
        initMPAYM1(s[98]);
        initMPAYB1(s[99]);
        initMINC1(s[100]);
        initMINC2(s[101]);
        initMINC3(s[102]);
        initMINC4(s[103]);
        initMINC5(s[104]);
        initMPP1(s[105]);
        initMHOWPY1(s[106]);
        initMARRS1(s[107]);
        initMARRSV1(s[108]);
        initMARR2YR1(s[109]);
        initMARR2YR2(s[110]);
        initMARR2YR3(s[111]);
        initMARRCL01(s[112]);
        initMARRCL02(s[113]);
        initMARRCL12(s[114]);
        initDBURDH(s[115]);
        initMNAME2(s[116]);
        initMONAME2(s[117]);
        initMJNAME18(s[118]);
        initMJNAME19(s[119]);
        initMJNAME20(s[120]);
        initMREAS12(s[121]);
        initMREAS13(s[122]);
        initMREAS14(s[123]);
        initMTYPE2(s[124]);
        initBRIDLN1(s[125]);
        initBRIDLN2(s[126]);
        initBRIDLN3(s[127]);
        initLENDTY1(s[128]);
        initLENDTY2(s[129]);
        initLENDTY3(s[130]);
        initMENDW2(s[131]);
        initMENDNUM2(s[132]);
        initMALL2(s[133]);
        initMALLTY2(s[134]);
        initMVAL2(s[135]);
        initMVALB2(s[136]);
        initMNEG2(s[137]);
        initMNEGB2(s[138]);
        initMENDV6(s[139]);
        initMENDVB6(s[140]);
        initMENDY6(s[141]);
        initMENDV7(s[142]);
        initMENDVB7(s[143]);
        initMENDY7(s[144]);
        initMENDV8(s[145]);
        initMENDX2(s[146]);
        initMYLFT2(s[147]);
        initMYIFCH2(s[148]);
        initMPAYM2(s[149]);
        initMPAYB2(s[150]);
        initMINC6(s[151]);
        initMPP2(s[152]);
        initMHOWPY2(s[153]);
        initMARRS2(s[154]);
        initMARRSV2(s[155]);
        initMNAME3(s[156]);
        initMONAME3(s[157]);
        initMJNAME35(s[158]);
        initMJNAME36(s[159]);
        initMREAS23(s[160]);
        initMREAS24(s[161]);
        initMTYPE3(s[162]);
        initMENDW3(s[163]);
        initMENDNUM3(s[164]);
        initMALL3(s[165]);
        initMALLTY3(s[166]);
        initMVAL3(s[167]);
        initMVALB3(s[168]);
        initMNEG3(s[169]);
        initMNEGB3(s[170]);
        initMENDV11(s[171]);
        initMENDVB11(s[172]);
        initMENDY11(s[173]);
        initMENDX3(s[174]);
        initMYLFT3(s[175]);
        initMYIFCH3(s[176]);
        initMPAYM3(s[177]);
        initMPAYB3(s[178]);
        initMINC11(s[179]);
        initMPP3(s[180]);
        initMHOWPY3(s[181]);
        initMARRS3(s[182]);
        initMARRSV3(s[183]);
        initEQOLD(s[184]);
        initEQNEW(s[185]);
        initEQYES(s[186]);
        initEQTYPE1(s[187]);
        initEQTYPE2(s[188]);
        initEQREAS1(s[189]);
        initEQREAS2(s[190]);
        initEQREAS3(s[191]);
        initEQREAS4(s[192]);
        initEQWHENY(s[193]);
        initEQWHENM(s[194]);
        initEQDRAW(s[195]);
        initEQVAL(s[196]);
        initEQVALB(s[197]);
        initEQVALDR(s[198]);
        initEQVALDRB(s[199]);
        initEREC(s[200]);
        initERECMPD(s[201]);
        initERECMBY(s[202]);
        initERECTAX(s[203]);
        initEINT(s[204]);
        initEINTFIX(s[205]);
        initEINTRAT(s[206]);
        initEMSPAY(s[207]);
        initEMSARR(s[208]);
        initFRREPFIX(s[209]);
        initSHARAPP(s[210]);
        initESHARAPP(s[211]);
        initERVREG1(s[212]);
        initERVREG2(s[213]);
        initERVSUM(s[214]);
        initERVSUMB(s[215]);
        initERVRECPD(s[216]);
        initERVRECBY(s[217]);
        initERVTAX(s[218]);
        initERVRENT(s[219]);
        initERVPRP(s[220]);
        initEPRVPAY(s[221]);
        initEPRVAL(s[222]);
        initEPRPER(s[223]);
        initEOTHREG(s[224]);
        initEOTHRVA(s[225]);
        initEOTHRVB(s[226]);
        initPRREPAY(s[227]);
        initPRREPFIX(s[228]);
        initPRREPPC(s[229]);
        initGCOLLEC(s[230]);
        initGCOLLV(s[231]);
        initGCOLLVB(s[232]);
        initGCONTVB(s[233]);
        initVCARN(s[234]);
        initVTYPE1(s[235]);
        initVESTV1(s[236]);
        initVESVB1(s[237]);
        initVTYPE2(s[238]);
        initVESTV2(s[239]);
        initVESVB2(s[240]);
        initVPERS(s[241]);
        initVPERV(s[242]);
        initVOTYP1(s[243]);
        initVOTYP2(s[244]);
        initVOTYP3(s[245]);
        initVOTYP4(s[246]);
        initVOTPN(s[247]);
        initVOTYO(s[248]);
        initVOVAL(s[249]);
        initVOVLB(s[250]);
        initMNUMB_I(s[251]);
        initMNUMB_IFLAG(s[252]);
        initMALL1_I(s[253]);
        initMALL1_IFLAG(s[254]);
        initMALL2_I(s[255]);
        initMALL2_IFLAG(s[256]);
        initMALL3_I(s[257]);
        initMALL3_IFLAG(s[258]);
        initMALLTY1_I(s[259]);
        initMALLTY1_IFLAG(s[260]);
        initMALLTY2_I(s[261]);
        initMALLTY2_IFLAG(s[262]);
        initMVAL1_I(s[263]);
        initMVAL1_IFLAG(s[264]);
        initMVAL2_I(s[265]);
        initMVAL2_IFLAG(s[266]);
        initMVAL3_I(s[267]);
        initMVAL3_IFLAG(s[268]);
        initMNEG1_I(s[269]);
        initMNEG1_IFLAG(s[270]);
        initMNEG2_I(s[271]);
        initMNEG2_IFLAG(s[272]);
        initTEN1_I(s[273]);
        initTEN1_IFLAG(s[274]);
        initHSHARE_I(s[275]);
        initHSHARE_IFLAG(s[276]);
        initHSHAREP_I(s[277]);
        initHSHAREP_IFLAG(s[278]);
        initEQUITY_YN_I(s[279]);
        initEQUITY_YN_IFLAG(s[280]);
        initEQTYPE1_I(s[281]);
        initEQTYPE1_IFLAG(s[282]);
        initEQDRAW_I(s[283]);
        initEQDRAW_IFLAG(s[284]);
        initEQVALB_I(s[285]);
        initEQVALB_IFLAG(s[286]);
        initEQVAL_I(s[287]);
        initEQVAL_IFLAG(s[288]);
        initEINT_I(s[289]);
        initEINT_IFLAG(s[290]);
        initEINTRAT_I(s[291]);
        initEINTRAT_IFLAG(s[292]);
        initERVPRP_I(s[293]);
        initERVPRP_IFLAG(s[294]);
        initPRREPAY_I(s[295]);
        initPRREPAY_IFLAG(s[296]);
        initPRREPFIX_I(s[297]);
        initPRREPFIX_IFLAG(s[298]);
        initPRREPPC_I(s[299]);
        initPRREPPC_IFLAG(s[300]);
        initMTYPE1_I(s[301]);
        initMTYPE1_IFLAG(s[302]);
        initMTYPE2_I(s[303]);
        initMTYPE2_IFLAG(s[304]);
        initMTYPE3_I(s[305]);
        initMTYPE3_IFLAG(s[306]);
        initMENDW1_I(s[307]);
        initMENDW1_IFLAG(s[308]);
        initMENDW2_I(s[309]);
        initMENDW2_IFLAG(s[310]);
        initMENDW3_I(s[311]);
        initMENDW3_IFLAG(s[312]);
        initMENDNUM1_I(s[313]);
        initMENDNUM1_IFLAG(s[314]);
        initMENDNUM2_I(s[315]);
        initMENDNUM2_IFLAG(s[316]);
        initMENDNUM3_I(s[317]);
        initMENDNUM3_IFLAG(s[318]);
        initMENDVB1_I(s[319]);
        initMENDVB1_IFLAG(s[320]);
        initMENDVB2_I(s[321]);
        initMENDVB2_IFLAG(s[322]);
        initMENDVB3_I(s[323]);
        initMENDVB3_IFLAG(s[324]);
        initMENDVB4_I(s[325]);
        initMENDVB4_IFLAG(s[326]);
        initMENDVB5_I(s[327]);
        initMENDVB5_IFLAG(s[328]);
        initMENDVB9_I(s[329]);
        initMENDVB9_IFLAG(s[330]);
        initMENDVB6_I(s[331]);
        initMENDVB6_IFLAG(s[332]);
        initMENDVB7_I(s[333]);
        initMENDVB7_IFLAG(s[334]);
        initMENDVB8_I(s[335]);
        initMENDVB8_IFLAG(s[336]);
        initMENDVB11_I(s[337]);
        initMENDVB11_IFLAG(s[338]);
        initMENDV1_I(s[339]);
        initMENDV1_IFLAG(s[340]);
        initMENDV2_I(s[341]);
        initMENDV2_IFLAG(s[342]);
        initMENDV3_I(s[343]);
        initMENDV3_IFLAG(s[344]);
        initMENDV4_I(s[345]);
        initMENDV4_IFLAG(s[346]);
        initMENDV5_I(s[347]);
        initMENDV5_IFLAG(s[348]);
        initMENDV6_I(s[349]);
        initMENDV6_IFLAG(s[350]);
        initMENDV7_I(s[351]);
        initMENDV7_IFLAG(s[352]);
        initHVALUE_I(s[353]);
        initHVALUE_IFLAG(s[354]);
        initDVHVALUE(s[355]);
        initTOTMVAL(s[356]);
        initTOTMNEG(s[357]);
        initTOTMORT(s[358]);
        initDVEQRELVAL(s[359]);
        initDVEQLTM(s[360]);
        initDVHORP(s[361]);
        initDVEQSRB(s[362]);
        initDVEQPRUN(s[363]);
        initHMORTG(s[364]);
        initALLENDW(s[365]);
        initHSETYPE(s[366]);
        initVCARN_I(s[367]);
        initVCARN_IFLAG(s[368]);
        initVESTV1_I(s[369]);
        initVESTV1_IFLAG(s[370]);
        initVESTV2_I(s[371]);
        initVESTV2_IFLAG(s[372]);
        initVTYPE_I(s[373]);
        initVTYPE_IFLAG(s[374]);
        initVTYPE2_I(s[375]);
        initVTYPE2_IFLAG(s[376]);
        initVPERS_I(s[377]);
        initVPERS_IFLAG(s[378]);
        initVPERV_I(s[379]);
        initVPERV_IFLAG(s[380]);
        initVOTYP1_I(s[381]);
        initVOTYP2_I(s[382]);
        initVOTYP3_I(s[383]);
        initVOTYP4_I(s[384]);
        initVOTYP5_I(s[385]);
        initVOVAL_I(s[386]);
        initVOVAL_IFLAG(s[387]);
        initGCOLLEC_I(s[388]);
        initGCOLLEC_IFLAG(s[389]);
        initGCOLLV_I(s[390]);
        initGCOLLV_IFLAG(s[391]);
        initGCONTVB_I(s[392]);
        initGCONTVB_IFLAG(s[393]);
        initDVHSEVAL_SUM(s[394]);
        initDVBLTVAL_SUM(s[395]);
        initDVBLDVAL_SUM(s[396]);
        initDVLUKVAL_SUM(s[397]);
        initDVLOSVAL_SUM(s[398]);
        initDVOPRVAL_SUM(s[399]);
        initDVHSEDEBT_SUM(s[400]);
        initDVBLTDEBT_SUM(s[401]);
        initDVBLDDEBT_SUM(s[402]);
        initDVLUKDEBT_SUM(s[403]);
        initDVLOSDEBT_SUM(s[404]);
        initDVOPRDEBT_SUM(s[405]);
        initOTHMORT_SUM(s[406]);
        initHOUSGDST_SUM(s[407]);
        initBUYLGDST_SUM(s[408]);
        initHOUSGDSOST_SUM(s[409]);
        initPHYSHOUSGDST_AGGR(s[410]);
        initPHYSBUYLGDST_AGGR(s[411]);
        initPHYSHOUSGDSOST_AGGR(s[412]);
        initGCONTVLS(s[413]);
        initDVGCOLLV(s[414]);
        initALLGD(s[415]);
        initDVTOTCARVAL(s[416]);
        initDVTOTVANVAL(s[417]);
        initDVTOTMOTBVAL(s[418]);
        initDVTOTOTHVEHVAL(s[419]);
        initDVTOTPERNPVAL(s[420]);
        initDVTOTVEHVAL(s[421]);
        initHPHYSW(s[422]);
        initDVPROPERTY(s[423]);
        initHPROPW(s[424]);
        initDVCISAV_AGGR(s[425]);
        initDVIISAV_AGGR(s[426]);
        initDVKISAV_AGGR(s[427]);
        initDVFNSVAL_AGGR(s[428]);
        initDVFSHUKV_AGGR(s[429]);
        initDVINSV_AGGR(s[430]);
        initDVFLFENV_AGGR(s[431]);
        initDVFLFSIV_AGGR(s[432]);
        initDVFLFFSV_AGGR(s[433]);
        initDVFLFTEV_AGGR(s[434]);
        initDVFBONDV_AGGR(s[435]);
        initDVFESHARES_AGGR(s[436]);
        initDVFESHAV_AGGR(s[437]);
        initDVFEOPTV_AGGR(s[438]);
        initDVFCOLLV_AGGR(s[439]);
        initDVFSHOSV_AGGR(s[440]);
        initDVFGLTUKV_AGGR(s[441]);
        initDVFGLTFOV_AGGR(s[442]);
        initDVFINVOTV_AGGR(s[443]);
        initDVFINFVAL_AGGR(s[444]);
        initDVFINFLV_AGGR(s[445]);
        initDVFINFV_AGGR(s[446]);
        initDVISAVAL_AGGR(s[447]);
        initDVFFASSETS_AGGR(s[448]);
        initDVCACTV_AGGR(s[449]);
        initDVCASVV_AGGR(s[450]);
        initDVCAVAL_AGGR(s[451]);
        initDVCACRVAL_AGGR(s[452]);
        initDVCAODVAL_AGGR(s[453]);
        initDVSAVAL_AGGR(s[454]);
        initTOTCC_AGGR(s[455]);
        initTOTSC_AGGR(s[456]);
        initTOTMO_AGGR(s[457]);
        initTOTNSLBNK_AGGR(s[458]);
        initTOTNSLC_AGGR(s[459]);
        initTOTOSLBNK_AGGR(s[460]);
        initTOTOSLC_AGGR(s[461]);
        initTOTSLBNK_AGGR(s[462]);
        initTOTSLC_AGGR(s[463]);
        initTOTBILLARR_AGGR(s[464]);
        initTOTHPARR_AGGR(s[465]);
        initTOTMOARR_AGGR(s[466]);
        initTOTLNARR_AGGR(s[467]);
        initTOTDVNWFLN_AGGR(s[468]);
        initTOTDVNWILN_AGGR(s[469]);
        initTOTARR_EXCMORT_AGGR(s[470]);
        initHFINW_EXCENDW_AGGR(s[471]);
        initHFINW_SUM(s[472]);
        initDVVALDBT_AGGR(s[473]);
        initDVVALDCOS_AGGR(s[474]);
        initDVPAVCUV_AGGR(s[475]);
        initDVPFDDV_AGGR(s[476]);
        initDVPPVAL_AGGR(s[477]);
        initTOTLOS_AGGR(s[478]);
        initTOTNLOS_AGGR(s[479]);
        initTOTFLNS_AGGR(s[480]);
        initTOTHP_AGGR(s[481]);
        initTOTLNS_AGGR(s[482]);
        initHFINL_AGGR(s[483]);
        initHFINWNT_SUM(s[484]);
        initDVSPEN_AGGR(s[485]);
        initDVPINPVAL_AGGR(s[486]);
        initDVDBRWEALTHVAL_AGGR(s[487]);
        initTOTPEN_AGGR(s[488]);
        initDVPFCURVAL_AGGR(s[489]);
        initDVBENEFITANNUAL_AGGR(s[490]);
        initDVNIOTHI_AGGR(s[491]);
        initHRPDVAGE(s[492]);
        initHRPDVAGE9(s[493]);
        initHRPSEX(s[494]);
        initHRPNSSEC3(s[495]);
        initHRPDVILO3A(s[496]);
        initHRPDVMRDF(s[497]);
        initHRPEDATTN1(s[498]);
        initHRPEDATTN2(s[499]);
        initHRPEDATTN3(s[500]);
        initHRPDVECACT(s[501]);
        initHRPIOUT1(s[502]);
        initHRPPARTIOUT1(s[503]);
        initOAC_SUPERGROUP(s[504]);
        initOAC_GROUP(s[505]);
        initOAC_SUBGROUP(s[506]);
        initOFINAL(s[507]);
        initNOUNITS(s[508]);
        initDVHSIZE(s[509]);
        initNUMADULT(s[510]);
        initNUMCH18(s[511]);
        initNUMCHILD(s[512]);
        initNUMCIVPTR(s[513]);
        initNUMCPART(s[514]);
        initNUMDEPCH(s[515]);
        initNUMELCH(s[516]);
        initNUMHHLDR(s[517]);
        initNUMMPART(s[518]);
        initNUMNOELCH(s[519]);
        initHHOLDTYPE(s[520]);
        initHRPEDLEVEL(s[521]);
        initTOTWLTH(s[522]);
        initHHPPHYS(s[523]);
        initHHOWNF(s[524]);
        initPHVAL(s[525]);
        initPMVAL(s[526]);
        initPEVAL(s[527]);
        initVESVB3(s[528]);
        initHRPDVAGE15(s[529]);
        initHBEDRM(s[530]);
        initDVTOTNIR(s[531]);
        initDVTOTGIR(s[532]);
        initDVGISE_AGGR(s[533]);
        initDVGIPPEN_AGGR(s[534]);
        initDVGIEMP_AGGR(s[535]);
        initDVTOTALLBENANNUAL_AGGR(s[536]);
        initDVGIINV_AGGR(s[537]);
        initDVGRSRENTAMTANNUAL_AGGR(s[538]);
        initDVNISE_AGGR(s[539]);
        initDVNIPPEN_AGGR(s[540]);
        initDVNIEMP_AGGR(s[541]);
        initDVNIINV_AGGR(s[542]);
        initDVNETRENTAMTANNUAL_AGGR(s[543]);
        initDVOINRRANNUAL_AGGR(s[544]);
        initDVOINGTANNUAL_AGGR(s[545]);
        initDVOINEGANNUAL_AGGR(s[546]);
        initDVOINFRANNUAL_AGGR(s[547]);
        initDVOINMAANNUAL_AGGR(s[548]);
        initDVOINROANNUAL_AGGR(s[549]);
        initDVOINOPANNUAL_AGGR(s[550]);
        initDVOIGRRANNUAL_AGGR(s[551]);
        initDVOIGGTANNUAL_AGGR(s[552]);
        initDVOIGEGANNUAL_AGGR(s[553]);
        initDVOIGFRANNUAL_AGGR(s[554]);
        initDVOIGMAANNUAL_AGGR(s[555]);
        initDVOIGROANNUAL_AGGR(s[556]);
        initDVOIGOPANNUAL_AGGR(s[557]);
        initDVGIOTHR_AGGR(s[558]);
        initDVNIOTHR_AGGR(s[559]);
        initDVERECNETANNUAL(s[560]);
        initDVERVRECNETANNUAL(s[561]);
        initDVERECGROSSANNUAL(s[562]);
        initDVERVRECGROSSANNUAL(s[563]);
        initDVERECANNUAL(s[564]);
        initDVERVRECANNUAL(s[565]);
    }

    @Override
    public WaAS_RecordID getID() {
        return (WaAS_RecordID) ID;
    }
}
