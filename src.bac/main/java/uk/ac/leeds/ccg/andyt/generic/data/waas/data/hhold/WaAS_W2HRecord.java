/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.waascg.process.WaASCG_Main
 */

package uk.ac.leeds.ccg.andyt.generic.data.waas.data.hhold;
import uk.ac.leeds.ccg.andyt.generic.data.waas.data.id.WaAS_RecordID;

public class WaAS_W2HRecord extends WaAS_W1W2HRecord {

    protected int BUYLGDST_SUM;

    protected short CASEW2;

    protected int DVBLTDEBT;

    protected int DVBLTVAL;

    protected double DVCACRVAL_AGGR;

    protected int DVCACTV_AGGR;

    protected int DVCAODVAL_AGGR;

    protected int DVCASVV_AGGR;

    protected double DVCAVAL_AGGR;

    protected int DVCISAV_AGGR;

    protected double DVDBRWEALTHVAL_AGGR;

    protected int DVFBONDV_AGGR;

    protected int DVFCOLLV_AGGR;

    protected int DVFEOPTV_AGGR;

    protected int DVFESHARES_AGGR;

    protected int DVFESHAV_AGGR;

    protected double DVFFASSETS_AGGR;

    protected int DVFGLTFOV_AGGR;

    protected int DVFGLTUKV_AGGR;

    protected int DVFINFLV_AGGR;

    protected int DVFINFVAL_AGGR;

    protected int DVFINFV_AGGR;

    protected int DVFINVOTV_AGGR;

    protected int DVFLFENV_AGGR;

    protected int DVFLFFSV_AGGR;

    protected int DVFLFSIV_AGGR;

    protected int DVFLFTEV_AGGR;

    protected int DVFNSVAL_AGGR;

    protected int DVFSHOSV_AGGR;

    protected int DVFSHUKV_AGGR;

    protected int DVIISAV_AGGR;

    protected int DVINSV_AGGR;

    protected int DVISAVAL_AGGR;

    protected int DVKISAV_AGGR;

    protected int DVPAVCUV_AGGR;

    protected double DVPFCURVAL_AGGR;

    protected int DVPFDDV_AGGR;

    protected double DVPINPVAL_AGGR;

    protected double DVPPVAL_AGGR;

    protected int DVSAVAL_AGGR;

    protected double DVSPEN_AGGR;

    protected double DVVALDBT_AGGR;

    protected double DVVALDCOS_AGGR;

    protected byte EQNEW;

    protected byte EQNEW_I;

    protected boolean EQNEW_IFLAG;

    protected byte EQOLD;

    protected byte EQOLD_I;

    protected boolean EQOLD_IFLAG;

    protected boolean EQREAS5;

    protected boolean EQREAS6;

    protected boolean EQREAS7;

    protected boolean EQREAS8;

    protected boolean EQREAS9;

    protected int GCONTVLS;

    protected byte HEXT1;

    protected byte HEXT2;

    protected byte HEXT3;

    protected byte HEXT4;

    protected double HFINL_AGGR;

    protected double HFINW_EXCENDW_AGGR;

    protected boolean H_FLAG1;

    protected boolean H_FLAG2;

    protected byte H_FLAG4;

    protected boolean H_FLAG5;

    protected String LEA;

    protected int MARRSV;

    protected int MARRSV2;

    protected short MARRSV3;

    protected byte MCHGE;

    protected byte MCHGENUM;

    protected boolean MENDV10;

    protected boolean MENDV10_I;

    protected boolean MENDV10_IFLAG;

    protected short MENDV12;

    protected short MENDV12_I;

    protected boolean MENDV12_IFLAG;

    protected short MENDV13;

    protected short MENDV13_I;

    protected boolean MENDV13_IFLAG;

    protected boolean MENDV14;

    protected boolean MENDV14_I;

    protected boolean MENDV14_IFLAG;

    protected boolean MENDV15;

    protected boolean MENDV15_I;

    protected boolean MENDV15_IFLAG;

    protected short MENDV8_I;

    protected boolean MENDV8_IFLAG;

    protected boolean MENDV9;

    protected boolean MENDV9_I;

    protected boolean MENDV9_IFLAG;

    protected boolean MENDVB10;

    protected boolean MENDVB12;

    protected boolean MENDVB13;

    protected boolean MENDVB14;

    protected boolean MENDVB15;

    protected boolean MENDVB9;

    protected boolean MENDY10;

    protected boolean MENDY12;

    protected boolean MENDY13;

    protected boolean MENDY14;

    protected boolean MENDY15;

    protected boolean MENDY9;

    protected byte MEND___W2;

    protected byte MEXTN;

    protected byte MEXTRS1;

    protected byte MEXTRS2;

    protected byte MEXTRS3;

    protected byte MEXTRS4;

    protected boolean MEXTRS5;

    protected boolean MEXTRS6;

    protected boolean MEXTRS7;

    protected boolean MEXTRS8;

    protected boolean MEXTRS9;

    protected boolean MINC10;

    protected boolean MINC13;

    protected boolean MINC14;

    protected boolean MINC15;

    protected byte MNUMBN;

    protected byte MNUMBN_I;

    protected boolean MNUMBN_IFLAG;

    protected byte MNUMBO;

    protected byte MNUMBO_I;

    protected boolean MNUMBO_IFLAG;

    protected byte MNUMB_I;

    protected boolean MNUMB_IFLAG;

    protected byte MONTHW1;

    protected byte MORTID;

    protected boolean MORTID2;

    protected boolean MORTID3;

    protected byte MREAS14;

    protected boolean MREAS15;

    protected byte MREAS24;

    protected byte MVALB2_I;

    protected boolean MVALB2_IFLAG;

    protected byte MW1CHK1;

    protected byte MW1CHK2;

    protected byte MW1CHK3;

    protected byte MYIFCH;

    protected byte MYIFCH2;

    protected byte MYIFCH3;

    protected byte NOUNITS;

    protected byte NUMDEPCH_HH;

    protected boolean NUMNDEP;

    protected int TOTARR_EXCMORT_AGGR;

    protected int TOTBILLARR_AGGR;

    protected int TOTCC_AGGR;

    protected int TOTDVNWFLN_AGGR;

    protected int TOTDVNWILN_AGGR;

    protected double TOTFLNS_AGGR;

    protected short TOTHPARR_AGGR;

    protected double TOTHP_AGGR;

    protected int TOTLNARR_AGGR;

    protected double TOTLNS_AGGR;

    protected double TOTLOS_AGGR;

    protected short TOTMOARR_AGGR;

    protected double TOTMO_AGGR;

    protected int TOTNLOS_AGGR;

    protected int TOTNSLBNK_AGGR;

    protected int TOTNSLC_AGGR;

    protected int TOTOSLBNK_AGGR;

    protected double TOTOSLC_AGGR;

    protected double TOTPEN_AGGR;

    protected short TOTSC_AGGR;

    protected int TOTSLBNK_AGGR;

    protected double TOTSLC_AGGR;

    protected byte URINDEW;

    protected byte URINDSC;

    protected byte VCADD;

    protected byte VCADDN;

    protected boolean VOTYPE1_IFLAG;

    protected boolean VOTYPE2_IFLAG;

    protected boolean VOTYPE3_IFLAG;

    protected boolean VOTYPE4_IFLAG;

    protected boolean VOTYPE5_IFLAG;

    protected byte VPERS_I;

    protected boolean VPERS_IFLAG;

    protected double XS_CALWGT;

    protected short YEARW1;

    protected final void initBUYLGDST_SUM(String s) {
        if (!s.trim().isEmpty()) {
            BUYLGDST_SUM = Integer.parseInt(s);
        } else {
            BUYLGDST_SUM = Integer.MIN_VALUE;
        }
    }

    protected final void initCASEW2(String s) {
        if (!s.trim().isEmpty()) {
            CASEW2 = Short.parseShort(s);
        } else {
            CASEW2 = Short.MIN_VALUE;
        }
    }

    protected final void initDVBLTDEBT(String s) {
        if (!s.trim().isEmpty()) {
            DVBLTDEBT = Integer.parseInt(s);
        } else {
            DVBLTDEBT = Integer.MIN_VALUE;
        }
    }

    protected final void initDVBLTVAL(String s) {
        if (!s.trim().isEmpty()) {
            DVBLTVAL = Integer.parseInt(s);
        } else {
            DVBLTVAL = Integer.MIN_VALUE;
        }
    }

    protected final void initDVCACRVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVCACRVAL_AGGR = Double.parseDouble(s);
        } else {
            DVCACRVAL_AGGR = Double.NaN;
        }
    }

    protected final void initDVCACTV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVCACTV_AGGR = Integer.parseInt(s);
        } else {
            DVCACTV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVCAODVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVCAODVAL_AGGR = Integer.parseInt(s);
        } else {
            DVCAODVAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVCASVV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVCASVV_AGGR = Integer.parseInt(s);
        } else {
            DVCASVV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVCAVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVCAVAL_AGGR = Double.parseDouble(s);
        } else {
            DVCAVAL_AGGR = Double.NaN;
        }
    }

    protected final void initDVCISAV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVCISAV_AGGR = Integer.parseInt(s);
        } else {
            DVCISAV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVDBRWEALTHVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVDBRWEALTHVAL_AGGR = Double.parseDouble(s);
        } else {
            DVDBRWEALTHVAL_AGGR = Double.NaN;
        }
    }

    protected final void initDVFBONDV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFBONDV_AGGR = Integer.parseInt(s);
        } else {
            DVFBONDV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFCOLLV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFCOLLV_AGGR = Integer.parseInt(s);
        } else {
            DVFCOLLV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFEOPTV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFEOPTV_AGGR = Integer.parseInt(s);
        } else {
            DVFEOPTV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFESHARES_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFESHARES_AGGR = Integer.parseInt(s);
        } else {
            DVFESHARES_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFESHAV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFESHAV_AGGR = Integer.parseInt(s);
        } else {
            DVFESHAV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFFASSETS_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFFASSETS_AGGR = Double.parseDouble(s);
        } else {
            DVFFASSETS_AGGR = Double.NaN;
        }
    }

    protected final void initDVFGLTFOV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFGLTFOV_AGGR = Integer.parseInt(s);
        } else {
            DVFGLTFOV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFGLTUKV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFGLTUKV_AGGR = Integer.parseInt(s);
        } else {
            DVFGLTUKV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFINFLV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFINFLV_AGGR = Integer.parseInt(s);
        } else {
            DVFINFLV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFINFVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFINFVAL_AGGR = Integer.parseInt(s);
        } else {
            DVFINFVAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFINFV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFINFV_AGGR = Integer.parseInt(s);
        } else {
            DVFINFV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFINVOTV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFINVOTV_AGGR = Integer.parseInt(s);
        } else {
            DVFINVOTV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFLFENV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFLFENV_AGGR = Integer.parseInt(s);
        } else {
            DVFLFENV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFLFFSV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFLFFSV_AGGR = Integer.parseInt(s);
        } else {
            DVFLFFSV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFLFSIV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFLFSIV_AGGR = Integer.parseInt(s);
        } else {
            DVFLFSIV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFLFTEV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFLFTEV_AGGR = Integer.parseInt(s);
        } else {
            DVFLFTEV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFNSVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFNSVAL_AGGR = Integer.parseInt(s);
        } else {
            DVFNSVAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFSHOSV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFSHOSV_AGGR = Integer.parseInt(s);
        } else {
            DVFSHOSV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFSHUKV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFSHUKV_AGGR = Integer.parseInt(s);
        } else {
            DVFSHUKV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVIISAV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVIISAV_AGGR = Integer.parseInt(s);
        } else {
            DVIISAV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVINSV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVINSV_AGGR = Integer.parseInt(s);
        } else {
            DVINSV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVISAVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVISAVAL_AGGR = Integer.parseInt(s);
        } else {
            DVISAVAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVKISAV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVKISAV_AGGR = Integer.parseInt(s);
        } else {
            DVKISAV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVPAVCUV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVPAVCUV_AGGR = Integer.parseInt(s);
        } else {
            DVPAVCUV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVPFCURVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVPFCURVAL_AGGR = Double.parseDouble(s);
        } else {
            DVPFCURVAL_AGGR = Double.NaN;
        }
    }

    protected final void initDVPFDDV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVPFDDV_AGGR = Integer.parseInt(s);
        } else {
            DVPFDDV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVPINPVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVPINPVAL_AGGR = Double.parseDouble(s);
        } else {
            DVPINPVAL_AGGR = Double.NaN;
        }
    }

    protected final void initDVPPVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVPPVAL_AGGR = Double.parseDouble(s);
        } else {
            DVPPVAL_AGGR = Double.NaN;
        }
    }

    protected final void initDVSAVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVSAVAL_AGGR = Integer.parseInt(s);
        } else {
            DVSAVAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVSPEN_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVSPEN_AGGR = Double.parseDouble(s);
        } else {
            DVSPEN_AGGR = Double.NaN;
        }
    }

    protected final void initDVVALDBT_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVVALDBT_AGGR = Double.parseDouble(s);
        } else {
            DVVALDBT_AGGR = Double.NaN;
        }
    }

    protected final void initDVVALDCOS_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVVALDCOS_AGGR = Double.parseDouble(s);
        } else {
            DVVALDCOS_AGGR = Double.NaN;
        }
    }

    protected final void initEQNEW(String s) {
        if (!s.trim().isEmpty()) {
            EQNEW = Byte.parseByte(s);
        } else {
            EQNEW = Byte.MIN_VALUE;
        }
    }

    protected final void initEQNEW_I(String s) {
        if (!s.trim().isEmpty()) {
            EQNEW_I = Byte.parseByte(s);
        } else {
            EQNEW_I = Byte.MIN_VALUE;
        }
    }

    protected final void initEQNEW_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                EQNEW_IFLAG = false;
            } else {
                EQNEW_IFLAG = true;
            }
        }
    }

    protected final void initEQOLD(String s) {
        if (!s.trim().isEmpty()) {
            EQOLD = Byte.parseByte(s);
        } else {
            EQOLD = Byte.MIN_VALUE;
        }
    }

    protected final void initEQOLD_I(String s) {
        if (!s.trim().isEmpty()) {
            EQOLD_I = Byte.parseByte(s);
        } else {
            EQOLD_I = Byte.MIN_VALUE;
        }
    }

    protected final void initEQOLD_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                EQOLD_IFLAG = false;
            } else {
                EQOLD_IFLAG = true;
            }
        }
    }

    protected final void initEQREAS5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                EQREAS5 = false;
            } else {
                EQREAS5 = true;
            }
        }
    }

    protected final void initEQREAS6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                EQREAS6 = false;
            } else {
                EQREAS6 = true;
            }
        }
    }

    protected final void initEQREAS7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                EQREAS7 = false;
            } else {
                EQREAS7 = true;
            }
        }
    }

    protected final void initEQREAS8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                EQREAS8 = false;
            } else {
                EQREAS8 = true;
            }
        }
    }

    protected final void initEQREAS9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                EQREAS9 = false;
            } else {
                EQREAS9 = true;
            }
        }
    }

    protected final void initGCONTVLS(String s) {
        if (!s.trim().isEmpty()) {
            GCONTVLS = Integer.parseInt(s);
        } else {
            GCONTVLS = Integer.MIN_VALUE;
        }
    }

    protected final void initHEXT1(String s) {
        if (!s.trim().isEmpty()) {
            HEXT1 = Byte.parseByte(s);
        } else {
            HEXT1 = Byte.MIN_VALUE;
        }
    }

    protected final void initHEXT2(String s) {
        if (!s.trim().isEmpty()) {
            HEXT2 = Byte.parseByte(s);
        } else {
            HEXT2 = Byte.MIN_VALUE;
        }
    }

    protected final void initHEXT3(String s) {
        if (!s.trim().isEmpty()) {
            HEXT3 = Byte.parseByte(s);
        } else {
            HEXT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initHEXT4(String s) {
        if (!s.trim().isEmpty()) {
            HEXT4 = Byte.parseByte(s);
        } else {
            HEXT4 = Byte.MIN_VALUE;
        }
    }

    protected final void initHFINL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            HFINL_AGGR = Double.parseDouble(s);
        } else {
            HFINL_AGGR = Double.NaN;
        }
    }

    protected final void initHFINW_EXCENDW_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            HFINW_EXCENDW_AGGR = Double.parseDouble(s);
        } else {
            HFINW_EXCENDW_AGGR = Double.NaN;
        }
    }

    protected final void initH_FLAG1(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                H_FLAG1 = false;
            } else {
                H_FLAG1 = true;
            }
        }
    }

    protected final void initH_FLAG2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                H_FLAG2 = false;
            } else {
                H_FLAG2 = true;
            }
        }
    }

    protected final void initH_FLAG4(String s) {
        if (!s.trim().isEmpty()) {
            H_FLAG4 = Byte.parseByte(s);
        } else {
            H_FLAG4 = Byte.MIN_VALUE;
        }
    }

    protected final void initH_FLAG5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 1) {
                H_FLAG5 = false;
            } else {
                H_FLAG5 = true;
            }
        }
    }

    protected final void initLEA(String s) {
        if (!s.trim().isEmpty()) {
            LEA = s;
        }
    }

    protected final void initMARRSV(String s) {
        if (!s.trim().isEmpty()) {
            MARRSV = Integer.parseInt(s);
        } else {
            MARRSV = Integer.MIN_VALUE;
        }
    }

    protected final void initMARRSV2(String s) {
        if (!s.trim().isEmpty()) {
            MARRSV2 = Integer.parseInt(s);
        } else {
            MARRSV2 = Integer.MIN_VALUE;
        }
    }

    protected final void initMARRSV3(String s) {
        if (!s.trim().isEmpty()) {
            MARRSV3 = Short.parseShort(s);
        } else {
            MARRSV3 = Short.MIN_VALUE;
        }
    }

    protected final void initMCHGE(String s) {
        if (!s.trim().isEmpty()) {
            MCHGE = Byte.parseByte(s);
        } else {
            MCHGE = Byte.MIN_VALUE;
        }
    }

    protected final void initMCHGENUM(String s) {
        if (!s.trim().isEmpty()) {
            MCHGENUM = Byte.parseByte(s);
        } else {
            MCHGENUM = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDV10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MENDV10 = false;
            } else {
                MENDV10 = true;
            }
        }
    }

    protected final void initMENDV10_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            MENDV10_I = false;
        }
    }

    protected final void initMENDV10_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                MENDV10_IFLAG = false;
            } else {
                MENDV10_IFLAG = true;
            }
        }
    }

    protected final void initMENDV12(String s) {
        if (!s.trim().isEmpty()) {
            MENDV12 = Short.parseShort(s);
        } else {
            MENDV12 = Short.MIN_VALUE;
        }
    }

    protected final void initMENDV12_I(String s) {
        if (!s.trim().isEmpty()) {
            MENDV12_I = Short.parseShort(s);
        } else {
            MENDV12_I = Short.MIN_VALUE;
        }
    }

    protected final void initMENDV12_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                MENDV12_IFLAG = false;
            } else {
                MENDV12_IFLAG = true;
            }
        }
    }

    protected final void initMENDV13(String s) {
        if (!s.trim().isEmpty()) {
            MENDV13 = Short.parseShort(s);
        } else {
            MENDV13 = Short.MIN_VALUE;
        }
    }

    protected final void initMENDV13_I(String s) {
        if (!s.trim().isEmpty()) {
            MENDV13_I = Short.parseShort(s);
        } else {
            MENDV13_I = Short.MIN_VALUE;
        }
    }

    protected final void initMENDV13_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                MENDV13_IFLAG = false;
            } else {
                MENDV13_IFLAG = true;
            }
        }
    }

    protected final void initMENDV14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MENDV14 = false;
            } else {
                MENDV14 = true;
            }
        }
    }

    protected final void initMENDV14_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            MENDV14_I = false;
        }
    }

    protected final void initMENDV14_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                MENDV14_IFLAG = false;
            } else {
                MENDV14_IFLAG = true;
            }
        }
    }

    protected final void initMENDV15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MENDV15 = false;
            } else {
                MENDV15 = true;
            }
        }
    }

    protected final void initMENDV15_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            MENDV15_I = false;
        }
    }

    protected final void initMENDV15_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                MENDV15_IFLAG = false;
            } else {
                MENDV15_IFLAG = true;
            }
        }
    }

    protected final void initMENDV8_I(String s) {
        if (!s.trim().isEmpty()) {
            MENDV8_I = Short.parseShort(s);
        } else {
            MENDV8_I = Short.MIN_VALUE;
        }
    }

    protected final void initMENDV8_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                MENDV8_IFLAG = false;
            } else {
                MENDV8_IFLAG = true;
            }
        }
    }

    protected final void initMENDV9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MENDV9 = false;
            } else {
                MENDV9 = true;
            }
        }
    }

    protected final void initMENDV9_I(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            MENDV9_I = false;
        }
    }

    protected final void initMENDV9_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                MENDV9_IFLAG = false;
            } else {
                MENDV9_IFLAG = true;
            }
        }
    }

    protected final void initMENDVB10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MENDVB10 = false;
            } else {
                MENDVB10 = true;
            }
        }
    }

    protected final void initMENDVB12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MENDVB12 = false;
            } else {
                MENDVB12 = true;
            }
        }
    }

    protected final void initMENDVB13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MENDVB13 = false;
            } else {
                MENDVB13 = true;
            }
        }
    }

    protected final void initMENDVB14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MENDVB14 = false;
            } else {
                MENDVB14 = true;
            }
        }
    }

    protected final void initMENDVB15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MENDVB15 = false;
            } else {
                MENDVB15 = true;
            }
        }
    }

    protected final void initMENDVB9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MENDVB9 = false;
            } else {
                MENDVB9 = true;
            }
        }
    }

    protected final void initMENDY10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MENDY10 = false;
            } else {
                MENDY10 = true;
            }
        }
    }

    protected final void initMENDY12(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MENDY12 = false;
            } else {
                MENDY12 = true;
            }
        }
    }

    protected final void initMENDY13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MENDY13 = false;
            } else {
                MENDY13 = true;
            }
        }
    }

    protected final void initMENDY14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MENDY14 = false;
            } else {
                MENDY14 = true;
            }
        }
    }

    protected final void initMENDY15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MENDY15 = false;
            } else {
                MENDY15 = true;
            }
        }
    }

    protected final void initMENDY9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MENDY9 = false;
            } else {
                MENDY9 = true;
            }
        }
    }

    protected final void initMEND___W2(String s) {
        if (!s.trim().isEmpty()) {
            MEND___W2 = Byte.parseByte(s);
        } else {
            MEND___W2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMEXTN(String s) {
        if (!s.trim().isEmpty()) {
            MEXTN = Byte.parseByte(s);
        } else {
            MEXTN = Byte.MIN_VALUE;
        }
    }

    protected final void initMEXTRS1(String s) {
        if (!s.trim().isEmpty()) {
            MEXTRS1 = Byte.parseByte(s);
        } else {
            MEXTRS1 = Byte.MIN_VALUE;
        }
    }

    protected final void initMEXTRS2(String s) {
        if (!s.trim().isEmpty()) {
            MEXTRS2 = Byte.parseByte(s);
        } else {
            MEXTRS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMEXTRS3(String s) {
        if (!s.trim().isEmpty()) {
            MEXTRS3 = Byte.parseByte(s);
        } else {
            MEXTRS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initMEXTRS4(String s) {
        if (!s.trim().isEmpty()) {
            MEXTRS4 = Byte.parseByte(s);
        } else {
            MEXTRS4 = Byte.MIN_VALUE;
        }
    }

    protected final void initMEXTRS5(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MEXTRS5 = false;
            } else {
                MEXTRS5 = true;
            }
        }
    }

    protected final void initMEXTRS6(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MEXTRS6 = false;
            } else {
                MEXTRS6 = true;
            }
        }
    }

    protected final void initMEXTRS7(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MEXTRS7 = false;
            } else {
                MEXTRS7 = true;
            }
        }
    }

    protected final void initMEXTRS8(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MEXTRS8 = false;
            } else {
                MEXTRS8 = true;
            }
        }
    }

    protected final void initMEXTRS9(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MEXTRS9 = false;
            } else {
                MEXTRS9 = true;
            }
        }
    }

    protected final void initMINC10(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MINC10 = false;
            } else {
                MINC10 = true;
            }
        }
    }

    protected final void initMINC13(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MINC13 = false;
            } else {
                MINC13 = true;
            }
        }
    }

    protected final void initMINC14(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MINC14 = false;
            } else {
                MINC14 = true;
            }
        }
    }

    protected final void initMINC15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MINC15 = false;
            } else {
                MINC15 = true;
            }
        }
    }

    protected final void initMNUMBN(String s) {
        if (!s.trim().isEmpty()) {
            MNUMBN = Byte.parseByte(s);
        } else {
            MNUMBN = Byte.MIN_VALUE;
        }
    }

    protected final void initMNUMBN_I(String s) {
        if (!s.trim().isEmpty()) {
            MNUMBN_I = Byte.parseByte(s);
        } else {
            MNUMBN_I = Byte.MIN_VALUE;
        }
    }

    protected final void initMNUMBN_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                MNUMBN_IFLAG = false;
            } else {
                MNUMBN_IFLAG = true;
            }
        }
    }

    protected final void initMNUMBO(String s) {
        if (!s.trim().isEmpty()) {
            MNUMBO = Byte.parseByte(s);
        } else {
            MNUMBO = Byte.MIN_VALUE;
        }
    }

    protected final void initMNUMBO_I(String s) {
        if (!s.trim().isEmpty()) {
            MNUMBO_I = Byte.parseByte(s);
        } else {
            MNUMBO_I = Byte.MIN_VALUE;
        }
    }

    protected final void initMNUMBO_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                MNUMBO_IFLAG = false;
            } else {
                MNUMBO_IFLAG = true;
            }
        }
    }

    protected final void initMNUMB_I(String s) {
        if (!s.trim().isEmpty()) {
            MNUMB_I = Byte.parseByte(s);
        } else {
            MNUMB_I = Byte.MIN_VALUE;
        }
    }

    protected final void initMNUMB_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                MNUMB_IFLAG = false;
            } else {
                MNUMB_IFLAG = true;
            }
        }
    }

    protected final void initMONTHW1(String s) {
        if (!s.trim().isEmpty()) {
            MONTHW1 = Byte.parseByte(s);
        } else {
            MONTHW1 = Byte.MIN_VALUE;
        }
    }

    protected final void initMORTID(String s) {
        if (!s.trim().isEmpty()) {
            MORTID = Byte.parseByte(s);
        } else {
            MORTID = Byte.MIN_VALUE;
        }
    }

    protected final void initMORTID2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MORTID2 = false;
            } else {
                MORTID2 = true;
            }
        }
    }

    protected final void initMORTID3(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MORTID3 = false;
            } else {
                MORTID3 = true;
            }
        }
    }

    protected final void initMREAS14(String s) {
        if (!s.trim().isEmpty()) {
            MREAS14 = Byte.parseByte(s);
        } else {
            MREAS14 = Byte.MIN_VALUE;
        }
    }

    protected final void initMREAS15(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == -7) {
                MREAS15 = false;
            } else {
                MREAS15 = true;
            }
        }
    }

    protected final void initMREAS24(String s) {
        if (!s.trim().isEmpty()) {
            MREAS24 = Byte.parseByte(s);
        } else {
            MREAS24 = Byte.MIN_VALUE;
        }
    }

    protected final void initMVALB2_I(String s) {
        if (!s.trim().isEmpty()) {
            MVALB2_I = Byte.parseByte(s);
        } else {
            MVALB2_I = Byte.MIN_VALUE;
        }
    }

    protected final void initMVALB2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                MVALB2_IFLAG = false;
            } else {
                MVALB2_IFLAG = true;
            }
        }
    }

    protected final void initMW1CHK1(String s) {
        if (!s.trim().isEmpty()) {
            MW1CHK1 = Byte.parseByte(s);
        } else {
            MW1CHK1 = Byte.MIN_VALUE;
        }
    }

    protected final void initMW1CHK2(String s) {
        if (!s.trim().isEmpty()) {
            MW1CHK2 = Byte.parseByte(s);
        } else {
            MW1CHK2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMW1CHK3(String s) {
        if (!s.trim().isEmpty()) {
            MW1CHK3 = Byte.parseByte(s);
        } else {
            MW1CHK3 = Byte.MIN_VALUE;
        }
    }

    protected final void initMYIFCH(String s) {
        if (!s.trim().isEmpty()) {
            MYIFCH = Byte.parseByte(s);
        } else {
            MYIFCH = Byte.MIN_VALUE;
        }
    }

    protected final void initMYIFCH2(String s) {
        if (!s.trim().isEmpty()) {
            MYIFCH2 = Byte.parseByte(s);
        } else {
            MYIFCH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMYIFCH3(String s) {
        if (!s.trim().isEmpty()) {
            MYIFCH3 = Byte.parseByte(s);
        } else {
            MYIFCH3 = Byte.MIN_VALUE;
        }
    }

    protected final void initNOUNITS(String s) {
        if (!s.trim().isEmpty()) {
            NOUNITS = Byte.parseByte(s);
        } else {
            NOUNITS = Byte.MIN_VALUE;
        }
    }

    protected final void initNUMDEPCH_HH(String s) {
        if (!s.trim().isEmpty()) {
            NUMDEPCH_HH = Byte.parseByte(s);
        } else {
            NUMDEPCH_HH = Byte.MIN_VALUE;
        }
    }

    protected final void initNUMNDEP(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                NUMNDEP = false;
            } else {
                NUMNDEP = true;
            }
        }
    }

    protected final void initTOTARR_EXCMORT_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTARR_EXCMORT_AGGR = Integer.parseInt(s);
        } else {
            TOTARR_EXCMORT_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTBILLARR_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTBILLARR_AGGR = Integer.parseInt(s);
        } else {
            TOTBILLARR_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTCC_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTCC_AGGR = Integer.parseInt(s);
        } else {
            TOTCC_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTDVNWFLN_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTDVNWFLN_AGGR = Integer.parseInt(s);
        } else {
            TOTDVNWFLN_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTDVNWILN_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTDVNWILN_AGGR = Integer.parseInt(s);
        } else {
            TOTDVNWILN_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTFLNS_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTFLNS_AGGR = Double.parseDouble(s);
        } else {
            TOTFLNS_AGGR = Double.NaN;
        }
    }

    protected final void initTOTHPARR_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTHPARR_AGGR = Short.parseShort(s);
        } else {
            TOTHPARR_AGGR = Short.MIN_VALUE;
        }
    }

    protected final void initTOTHP_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTHP_AGGR = Double.parseDouble(s);
        } else {
            TOTHP_AGGR = Double.NaN;
        }
    }

    protected final void initTOTLNARR_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTLNARR_AGGR = Integer.parseInt(s);
        } else {
            TOTLNARR_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTLNS_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTLNS_AGGR = Double.parseDouble(s);
        } else {
            TOTLNS_AGGR = Double.NaN;
        }
    }

    protected final void initTOTLOS_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTLOS_AGGR = Double.parseDouble(s);
        } else {
            TOTLOS_AGGR = Double.NaN;
        }
    }

    protected final void initTOTMOARR_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTMOARR_AGGR = Short.parseShort(s);
        } else {
            TOTMOARR_AGGR = Short.MIN_VALUE;
        }
    }

    protected final void initTOTMO_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTMO_AGGR = Double.parseDouble(s);
        } else {
            TOTMO_AGGR = Double.NaN;
        }
    }

    protected final void initTOTNLOS_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTNLOS_AGGR = Integer.parseInt(s);
        } else {
            TOTNLOS_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTNSLBNK_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTNSLBNK_AGGR = Integer.parseInt(s);
        } else {
            TOTNSLBNK_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTNSLC_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTNSLC_AGGR = Integer.parseInt(s);
        } else {
            TOTNSLC_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTOSLBNK_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTOSLBNK_AGGR = Integer.parseInt(s);
        } else {
            TOTOSLBNK_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTOSLC_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTOSLC_AGGR = Double.parseDouble(s);
        } else {
            TOTOSLC_AGGR = Double.NaN;
        }
    }

    protected final void initTOTPEN_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTPEN_AGGR = Double.parseDouble(s);
        } else {
            TOTPEN_AGGR = Double.NaN;
        }
    }

    protected final void initTOTSC_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTSC_AGGR = Short.parseShort(s);
        } else {
            TOTSC_AGGR = Short.MIN_VALUE;
        }
    }

    protected final void initTOTSLBNK_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTSLBNK_AGGR = Integer.parseInt(s);
        } else {
            TOTSLBNK_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTSLC_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTSLC_AGGR = Double.parseDouble(s);
        } else {
            TOTSLC_AGGR = Double.NaN;
        }
    }

    protected final void initURINDEW(String s) {
        if (!s.trim().isEmpty()) {
            URINDEW = Byte.parseByte(s);
        } else {
            URINDEW = Byte.MIN_VALUE;
        }
    }

    protected final void initURINDSC(String s) {
        if (!s.trim().isEmpty()) {
            URINDSC = Byte.parseByte(s);
        } else {
            URINDSC = Byte.MIN_VALUE;
        }
    }

    protected final void initVCADD(String s) {
        if (!s.trim().isEmpty()) {
            VCADD = Byte.parseByte(s);
        } else {
            VCADD = Byte.MIN_VALUE;
        }
    }

    protected final void initVCADDN(String s) {
        if (!s.trim().isEmpty()) {
            VCADDN = Byte.parseByte(s);
        } else {
            VCADDN = Byte.MIN_VALUE;
        }
    }

    protected final void initVOTYPE1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            VOTYPE1_IFLAG = false;
        }
    }

    protected final void initVOTYPE2_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            VOTYPE2_IFLAG = false;
        }
    }

    protected final void initVOTYPE3_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            VOTYPE3_IFLAG = false;
        }
    }

    protected final void initVOTYPE4_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            VOTYPE4_IFLAG = false;
        }
    }

    protected final void initVOTYPE5_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            VOTYPE5_IFLAG = false;
        }
    }

    protected final void initVPERS_I(String s) {
        if (!s.trim().isEmpty()) {
            VPERS_I = Byte.parseByte(s);
        } else {
            VPERS_I = Byte.MIN_VALUE;
        }
    }

    protected final void initVPERS_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            if (b == 0) {
                VPERS_IFLAG = false;
            } else {
                VPERS_IFLAG = true;
            }
        }
    }

    protected final void initXS_CALWGT(String s) {
        if (!s.trim().isEmpty()) {
            XS_CALWGT = Double.parseDouble(s);
        } else {
            XS_CALWGT = Double.NaN;
        }
    }

    protected final void initYEARW1(String s) {
        if (!s.trim().isEmpty()) {
            YEARW1 = Short.parseShort(s);
        } else {
            YEARW1 = Short.MIN_VALUE;
        }
    }

    public int getBUYLGDST_SUM() {
        return BUYLGDST_SUM;
    }

    public short getCASEW2() {
        return CASEW2;
    }

    public int getDVBLTDEBT() {
        return DVBLTDEBT;
    }

    public int getDVBLTVAL() {
        return DVBLTVAL;
    }

    public double getDVCACRVAL_AGGR() {
        return DVCACRVAL_AGGR;
    }

    public int getDVCACTV_AGGR() {
        return DVCACTV_AGGR;
    }

    public int getDVCAODVAL_AGGR() {
        return DVCAODVAL_AGGR;
    }

    public int getDVCASVV_AGGR() {
        return DVCASVV_AGGR;
    }

    public double getDVCAVAL_AGGR() {
        return DVCAVAL_AGGR;
    }

    public int getDVCISAV_AGGR() {
        return DVCISAV_AGGR;
    }

    public double getDVDBRWEALTHVAL_AGGR() {
        return DVDBRWEALTHVAL_AGGR;
    }

    public int getDVFBONDV_AGGR() {
        return DVFBONDV_AGGR;
    }

    public int getDVFCOLLV_AGGR() {
        return DVFCOLLV_AGGR;
    }

    public int getDVFEOPTV_AGGR() {
        return DVFEOPTV_AGGR;
    }

    public int getDVFESHARES_AGGR() {
        return DVFESHARES_AGGR;
    }

    public int getDVFESHAV_AGGR() {
        return DVFESHAV_AGGR;
    }

    public double getDVFFASSETS_AGGR() {
        return DVFFASSETS_AGGR;
    }

    public int getDVFGLTFOV_AGGR() {
        return DVFGLTFOV_AGGR;
    }

    public int getDVFGLTUKV_AGGR() {
        return DVFGLTUKV_AGGR;
    }

    public int getDVFINFLV_AGGR() {
        return DVFINFLV_AGGR;
    }

    public int getDVFINFVAL_AGGR() {
        return DVFINFVAL_AGGR;
    }

    public int getDVFINFV_AGGR() {
        return DVFINFV_AGGR;
    }

    public int getDVFINVOTV_AGGR() {
        return DVFINVOTV_AGGR;
    }

    public int getDVFLFENV_AGGR() {
        return DVFLFENV_AGGR;
    }

    public int getDVFLFFSV_AGGR() {
        return DVFLFFSV_AGGR;
    }

    public int getDVFLFSIV_AGGR() {
        return DVFLFSIV_AGGR;
    }

    public int getDVFLFTEV_AGGR() {
        return DVFLFTEV_AGGR;
    }

    public int getDVFNSVAL_AGGR() {
        return DVFNSVAL_AGGR;
    }

    public int getDVFSHOSV_AGGR() {
        return DVFSHOSV_AGGR;
    }

    public int getDVFSHUKV_AGGR() {
        return DVFSHUKV_AGGR;
    }

    public int getDVIISAV_AGGR() {
        return DVIISAV_AGGR;
    }

    public int getDVINSV_AGGR() {
        return DVINSV_AGGR;
    }

    public int getDVISAVAL_AGGR() {
        return DVISAVAL_AGGR;
    }

    public int getDVKISAV_AGGR() {
        return DVKISAV_AGGR;
    }

    public int getDVPAVCUV_AGGR() {
        return DVPAVCUV_AGGR;
    }

    public double getDVPFCURVAL_AGGR() {
        return DVPFCURVAL_AGGR;
    }

    public int getDVPFDDV_AGGR() {
        return DVPFDDV_AGGR;
    }

    public double getDVPINPVAL_AGGR() {
        return DVPINPVAL_AGGR;
    }

    public double getDVPPVAL_AGGR() {
        return DVPPVAL_AGGR;
    }

    public int getDVSAVAL_AGGR() {
        return DVSAVAL_AGGR;
    }

    public double getDVSPEN_AGGR() {
        return DVSPEN_AGGR;
    }

    public double getDVVALDBT_AGGR() {
        return DVVALDBT_AGGR;
    }

    public double getDVVALDCOS_AGGR() {
        return DVVALDCOS_AGGR;
    }

    public byte getEQNEW() {
        return EQNEW;
    }

    public byte getEQNEW_I() {
        return EQNEW_I;
    }

    public boolean getEQNEW_IFLAG() {
        return EQNEW_IFLAG;
    }

    public byte getEQOLD() {
        return EQOLD;
    }

    public byte getEQOLD_I() {
        return EQOLD_I;
    }

    public boolean getEQOLD_IFLAG() {
        return EQOLD_IFLAG;
    }

    public boolean getEQREAS5() {
        return EQREAS5;
    }

    public boolean getEQREAS6() {
        return EQREAS6;
    }

    public boolean getEQREAS7() {
        return EQREAS7;
    }

    public boolean getEQREAS8() {
        return EQREAS8;
    }

    public boolean getEQREAS9() {
        return EQREAS9;
    }

    public int getGCONTVLS() {
        return GCONTVLS;
    }

    public byte getHEXT1() {
        return HEXT1;
    }

    public byte getHEXT2() {
        return HEXT2;
    }

    public byte getHEXT3() {
        return HEXT3;
    }

    public byte getHEXT4() {
        return HEXT4;
    }

    public double getHFINL_AGGR() {
        return HFINL_AGGR;
    }

    public double getHFINW_EXCENDW_AGGR() {
        return HFINW_EXCENDW_AGGR;
    }

    public boolean getH_FLAG1() {
        return H_FLAG1;
    }

    public boolean getH_FLAG2() {
        return H_FLAG2;
    }

    public byte getH_FLAG4() {
        return H_FLAG4;
    }

    public boolean getH_FLAG5() {
        return H_FLAG5;
    }

    public String getLEA() {
        return LEA;
    }

    public int getMARRSV() {
        return MARRSV;
    }

    public int getMARRSV2() {
        return MARRSV2;
    }

    public short getMARRSV3() {
        return MARRSV3;
    }

    public byte getMCHGE() {
        return MCHGE;
    }

    public byte getMCHGENUM() {
        return MCHGENUM;
    }

    public boolean getMENDV10() {
        return MENDV10;
    }

    public boolean getMENDV10_I() {
        return MENDV10_I;
    }

    public boolean getMENDV10_IFLAG() {
        return MENDV10_IFLAG;
    }

    public short getMENDV12() {
        return MENDV12;
    }

    public short getMENDV12_I() {
        return MENDV12_I;
    }

    public boolean getMENDV12_IFLAG() {
        return MENDV12_IFLAG;
    }

    public short getMENDV13() {
        return MENDV13;
    }

    public short getMENDV13_I() {
        return MENDV13_I;
    }

    public boolean getMENDV13_IFLAG() {
        return MENDV13_IFLAG;
    }

    public boolean getMENDV14() {
        return MENDV14;
    }

    public boolean getMENDV14_I() {
        return MENDV14_I;
    }

    public boolean getMENDV14_IFLAG() {
        return MENDV14_IFLAG;
    }

    public boolean getMENDV15() {
        return MENDV15;
    }

    public boolean getMENDV15_I() {
        return MENDV15_I;
    }

    public boolean getMENDV15_IFLAG() {
        return MENDV15_IFLAG;
    }

    public short getMENDV8_I() {
        return MENDV8_I;
    }

    public boolean getMENDV8_IFLAG() {
        return MENDV8_IFLAG;
    }

    public boolean getMENDV9() {
        return MENDV9;
    }

    public boolean getMENDV9_I() {
        return MENDV9_I;
    }

    public boolean getMENDV9_IFLAG() {
        return MENDV9_IFLAG;
    }

    public boolean getMENDVB10() {
        return MENDVB10;
    }

    public boolean getMENDVB12() {
        return MENDVB12;
    }

    public boolean getMENDVB13() {
        return MENDVB13;
    }

    public boolean getMENDVB14() {
        return MENDVB14;
    }

    public boolean getMENDVB15() {
        return MENDVB15;
    }

    public boolean getMENDVB9() {
        return MENDVB9;
    }

    public boolean getMENDY10() {
        return MENDY10;
    }

    public boolean getMENDY12() {
        return MENDY12;
    }

    public boolean getMENDY13() {
        return MENDY13;
    }

    public boolean getMENDY14() {
        return MENDY14;
    }

    public boolean getMENDY15() {
        return MENDY15;
    }

    public boolean getMENDY9() {
        return MENDY9;
    }

    public byte getMEND___W2() {
        return MEND___W2;
    }

    public byte getMEXTN() {
        return MEXTN;
    }

    public byte getMEXTRS1() {
        return MEXTRS1;
    }

    public byte getMEXTRS2() {
        return MEXTRS2;
    }

    public byte getMEXTRS3() {
        return MEXTRS3;
    }

    public byte getMEXTRS4() {
        return MEXTRS4;
    }

    public boolean getMEXTRS5() {
        return MEXTRS5;
    }

    public boolean getMEXTRS6() {
        return MEXTRS6;
    }

    public boolean getMEXTRS7() {
        return MEXTRS7;
    }

    public boolean getMEXTRS8() {
        return MEXTRS8;
    }

    public boolean getMEXTRS9() {
        return MEXTRS9;
    }

    public boolean getMINC10() {
        return MINC10;
    }

    public boolean getMINC13() {
        return MINC13;
    }

    public boolean getMINC14() {
        return MINC14;
    }

    public boolean getMINC15() {
        return MINC15;
    }

    public byte getMNUMBN() {
        return MNUMBN;
    }

    public byte getMNUMBN_I() {
        return MNUMBN_I;
    }

    public boolean getMNUMBN_IFLAG() {
        return MNUMBN_IFLAG;
    }

    public byte getMNUMBO() {
        return MNUMBO;
    }

    public byte getMNUMBO_I() {
        return MNUMBO_I;
    }

    public boolean getMNUMBO_IFLAG() {
        return MNUMBO_IFLAG;
    }

    public byte getMNUMB_I() {
        return MNUMB_I;
    }

    public boolean getMNUMB_IFLAG() {
        return MNUMB_IFLAG;
    }

    public byte getMONTHW1() {
        return MONTHW1;
    }

    public byte getMORTID() {
        return MORTID;
    }

    public boolean getMORTID2() {
        return MORTID2;
    }

    public boolean getMORTID3() {
        return MORTID3;
    }

    public byte getMREAS14() {
        return MREAS14;
    }

    public boolean getMREAS15() {
        return MREAS15;
    }

    public byte getMREAS24() {
        return MREAS24;
    }

    public byte getMVALB2_I() {
        return MVALB2_I;
    }

    public boolean getMVALB2_IFLAG() {
        return MVALB2_IFLAG;
    }

    public byte getMW1CHK1() {
        return MW1CHK1;
    }

    public byte getMW1CHK2() {
        return MW1CHK2;
    }

    public byte getMW1CHK3() {
        return MW1CHK3;
    }

    public byte getMYIFCH() {
        return MYIFCH;
    }

    public byte getMYIFCH2() {
        return MYIFCH2;
    }

    public byte getMYIFCH3() {
        return MYIFCH3;
    }

    public byte getNOUNITS() {
        return NOUNITS;
    }

    public byte getNUMDEPCH_HH() {
        return NUMDEPCH_HH;
    }

    public boolean getNUMNDEP() {
        return NUMNDEP;
    }

    public int getTOTARR_EXCMORT_AGGR() {
        return TOTARR_EXCMORT_AGGR;
    }

    public int getTOTBILLARR_AGGR() {
        return TOTBILLARR_AGGR;
    }

    public int getTOTCC_AGGR() {
        return TOTCC_AGGR;
    }

    public int getTOTDVNWFLN_AGGR() {
        return TOTDVNWFLN_AGGR;
    }

    public int getTOTDVNWILN_AGGR() {
        return TOTDVNWILN_AGGR;
    }

    public double getTOTFLNS_AGGR() {
        return TOTFLNS_AGGR;
    }

    public short getTOTHPARR_AGGR() {
        return TOTHPARR_AGGR;
    }

    public double getTOTHP_AGGR() {
        return TOTHP_AGGR;
    }

    public int getTOTLNARR_AGGR() {
        return TOTLNARR_AGGR;
    }

    public double getTOTLNS_AGGR() {
        return TOTLNS_AGGR;
    }

    public double getTOTLOS_AGGR() {
        return TOTLOS_AGGR;
    }

    public short getTOTMOARR_AGGR() {
        return TOTMOARR_AGGR;
    }

    public double getTOTMO_AGGR() {
        return TOTMO_AGGR;
    }

    public int getTOTNLOS_AGGR() {
        return TOTNLOS_AGGR;
    }

    public int getTOTNSLBNK_AGGR() {
        return TOTNSLBNK_AGGR;
    }

    public int getTOTNSLC_AGGR() {
        return TOTNSLC_AGGR;
    }

    public int getTOTOSLBNK_AGGR() {
        return TOTOSLBNK_AGGR;
    }

    public double getTOTOSLC_AGGR() {
        return TOTOSLC_AGGR;
    }

    public double getTOTPEN_AGGR() {
        return TOTPEN_AGGR;
    }

    public short getTOTSC_AGGR() {
        return TOTSC_AGGR;
    }

    public int getTOTSLBNK_AGGR() {
        return TOTSLBNK_AGGR;
    }

    public double getTOTSLC_AGGR() {
        return TOTSLC_AGGR;
    }

    public byte getURINDEW() {
        return URINDEW;
    }

    public byte getURINDSC() {
        return URINDSC;
    }

    public byte getVCADD() {
        return VCADD;
    }

    public byte getVCADDN() {
        return VCADDN;
    }

    public boolean getVOTYPE1_IFLAG() {
        return VOTYPE1_IFLAG;
    }

    public boolean getVOTYPE2_IFLAG() {
        return VOTYPE2_IFLAG;
    }

    public boolean getVOTYPE3_IFLAG() {
        return VOTYPE3_IFLAG;
    }

    public boolean getVOTYPE4_IFLAG() {
        return VOTYPE4_IFLAG;
    }

    public boolean getVOTYPE5_IFLAG() {
        return VOTYPE5_IFLAG;
    }

    public byte getVPERS_I() {
        return VPERS_I;
    }

    public boolean getVPERS_IFLAG() {
        return VPERS_IFLAG;
    }

    public double getXS_CALWGT() {
        return XS_CALWGT;
    }

    public short getYEARW1() {
        return YEARW1;
    }


    public WaAS_W2HRecord(WaAS_RecordID i, String line) throws Exception {
        super(i);
        s = line.split("\t");
        initCASEW2(s[0]);
        initYEAR(s[1]);
        initMONTH(s[2]);
        initCASEW1(s[3]);
        initYEARW1(s[4]);
        initMONTHW1(s[5]);
        initHOUT(s[6]);
        initH_FLAG1(s[7]);
        initH_FLAG2(s[8]);
        initH_FLAG4(s[9]);
        initH_FLAG5(s[10]);
        initXS_CALWGT(s[11]);
        initLEA(s[12]);
        initURINDEW(s[13]);
        initURINDSC(s[14]);
        initACCOM(s[15]);
        initACCOTH(s[16]);
        initDVVESTV2_I(s[17]);
        initDVVESTV2_IFLAG(s[18]);
        initDVVESTV3_I(s[19]);
        initDVVESTV3_IFLAG(s[20]);
        initDVVESTV_I(s[21]);
        initDVVESTV_IFLAG(s[22]);
        initDVVOVAL_I(s[23]);
        initDVVOVAL_IFLAG(s[24]);
        initDVVPERV_I(s[25]);
        initDVVPERV_IFLAG(s[26]);
        initEINTPAY(s[27]);
        initEINTRAT(s[28]);
        initEINTRAT_I(s[29]);
        initEINTRAT_IFLAG(s[30]);
        initEOTHIRR(s[31]);
        initEOTHIVA(s[32]);
        initEOTHIVB(s[33]);
        initEOTHREG(s[34]);
        initEOTHRVA(s[35]);
        initEOTHRVB(s[36]);
        initEPRPER(s[37]);
        initEPRVAL(s[38]);
        initEPRVPAY(s[39]);
        initEQFILTER(s[40]);
        initEQNEW(s[41]);
        initEQNEW_I(s[42]);
        initEQNEW_IFLAG(s[43]);
        initEQOLD(s[44]);
        initEQOLD_I(s[45]);
        initEQOLD_IFLAG(s[46]);
        initEQREAS1(s[47]);
        initEQREAS2(s[48]);
        initEQREAS3(s[49]);
        initEQREAS4(s[50]);
        initEQREAS5(s[51]);
        initEQREAS6(s[52]);
        initEQREAS7(s[53]);
        initEQREAS8(s[54]);
        initEQREAS9(s[55]);
        initEQREL(s[56]);
        initEQREL_I(s[57]);
        initEQREL_IFLAG(s[58]);
        initEQTYPE(s[59]);
        initEQTYPE_I(s[60]);
        initEQTYPE_IFLAG(s[61]);
        initEQVALB(s[62]);
        initEQVAL(s[63]);
        initEQVAL_I(s[64]);
        initEQVAL_IFLAG(s[65]);
        initEQWHEN(s[66]);
        initEQYES(s[67]);
        initEQYES_I(s[68]);
        initEQYES_IFLAG(s[69]);
        initERECMB(s[70]);
        initERECM(s[71]);
        initERECTAX(s[72]);
        initERENTAM(s[73]);
        initERENTB(s[74]);
        initERVPRP(s[75]);
        initERVPRP_I(s[76]);
        initERVPRP_IFLAG(s[77]);
        initERVRECB(s[78]);
        initERVREC(s[79]);
        initERVREG(s[80]);
        initERVRENT(s[81]);
        initERVSUMB(s[82]);
        initERVSUM(s[83]);
        initERVTAX(s[84]);
        initFLTTYP(s[85]);
        initFURN(s[86]);
        initGCOLLEC(s[87]);
        initGCOLLVB(s[88]);
        initGCOLLV(s[89]);
        initGCONTVB(s[90]);
        initGCPREAM(s[91]);
        initHAGEB(s[92]);
        initHAGEYR(s[93]);
        initHBFROM(s[94]);
        initHBUYSE(s[95]);
        initHBUYYR(s[96]);
        initHEXT1(s[97]);
        initHEXT2(s[98]);
        initHEXT3(s[99]);
        initHEXT4(s[100]);
        initHHOSCH(s[101]);
        initHHOWN(s[102]);
        initHMORTG(s[103]);
        initHPRICEB(s[104]);
        initHPRICE(s[105]);
        initHRTBEV(s[106]);
        initHSETYPE(s[107]);
        initHSHAREP(s[108]);
        initHSHAREP_I(s[109]);
        initHSHAREP_IFLAG(s[110]);
        initHSHARE(s[111]);
        initHSHARE_I(s[112]);
        initHSHARE_IFLAG(s[113]);
        initHVALB(s[114]);
        initHVALRS1(s[115]);
        initHVALRS2(s[116]);
        initHVALRS3(s[117]);
        initHVALRS4(s[118]);
        initHVALRS5(s[119]);
        initHVALUE(s[120]);
        initHVALUE_I(s[121]);
        initHVALUE_IFLAG(s[122]);
        initLLORD(s[123]);
        initMALL2(s[124]);
        initMALL2_I(s[125]);
        initMALL2_IFLAG(s[126]);
        initMALL3(s[127]);
        initMALL3_I(s[128]);
        initMALL3_IFLAG(s[129]);
        initMALLTY2(s[130]);
        initMALLTY2_I(s[131]);
        initMALLTY2_IFLAG(s[132]);
        initMALLTY3(s[133]);
        initMALLTY3_I(s[134]);
        initMALLTY3_IFLAG(s[135]);
        initMALLTY(s[136]);
        initMALLTY_I(s[137]);
        initMALLTY_IFLAG(s[138]);
        initMALL(s[139]);
        initMALL_I(s[140]);
        initMALL_IFLAG(s[141]);
        initMARRS2(s[142]);
        initMARRS3(s[143]);
        initMARRSV2(s[144]);
        initMARRSV3(s[145]);
        initMARRSV(s[146]);
        initMARRS(s[147]);
        initMCHGENUM(s[148]);
        initMCHGE(s[149]);
        initMDIFFPY(s[150]);
        initMENDNUM2(s[151]);
        initMENDNUM2_I(s[152]);
        initMENDNUM2_IFLAG(s[153]);
        initMENDNUM3(s[154]);
        initMENDNUM(s[155]);
        initMENDNUM_I(s[156]);
        initMENDNUM_IFLAG(s[157]);
        initMENDV10(s[158]);
        initMENDV11(s[159]);
        initMENDV12(s[160]);
        initMENDV13(s[161]);
        initMENDV14(s[162]);
        initMENDV15(s[163]);
        initMENDV2(s[164]);
        initMENDV2_I(s[165]);
        initMENDV2_IFLAG(s[166]);
        initMENDV3(s[167]);
        initMENDV3_I(s[168]);
        initMENDV3_IFLAG(s[169]);
        initMENDV4(s[170]);
        initMENDV4_I(s[171]);
        initMENDV4_IFLAG(s[172]);
        initMENDV5(s[173]);
        initMENDV6(s[174]);
        initMENDV6_I(s[175]);
        initMENDV6_IFLAG(s[176]);
        initMENDV7(s[177]);
        initMENDV8(s[178]);
        initMENDV9(s[179]);
        initMENDVB10(s[180]);
        initMENDVB11(s[181]);
        initMENDVB12(s[182]);
        initMENDVB13(s[183]);
        initMENDVB14(s[184]);
        initMENDVB15(s[185]);
        initMENDVB2(s[186]);
        initMENDVB3(s[187]);
        initMENDVB4(s[188]);
        initMENDVB5(s[189]);
        initMENDVB6(s[190]);
        initMENDVB7(s[191]);
        initMENDVB8(s[192]);
        initMENDVB9(s[193]);
        initMENDVB(s[194]);
        initMENDV(s[195]);
        initMENDV_I(s[196]);
        initMENDV_IFLAG(s[197]);
        initMEND___W2(s[198]);
        initMENDW2_I(s[199]);
        initMENDW2_IFLAG(s[200]);
        initMENDW3(s[201]);
        initMENDW3_I(s[202]);
        initMENDW3_IFLAG(s[203]);
        initMENDW(s[204]);
        initMENDW_I(s[205]);
        initMENDW_IFLAG(s[206]);
        initMENDX2(s[207]);
        initMENDX3(s[208]);
        initMENDX(s[209]);
        initMENDY10(s[210]);
        initMENDY11(s[211]);
        initMENDY12(s[212]);
        initMENDY13(s[213]);
        initMENDY14(s[214]);
        initMENDY15(s[215]);
        initMENDY2(s[216]);
        initMENDY3(s[217]);
        initMENDY4(s[218]);
        initMENDY5(s[219]);
        initMENDY6(s[220]);
        initMENDY7(s[221]);
        initMENDY8(s[222]);
        initMENDY9(s[223]);
        initMENDY(s[224]);
        initMEXTN(s[225]);
        initMEXTRS1(s[226]);
        initMEXTRS2(s[227]);
        initMEXTRS3(s[228]);
        initMEXTRS4(s[229]);
        initMEXTRS5(s[230]);
        initMEXTRS6(s[231]);
        initMEXTRS7(s[232]);
        initMEXTRS8(s[233]);
        initMEXTRS9(s[234]);
        initMHOWPY2(s[235]);
        initMHOWPY3(s[236]);
        initMHOWPY(s[237]);
        initMINC10(s[238]);
        initMINC11(s[239]);
        initMINC12(s[240]);
        initMINC13(s[241]);
        initMINC14(s[242]);
        initMINC15(s[243]);
        initMINC1(s[244]);
        initMINC2(s[245]);
        initMINC3(s[246]);
        initMINC4(s[247]);
        initMINC5(s[248]);
        initMINC6(s[249]);
        initMINC7(s[250]);
        initMINC8(s[251]);
        initMINC9(s[252]);
        initMJNAME01(s[253]);
        initMJNAME02(s[254]);
        initMJNAME03(s[255]);
        initMJNAME04(s[256]);
        initMJNAME18(s[257]);
        initMJNAME19(s[258]);
        initMJNAME20(s[259]);
        initMJNAME35(s[260]);
        initMJNAME36(s[261]);
        initMNAME2(s[262]);
        initMNAME3(s[263]);
        initMNAME(s[264]);
        initMNEG2(s[265]);
        initMNEG2_I(s[266]);
        initMNEG2_IFLAG(s[267]);
        initMNEG3(s[268]);
        initMNEGB2(s[269]);
        initMNEGB3(s[270]);
        initMNEGB(s[271]);
        initMNEG(s[272]);
        initMNEG_I(s[273]);
        initMNEG_IFLAG(s[274]);
        initMNUMBN(s[275]);
        initMNUMBN_I(s[276]);
        initMNUMBN_IFLAG(s[277]);
        initMNUMBO(s[278]);
        initMNUMBO_I(s[279]);
        initMNUMBO_IFLAG(s[280]);
        initMNUMB(s[281]);
        initMOARR_SUM(s[282]);
        initMONAME2(s[283]);
        initMONAME3(s[284]);
        initMONAME(s[285]);
        initMORTID2(s[286]);
        initMORTID3(s[287]);
        initMORTID(s[288]);
        initMPAYB2(s[289]);
        initMPAYB3(s[290]);
        initMPAYB(s[291]);
        initMPAYM2(s[292]);
        initMPAYM3(s[293]);
        initMPAYM(s[294]);
        initMPP2(s[295]);
        initMPP3(s[296]);
        initMPP(s[297]);
        initMREAS01(s[298]);
        initMREAS02(s[299]);
        initMREAS03(s[300]);
        initMREAS04(s[301]);
        initMREAS05(s[302]);
        initMREAS06(s[303]);
        initMREAS07(s[304]);
        initMREAS08(s[305]);
        initMREAS09(s[306]);
        initMREAS11(s[307]);
        initMREAS12(s[308]);
        initMREAS13(s[309]);
        initMREAS14(s[310]);
        initMREAS15(s[311]);
        initMREAS21(s[312]);
        initMREAS22(s[313]);
        initMREAS23(s[314]);
        initMREAS24(s[315]);
        initMTYPE2(s[316]);
        initMTYPE2_I(s[317]);
        initMTYPE2_IFLAG(s[318]);
        initMTYPE3(s[319]);
        initMTYPE3_I(s[320]);
        initMTYPE3_IFLAG(s[321]);
        initMTYPE(s[322]);
        initMTYPE_I(s[323]);
        initMTYPE_IFLAG(s[324]);
        initMVAL2(s[325]);
        initMVAL2_I(s[326]);
        initMVAL2_IFLAG(s[327]);
        initMVAL3(s[328]);
        initMVAL3_I(s[329]);
        initMVAL3_IFLAG(s[330]);
        initMVALB2(s[331]);
        initMVALB2_I(s[332]);
        initMVALB2_IFLAG(s[333]);
        initMVALB3(s[334]);
        initMVALB(s[335]);
        initMVAL(s[336]);
        initMVAL_I(s[337]);
        initMVAL_IFLAG(s[338]);
        initMW1CHK1(s[339]);
        initMW1CHK2(s[340]);
        initMW1CHK3(s[341]);
        initMYIFCH2(s[342]);
        initMYIFCH3(s[343]);
        initMYIFCH(s[344]);
        initMYLFT2(s[345]);
        initMYLFT3(s[346]);
        initMYLFT(s[347]);
        initNVESTV(s[348]);
        initOFINAL(s[349]);
        initOTHMORT(s[350]);
        initTEN1(s[351]);
        initTEN1_I(s[352]);
        initTEN1_IFLAG(s[353]);
        initTIED(s[354]);
        initVCADDN(s[355]);
        initVCADD(s[356]);
        initVCARN(s[357]);
        initVESTV2(s[358]);
        initVESTV(s[359]);
        initVESVB2(s[360]);
        initVESVB(s[361]);
        initVOTHT(s[362]);
        initVOTHT_I(s[363]);
        initVOTHT_IFLAG(s[364]);
        initVOTYP1(s[365]);
        initVOTYP2(s[366]);
        initVOTYP3(s[367]);
        initVOTYP4(s[368]);
        initVOTYP5(s[369]);
        initVOVAL(s[370]);
        initVOVLB(s[371]);
        initVPERS(s[372]);
        initVPERV(s[373]);
        initVTYPE2(s[374]);
        initVTYPE(s[375]);
        initALLENDW(s[376]);
        initBUYLGDST_SUM(s[377]);
        initDVBLDDEBT(s[378]);
        initDVBLDVAL(s[379]);
        initDVBLTDEBT(s[380]);
        initDVBLTVAL(s[381]);
        initDVEQHIP(s[382]);
        initDVEQRELVAL(s[383]);
        initDVEQRUPM(s[384]);
        initDVHORP(s[385]);
        initDVHSEDEBT(s[386]);
        initDVHSEVAL(s[387]);
        initDVHVALUE(s[388]);
        initDVLOSDEBT(s[389]);
        initDVLOSVAL(s[390]);
        initDVLUKDEBT(s[391]);
        initDVLUKVAL(s[392]);
        initDVOPRDEBT(s[393]);
        initDVOPRVAL(s[394]);
        initDVPRIRNT(s[395]);
        initDVPROPERTY(s[396]);
        initHOUSGDST_SUM(s[397]);
        initHPROPW(s[398]);
        initTOTMNEG(s[399]);
        initTOTMORT(s[400]);
        initTOTMVAL(s[401]);
        initDVHRPNUM(s[402]);
        initDVHSIZE(s[403]);
        initHHOLDTYPE(s[404]);
        initGOR(s[405]);
        initHRPDVAGE9(s[406]);
        initHRPDVILO3A(s[407]);
        initHRPDVMRDF(s[408]);
        initHRPEDATTN1(s[409]);
        initHRPEDATTN2(s[410]);
        initHRPEDATTN3(s[411]);
        initHRPEDLEVEL(s[412]);
        initHRPEMPSTAT2(s[413]);
        initHRPIOUT1(s[414]);
        initHRPNSSEC3(s[415]);
        initHRPPARTIOUT1(s[416]);
        initHRPSEX(s[417]);
        initNBABY(s[418]);
        initNC1015(s[419]);
        initNC1618(s[420]);
        initNC5TO9(s[421]);
        initNCHILD(s[422]);
        initNCU16(s[423]);
        initNCUND5(s[424]);
        initNDEPC(s[425]);
        initNNDEPC(s[426]);
        initNOUNITS(s[427]);
        initNUMADULT(s[428]);
        initNUMCH18(s[429]);
        initNUMCHILD(s[430]);
        initNUMCIVPTR(s[431]);
        initNUMCPART(s[432]);
        initNUMDEPCH_HH(s[433]);
        initNUMHHLDR(s[434]);
        initNUMJOB(s[435]);
        initNUMMPART(s[436]);
        initNUMNDEP(s[437]);
        initNUMSSEX(s[438]);
        initMNUMB_I(s[439]);
        initMNUMB_IFLAG(s[440]);
        initMNEG3_I(s[441]);
        initMNEG3_IFLAG(s[442]);
        initMENDNUM3_I(s[443]);
        initMENDNUM3_IFLAG(s[444]);
        initMENDV5_I(s[445]);
        initMENDV5_IFLAG(s[446]);
        initMENDV7_I(s[447]);
        initMENDV7_IFLAG(s[448]);
        initMENDV8_I(s[449]);
        initMENDV8_IFLAG(s[450]);
        initMENDV9_I(s[451]);
        initMENDV9_IFLAG(s[452]);
        initMENDV10_I(s[453]);
        initMENDV10_IFLAG(s[454]);
        initMENDV11_I(s[455]);
        initMENDV11_IFLAG(s[456]);
        initMENDV12_I(s[457]);
        initMENDV12_IFLAG(s[458]);
        initMENDV13_I(s[459]);
        initMENDV13_IFLAG(s[460]);
        initMENDV14_I(s[461]);
        initMENDV14_IFLAG(s[462]);
        initMENDV15_I(s[463]);
        initMENDV15_IFLAG(s[464]);
        initVCARN_I(s[465]);
        initVESTV_I(s[466]);
        initVESTV2_I(s[467]);
        initVTYPE_I(s[468]);
        initVTYPE2_I(s[469]);
        initVPERS_I(s[470]);
        initVPERV_I(s[471]);
        initVOTYP1_I(s[472]);
        initVOTYP2_I(s[473]);
        initVOTYP3_I(s[474]);
        initVOTYP4_I(s[475]);
        initVOTYP5_I(s[476]);
        initVOVAL_I(s[477]);
        initGCOLLEC_I(s[478]);
        initGCOLLV_I(s[479]);
        initGCONTVB_I(s[480]);
        initGCONTVLS(s[481]);
        initDVGCOLLV(s[482]);
        initDVTOTCARVAL(s[483]);
        initDVTOTVANVAL(s[484]);
        initDVTOTMOTBVAL(s[485]);
        initDVTOTOTHVEHVAL(s[486]);
        initDVTOTPERNPVAL(s[487]);
        initDVTOTVEHVAL(s[488]);
        initALLGD(s[489]);
        initHPHYSW(s[490]);
        initVCARN_IFLAG(s[491]);
        initVESTV_IFLAG(s[492]);
        initVESTV2_IFLAG(s[493]);
        initVTYPE_IFLAG(s[494]);
        initVTYPE2_IFLAG(s[495]);
        initVPERS_IFLAG(s[496]);
        initVPERV_IFLAG(s[497]);
        initVOTYP1_IFLAG(s[498]);
        initVOTYP2_IFLAG(s[499]);
        initVOTYP3_IFLAG(s[500]);
        initVOTYP4_IFLAG(s[501]);
        initVOTYP5_IFLAG(s[502]);
        initVOVAL_IFLAG(s[503]);
        initGCOLLEC_IFLAG(s[504]);
        initGCOLLV_IFLAG(s[505]);
        initGCONTVB_IFLAG(s[506]);
        initVOTYPE1_IFLAG(s[507]);
        initVOTYPE2_IFLAG(s[508]);
        initVOTYPE3_IFLAG(s[509]);
        initVOTYPE4_IFLAG(s[510]);
        initVOTYPE5_IFLAG(s[511]);
        initDVCISAV_AGGR(s[512]);
        initDVIISAV_AGGR(s[513]);
        initDVKISAV_AGGR(s[514]);
        initDVFNSVAL_AGGR(s[515]);
        initDVFSHUKV_AGGR(s[516]);
        initDVINSV_AGGR(s[517]);
        initDVFLFENV_AGGR(s[518]);
        initDVFLFSIV_AGGR(s[519]);
        initDVFLFFSV_AGGR(s[520]);
        initDVFLFTEV_AGGR(s[521]);
        initDVFBONDV_AGGR(s[522]);
        initDVFESHARES_AGGR(s[523]);
        initDVFESHAV_AGGR(s[524]);
        initDVFEOPTV_AGGR(s[525]);
        initDVFCOLLV_AGGR(s[526]);
        initDVFSHOSV_AGGR(s[527]);
        initDVFGLTUKV_AGGR(s[528]);
        initDVFGLTFOV_AGGR(s[529]);
        initDVFINVOTV_AGGR(s[530]);
        initDVFINFVAL_AGGR(s[531]);
        initDVFINFLV_AGGR(s[532]);
        initDVFINFV_AGGR(s[533]);
        initDVISAVAL_AGGR(s[534]);
        initDVFFASSETS_AGGR(s[535]);
        initDVCACTV_AGGR(s[536]);
        initDVCASVV_AGGR(s[537]);
        initDVCAVAL_AGGR(s[538]);
        initDVCACRVAL_AGGR(s[539]);
        initDVCAODVAL_AGGR(s[540]);
        initDVSAVAL_AGGR(s[541]);
        initTOTCC_AGGR(s[542]);
        initTOTSC_AGGR(s[543]);
        initTOTMO_AGGR(s[544]);
        initTOTNLOS_AGGR(s[545]);
        initTOTNSLBNK_AGGR(s[546]);
        initTOTNSLC_AGGR(s[547]);
        initTOTOSLBNK_AGGR(s[548]);
        initTOTOSLC_AGGR(s[549]);
        initTOTHP_AGGR(s[550]);
        initTOTSLBNK_AGGR(s[551]);
        initTOTSLC_AGGR(s[552]);
        initTOTBILLARR_AGGR(s[553]);
        initTOTHPARR_AGGR(s[554]);
        initTOTMOARR_AGGR(s[555]);
        initTOTLNARR_AGGR(s[556]);
        initTOTDVNWFLN_AGGR(s[557]);
        initTOTDVNWILN_AGGR(s[558]);
        initTOTARR_EXCMORT_AGGR(s[559]);
        initHFINW_EXCENDW_AGGR(s[560]);
        initHFINW_SUM(s[561]);
        initHFINWNT_SUM(s[562]);
        initTOTLNS_AGGR(s[563]);
        initTOTFLNS_AGGR(s[564]);
        initHFINL_AGGR(s[565]);
        initTOTLOS_AGGR(s[566]);
        initDVVALDBT_AGGR(s[567]);
        initDVVALDCOS_AGGR(s[568]);
        initDVPAVCUV_AGGR(s[569]);
        initDVDBRWEALTHVAL_AGGR(s[570]);
        initDVPFCURVAL_AGGR(s[571]);
        initDVPFDDV_AGGR(s[572]);
        initDVPINPVAL_AGGR(s[573]);
        initDVSPEN_AGGR(s[574]);
        initDVPPVAL_AGGR(s[575]);
        initTOTPEN_AGGR(s[576]);
        initTOTWLTH(s[577]);
        initVESTV3_IFLAG(s[578]);
        initVESVB3(s[579]);
        initVESTV3(s[580]);
        initVESTV3_I(s[581]);
        initHRPDVAGE15(s[582]);
        initHBEDRM(s[583]);
    }

    @Override
    public WaAS_RecordID getID() {
        return (WaAS_RecordID) ID;
    }
}
