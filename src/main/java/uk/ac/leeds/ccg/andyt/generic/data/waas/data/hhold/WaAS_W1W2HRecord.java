/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.waas.process.WaAS_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.andyt.generic.data.waas.data.hhold;
public class WaAS_W1W2HRecord extends WaAS_W1W2W3W4W5HRecord {
protected int DVBLDDEBT;
protected int DVBLDVAL;
protected int DVEQHIP;
protected double DVEQRUPM;
protected byte DVHRPNUM;
protected int DVHSEDEBT;
protected int DVHSEVAL;
protected int DVLOSDEBT;
protected int DVLOSVAL;
protected int DVLUKDEBT;
protected int DVLUKVAL;
protected int DVOPRDEBT;
protected int DVOPRVAL;
protected int DVTOTCARVAL;
protected int DVTOTMOTBVAL;
protected int DVTOTVANVAL;
protected int DVVESTV2_I;
protected boolean DVVESTV2_IFLAG;
protected int DVVESTV3_I;
protected boolean DVVESTV3_IFLAG;
protected int DVVESTV_I;
protected boolean DVVESTV_IFLAG;
protected int DVVOVAL_I;
protected boolean DVVOVAL_IFLAG;
protected int DVVPERV_I;
protected boolean DVVPERV_IFLAG;
protected byte EINTPAY;
protected byte EOTHIRR;
protected int EOTHIVA;
protected boolean EOTHIVB;
protected byte EQFILTER;
protected byte EQREAS1;
protected byte EQREAS2;
protected byte EQREAS3;
protected byte EQREAS4;
protected byte EQREL;
protected byte EQREL_I;
protected boolean EQREL_IFLAG;
protected byte EQTYPE;
protected byte EQTYPE_I;
protected boolean EQTYPE_IFLAG;
protected short EQWHEN;
protected byte EQYES_I;
protected boolean EQYES_IFLAG;
protected int ERECM;
protected byte ERECMB;
protected short ERENTAM;
protected boolean ERENTB;
protected short ERVREC;
protected boolean ERVRECB;
protected byte ERVREG;
protected boolean GCPREAM;
protected byte GOR;
protected byte HRPDVAGE15;
protected byte HRPEMPSTAT2;
protected byte HRPIOUT1;
protected byte HRPPARTIOUT1;
protected byte HVALRS1;
protected byte HVALRS2;
protected byte HVALRS3;
protected byte HVALRS4;
protected boolean HVALRS5;
protected byte MALL;
protected byte MALLTY;
protected byte MALLTY3_I;
protected boolean MALLTY3_IFLAG;
protected byte MALLTY_I;
protected boolean MALLTY_IFLAG;
protected byte MALL_I;
protected boolean MALL_IFLAG;
protected byte MARRS;
protected byte MDIFFPY;
protected byte MENDNUM;
protected byte MENDNUM_I;
protected boolean MENDNUM_IFLAG;
protected int MENDV;
protected int MENDV11_I;
protected boolean MENDV11_IFLAG;
protected byte MENDVB;
protected boolean MENDVB5;
protected boolean MENDVB8;
protected double MENDV_I;
protected boolean MENDV_IFLAG;
protected byte MENDW;
protected byte MENDW3;
protected byte MENDW_I;
protected boolean MENDW_IFLAG;
protected byte MENDX;
protected byte MENDY;
protected byte MENDY5;
protected boolean MENDY8;
protected byte MHOWPY;
protected boolean MINC12;
protected byte MINC7;
protected boolean MINC8;
protected boolean MINC9;
protected byte MNAME;
protected int MNEG;
protected int MNEG3_I;
protected boolean MNEG3_IFLAG;
protected byte MNEGB;
protected int MNEG_I;
protected boolean MNEG_IFLAG;
protected short MOARR_SUM;
protected byte MONAME;
protected byte MPAYB;
protected int MPAYM;
protected byte MPP;
protected boolean MREAS08;
protected boolean MREAS09;
protected byte MREAS11;
protected byte MREAS21;
protected byte MREAS22;
protected byte MTYPE;
protected byte MTYPE_I;
protected boolean MTYPE_IFLAG;
protected int MVAL;
protected int MVALB;
protected double MVAL_I;
protected boolean MVAL_IFLAG;
protected byte MYLFT;
protected byte NBABY;
protected byte NC1015;
protected byte NC1618;
protected byte NC5TO9;
protected byte NCHILD;
protected byte NCU16;
protected byte NCUND5;
protected byte NDEPC;
protected byte NNDEPC;
protected byte NUMJOB;
protected boolean NUMSSEX;
protected byte NVESTV;
protected int OTHMORT;
protected int VESTV;
protected int VESTV2;
protected int VESTV2_I;
protected boolean VESTV2_IFLAG;
protected int VESTV3;
protected int VESTV3_I;
protected boolean VESTV3_IFLAG;
protected int VESTV_I;
protected boolean VESTV_IFLAG;
protected byte VESVB;
protected byte VESVB2;
protected byte VESVB3;
protected byte VOTHT;
protected byte VOTHT_I;
protected boolean VOTHT_IFLAG;
protected boolean VOTYP1_IFLAG;
protected boolean VOTYP2_IFLAG;
protected boolean VOTYP3_IFLAG;
protected boolean VOTYP4_IFLAG;
protected boolean VOTYP5;
protected boolean VOTYP5_IFLAG;
protected byte VTYPE;
protected boolean VTYPE2_IFLAG;
protected byte VTYPE_I;
protected final void initDVBLDDEBT(String s) {
if (!s.trim().isEmpty()) {
DVBLDDEBT = Integer.parseInt(s);
} else {
DVBLDDEBT = Integer.MIN_VALUE;
}
}

protected final void initDVBLDVAL(String s) {
if (!s.trim().isEmpty()) {
DVBLDVAL = Integer.parseInt(s);
} else {
DVBLDVAL = Integer.MIN_VALUE;
}
}

protected final void initDVEQHIP(String s) {
if (!s.trim().isEmpty()) {
DVEQHIP = Integer.parseInt(s);
} else {
DVEQHIP = Integer.MIN_VALUE;
}
}

protected final void initDVEQRUPM(String s) {
if (!s.trim().isEmpty()) {
DVEQRUPM = Double.parseDouble(s);
} else {
DVEQRUPM = Double.NaN;
}
}

protected final void initDVHRPNUM(String s) {
if (!s.trim().isEmpty()) {
DVHRPNUM = Byte.parseByte(s);
} else {
DVHRPNUM = Byte.MIN_VALUE;
}
}

protected final void initDVHSEDEBT(String s) {
if (!s.trim().isEmpty()) {
DVHSEDEBT = Integer.parseInt(s);
} else {
DVHSEDEBT = Integer.MIN_VALUE;
}
}

protected final void initDVHSEVAL(String s) {
if (!s.trim().isEmpty()) {
DVHSEVAL = Integer.parseInt(s);
} else {
DVHSEVAL = Integer.MIN_VALUE;
}
}

protected final void initDVLOSDEBT(String s) {
if (!s.trim().isEmpty()) {
DVLOSDEBT = Integer.parseInt(s);
} else {
DVLOSDEBT = Integer.MIN_VALUE;
}
}

protected final void initDVLOSVAL(String s) {
if (!s.trim().isEmpty()) {
DVLOSVAL = Integer.parseInt(s);
} else {
DVLOSVAL = Integer.MIN_VALUE;
}
}

protected final void initDVLUKDEBT(String s) {
if (!s.trim().isEmpty()) {
DVLUKDEBT = Integer.parseInt(s);
} else {
DVLUKDEBT = Integer.MIN_VALUE;
}
}

protected final void initDVLUKVAL(String s) {
if (!s.trim().isEmpty()) {
DVLUKVAL = Integer.parseInt(s);
} else {
DVLUKVAL = Integer.MIN_VALUE;
}
}

protected final void initDVOPRDEBT(String s) {
if (!s.trim().isEmpty()) {
DVOPRDEBT = Integer.parseInt(s);
} else {
DVOPRDEBT = Integer.MIN_VALUE;
}
}

protected final void initDVOPRVAL(String s) {
if (!s.trim().isEmpty()) {
DVOPRVAL = Integer.parseInt(s);
} else {
DVOPRVAL = Integer.MIN_VALUE;
}
}

protected final void initDVTOTCARVAL(String s) {
if (!s.trim().isEmpty()) {
DVTOTCARVAL = Integer.parseInt(s);
} else {
DVTOTCARVAL = Integer.MIN_VALUE;
}
}

protected final void initDVTOTMOTBVAL(String s) {
if (!s.trim().isEmpty()) {
DVTOTMOTBVAL = Integer.parseInt(s);
} else {
DVTOTMOTBVAL = Integer.MIN_VALUE;
}
}

protected final void initDVTOTVANVAL(String s) {
if (!s.trim().isEmpty()) {
DVTOTVANVAL = Integer.parseInt(s);
} else {
DVTOTVANVAL = Integer.MIN_VALUE;
}
}

protected final void initDVVESTV2_I(String s) {
if (!s.trim().isEmpty()) {
DVVESTV2_I = Integer.parseInt(s);
} else {
DVVESTV2_I = Integer.MIN_VALUE;
}
}

protected final void initDVVESTV2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVVESTV2_IFLAG = false;
}
}

protected final void initDVVESTV3_I(String s) {
if (!s.trim().isEmpty()) {
DVVESTV3_I = Integer.parseInt(s);
} else {
DVVESTV3_I = Integer.MIN_VALUE;
}
}

protected final void initDVVESTV3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVVESTV3_IFLAG = false;
}
}

protected final void initDVVESTV_I(String s) {
if (!s.trim().isEmpty()) {
DVVESTV_I = Integer.parseInt(s);
} else {
DVVESTV_I = Integer.MIN_VALUE;
}
}

protected final void initDVVESTV_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVVESTV_IFLAG = false;
}
}

protected final void initDVVOVAL_I(String s) {
if (!s.trim().isEmpty()) {
DVVOVAL_I = Integer.parseInt(s);
} else {
DVVOVAL_I = Integer.MIN_VALUE;
}
}

protected final void initDVVOVAL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVVOVAL_IFLAG = false;
}
}

protected final void initDVVPERV_I(String s) {
if (!s.trim().isEmpty()) {
DVVPERV_I = Integer.parseInt(s);
} else {
DVVPERV_I = Integer.MIN_VALUE;
}
}

protected final void initDVVPERV_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DVVPERV_IFLAG = false;
}
}

protected final void initEINTPAY(String s) {
if (!s.trim().isEmpty()) {
EINTPAY = Byte.parseByte(s);
} else {
EINTPAY = Byte.MIN_VALUE;
}
}

protected final void initEOTHIRR(String s) {
if (!s.trim().isEmpty()) {
EOTHIRR = Byte.parseByte(s);
} else {
EOTHIRR = Byte.MIN_VALUE;
}
}

protected final void initEOTHIVA(String s) {
if (!s.trim().isEmpty()) {
EOTHIVA = Integer.parseInt(s);
} else {
EOTHIVA = Integer.MIN_VALUE;
}
}

protected final void initEOTHIVB(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
EOTHIVB = false;
}
}

protected final void initEQFILTER(String s) {
if (!s.trim().isEmpty()) {
EQFILTER = Byte.parseByte(s);
} else {
EQFILTER = Byte.MIN_VALUE;
}
}

protected final void initEQREAS1(String s) {
if (!s.trim().isEmpty()) {
EQREAS1 = Byte.parseByte(s);
} else {
EQREAS1 = Byte.MIN_VALUE;
}
}

protected final void initEQREAS2(String s) {
if (!s.trim().isEmpty()) {
EQREAS2 = Byte.parseByte(s);
} else {
EQREAS2 = Byte.MIN_VALUE;
}
}

protected final void initEQREAS3(String s) {
if (!s.trim().isEmpty()) {
EQREAS3 = Byte.parseByte(s);
} else {
EQREAS3 = Byte.MIN_VALUE;
}
}

protected final void initEQREAS4(String s) {
if (!s.trim().isEmpty()) {
EQREAS4 = Byte.parseByte(s);
} else {
EQREAS4 = Byte.MIN_VALUE;
}
}

protected final void initEQREL(String s) {
if (!s.trim().isEmpty()) {
EQREL = Byte.parseByte(s);
} else {
EQREL = Byte.MIN_VALUE;
}
}

protected final void initEQREL_I(String s) {
if (!s.trim().isEmpty()) {
EQREL_I = Byte.parseByte(s);
} else {
EQREL_I = Byte.MIN_VALUE;
}
}

protected final void initEQREL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
EQREL_IFLAG = false;
}
}

protected final void initEQTYPE(String s) {
if (!s.trim().isEmpty()) {
EQTYPE = Byte.parseByte(s);
} else {
EQTYPE = Byte.MIN_VALUE;
}
}

protected final void initEQTYPE_I(String s) {
if (!s.trim().isEmpty()) {
EQTYPE_I = Byte.parseByte(s);
} else {
EQTYPE_I = Byte.MIN_VALUE;
}
}

protected final void initEQTYPE_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
EQTYPE_IFLAG = false;
}
}

protected final void initEQWHEN(String s) {
if (!s.trim().isEmpty()) {
EQWHEN = Short.parseShort(s);
} else {
EQWHEN = Short.MIN_VALUE;
}
}

protected final void initEQYES_I(String s) {
if (!s.trim().isEmpty()) {
EQYES_I = Byte.parseByte(s);
} else {
EQYES_I = Byte.MIN_VALUE;
}
}

protected final void initEQYES_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
EQYES_IFLAG = false;
}
}

protected final void initERECM(String s) {
if (!s.trim().isEmpty()) {
ERECM = Integer.parseInt(s);
} else {
ERECM = Integer.MIN_VALUE;
}
}

protected final void initERECMB(String s) {
if (!s.trim().isEmpty()) {
ERECMB = Byte.parseByte(s);
} else {
ERECMB = Byte.MIN_VALUE;
}
}

protected final void initERENTAM(String s) {
if (!s.trim().isEmpty()) {
ERENTAM = Short.parseShort(s);
} else {
ERENTAM = Short.MIN_VALUE;
}
}

protected final void initERENTB(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
ERENTB = false;
}
}

protected final void initERVREC(String s) {
if (!s.trim().isEmpty()) {
ERVREC = Short.parseShort(s);
} else {
ERVREC = Short.MIN_VALUE;
}
}

protected final void initERVRECB(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
ERVRECB = false;
}
}

protected final void initERVREG(String s) {
if (!s.trim().isEmpty()) {
ERVREG = Byte.parseByte(s);
} else {
ERVREG = Byte.MIN_VALUE;
}
}

protected final void initGCPREAM(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
GCPREAM = false;
}
}

protected final void initGOR(String s) {
if (!s.trim().isEmpty()) {
GOR = Byte.parseByte(s);
} else {
GOR = Byte.MIN_VALUE;
}
}

protected final void initHRPDVAGE15(String s) {
if (!s.trim().isEmpty()) {
HRPDVAGE15 = Byte.parseByte(s);
} else {
HRPDVAGE15 = Byte.MIN_VALUE;
}
}

protected final void initHRPEMPSTAT2(String s) {
if (!s.trim().isEmpty()) {
HRPEMPSTAT2 = Byte.parseByte(s);
} else {
HRPEMPSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initHRPIOUT1(String s) {
if (!s.trim().isEmpty()) {
HRPIOUT1 = Byte.parseByte(s);
} else {
HRPIOUT1 = Byte.MIN_VALUE;
}
}

protected final void initHRPPARTIOUT1(String s) {
if (!s.trim().isEmpty()) {
HRPPARTIOUT1 = Byte.parseByte(s);
} else {
HRPPARTIOUT1 = Byte.MIN_VALUE;
}
}

protected final void initHVALRS1(String s) {
if (!s.trim().isEmpty()) {
HVALRS1 = Byte.parseByte(s);
} else {
HVALRS1 = Byte.MIN_VALUE;
}
}

protected final void initHVALRS2(String s) {
if (!s.trim().isEmpty()) {
HVALRS2 = Byte.parseByte(s);
} else {
HVALRS2 = Byte.MIN_VALUE;
}
}

protected final void initHVALRS3(String s) {
if (!s.trim().isEmpty()) {
HVALRS3 = Byte.parseByte(s);
} else {
HVALRS3 = Byte.MIN_VALUE;
}
}

protected final void initHVALRS4(String s) {
if (!s.trim().isEmpty()) {
HVALRS4 = Byte.parseByte(s);
} else {
HVALRS4 = Byte.MIN_VALUE;
}
}

protected final void initHVALRS5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HVALRS5 = false;
}
}

protected final void initMALL(String s) {
if (!s.trim().isEmpty()) {
MALL = Byte.parseByte(s);
} else {
MALL = Byte.MIN_VALUE;
}
}

protected final void initMALLTY(String s) {
if (!s.trim().isEmpty()) {
MALLTY = Byte.parseByte(s);
} else {
MALLTY = Byte.MIN_VALUE;
}
}

protected final void initMALLTY3_I(String s) {
if (!s.trim().isEmpty()) {
MALLTY3_I = Byte.parseByte(s);
} else {
MALLTY3_I = Byte.MIN_VALUE;
}
}

protected final void initMALLTY3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
MALLTY3_IFLAG = false;
}
}

protected final void initMALLTY_I(String s) {
if (!s.trim().isEmpty()) {
MALLTY_I = Byte.parseByte(s);
} else {
MALLTY_I = Byte.MIN_VALUE;
}
}

protected final void initMALLTY_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
MALLTY_IFLAG = false;
}
}

protected final void initMALL_I(String s) {
if (!s.trim().isEmpty()) {
MALL_I = Byte.parseByte(s);
} else {
MALL_I = Byte.MIN_VALUE;
}
}

protected final void initMALL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
MALL_IFLAG = false;
}
}

protected final void initMARRS(String s) {
if (!s.trim().isEmpty()) {
MARRS = Byte.parseByte(s);
} else {
MARRS = Byte.MIN_VALUE;
}
}

protected final void initMDIFFPY(String s) {
if (!s.trim().isEmpty()) {
MDIFFPY = Byte.parseByte(s);
} else {
MDIFFPY = Byte.MIN_VALUE;
}
}

protected final void initMENDNUM(String s) {
if (!s.trim().isEmpty()) {
MENDNUM = Byte.parseByte(s);
} else {
MENDNUM = Byte.MIN_VALUE;
}
}

protected final void initMENDNUM_I(String s) {
if (!s.trim().isEmpty()) {
MENDNUM_I = Byte.parseByte(s);
} else {
MENDNUM_I = Byte.MIN_VALUE;
}
}

protected final void initMENDNUM_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
MENDNUM_IFLAG = false;
}
}

protected final void initMENDV(String s) {
if (!s.trim().isEmpty()) {
MENDV = Integer.parseInt(s);
} else {
MENDV = Integer.MIN_VALUE;
}
}

protected final void initMENDV11_I(String s) {
if (!s.trim().isEmpty()) {
MENDV11_I = Integer.parseInt(s);
} else {
MENDV11_I = Integer.MIN_VALUE;
}
}

protected final void initMENDV11_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
MENDV11_IFLAG = false;
}
}

protected final void initMENDVB(String s) {
if (!s.trim().isEmpty()) {
MENDVB = Byte.parseByte(s);
} else {
MENDVB = Byte.MIN_VALUE;
}
}

protected final void initMENDVB5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
MENDVB5 = false;
}
}

protected final void initMENDVB8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
MENDVB8 = false;
}
}

protected final void initMENDV_I(String s) {
if (!s.trim().isEmpty()) {
MENDV_I = Double.parseDouble(s);
} else {
MENDV_I = Double.NaN;
}
}

protected final void initMENDV_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
MENDV_IFLAG = false;
}
}

protected final void initMENDW(String s) {
if (!s.trim().isEmpty()) {
MENDW = Byte.parseByte(s);
} else {
MENDW = Byte.MIN_VALUE;
}
}

protected final void initMENDW3(String s) {
if (!s.trim().isEmpty()) {
MENDW3 = Byte.parseByte(s);
} else {
MENDW3 = Byte.MIN_VALUE;
}
}

protected final void initMENDW_I(String s) {
if (!s.trim().isEmpty()) {
MENDW_I = Byte.parseByte(s);
} else {
MENDW_I = Byte.MIN_VALUE;
}
}

protected final void initMENDW_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
MENDW_IFLAG = false;
}
}

protected final void initMENDX(String s) {
if (!s.trim().isEmpty()) {
MENDX = Byte.parseByte(s);
} else {
MENDX = Byte.MIN_VALUE;
}
}

protected final void initMENDY(String s) {
if (!s.trim().isEmpty()) {
MENDY = Byte.parseByte(s);
} else {
MENDY = Byte.MIN_VALUE;
}
}

protected final void initMENDY5(String s) {
if (!s.trim().isEmpty()) {
MENDY5 = Byte.parseByte(s);
} else {
MENDY5 = Byte.MIN_VALUE;
}
}

protected final void initMENDY8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
MENDY8 = false;
}
}

protected final void initMHOWPY(String s) {
if (!s.trim().isEmpty()) {
MHOWPY = Byte.parseByte(s);
} else {
MHOWPY = Byte.MIN_VALUE;
}
}

protected final void initMINC12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
MINC12 = false;
}
}

protected final void initMINC7(String s) {
if (!s.trim().isEmpty()) {
MINC7 = Byte.parseByte(s);
} else {
MINC7 = Byte.MIN_VALUE;
}
}

protected final void initMINC8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
MINC8 = false;
}
}

protected final void initMINC9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
MINC9 = false;
}
}

protected final void initMNAME(String s) {
if (!s.trim().isEmpty()) {
MNAME = Byte.parseByte(s);
} else {
MNAME = Byte.MIN_VALUE;
}
}

protected final void initMNEG(String s) {
if (!s.trim().isEmpty()) {
MNEG = Integer.parseInt(s);
} else {
MNEG = Integer.MIN_VALUE;
}
}

protected final void initMNEG3_I(String s) {
if (!s.trim().isEmpty()) {
MNEG3_I = Integer.parseInt(s);
} else {
MNEG3_I = Integer.MIN_VALUE;
}
}

protected final void initMNEG3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
MNEG3_IFLAG = false;
}
}

protected final void initMNEGB(String s) {
if (!s.trim().isEmpty()) {
MNEGB = Byte.parseByte(s);
} else {
MNEGB = Byte.MIN_VALUE;
}
}

protected final void initMNEG_I(String s) {
if (!s.trim().isEmpty()) {
MNEG_I = Integer.parseInt(s);
} else {
MNEG_I = Integer.MIN_VALUE;
}
}

protected final void initMNEG_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
MNEG_IFLAG = false;
}
}

protected final void initMOARR_SUM(String s) {
if (!s.trim().isEmpty()) {
MOARR_SUM = Short.parseShort(s);
} else {
MOARR_SUM = Short.MIN_VALUE;
}
}

protected final void initMONAME(String s) {
if (!s.trim().isEmpty()) {
MONAME = Byte.parseByte(s);
} else {
MONAME = Byte.MIN_VALUE;
}
}

protected final void initMPAYB(String s) {
if (!s.trim().isEmpty()) {
MPAYB = Byte.parseByte(s);
} else {
MPAYB = Byte.MIN_VALUE;
}
}

protected final void initMPAYM(String s) {
if (!s.trim().isEmpty()) {
MPAYM = Integer.parseInt(s);
} else {
MPAYM = Integer.MIN_VALUE;
}
}

protected final void initMPP(String s) {
if (!s.trim().isEmpty()) {
MPP = Byte.parseByte(s);
} else {
MPP = Byte.MIN_VALUE;
}
}

protected final void initMREAS08(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
MREAS08 = false;
}
}

protected final void initMREAS09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
MREAS09 = false;
}
}

protected final void initMREAS11(String s) {
if (!s.trim().isEmpty()) {
MREAS11 = Byte.parseByte(s);
} else {
MREAS11 = Byte.MIN_VALUE;
}
}

protected final void initMREAS21(String s) {
if (!s.trim().isEmpty()) {
MREAS21 = Byte.parseByte(s);
} else {
MREAS21 = Byte.MIN_VALUE;
}
}

protected final void initMREAS22(String s) {
if (!s.trim().isEmpty()) {
MREAS22 = Byte.parseByte(s);
} else {
MREAS22 = Byte.MIN_VALUE;
}
}

protected final void initMTYPE(String s) {
if (!s.trim().isEmpty()) {
MTYPE = Byte.parseByte(s);
} else {
MTYPE = Byte.MIN_VALUE;
}
}

protected final void initMTYPE_I(String s) {
if (!s.trim().isEmpty()) {
MTYPE_I = Byte.parseByte(s);
} else {
MTYPE_I = Byte.MIN_VALUE;
}
}

protected final void initMTYPE_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
MTYPE_IFLAG = false;
}
}

protected final void initMVAL(String s) {
if (!s.trim().isEmpty()) {
MVAL = Integer.parseInt(s);
} else {
MVAL = Integer.MIN_VALUE;
}
}

protected final void initMVALB(String s) {
if (!s.trim().isEmpty()) {
MVALB = Integer.parseInt(s);
} else {
MVALB = Integer.MIN_VALUE;
}
}

protected final void initMVAL_I(String s) {
if (!s.trim().isEmpty()) {
MVAL_I = Double.parseDouble(s);
} else {
MVAL_I = Double.NaN;
}
}

protected final void initMVAL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
MVAL_IFLAG = false;
}
}

protected final void initMYLFT(String s) {
if (!s.trim().isEmpty()) {
MYLFT = Byte.parseByte(s);
} else {
MYLFT = Byte.MIN_VALUE;
}
}

protected final void initNBABY(String s) {
if (!s.trim().isEmpty()) {
NBABY = Byte.parseByte(s);
} else {
NBABY = Byte.MIN_VALUE;
}
}

protected final void initNC1015(String s) {
if (!s.trim().isEmpty()) {
NC1015 = Byte.parseByte(s);
} else {
NC1015 = Byte.MIN_VALUE;
}
}

protected final void initNC1618(String s) {
if (!s.trim().isEmpty()) {
NC1618 = Byte.parseByte(s);
} else {
NC1618 = Byte.MIN_VALUE;
}
}

protected final void initNC5TO9(String s) {
if (!s.trim().isEmpty()) {
NC5TO9 = Byte.parseByte(s);
} else {
NC5TO9 = Byte.MIN_VALUE;
}
}

protected final void initNCHILD(String s) {
if (!s.trim().isEmpty()) {
NCHILD = Byte.parseByte(s);
} else {
NCHILD = Byte.MIN_VALUE;
}
}

protected final void initNCU16(String s) {
if (!s.trim().isEmpty()) {
NCU16 = Byte.parseByte(s);
} else {
NCU16 = Byte.MIN_VALUE;
}
}

protected final void initNCUND5(String s) {
if (!s.trim().isEmpty()) {
NCUND5 = Byte.parseByte(s);
} else {
NCUND5 = Byte.MIN_VALUE;
}
}

protected final void initNDEPC(String s) {
if (!s.trim().isEmpty()) {
NDEPC = Byte.parseByte(s);
} else {
NDEPC = Byte.MIN_VALUE;
}
}

protected final void initNNDEPC(String s) {
if (!s.trim().isEmpty()) {
NNDEPC = Byte.parseByte(s);
} else {
NNDEPC = Byte.MIN_VALUE;
}
}

protected final void initNUMJOB(String s) {
if (!s.trim().isEmpty()) {
NUMJOB = Byte.parseByte(s);
} else {
NUMJOB = Byte.MIN_VALUE;
}
}

protected final void initNUMSSEX(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
NUMSSEX = false;
}
}

protected final void initNVESTV(String s) {
if (!s.trim().isEmpty()) {
NVESTV = Byte.parseByte(s);
} else {
NVESTV = Byte.MIN_VALUE;
}
}

protected final void initOTHMORT(String s) {
if (!s.trim().isEmpty()) {
OTHMORT = Integer.parseInt(s);
} else {
OTHMORT = Integer.MIN_VALUE;
}
}

protected final void initVESTV(String s) {
if (!s.trim().isEmpty()) {
VESTV = Integer.parseInt(s);
} else {
VESTV = Integer.MIN_VALUE;
}
}

protected final void initVESTV2(String s) {
if (!s.trim().isEmpty()) {
VESTV2 = Integer.parseInt(s);
} else {
VESTV2 = Integer.MIN_VALUE;
}
}

protected final void initVESTV2_I(String s) {
if (!s.trim().isEmpty()) {
VESTV2_I = Integer.parseInt(s);
} else {
VESTV2_I = Integer.MIN_VALUE;
}
}

protected final void initVESTV2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
VESTV2_IFLAG = false;
}
}

protected final void initVESTV3(String s) {
if (!s.trim().isEmpty()) {
VESTV3 = Integer.parseInt(s);
} else {
VESTV3 = Integer.MIN_VALUE;
}
}

protected final void initVESTV3_I(String s) {
if (!s.trim().isEmpty()) {
VESTV3_I = Integer.parseInt(s);
} else {
VESTV3_I = Integer.MIN_VALUE;
}
}

protected final void initVESTV3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
VESTV3_IFLAG = false;
}
}

protected final void initVESTV_I(String s) {
if (!s.trim().isEmpty()) {
VESTV_I = Integer.parseInt(s);
} else {
VESTV_I = Integer.MIN_VALUE;
}
}

protected final void initVESTV_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
VESTV_IFLAG = false;
}
}

protected final void initVESVB(String s) {
if (!s.trim().isEmpty()) {
VESVB = Byte.parseByte(s);
} else {
VESVB = Byte.MIN_VALUE;
}
}

protected final void initVESVB2(String s) {
if (!s.trim().isEmpty()) {
VESVB2 = Byte.parseByte(s);
} else {
VESVB2 = Byte.MIN_VALUE;
}
}

protected final void initVESVB3(String s) {
if (!s.trim().isEmpty()) {
VESVB3 = Byte.parseByte(s);
} else {
VESVB3 = Byte.MIN_VALUE;
}
}

protected final void initVOTHT(String s) {
if (!s.trim().isEmpty()) {
VOTHT = Byte.parseByte(s);
} else {
VOTHT = Byte.MIN_VALUE;
}
}

protected final void initVOTHT_I(String s) {
if (!s.trim().isEmpty()) {
VOTHT_I = Byte.parseByte(s);
} else {
VOTHT_I = Byte.MIN_VALUE;
}
}

protected final void initVOTHT_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
VOTHT_IFLAG = false;
}
}

protected final void initVOTYP1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
VOTYP1_IFLAG = false;
}
}

protected final void initVOTYP2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
VOTYP2_IFLAG = false;
}
}

protected final void initVOTYP3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
VOTYP3_IFLAG = false;
}
}

protected final void initVOTYP4_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
VOTYP4_IFLAG = false;
}
}

protected final void initVOTYP5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
VOTYP5 = false;
}
}

protected final void initVOTYP5_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
VOTYP5_IFLAG = false;
}
}

protected final void initVTYPE(String s) {
if (!s.trim().isEmpty()) {
VTYPE = Byte.parseByte(s);
} else {
VTYPE = Byte.MIN_VALUE;
}
}

protected final void initVTYPE2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
VTYPE2_IFLAG = false;
}
}

protected final void initVTYPE_I(String s) {
if (!s.trim().isEmpty()) {
VTYPE_I = Byte.parseByte(s);
} else {
VTYPE_I = Byte.MIN_VALUE;
}
}

public int getDVBLDDEBT() {
return DVBLDDEBT;
}

public int getDVBLDVAL() {
return DVBLDVAL;
}

public int getDVEQHIP() {
return DVEQHIP;
}

public double getDVEQRUPM() {
return DVEQRUPM;
}

public byte getDVHRPNUM() {
return DVHRPNUM;
}

public int getDVHSEDEBT() {
return DVHSEDEBT;
}

public int getDVHSEVAL() {
return DVHSEVAL;
}

public int getDVLOSDEBT() {
return DVLOSDEBT;
}

public int getDVLOSVAL() {
return DVLOSVAL;
}

public int getDVLUKDEBT() {
return DVLUKDEBT;
}

public int getDVLUKVAL() {
return DVLUKVAL;
}

public int getDVOPRDEBT() {
return DVOPRDEBT;
}

public int getDVOPRVAL() {
return DVOPRVAL;
}

public int getDVTOTCARVAL() {
return DVTOTCARVAL;
}

public int getDVTOTMOTBVAL() {
return DVTOTMOTBVAL;
}

public int getDVTOTVANVAL() {
return DVTOTVANVAL;
}

public int getDVVESTV2_I() {
return DVVESTV2_I;
}

public boolean getDVVESTV2_IFLAG() {
return DVVESTV2_IFLAG;
}

public int getDVVESTV3_I() {
return DVVESTV3_I;
}

public boolean getDVVESTV3_IFLAG() {
return DVVESTV3_IFLAG;
}

public int getDVVESTV_I() {
return DVVESTV_I;
}

public boolean getDVVESTV_IFLAG() {
return DVVESTV_IFLAG;
}

public int getDVVOVAL_I() {
return DVVOVAL_I;
}

public boolean getDVVOVAL_IFLAG() {
return DVVOVAL_IFLAG;
}

public int getDVVPERV_I() {
return DVVPERV_I;
}

public boolean getDVVPERV_IFLAG() {
return DVVPERV_IFLAG;
}

public byte getEINTPAY() {
return EINTPAY;
}

public byte getEOTHIRR() {
return EOTHIRR;
}

public int getEOTHIVA() {
return EOTHIVA;
}

public boolean getEOTHIVB() {
return EOTHIVB;
}

public byte getEQFILTER() {
return EQFILTER;
}

public byte getEQREAS1() {
return EQREAS1;
}

public byte getEQREAS2() {
return EQREAS2;
}

public byte getEQREAS3() {
return EQREAS3;
}

public byte getEQREAS4() {
return EQREAS4;
}

public byte getEQREL() {
return EQREL;
}

public byte getEQREL_I() {
return EQREL_I;
}

public boolean getEQREL_IFLAG() {
return EQREL_IFLAG;
}

public byte getEQTYPE() {
return EQTYPE;
}

public byte getEQTYPE_I() {
return EQTYPE_I;
}

public boolean getEQTYPE_IFLAG() {
return EQTYPE_IFLAG;
}

public short getEQWHEN() {
return EQWHEN;
}

public byte getEQYES_I() {
return EQYES_I;
}

public boolean getEQYES_IFLAG() {
return EQYES_IFLAG;
}

public int getERECM() {
return ERECM;
}

public byte getERECMB() {
return ERECMB;
}

public short getERENTAM() {
return ERENTAM;
}

public boolean getERENTB() {
return ERENTB;
}

public short getERVREC() {
return ERVREC;
}

public boolean getERVRECB() {
return ERVRECB;
}

public byte getERVREG() {
return ERVREG;
}

public boolean getGCPREAM() {
return GCPREAM;
}

public byte getGOR() {
return GOR;
}

public byte getHRPDVAGE15() {
return HRPDVAGE15;
}

public byte getHRPEMPSTAT2() {
return HRPEMPSTAT2;
}

public byte getHRPIOUT1() {
return HRPIOUT1;
}

public byte getHRPPARTIOUT1() {
return HRPPARTIOUT1;
}

public byte getHVALRS1() {
return HVALRS1;
}

public byte getHVALRS2() {
return HVALRS2;
}

public byte getHVALRS3() {
return HVALRS3;
}

public byte getHVALRS4() {
return HVALRS4;
}

public boolean getHVALRS5() {
return HVALRS5;
}

public byte getMALL() {
return MALL;
}

public byte getMALLTY() {
return MALLTY;
}

public byte getMALLTY3_I() {
return MALLTY3_I;
}

public boolean getMALLTY3_IFLAG() {
return MALLTY3_IFLAG;
}

public byte getMALLTY_I() {
return MALLTY_I;
}

public boolean getMALLTY_IFLAG() {
return MALLTY_IFLAG;
}

public byte getMALL_I() {
return MALL_I;
}

public boolean getMALL_IFLAG() {
return MALL_IFLAG;
}

public byte getMARRS() {
return MARRS;
}

public byte getMDIFFPY() {
return MDIFFPY;
}

public byte getMENDNUM() {
return MENDNUM;
}

public byte getMENDNUM_I() {
return MENDNUM_I;
}

public boolean getMENDNUM_IFLAG() {
return MENDNUM_IFLAG;
}

public int getMENDV() {
return MENDV;
}

public int getMENDV11_I() {
return MENDV11_I;
}

public boolean getMENDV11_IFLAG() {
return MENDV11_IFLAG;
}

public byte getMENDVB() {
return MENDVB;
}

public boolean getMENDVB5() {
return MENDVB5;
}

public boolean getMENDVB8() {
return MENDVB8;
}

public double getMENDV_I() {
return MENDV_I;
}

public boolean getMENDV_IFLAG() {
return MENDV_IFLAG;
}

public byte getMENDW() {
return MENDW;
}

public byte getMENDW3() {
return MENDW3;
}

public byte getMENDW_I() {
return MENDW_I;
}

public boolean getMENDW_IFLAG() {
return MENDW_IFLAG;
}

public byte getMENDX() {
return MENDX;
}

public byte getMENDY() {
return MENDY;
}

public byte getMENDY5() {
return MENDY5;
}

public boolean getMENDY8() {
return MENDY8;
}

public byte getMHOWPY() {
return MHOWPY;
}

public boolean getMINC12() {
return MINC12;
}

public byte getMINC7() {
return MINC7;
}

public boolean getMINC8() {
return MINC8;
}

public boolean getMINC9() {
return MINC9;
}

public byte getMNAME() {
return MNAME;
}

public int getMNEG() {
return MNEG;
}

public int getMNEG3_I() {
return MNEG3_I;
}

public boolean getMNEG3_IFLAG() {
return MNEG3_IFLAG;
}

public byte getMNEGB() {
return MNEGB;
}

public int getMNEG_I() {
return MNEG_I;
}

public boolean getMNEG_IFLAG() {
return MNEG_IFLAG;
}

public short getMOARR_SUM() {
return MOARR_SUM;
}

public byte getMONAME() {
return MONAME;
}

public byte getMPAYB() {
return MPAYB;
}

public int getMPAYM() {
return MPAYM;
}

public byte getMPP() {
return MPP;
}

public boolean getMREAS08() {
return MREAS08;
}

public boolean getMREAS09() {
return MREAS09;
}

public byte getMREAS11() {
return MREAS11;
}

public byte getMREAS21() {
return MREAS21;
}

public byte getMREAS22() {
return MREAS22;
}

public byte getMTYPE() {
return MTYPE;
}

public byte getMTYPE_I() {
return MTYPE_I;
}

public boolean getMTYPE_IFLAG() {
return MTYPE_IFLAG;
}

public int getMVAL() {
return MVAL;
}

public int getMVALB() {
return MVALB;
}

public double getMVAL_I() {
return MVAL_I;
}

public boolean getMVAL_IFLAG() {
return MVAL_IFLAG;
}

public byte getMYLFT() {
return MYLFT;
}

public byte getNBABY() {
return NBABY;
}

public byte getNC1015() {
return NC1015;
}

public byte getNC1618() {
return NC1618;
}

public byte getNC5TO9() {
return NC5TO9;
}

public byte getNCHILD() {
return NCHILD;
}

public byte getNCU16() {
return NCU16;
}

public byte getNCUND5() {
return NCUND5;
}

public byte getNDEPC() {
return NDEPC;
}

public byte getNNDEPC() {
return NNDEPC;
}

public byte getNUMJOB() {
return NUMJOB;
}

public boolean getNUMSSEX() {
return NUMSSEX;
}

public byte getNVESTV() {
return NVESTV;
}

public int getOTHMORT() {
return OTHMORT;
}

public int getVESTV() {
return VESTV;
}

public int getVESTV2() {
return VESTV2;
}

public int getVESTV2_I() {
return VESTV2_I;
}

public boolean getVESTV2_IFLAG() {
return VESTV2_IFLAG;
}

public int getVESTV3() {
return VESTV3;
}

public int getVESTV3_I() {
return VESTV3_I;
}

public boolean getVESTV3_IFLAG() {
return VESTV3_IFLAG;
}

public int getVESTV_I() {
return VESTV_I;
}

public boolean getVESTV_IFLAG() {
return VESTV_IFLAG;
}

public byte getVESVB() {
return VESVB;
}

public byte getVESVB2() {
return VESVB2;
}

public byte getVESVB3() {
return VESVB3;
}

public byte getVOTHT() {
return VOTHT;
}

public byte getVOTHT_I() {
return VOTHT_I;
}

public boolean getVOTHT_IFLAG() {
return VOTHT_IFLAG;
}

public boolean getVOTYP1_IFLAG() {
return VOTYP1_IFLAG;
}

public boolean getVOTYP2_IFLAG() {
return VOTYP2_IFLAG;
}

public boolean getVOTYP3_IFLAG() {
return VOTYP3_IFLAG;
}

public boolean getVOTYP4_IFLAG() {
return VOTYP4_IFLAG;
}

public boolean getVOTYP5() {
return VOTYP5;
}

public boolean getVOTYP5_IFLAG() {
return VOTYP5_IFLAG;
}

public byte getVTYPE() {
return VTYPE;
}

public boolean getVTYPE2_IFLAG() {
return VTYPE2_IFLAG;
}

public byte getVTYPE_I() {
return VTYPE_I;
}

}
