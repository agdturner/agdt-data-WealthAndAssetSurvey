/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.waascg.process.WaASCG_Main
 */

package uk.ac.leeds.ccg.andyt.generic.data.waas.data.hhold;
import uk.ac.leeds.ccg.andyt.generic.data.waas.data.id.WaAS_RecordID;
import uk.ac.leeds.ccg.andyt.data.Data_Record;

public abstract class WaAS_W3W4W5HRecord extends WaAS_W1W2W3W4W5HRecord {


    WaAS_W3W4W5HRecord(WaAS_RecordID i){
        super(i);
    }
    protected int BUYLGDST_SUM;

    protected short CASEW2;

    protected short CASEW3;

    protected int DVBLDDEBT_SUM;

    protected int DVBLDVAL_SUM;

    protected int DVBLTDEBT_SUM;

    protected int DVBLTVAL_SUM;

    protected double DVCACRVAL_AGGR;

    protected int DVCACTV_AGGR;

    protected int DVCAODVAL_AGGR;

    protected int DVCASVV_AGGR;

    protected double DVCAVAL_AGGR;

    protected int DVCISAV_AGGR;

    protected double DVDBRWEALTHVAL_AGGR;

    protected int DVEQLTM;

    protected int DVEQPRUN;

    protected int DVEQSRB;

    protected int DVERECGROSSANNUAL;

    protected short DVERECNETANNUAL;

    protected short DVERVRECGROSSANNUAL;

    protected short DVERVRECNETANNUAL;

    protected int DVFBONDV_AGGR;

    protected int DVFCOLLV_AGGR;

    protected int DVFEOPTV_AGGR;

    protected int DVFESHARES_AGGR;

    protected int DVFESHAV_AGGR;

    protected double DVFFASSETS_AGGR;

    protected int DVFGLTFOV_AGGR;

    protected int DVFGLTUKV_AGGR;

    protected int DVFINFLV_AGGR;

    protected int DVFINFVAL_AGGR;

    protected int DVFINFV_AGGR;

    protected int DVFINVOTV_AGGR;

    protected int DVFLFENV_AGGR;

    protected int DVFLFFSV_AGGR;

    protected int DVFLFSIV_AGGR;

    protected int DVFLFTEV_AGGR;

    protected int DVFNSVAL_AGGR;

    protected int DVFSHOSV_AGGR;

    protected int DVFSHUKV_AGGR;

    protected int DVGIEMP_AGGR;

    protected int DVGIINV_AGGR;

    protected int DVGIOTHR_AGGR;

    protected int DVGIPPEN_AGGR;

    protected int DVGISE_AGGR;

    protected int DVGRSRENTAMTANNUAL_AGGR;

    protected int DVHSEDEBT_SUM;

    protected int DVHSEVAL_SUM;

    protected int DVIISAV_AGGR;

    protected int DVINSV_AGGR;

    protected int DVISAVAL_AGGR;

    protected int DVKISAV_AGGR;

    protected int DVLOSDEBT_SUM;

    protected int DVLOSVAL_SUM;

    protected int DVLUKDEBT_SUM;

    protected int DVLUKVAL_SUM;

    protected int DVNETRENTAMTANNUAL_AGGR;

    protected int DVNIEMP_AGGR;

    protected int DVNIINV_AGGR;

    protected int DVNIOTHI_AGGR;

    protected int DVNIOTHR_AGGR;

    protected int DVNIPPEN_AGGR;

    protected double DVNISE_AGGR;

    protected int DVOIGEGANNUAL_AGGR;

    protected int DVOIGFRANNUAL_AGGR;

    protected short DVOIGGTANNUAL_AGGR;

    protected int DVOIGMAANNUAL_AGGR;

    protected int DVOIGOPANNUAL_AGGR;

    protected int DVOIGROANNUAL_AGGR;

    protected int DVOIGRRANNUAL_AGGR;

    protected int DVOINEGANNUAL_AGGR;

    protected int DVOINFRANNUAL_AGGR;

    protected short DVOINGTANNUAL_AGGR;

    protected int DVOINMAANNUAL_AGGR;

    protected int DVOINOPANNUAL_AGGR;

    protected int DVOINROANNUAL_AGGR;

    protected int DVOINRRANNUAL_AGGR;

    protected int DVOPRDEBT_SUM;

    protected int DVOPRVAL_SUM;

    protected int DVPAVCUV_AGGR;

    protected double DVPFCURVAL_AGGR;

    protected int DVPFDDV_AGGR;

    protected double DVPINPVAL_AGGR;

    protected double DVPPVAL_AGGR;

    protected int DVSAVAL_AGGR;

    protected double DVSPEN_AGGR;

    protected double DVTOTGIR;

    protected int DVTOTNIR;

    protected double DVVALDBT_AGGR;

    protected double DVVALDCOS_AGGR;

    protected byte EINT;

    protected byte EINTFIX;

    protected byte EINT_I;

    protected boolean EINT_IFLAG;

    protected boolean EMSARR;

    protected boolean EMSPAY;

    protected byte EQDRAW;

    protected byte EQDRAW_I;

    protected boolean EQDRAW_IFLAG;

    protected byte EQNEW;

    protected byte EQOLD;

    protected byte EQTYPE1;

    protected byte EQTYPE1_I;

    protected boolean EQTYPE1_IFLAG;

    protected boolean EQTYPE2;

    protected byte EQUITY_YN_I;

    protected boolean EQUITY_YN_IFLAG;

    protected int EQVALDR;

    protected byte EQVALDRB;

    protected byte EQWHENM;

    protected short EQWHENY;

    protected byte EREC;

    protected boolean ERECMBY;

    protected byte ERECMPD;

    protected boolean ERVRECBY;

    protected byte ERVRECPD;

    protected byte ERVREG1;

    protected boolean ERVREG2;

    protected int ESHARAPP;

    protected int FRREPFIX;

    protected int GCONTVLS;

    protected byte HEXT1;

    protected byte HEXT2;

    protected byte HEXT3;

    protected byte HEXT4;

    protected double HFINL_AGGR;

    protected double HFINW_EXCENDW_AGGR;

    protected byte HHOWNF;

    protected double HHPPHYS;

    protected int HOUSGDSOST_SUM;

    protected int MARRSV2;

    protected short MARRSV3;

    protected byte MCHGE;

    protected byte MCHGENUM;

    protected byte MENDW2;

    protected byte MEXTN;

    protected byte MEXTRS1;

    protected byte MEXTRS2;

    protected byte MEXTRS3;

    protected byte MNUMBN;

    protected byte MNUMBO;

    protected byte MNUMB_I;

    protected boolean MNUMB_IFLAG;

    protected byte MONTHW1;

    protected byte MONTHW2;

    protected byte MREAS14;

    protected byte MREAS24;

    protected byte MW2CHK1;

    protected byte MW2CHK2;

    protected byte MW2CHK3;

    protected byte MYIFCH2;

    protected byte MYIFCH3;

    protected byte NOUNITS;

    protected byte NUMDEPCH;

    protected byte NUMELCH;

    protected byte NUMNOELCH;

    protected int OTHMORT_SUM;

    protected double PEVAL;

    protected double PHVAL;

    protected boolean PHYSBUYLGDST_AGGR;

    protected boolean PHYSHOUSGDSOST_AGGR;

    protected boolean PHYSHOUSGDST_AGGR;

    protected double PMVAL;

    protected byte PRREPAY;

    protected byte PRREPAY_I;

    protected boolean PRREPAY_IFLAG;

    protected int PRREPFIX;

    protected int PRREPFIX_I;

    protected boolean PRREPFIX_IFLAG;

    protected double PRREPPC;

    protected double PRREPPC_I;

    protected boolean PRREPPC_IFLAG;

    protected double SHARAPP;

    protected int TOTARR_EXCMORT_AGGR;

    protected int TOTBILLARR_AGGR;

    protected int TOTCC_AGGR;

    protected int TOTDVNWFLN_AGGR;

    protected int TOTDVNWILN_AGGR;

    protected double TOTFLNS_AGGR;

    protected short TOTHPARR_AGGR;

    protected double TOTHP_AGGR;

    protected int TOTLNARR_AGGR;

    protected double TOTLNS_AGGR;

    protected double TOTLOS_AGGR;

    protected short TOTMOARR_AGGR;

    protected double TOTMO_AGGR;

    protected int TOTNLOS_AGGR;

    protected int TOTNSLBNK_AGGR;

    protected int TOTNSLC_AGGR;

    protected int TOTOSLBNK_AGGR;

    protected double TOTOSLC_AGGR;

    protected double TOTPEN_AGGR;

    protected short TOTSC_AGGR;

    protected int TOTSLBNK_AGGR;

    protected double TOTSLC_AGGR;

    protected byte VOTPN;

    protected byte VPERS_I;

    protected boolean VPERS_IFLAG;

    protected short YEARW1;

    protected short YEARW2;

    protected final void initBUYLGDST_SUM(String s) {
        if (!s.trim().isEmpty()) {
            BUYLGDST_SUM = Integer.parseInt(s);
        } else {
            BUYLGDST_SUM = Integer.MIN_VALUE;
        }
    }

    protected final void initCASEW2(String s) {
        if (!s.trim().isEmpty()) {
            CASEW2 = Short.parseShort(s);
        } else {
            CASEW2 = Short.MIN_VALUE;
        }
    }

    protected final void initCASEW3(String s) {
        if (!s.trim().isEmpty()) {
            CASEW3 = Short.parseShort(s);
        } else {
            CASEW3 = Short.MIN_VALUE;
        }
    }

    protected final void initDVBLDDEBT_SUM(String s) {
        if (!s.trim().isEmpty()) {
            DVBLDDEBT_SUM = Integer.parseInt(s);
        } else {
            DVBLDDEBT_SUM = Integer.MIN_VALUE;
        }
    }

    protected final void initDVBLDVAL_SUM(String s) {
        if (!s.trim().isEmpty()) {
            DVBLDVAL_SUM = Integer.parseInt(s);
        } else {
            DVBLDVAL_SUM = Integer.MIN_VALUE;
        }
    }

    protected final void initDVBLTDEBT_SUM(String s) {
        if (!s.trim().isEmpty()) {
            DVBLTDEBT_SUM = Integer.parseInt(s);
        } else {
            DVBLTDEBT_SUM = Integer.MIN_VALUE;
        }
    }

    protected final void initDVBLTVAL_SUM(String s) {
        if (!s.trim().isEmpty()) {
            DVBLTVAL_SUM = Integer.parseInt(s);
        } else {
            DVBLTVAL_SUM = Integer.MIN_VALUE;
        }
    }

    protected final void initDVCACRVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVCACRVAL_AGGR = Double.parseDouble(s);
        } else {
            DVCACRVAL_AGGR = Double.NaN;
        }
    }

    protected final void initDVCACTV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVCACTV_AGGR = Integer.parseInt(s);
        } else {
            DVCACTV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVCAODVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVCAODVAL_AGGR = Integer.parseInt(s);
        } else {
            DVCAODVAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVCASVV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVCASVV_AGGR = Integer.parseInt(s);
        } else {
            DVCASVV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVCAVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVCAVAL_AGGR = Double.parseDouble(s);
        } else {
            DVCAVAL_AGGR = Double.NaN;
        }
    }

    protected final void initDVCISAV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVCISAV_AGGR = Integer.parseInt(s);
        } else {
            DVCISAV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVDBRWEALTHVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVDBRWEALTHVAL_AGGR = Double.parseDouble(s);
        } else {
            DVDBRWEALTHVAL_AGGR = Double.NaN;
        }
    }

    protected final void initDVEQLTM(String s) {
        if (!s.trim().isEmpty()) {
            DVEQLTM = Integer.parseInt(s);
        } else {
            DVEQLTM = Integer.MIN_VALUE;
        }
    }

    protected final void initDVEQPRUN(String s) {
        if (!s.trim().isEmpty()) {
            DVEQPRUN = Integer.parseInt(s);
        } else {
            DVEQPRUN = Integer.MIN_VALUE;
        }
    }

    protected final void initDVEQSRB(String s) {
        if (!s.trim().isEmpty()) {
            DVEQSRB = Integer.parseInt(s);
        } else {
            DVEQSRB = Integer.MIN_VALUE;
        }
    }

    protected final void initDVERECGROSSANNUAL(String s) {
        if (!s.trim().isEmpty()) {
            DVERECGROSSANNUAL = Integer.parseInt(s);
        } else {
            DVERECGROSSANNUAL = Integer.MIN_VALUE;
        }
    }

    protected final void initDVERECNETANNUAL(String s) {
        if (!s.trim().isEmpty()) {
            DVERECNETANNUAL = Short.parseShort(s);
        } else {
            DVERECNETANNUAL = Short.MIN_VALUE;
        }
    }

    protected final void initDVERVRECGROSSANNUAL(String s) {
        if (!s.trim().isEmpty()) {
            DVERVRECGROSSANNUAL = Short.parseShort(s);
        } else {
            DVERVRECGROSSANNUAL = Short.MIN_VALUE;
        }
    }

    protected final void initDVERVRECNETANNUAL(String s) {
        if (!s.trim().isEmpty()) {
            DVERVRECNETANNUAL = Short.parseShort(s);
        } else {
            DVERVRECNETANNUAL = Short.MIN_VALUE;
        }
    }

    protected final void initDVFBONDV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFBONDV_AGGR = Integer.parseInt(s);
        } else {
            DVFBONDV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFCOLLV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFCOLLV_AGGR = Integer.parseInt(s);
        } else {
            DVFCOLLV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFEOPTV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFEOPTV_AGGR = Integer.parseInt(s);
        } else {
            DVFEOPTV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFESHARES_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFESHARES_AGGR = Integer.parseInt(s);
        } else {
            DVFESHARES_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFESHAV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFESHAV_AGGR = Integer.parseInt(s);
        } else {
            DVFESHAV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFFASSETS_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFFASSETS_AGGR = Double.parseDouble(s);
        } else {
            DVFFASSETS_AGGR = Double.NaN;
        }
    }

    protected final void initDVFGLTFOV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFGLTFOV_AGGR = Integer.parseInt(s);
        } else {
            DVFGLTFOV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFGLTUKV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFGLTUKV_AGGR = Integer.parseInt(s);
        } else {
            DVFGLTUKV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFINFLV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFINFLV_AGGR = Integer.parseInt(s);
        } else {
            DVFINFLV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFINFVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFINFVAL_AGGR = Integer.parseInt(s);
        } else {
            DVFINFVAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFINFV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFINFV_AGGR = Integer.parseInt(s);
        } else {
            DVFINFV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFINVOTV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFINVOTV_AGGR = Integer.parseInt(s);
        } else {
            DVFINVOTV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFLFENV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFLFENV_AGGR = Integer.parseInt(s);
        } else {
            DVFLFENV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFLFFSV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFLFFSV_AGGR = Integer.parseInt(s);
        } else {
            DVFLFFSV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFLFSIV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFLFSIV_AGGR = Integer.parseInt(s);
        } else {
            DVFLFSIV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFLFTEV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFLFTEV_AGGR = Integer.parseInt(s);
        } else {
            DVFLFTEV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFNSVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFNSVAL_AGGR = Integer.parseInt(s);
        } else {
            DVFNSVAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFSHOSV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFSHOSV_AGGR = Integer.parseInt(s);
        } else {
            DVFSHOSV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVFSHUKV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVFSHUKV_AGGR = Integer.parseInt(s);
        } else {
            DVFSHUKV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVGIEMP_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVGIEMP_AGGR = Integer.parseInt(s);
        } else {
            DVGIEMP_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVGIINV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVGIINV_AGGR = Integer.parseInt(s);
        } else {
            DVGIINV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVGIOTHR_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVGIOTHR_AGGR = Integer.parseInt(s);
        } else {
            DVGIOTHR_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVGIPPEN_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVGIPPEN_AGGR = Integer.parseInt(s);
        } else {
            DVGIPPEN_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVGISE_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVGISE_AGGR = Integer.parseInt(s);
        } else {
            DVGISE_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVGRSRENTAMTANNUAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVGRSRENTAMTANNUAL_AGGR = Integer.parseInt(s);
        } else {
            DVGRSRENTAMTANNUAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVHSEDEBT_SUM(String s) {
        if (!s.trim().isEmpty()) {
            DVHSEDEBT_SUM = Integer.parseInt(s);
        } else {
            DVHSEDEBT_SUM = Integer.MIN_VALUE;
        }
    }

    protected final void initDVHSEVAL_SUM(String s) {
        if (!s.trim().isEmpty()) {
            DVHSEVAL_SUM = Integer.parseInt(s);
        } else {
            DVHSEVAL_SUM = Integer.MIN_VALUE;
        }
    }

    protected final void initDVIISAV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVIISAV_AGGR = Integer.parseInt(s);
        } else {
            DVIISAV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVINSV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVINSV_AGGR = Integer.parseInt(s);
        } else {
            DVINSV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVISAVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVISAVAL_AGGR = Integer.parseInt(s);
        } else {
            DVISAVAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVKISAV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVKISAV_AGGR = Integer.parseInt(s);
        } else {
            DVKISAV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVLOSDEBT_SUM(String s) {
        if (!s.trim().isEmpty()) {
            DVLOSDEBT_SUM = Integer.parseInt(s);
        } else {
            DVLOSDEBT_SUM = Integer.MIN_VALUE;
        }
    }

    protected final void initDVLOSVAL_SUM(String s) {
        if (!s.trim().isEmpty()) {
            DVLOSVAL_SUM = Integer.parseInt(s);
        } else {
            DVLOSVAL_SUM = Integer.MIN_VALUE;
        }
    }

    protected final void initDVLUKDEBT_SUM(String s) {
        if (!s.trim().isEmpty()) {
            DVLUKDEBT_SUM = Integer.parseInt(s);
        } else {
            DVLUKDEBT_SUM = Integer.MIN_VALUE;
        }
    }

    protected final void initDVLUKVAL_SUM(String s) {
        if (!s.trim().isEmpty()) {
            DVLUKVAL_SUM = Integer.parseInt(s);
        } else {
            DVLUKVAL_SUM = Integer.MIN_VALUE;
        }
    }

    protected final void initDVNETRENTAMTANNUAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVNETRENTAMTANNUAL_AGGR = Integer.parseInt(s);
        } else {
            DVNETRENTAMTANNUAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVNIEMP_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVNIEMP_AGGR = Integer.parseInt(s);
        } else {
            DVNIEMP_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVNIINV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVNIINV_AGGR = Integer.parseInt(s);
        } else {
            DVNIINV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVNIOTHI_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVNIOTHI_AGGR = Integer.parseInt(s);
        } else {
            DVNIOTHI_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVNIOTHR_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVNIOTHR_AGGR = Integer.parseInt(s);
        } else {
            DVNIOTHR_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVNIPPEN_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVNIPPEN_AGGR = Integer.parseInt(s);
        } else {
            DVNIPPEN_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVNISE_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVNISE_AGGR = Double.parseDouble(s);
        } else {
            DVNISE_AGGR = Double.NaN;
        }
    }

    protected final void initDVOIGEGANNUAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVOIGEGANNUAL_AGGR = Integer.parseInt(s);
        } else {
            DVOIGEGANNUAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVOIGFRANNUAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVOIGFRANNUAL_AGGR = Integer.parseInt(s);
        } else {
            DVOIGFRANNUAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVOIGGTANNUAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVOIGGTANNUAL_AGGR = Short.parseShort(s);
        } else {
            DVOIGGTANNUAL_AGGR = Short.MIN_VALUE;
        }
    }

    protected final void initDVOIGMAANNUAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVOIGMAANNUAL_AGGR = Integer.parseInt(s);
        } else {
            DVOIGMAANNUAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVOIGOPANNUAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVOIGOPANNUAL_AGGR = Integer.parseInt(s);
        } else {
            DVOIGOPANNUAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVOIGROANNUAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVOIGROANNUAL_AGGR = Integer.parseInt(s);
        } else {
            DVOIGROANNUAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVOIGRRANNUAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVOIGRRANNUAL_AGGR = Integer.parseInt(s);
        } else {
            DVOIGRRANNUAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVOINEGANNUAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVOINEGANNUAL_AGGR = Integer.parseInt(s);
        } else {
            DVOINEGANNUAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVOINFRANNUAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVOINFRANNUAL_AGGR = Integer.parseInt(s);
        } else {
            DVOINFRANNUAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVOINGTANNUAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVOINGTANNUAL_AGGR = Short.parseShort(s);
        } else {
            DVOINGTANNUAL_AGGR = Short.MIN_VALUE;
        }
    }

    protected final void initDVOINMAANNUAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVOINMAANNUAL_AGGR = Integer.parseInt(s);
        } else {
            DVOINMAANNUAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVOINOPANNUAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVOINOPANNUAL_AGGR = Integer.parseInt(s);
        } else {
            DVOINOPANNUAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVOINROANNUAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVOINROANNUAL_AGGR = Integer.parseInt(s);
        } else {
            DVOINROANNUAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVOINRRANNUAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVOINRRANNUAL_AGGR = Integer.parseInt(s);
        } else {
            DVOINRRANNUAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVOPRDEBT_SUM(String s) {
        if (!s.trim().isEmpty()) {
            DVOPRDEBT_SUM = Integer.parseInt(s);
        } else {
            DVOPRDEBT_SUM = Integer.MIN_VALUE;
        }
    }

    protected final void initDVOPRVAL_SUM(String s) {
        if (!s.trim().isEmpty()) {
            DVOPRVAL_SUM = Integer.parseInt(s);
        } else {
            DVOPRVAL_SUM = Integer.MIN_VALUE;
        }
    }

    protected final void initDVPAVCUV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVPAVCUV_AGGR = Integer.parseInt(s);
        } else {
            DVPAVCUV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVPFCURVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVPFCURVAL_AGGR = Double.parseDouble(s);
        } else {
            DVPFCURVAL_AGGR = Double.NaN;
        }
    }

    protected final void initDVPFDDV_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVPFDDV_AGGR = Integer.parseInt(s);
        } else {
            DVPFDDV_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVPINPVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVPINPVAL_AGGR = Double.parseDouble(s);
        } else {
            DVPINPVAL_AGGR = Double.NaN;
        }
    }

    protected final void initDVPPVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVPPVAL_AGGR = Double.parseDouble(s);
        } else {
            DVPPVAL_AGGR = Double.NaN;
        }
    }

    protected final void initDVSAVAL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVSAVAL_AGGR = Integer.parseInt(s);
        } else {
            DVSAVAL_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVSPEN_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVSPEN_AGGR = Double.parseDouble(s);
        } else {
            DVSPEN_AGGR = Double.NaN;
        }
    }

    protected final void initDVTOTGIR(String s) {
        if (!s.trim().isEmpty()) {
            DVTOTGIR = Double.parseDouble(s);
        } else {
            DVTOTGIR = Double.NaN;
        }
    }

    protected final void initDVTOTNIR(String s) {
        if (!s.trim().isEmpty()) {
            DVTOTNIR = Integer.parseInt(s);
        } else {
            DVTOTNIR = Integer.MIN_VALUE;
        }
    }

    protected final void initDVVALDBT_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVVALDBT_AGGR = Double.parseDouble(s);
        } else {
            DVVALDBT_AGGR = Double.NaN;
        }
    }

    protected final void initDVVALDCOS_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            DVVALDCOS_AGGR = Double.parseDouble(s);
        } else {
            DVVALDCOS_AGGR = Double.NaN;
        }
    }

    protected final void initEINT(String s) {
        if (!s.trim().isEmpty()) {
            EINT = Byte.parseByte(s);
        } else {
            EINT = Byte.MIN_VALUE;
        }
    }

    protected final void initEINTFIX(String s) {
        if (!s.trim().isEmpty()) {
            EINTFIX = Byte.parseByte(s);
        } else {
            EINTFIX = Byte.MIN_VALUE;
        }
    }

    protected final void initEINT_I(String s) {
        if (!s.trim().isEmpty()) {
            EINT_I = Byte.parseByte(s);
        } else {
            EINT_I = Byte.MIN_VALUE;
        }
    }

    protected final void initEINT_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            EINT_IFLAG = false;
        }
    }

    protected final void initEMSARR(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            EMSARR = false;
        }
    }

    protected final void initEMSPAY(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            EMSPAY = false;
        }
    }

    protected final void initEQDRAW(String s) {
        if (!s.trim().isEmpty()) {
            EQDRAW = Byte.parseByte(s);
        } else {
            EQDRAW = Byte.MIN_VALUE;
        }
    }

    protected final void initEQDRAW_I(String s) {
        if (!s.trim().isEmpty()) {
            EQDRAW_I = Byte.parseByte(s);
        } else {
            EQDRAW_I = Byte.MIN_VALUE;
        }
    }

    protected final void initEQDRAW_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            EQDRAW_IFLAG = false;
        }
    }

    protected final void initEQNEW(String s) {
        if (!s.trim().isEmpty()) {
            EQNEW = Byte.parseByte(s);
        } else {
            EQNEW = Byte.MIN_VALUE;
        }
    }

    protected final void initEQOLD(String s) {
        if (!s.trim().isEmpty()) {
            EQOLD = Byte.parseByte(s);
        } else {
            EQOLD = Byte.MIN_VALUE;
        }
    }

    protected final void initEQTYPE1(String s) {
        if (!s.trim().isEmpty()) {
            EQTYPE1 = Byte.parseByte(s);
        } else {
            EQTYPE1 = Byte.MIN_VALUE;
        }
    }

    protected final void initEQTYPE1_I(String s) {
        if (!s.trim().isEmpty()) {
            EQTYPE1_I = Byte.parseByte(s);
        } else {
            EQTYPE1_I = Byte.MIN_VALUE;
        }
    }

    protected final void initEQTYPE1_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            EQTYPE1_IFLAG = false;
        }
    }

    protected final void initEQTYPE2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            EQTYPE2 = false;
        }
    }

    protected final void initEQUITY_YN_I(String s) {
        if (!s.trim().isEmpty()) {
            EQUITY_YN_I = Byte.parseByte(s);
        } else {
            EQUITY_YN_I = Byte.MIN_VALUE;
        }
    }

    protected final void initEQUITY_YN_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            EQUITY_YN_IFLAG = false;
        }
    }

    protected final void initEQVALDR(String s) {
        if (!s.trim().isEmpty()) {
            EQVALDR = Integer.parseInt(s);
        } else {
            EQVALDR = Integer.MIN_VALUE;
        }
    }

    protected final void initEQVALDRB(String s) {
        if (!s.trim().isEmpty()) {
            EQVALDRB = Byte.parseByte(s);
        } else {
            EQVALDRB = Byte.MIN_VALUE;
        }
    }

    protected final void initEQWHENM(String s) {
        if (!s.trim().isEmpty()) {
            EQWHENM = Byte.parseByte(s);
        } else {
            EQWHENM = Byte.MIN_VALUE;
        }
    }

    protected final void initEQWHENY(String s) {
        if (!s.trim().isEmpty()) {
            EQWHENY = Short.parseShort(s);
        } else {
            EQWHENY = Short.MIN_VALUE;
        }
    }

    protected final void initEREC(String s) {
        if (!s.trim().isEmpty()) {
            EREC = Byte.parseByte(s);
        } else {
            EREC = Byte.MIN_VALUE;
        }
    }

    protected final void initERECMBY(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            ERECMBY = false;
        }
    }

    protected final void initERECMPD(String s) {
        if (!s.trim().isEmpty()) {
            ERECMPD = Byte.parseByte(s);
        } else {
            ERECMPD = Byte.MIN_VALUE;
        }
    }

    protected final void initERVRECBY(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            ERVRECBY = false;
        }
    }

    protected final void initERVRECPD(String s) {
        if (!s.trim().isEmpty()) {
            ERVRECPD = Byte.parseByte(s);
        } else {
            ERVRECPD = Byte.MIN_VALUE;
        }
    }

    protected final void initERVREG1(String s) {
        if (!s.trim().isEmpty()) {
            ERVREG1 = Byte.parseByte(s);
        } else {
            ERVREG1 = Byte.MIN_VALUE;
        }
    }

    protected final void initERVREG2(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            ERVREG2 = false;
        }
    }

    protected final void initESHARAPP(String s) {
        if (!s.trim().isEmpty()) {
            ESHARAPP = Integer.parseInt(s);
        } else {
            ESHARAPP = Integer.MIN_VALUE;
        }
    }

    protected final void initFRREPFIX(String s) {
        if (!s.trim().isEmpty()) {
            FRREPFIX = Integer.parseInt(s);
        } else {
            FRREPFIX = Integer.MIN_VALUE;
        }
    }

    protected final void initGCONTVLS(String s) {
        if (!s.trim().isEmpty()) {
            GCONTVLS = Integer.parseInt(s);
        } else {
            GCONTVLS = Integer.MIN_VALUE;
        }
    }

    protected final void initHEXT1(String s) {
        if (!s.trim().isEmpty()) {
            HEXT1 = Byte.parseByte(s);
        } else {
            HEXT1 = Byte.MIN_VALUE;
        }
    }

    protected final void initHEXT2(String s) {
        if (!s.trim().isEmpty()) {
            HEXT2 = Byte.parseByte(s);
        } else {
            HEXT2 = Byte.MIN_VALUE;
        }
    }

    protected final void initHEXT3(String s) {
        if (!s.trim().isEmpty()) {
            HEXT3 = Byte.parseByte(s);
        } else {
            HEXT3 = Byte.MIN_VALUE;
        }
    }

    protected final void initHEXT4(String s) {
        if (!s.trim().isEmpty()) {
            HEXT4 = Byte.parseByte(s);
        } else {
            HEXT4 = Byte.MIN_VALUE;
        }
    }

    protected final void initHFINL_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            HFINL_AGGR = Double.parseDouble(s);
        } else {
            HFINL_AGGR = Double.NaN;
        }
    }

    protected final void initHFINW_EXCENDW_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            HFINW_EXCENDW_AGGR = Double.parseDouble(s);
        } else {
            HFINW_EXCENDW_AGGR = Double.NaN;
        }
    }

    protected final void initHHOWNF(String s) {
        if (!s.trim().isEmpty()) {
            HHOWNF = Byte.parseByte(s);
        } else {
            HHOWNF = Byte.MIN_VALUE;
        }
    }

    protected final void initHHPPHYS(String s) {
        if (!s.trim().isEmpty()) {
            HHPPHYS = Double.parseDouble(s);
        } else {
            HHPPHYS = Double.NaN;
        }
    }

    protected final void initHOUSGDSOST_SUM(String s) {
        if (!s.trim().isEmpty()) {
            HOUSGDSOST_SUM = Integer.parseInt(s);
        } else {
            HOUSGDSOST_SUM = Integer.MIN_VALUE;
        }
    }

    protected final void initMARRSV2(String s) {
        if (!s.trim().isEmpty()) {
            MARRSV2 = Integer.parseInt(s);
        } else {
            MARRSV2 = Integer.MIN_VALUE;
        }
    }

    protected final void initMARRSV3(String s) {
        if (!s.trim().isEmpty()) {
            MARRSV3 = Short.parseShort(s);
        } else {
            MARRSV3 = Short.MIN_VALUE;
        }
    }

    protected final void initMCHGE(String s) {
        if (!s.trim().isEmpty()) {
            MCHGE = Byte.parseByte(s);
        } else {
            MCHGE = Byte.MIN_VALUE;
        }
    }

    protected final void initMCHGENUM(String s) {
        if (!s.trim().isEmpty()) {
            MCHGENUM = Byte.parseByte(s);
        } else {
            MCHGENUM = Byte.MIN_VALUE;
        }
    }

    protected final void initMENDW2(String s) {
        if (!s.trim().isEmpty()) {
            MENDW2 = Byte.parseByte(s);
        } else {
            MENDW2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMEXTN(String s) {
        if (!s.trim().isEmpty()) {
            MEXTN = Byte.parseByte(s);
        } else {
            MEXTN = Byte.MIN_VALUE;
        }
    }

    protected final void initMEXTRS1(String s) {
        if (!s.trim().isEmpty()) {
            MEXTRS1 = Byte.parseByte(s);
        } else {
            MEXTRS1 = Byte.MIN_VALUE;
        }
    }

    protected final void initMEXTRS2(String s) {
        if (!s.trim().isEmpty()) {
            MEXTRS2 = Byte.parseByte(s);
        } else {
            MEXTRS2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMEXTRS3(String s) {
        if (!s.trim().isEmpty()) {
            MEXTRS3 = Byte.parseByte(s);
        } else {
            MEXTRS3 = Byte.MIN_VALUE;
        }
    }

    protected final void initMNUMBN(String s) {
        if (!s.trim().isEmpty()) {
            MNUMBN = Byte.parseByte(s);
        } else {
            MNUMBN = Byte.MIN_VALUE;
        }
    }

    protected final void initMNUMBO(String s) {
        if (!s.trim().isEmpty()) {
            MNUMBO = Byte.parseByte(s);
        } else {
            MNUMBO = Byte.MIN_VALUE;
        }
    }

    protected final void initMNUMB_I(String s) {
        if (!s.trim().isEmpty()) {
            MNUMB_I = Byte.parseByte(s);
        } else {
            MNUMB_I = Byte.MIN_VALUE;
        }
    }

    protected final void initMNUMB_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            MNUMB_IFLAG = false;
        }
    }

    protected final void initMONTHW1(String s) {
        if (!s.trim().isEmpty()) {
            MONTHW1 = Byte.parseByte(s);
        } else {
            MONTHW1 = Byte.MIN_VALUE;
        }
    }

    protected final void initMONTHW2(String s) {
        if (!s.trim().isEmpty()) {
            MONTHW2 = Byte.parseByte(s);
        } else {
            MONTHW2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMREAS14(String s) {
        if (!s.trim().isEmpty()) {
            MREAS14 = Byte.parseByte(s);
        } else {
            MREAS14 = Byte.MIN_VALUE;
        }
    }

    protected final void initMREAS24(String s) {
        if (!s.trim().isEmpty()) {
            MREAS24 = Byte.parseByte(s);
        } else {
            MREAS24 = Byte.MIN_VALUE;
        }
    }

    protected final void initMW2CHK1(String s) {
        if (!s.trim().isEmpty()) {
            MW2CHK1 = Byte.parseByte(s);
        } else {
            MW2CHK1 = Byte.MIN_VALUE;
        }
    }

    protected final void initMW2CHK2(String s) {
        if (!s.trim().isEmpty()) {
            MW2CHK2 = Byte.parseByte(s);
        } else {
            MW2CHK2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMW2CHK3(String s) {
        if (!s.trim().isEmpty()) {
            MW2CHK3 = Byte.parseByte(s);
        } else {
            MW2CHK3 = Byte.MIN_VALUE;
        }
    }

    protected final void initMYIFCH2(String s) {
        if (!s.trim().isEmpty()) {
            MYIFCH2 = Byte.parseByte(s);
        } else {
            MYIFCH2 = Byte.MIN_VALUE;
        }
    }

    protected final void initMYIFCH3(String s) {
        if (!s.trim().isEmpty()) {
            MYIFCH3 = Byte.parseByte(s);
        } else {
            MYIFCH3 = Byte.MIN_VALUE;
        }
    }

    protected final void initNOUNITS(String s) {
        if (!s.trim().isEmpty()) {
            NOUNITS = Byte.parseByte(s);
        } else {
            NOUNITS = Byte.MIN_VALUE;
        }
    }

    protected final void initNUMDEPCH(String s) {
        if (!s.trim().isEmpty()) {
            NUMDEPCH = Byte.parseByte(s);
        } else {
            NUMDEPCH = Byte.MIN_VALUE;
        }
    }

    protected final void initNUMELCH(String s) {
        if (!s.trim().isEmpty()) {
            NUMELCH = Byte.parseByte(s);
        } else {
            NUMELCH = Byte.MIN_VALUE;
        }
    }

    protected final void initNUMNOELCH(String s) {
        if (!s.trim().isEmpty()) {
            NUMNOELCH = Byte.parseByte(s);
        } else {
            NUMNOELCH = Byte.MIN_VALUE;
        }
    }

    protected final void initOTHMORT_SUM(String s) {
        if (!s.trim().isEmpty()) {
            OTHMORT_SUM = Integer.parseInt(s);
        } else {
            OTHMORT_SUM = Integer.MIN_VALUE;
        }
    }

    protected final void initPEVAL(String s) {
        if (!s.trim().isEmpty()) {
            PEVAL = Double.parseDouble(s);
        } else {
            PEVAL = Double.NaN;
        }
    }

    protected final void initPHVAL(String s) {
        if (!s.trim().isEmpty()) {
            PHVAL = Double.parseDouble(s);
        } else {
            PHVAL = Double.NaN;
        }
    }

    protected final void initPHYSBUYLGDST_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            PHYSBUYLGDST_AGGR = false;
        }
    }

    protected final void initPHYSHOUSGDSOST_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            PHYSHOUSGDSOST_AGGR = false;
        }
    }

    protected final void initPHYSHOUSGDST_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            PHYSHOUSGDST_AGGR = false;
        }
    }

    protected final void initPMVAL(String s) {
        if (!s.trim().isEmpty()) {
            PMVAL = Double.parseDouble(s);
        } else {
            PMVAL = Double.NaN;
        }
    }

    protected final void initPRREPAY(String s) {
        if (!s.trim().isEmpty()) {
            PRREPAY = Byte.parseByte(s);
        } else {
            PRREPAY = Byte.MIN_VALUE;
        }
    }

    protected final void initPRREPAY_I(String s) {
        if (!s.trim().isEmpty()) {
            PRREPAY_I = Byte.parseByte(s);
        } else {
            PRREPAY_I = Byte.MIN_VALUE;
        }
    }

    protected final void initPRREPAY_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            PRREPAY_IFLAG = false;
        }
    }

    protected final void initPRREPFIX(String s) {
        if (!s.trim().isEmpty()) {
            PRREPFIX = Integer.parseInt(s);
        } else {
            PRREPFIX = Integer.MIN_VALUE;
        }
    }

    protected final void initPRREPFIX_I(String s) {
        if (!s.trim().isEmpty()) {
            PRREPFIX_I = Integer.parseInt(s);
        } else {
            PRREPFIX_I = Integer.MIN_VALUE;
        }
    }

    protected final void initPRREPFIX_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            PRREPFIX_IFLAG = false;
        }
    }

    protected final void initPRREPPC(String s) {
        if (!s.trim().isEmpty()) {
            PRREPPC = Double.parseDouble(s);
        } else {
            PRREPPC = Double.NaN;
        }
    }

    protected final void initPRREPPC_I(String s) {
        if (!s.trim().isEmpty()) {
            PRREPPC_I = Double.parseDouble(s);
        } else {
            PRREPPC_I = Double.NaN;
        }
    }

    protected final void initPRREPPC_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            PRREPPC_IFLAG = false;
        }
    }

    protected final void initSHARAPP(String s) {
        if (!s.trim().isEmpty()) {
            SHARAPP = Double.parseDouble(s);
        } else {
            SHARAPP = Double.NaN;
        }
    }

    protected final void initTOTARR_EXCMORT_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTARR_EXCMORT_AGGR = Integer.parseInt(s);
        } else {
            TOTARR_EXCMORT_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTBILLARR_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTBILLARR_AGGR = Integer.parseInt(s);
        } else {
            TOTBILLARR_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTCC_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTCC_AGGR = Integer.parseInt(s);
        } else {
            TOTCC_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTDVNWFLN_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTDVNWFLN_AGGR = Integer.parseInt(s);
        } else {
            TOTDVNWFLN_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTDVNWILN_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTDVNWILN_AGGR = Integer.parseInt(s);
        } else {
            TOTDVNWILN_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTFLNS_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTFLNS_AGGR = Double.parseDouble(s);
        } else {
            TOTFLNS_AGGR = Double.NaN;
        }
    }

    protected final void initTOTHPARR_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTHPARR_AGGR = Short.parseShort(s);
        } else {
            TOTHPARR_AGGR = Short.MIN_VALUE;
        }
    }

    protected final void initTOTHP_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTHP_AGGR = Double.parseDouble(s);
        } else {
            TOTHP_AGGR = Double.NaN;
        }
    }

    protected final void initTOTLNARR_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTLNARR_AGGR = Integer.parseInt(s);
        } else {
            TOTLNARR_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTLNS_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTLNS_AGGR = Double.parseDouble(s);
        } else {
            TOTLNS_AGGR = Double.NaN;
        }
    }

    protected final void initTOTLOS_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTLOS_AGGR = Double.parseDouble(s);
        } else {
            TOTLOS_AGGR = Double.NaN;
        }
    }

    protected final void initTOTMOARR_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTMOARR_AGGR = Short.parseShort(s);
        } else {
            TOTMOARR_AGGR = Short.MIN_VALUE;
        }
    }

    protected final void initTOTMO_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTMO_AGGR = Double.parseDouble(s);
        } else {
            TOTMO_AGGR = Double.NaN;
        }
    }

    protected final void initTOTNLOS_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTNLOS_AGGR = Integer.parseInt(s);
        } else {
            TOTNLOS_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTNSLBNK_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTNSLBNK_AGGR = Integer.parseInt(s);
        } else {
            TOTNSLBNK_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTNSLC_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTNSLC_AGGR = Integer.parseInt(s);
        } else {
            TOTNSLC_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTOSLBNK_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTOSLBNK_AGGR = Integer.parseInt(s);
        } else {
            TOTOSLBNK_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTOSLC_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTOSLC_AGGR = Double.parseDouble(s);
        } else {
            TOTOSLC_AGGR = Double.NaN;
        }
    }

    protected final void initTOTPEN_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTPEN_AGGR = Double.parseDouble(s);
        } else {
            TOTPEN_AGGR = Double.NaN;
        }
    }

    protected final void initTOTSC_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTSC_AGGR = Short.parseShort(s);
        } else {
            TOTSC_AGGR = Short.MIN_VALUE;
        }
    }

    protected final void initTOTSLBNK_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTSLBNK_AGGR = Integer.parseInt(s);
        } else {
            TOTSLBNK_AGGR = Integer.MIN_VALUE;
        }
    }

    protected final void initTOTSLC_AGGR(String s) {
        if (!s.trim().isEmpty()) {
            TOTSLC_AGGR = Double.parseDouble(s);
        } else {
            TOTSLC_AGGR = Double.NaN;
        }
    }

    protected final void initVOTPN(String s) {
        if (!s.trim().isEmpty()) {
            VOTPN = Byte.parseByte(s);
        } else {
            VOTPN = Byte.MIN_VALUE;
        }
    }

    protected final void initVPERS_I(String s) {
        if (!s.trim().isEmpty()) {
            VPERS_I = Byte.parseByte(s);
        } else {
            VPERS_I = Byte.MIN_VALUE;
        }
    }

    protected final void initVPERS_IFLAG(String s) {
        if (!s.trim().isEmpty()) {
            byte b = Byte.parseByte(s);
            VPERS_IFLAG = false;
        }
    }

    protected final void initYEARW1(String s) {
        if (!s.trim().isEmpty()) {
            YEARW1 = Short.parseShort(s);
        } else {
            YEARW1 = Short.MIN_VALUE;
        }
    }

    protected final void initYEARW2(String s) {
        if (!s.trim().isEmpty()) {
            YEARW2 = Short.parseShort(s);
        } else {
            YEARW2 = Short.MIN_VALUE;
        }
    }

    public int getBUYLGDST_SUM() {
        return BUYLGDST_SUM;
    }

    public short getCASEW2() {
        return CASEW2;
    }

    public short getCASEW3() {
        return CASEW3;
    }

    public int getDVBLDDEBT_SUM() {
        return DVBLDDEBT_SUM;
    }

    public int getDVBLDVAL_SUM() {
        return DVBLDVAL_SUM;
    }

    public int getDVBLTDEBT_SUM() {
        return DVBLTDEBT_SUM;
    }

    public int getDVBLTVAL_SUM() {
        return DVBLTVAL_SUM;
    }

    public double getDVCACRVAL_AGGR() {
        return DVCACRVAL_AGGR;
    }

    public int getDVCACTV_AGGR() {
        return DVCACTV_AGGR;
    }

    public int getDVCAODVAL_AGGR() {
        return DVCAODVAL_AGGR;
    }

    public int getDVCASVV_AGGR() {
        return DVCASVV_AGGR;
    }

    public double getDVCAVAL_AGGR() {
        return DVCAVAL_AGGR;
    }

    public int getDVCISAV_AGGR() {
        return DVCISAV_AGGR;
    }

    public double getDVDBRWEALTHVAL_AGGR() {
        return DVDBRWEALTHVAL_AGGR;
    }

    public int getDVEQLTM() {
        return DVEQLTM;
    }

    public int getDVEQPRUN() {
        return DVEQPRUN;
    }

    public int getDVEQSRB() {
        return DVEQSRB;
    }

    public int getDVERECGROSSANNUAL() {
        return DVERECGROSSANNUAL;
    }

    public short getDVERECNETANNUAL() {
        return DVERECNETANNUAL;
    }

    public short getDVERVRECGROSSANNUAL() {
        return DVERVRECGROSSANNUAL;
    }

    public short getDVERVRECNETANNUAL() {
        return DVERVRECNETANNUAL;
    }

    public int getDVFBONDV_AGGR() {
        return DVFBONDV_AGGR;
    }

    public int getDVFCOLLV_AGGR() {
        return DVFCOLLV_AGGR;
    }

    public int getDVFEOPTV_AGGR() {
        return DVFEOPTV_AGGR;
    }

    public int getDVFESHARES_AGGR() {
        return DVFESHARES_AGGR;
    }

    public int getDVFESHAV_AGGR() {
        return DVFESHAV_AGGR;
    }

    public double getDVFFASSETS_AGGR() {
        return DVFFASSETS_AGGR;
    }

    public int getDVFGLTFOV_AGGR() {
        return DVFGLTFOV_AGGR;
    }

    public int getDVFGLTUKV_AGGR() {
        return DVFGLTUKV_AGGR;
    }

    public int getDVFINFLV_AGGR() {
        return DVFINFLV_AGGR;
    }

    public int getDVFINFVAL_AGGR() {
        return DVFINFVAL_AGGR;
    }

    public int getDVFINFV_AGGR() {
        return DVFINFV_AGGR;
    }

    public int getDVFINVOTV_AGGR() {
        return DVFINVOTV_AGGR;
    }

    public int getDVFLFENV_AGGR() {
        return DVFLFENV_AGGR;
    }

    public int getDVFLFFSV_AGGR() {
        return DVFLFFSV_AGGR;
    }

    public int getDVFLFSIV_AGGR() {
        return DVFLFSIV_AGGR;
    }

    public int getDVFLFTEV_AGGR() {
        return DVFLFTEV_AGGR;
    }

    public int getDVFNSVAL_AGGR() {
        return DVFNSVAL_AGGR;
    }

    public int getDVFSHOSV_AGGR() {
        return DVFSHOSV_AGGR;
    }

    public int getDVFSHUKV_AGGR() {
        return DVFSHUKV_AGGR;
    }

    public int getDVGIEMP_AGGR() {
        return DVGIEMP_AGGR;
    }

    public int getDVGIINV_AGGR() {
        return DVGIINV_AGGR;
    }

    public int getDVGIOTHR_AGGR() {
        return DVGIOTHR_AGGR;
    }

    public int getDVGIPPEN_AGGR() {
        return DVGIPPEN_AGGR;
    }

    public int getDVGISE_AGGR() {
        return DVGISE_AGGR;
    }

    public int getDVGRSRENTAMTANNUAL_AGGR() {
        return DVGRSRENTAMTANNUAL_AGGR;
    }

    public int getDVHSEDEBT_SUM() {
        return DVHSEDEBT_SUM;
    }

    public int getDVHSEVAL_SUM() {
        return DVHSEVAL_SUM;
    }

    public int getDVIISAV_AGGR() {
        return DVIISAV_AGGR;
    }

    public int getDVINSV_AGGR() {
        return DVINSV_AGGR;
    }

    public int getDVISAVAL_AGGR() {
        return DVISAVAL_AGGR;
    }

    public int getDVKISAV_AGGR() {
        return DVKISAV_AGGR;
    }

    public int getDVLOSDEBT_SUM() {
        return DVLOSDEBT_SUM;
    }

    public int getDVLOSVAL_SUM() {
        return DVLOSVAL_SUM;
    }

    public int getDVLUKDEBT_SUM() {
        return DVLUKDEBT_SUM;
    }

    public int getDVLUKVAL_SUM() {
        return DVLUKVAL_SUM;
    }

    public int getDVNETRENTAMTANNUAL_AGGR() {
        return DVNETRENTAMTANNUAL_AGGR;
    }

    public int getDVNIEMP_AGGR() {
        return DVNIEMP_AGGR;
    }

    public int getDVNIINV_AGGR() {
        return DVNIINV_AGGR;
    }

    public int getDVNIOTHI_AGGR() {
        return DVNIOTHI_AGGR;
    }

    public int getDVNIOTHR_AGGR() {
        return DVNIOTHR_AGGR;
    }

    public int getDVNIPPEN_AGGR() {
        return DVNIPPEN_AGGR;
    }

    public double getDVNISE_AGGR() {
        return DVNISE_AGGR;
    }

    public int getDVOIGEGANNUAL_AGGR() {
        return DVOIGEGANNUAL_AGGR;
    }

    public int getDVOIGFRANNUAL_AGGR() {
        return DVOIGFRANNUAL_AGGR;
    }

    public short getDVOIGGTANNUAL_AGGR() {
        return DVOIGGTANNUAL_AGGR;
    }

    public int getDVOIGMAANNUAL_AGGR() {
        return DVOIGMAANNUAL_AGGR;
    }

    public int getDVOIGOPANNUAL_AGGR() {
        return DVOIGOPANNUAL_AGGR;
    }

    public int getDVOIGROANNUAL_AGGR() {
        return DVOIGROANNUAL_AGGR;
    }

    public int getDVOIGRRANNUAL_AGGR() {
        return DVOIGRRANNUAL_AGGR;
    }

    public int getDVOINEGANNUAL_AGGR() {
        return DVOINEGANNUAL_AGGR;
    }

    public int getDVOINFRANNUAL_AGGR() {
        return DVOINFRANNUAL_AGGR;
    }

    public short getDVOINGTANNUAL_AGGR() {
        return DVOINGTANNUAL_AGGR;
    }

    public int getDVOINMAANNUAL_AGGR() {
        return DVOINMAANNUAL_AGGR;
    }

    public int getDVOINOPANNUAL_AGGR() {
        return DVOINOPANNUAL_AGGR;
    }

    public int getDVOINROANNUAL_AGGR() {
        return DVOINROANNUAL_AGGR;
    }

    public int getDVOINRRANNUAL_AGGR() {
        return DVOINRRANNUAL_AGGR;
    }

    public int getDVOPRDEBT_SUM() {
        return DVOPRDEBT_SUM;
    }

    public int getDVOPRVAL_SUM() {
        return DVOPRVAL_SUM;
    }

    public int getDVPAVCUV_AGGR() {
        return DVPAVCUV_AGGR;
    }

    public double getDVPFCURVAL_AGGR() {
        return DVPFCURVAL_AGGR;
    }

    public int getDVPFDDV_AGGR() {
        return DVPFDDV_AGGR;
    }

    public double getDVPINPVAL_AGGR() {
        return DVPINPVAL_AGGR;
    }

    public double getDVPPVAL_AGGR() {
        return DVPPVAL_AGGR;
    }

    public int getDVSAVAL_AGGR() {
        return DVSAVAL_AGGR;
    }

    public double getDVSPEN_AGGR() {
        return DVSPEN_AGGR;
    }

    public double getDVTOTGIR() {
        return DVTOTGIR;
    }

    public int getDVTOTNIR() {
        return DVTOTNIR;
    }

    public double getDVVALDBT_AGGR() {
        return DVVALDBT_AGGR;
    }

    public double getDVVALDCOS_AGGR() {
        return DVVALDCOS_AGGR;
    }

    public byte getEINT() {
        return EINT;
    }

    public byte getEINTFIX() {
        return EINTFIX;
    }

    public byte getEINT_I() {
        return EINT_I;
    }

    public boolean getEINT_IFLAG() {
        return EINT_IFLAG;
    }

    public boolean getEMSARR() {
        return EMSARR;
    }

    public boolean getEMSPAY() {
        return EMSPAY;
    }

    public byte getEQDRAW() {
        return EQDRAW;
    }

    public byte getEQDRAW_I() {
        return EQDRAW_I;
    }

    public boolean getEQDRAW_IFLAG() {
        return EQDRAW_IFLAG;
    }

    public byte getEQNEW() {
        return EQNEW;
    }

    public byte getEQOLD() {
        return EQOLD;
    }

    public byte getEQTYPE1() {
        return EQTYPE1;
    }

    public byte getEQTYPE1_I() {
        return EQTYPE1_I;
    }

    public boolean getEQTYPE1_IFLAG() {
        return EQTYPE1_IFLAG;
    }

    public boolean getEQTYPE2() {
        return EQTYPE2;
    }

    public byte getEQUITY_YN_I() {
        return EQUITY_YN_I;
    }

    public boolean getEQUITY_YN_IFLAG() {
        return EQUITY_YN_IFLAG;
    }

    public int getEQVALDR() {
        return EQVALDR;
    }

    public byte getEQVALDRB() {
        return EQVALDRB;
    }

    public byte getEQWHENM() {
        return EQWHENM;
    }

    public short getEQWHENY() {
        return EQWHENY;
    }

    public byte getEREC() {
        return EREC;
    }

    public boolean getERECMBY() {
        return ERECMBY;
    }

    public byte getERECMPD() {
        return ERECMPD;
    }

    public boolean getERVRECBY() {
        return ERVRECBY;
    }

    public byte getERVRECPD() {
        return ERVRECPD;
    }

    public byte getERVREG1() {
        return ERVREG1;
    }

    public boolean getERVREG2() {
        return ERVREG2;
    }

    public int getESHARAPP() {
        return ESHARAPP;
    }

    public int getFRREPFIX() {
        return FRREPFIX;
    }

    public int getGCONTVLS() {
        return GCONTVLS;
    }

    public byte getHEXT1() {
        return HEXT1;
    }

    public byte getHEXT2() {
        return HEXT2;
    }

    public byte getHEXT3() {
        return HEXT3;
    }

    public byte getHEXT4() {
        return HEXT4;
    }

    public double getHFINL_AGGR() {
        return HFINL_AGGR;
    }

    public double getHFINW_EXCENDW_AGGR() {
        return HFINW_EXCENDW_AGGR;
    }

    public byte getHHOWNF() {
        return HHOWNF;
    }

    public double getHHPPHYS() {
        return HHPPHYS;
    }

    public int getHOUSGDSOST_SUM() {
        return HOUSGDSOST_SUM;
    }

    public int getMARRSV2() {
        return MARRSV2;
    }

    public short getMARRSV3() {
        return MARRSV3;
    }

    public byte getMCHGE() {
        return MCHGE;
    }

    public byte getMCHGENUM() {
        return MCHGENUM;
    }

    public byte getMENDW2() {
        return MENDW2;
    }

    public byte getMEXTN() {
        return MEXTN;
    }

    public byte getMEXTRS1() {
        return MEXTRS1;
    }

    public byte getMEXTRS2() {
        return MEXTRS2;
    }

    public byte getMEXTRS3() {
        return MEXTRS3;
    }

    public byte getMNUMBN() {
        return MNUMBN;
    }

    public byte getMNUMBO() {
        return MNUMBO;
    }

    public byte getMNUMB_I() {
        return MNUMB_I;
    }

    public boolean getMNUMB_IFLAG() {
        return MNUMB_IFLAG;
    }

    public byte getMONTHW1() {
        return MONTHW1;
    }

    public byte getMONTHW2() {
        return MONTHW2;
    }

    public byte getMREAS14() {
        return MREAS14;
    }

    public byte getMREAS24() {
        return MREAS24;
    }

    public byte getMW2CHK1() {
        return MW2CHK1;
    }

    public byte getMW2CHK2() {
        return MW2CHK2;
    }

    public byte getMW2CHK3() {
        return MW2CHK3;
    }

    public byte getMYIFCH2() {
        return MYIFCH2;
    }

    public byte getMYIFCH3() {
        return MYIFCH3;
    }

    public byte getNOUNITS() {
        return NOUNITS;
    }

    public byte getNUMDEPCH() {
        return NUMDEPCH;
    }

    public byte getNUMELCH() {
        return NUMELCH;
    }

    public byte getNUMNOELCH() {
        return NUMNOELCH;
    }

    public int getOTHMORT_SUM() {
        return OTHMORT_SUM;
    }

    public double getPEVAL() {
        return PEVAL;
    }

    public double getPHVAL() {
        return PHVAL;
    }

    public boolean getPHYSBUYLGDST_AGGR() {
        return PHYSBUYLGDST_AGGR;
    }

    public boolean getPHYSHOUSGDSOST_AGGR() {
        return PHYSHOUSGDSOST_AGGR;
    }

    public boolean getPHYSHOUSGDST_AGGR() {
        return PHYSHOUSGDST_AGGR;
    }

    public double getPMVAL() {
        return PMVAL;
    }

    public byte getPRREPAY() {
        return PRREPAY;
    }

    public byte getPRREPAY_I() {
        return PRREPAY_I;
    }

    public boolean getPRREPAY_IFLAG() {
        return PRREPAY_IFLAG;
    }

    public int getPRREPFIX() {
        return PRREPFIX;
    }

    public int getPRREPFIX_I() {
        return PRREPFIX_I;
    }

    public boolean getPRREPFIX_IFLAG() {
        return PRREPFIX_IFLAG;
    }

    public double getPRREPPC() {
        return PRREPPC;
    }

    public double getPRREPPC_I() {
        return PRREPPC_I;
    }

    public boolean getPRREPPC_IFLAG() {
        return PRREPPC_IFLAG;
    }

    public double getSHARAPP() {
        return SHARAPP;
    }

    public int getTOTARR_EXCMORT_AGGR() {
        return TOTARR_EXCMORT_AGGR;
    }

    public int getTOTBILLARR_AGGR() {
        return TOTBILLARR_AGGR;
    }

    public int getTOTCC_AGGR() {
        return TOTCC_AGGR;
    }

    public int getTOTDVNWFLN_AGGR() {
        return TOTDVNWFLN_AGGR;
    }

    public int getTOTDVNWILN_AGGR() {
        return TOTDVNWILN_AGGR;
    }

    public double getTOTFLNS_AGGR() {
        return TOTFLNS_AGGR;
    }

    public short getTOTHPARR_AGGR() {
        return TOTHPARR_AGGR;
    }

    public double getTOTHP_AGGR() {
        return TOTHP_AGGR;
    }

    public int getTOTLNARR_AGGR() {
        return TOTLNARR_AGGR;
    }

    public double getTOTLNS_AGGR() {
        return TOTLNS_AGGR;
    }

    public double getTOTLOS_AGGR() {
        return TOTLOS_AGGR;
    }

    public short getTOTMOARR_AGGR() {
        return TOTMOARR_AGGR;
    }

    public double getTOTMO_AGGR() {
        return TOTMO_AGGR;
    }

    public int getTOTNLOS_AGGR() {
        return TOTNLOS_AGGR;
    }

    public int getTOTNSLBNK_AGGR() {
        return TOTNSLBNK_AGGR;
    }

    public int getTOTNSLC_AGGR() {
        return TOTNSLC_AGGR;
    }

    public int getTOTOSLBNK_AGGR() {
        return TOTOSLBNK_AGGR;
    }

    public double getTOTOSLC_AGGR() {
        return TOTOSLC_AGGR;
    }

    public double getTOTPEN_AGGR() {
        return TOTPEN_AGGR;
    }

    public short getTOTSC_AGGR() {
        return TOTSC_AGGR;
    }

    public int getTOTSLBNK_AGGR() {
        return TOTSLBNK_AGGR;
    }

    public double getTOTSLC_AGGR() {
        return TOTSLC_AGGR;
    }

    public byte getVOTPN() {
        return VOTPN;
    }

    public byte getVPERS_I() {
        return VPERS_I;
    }

    public boolean getVPERS_IFLAG() {
        return VPERS_IFLAG;
    }

    public short getYEARW1() {
        return YEARW1;
    }

    public short getYEARW2() {
        return YEARW2;
    }

}
